	public function registerTranslations($path, $load_all = false, $language = null) {
		$path = sanitise_filepath($path);

		// Make a note of this path just incase we need to register this language later
		if (!isset($GLOBALS['_ELGG']->language_paths)) {
			$GLOBALS['_ELGG']->language_paths = [];
		}
		$GLOBALS['_ELGG']->language_paths[$path] = true;

		_elgg_services()->logger->info("Translations loaded from: $path");

		if ($language) {
			$load_language_files = ["$language.php"];
			$load_all = false;
		} else {
			// Get the current language based on site defaults and user preference
			$current_language = $this->getCurrentLanguage();

			$load_language_files = [
				'en.php',
				"$current_language.php"
			];

			$load_language_files = array_unique($load_language_files);
		}

		$handle = opendir($path);
		if (!$handle) {
			_elgg_services()->logger->error("Could not open language path: $path");
			return false;
		}

		$return = true;
		while (false !== ($language_file = readdir($handle))) {
			// ignore bad files
			if (substr($language_file, 0, 1) == '.' || substr($language_file, -4) !== '.php') {
				continue;
			}

			if (in_array($language_file, $load_language_files) || $load_all) {
				$result = include_once($path . $language_file);
				if ($result === false) {
					$return = false;
					continue;
				} elseif (is_array($result)) {
					$this->addTranslation(basename($language_file, '.php'), $result);
				}
			}
		}

		return $return;
	}

	/**
	 * Reload all translations from all registered paths.
	 *
	 * This is only called by functions which need to know all possible translations.
	 *
	 * @todo Better on demand loading based on language_paths array
	 *
	 * @return void
	 */
||||||||	public function registerTranslations($path, $load_all = false, $language = null) {
		$path = sanitise_filepath($path);

		// Make a note of this path just in case we need to register this language later
		$this->language_paths[$path] = true;
		$this->is_initialized = true;

		_elgg_services()->logger->info("Translations loaded from: $path");

		if ($language) {
			$load_language_files = ["$language.php"];
			$load_all = false;
		} else {
			// Get the current language based on site defaults and user preference
			$current_language = $this->getCurrentLanguage();

			$load_language_files = [
				'en.php',
				"$current_language.php"
			];

			$load_language_files = array_unique($load_language_files);
		}

		$handle = opendir($path);
		if (!$handle) {
			_elgg_services()->logger->error("Could not open language path: $path");
			return false;
		}

		$return = true;
		while (false !== ($language_file = readdir($handle))) {
			// ignore bad files
			if (substr($language_file, 0, 1) == '.' || substr($language_file, -4) !== '.php') {
				continue;
			}

			if (in_array($language_file, $load_language_files) || $load_all) {
				$result = (include $path . $language_file);
				if ($result === false) {
					$return = false;
					continue;
				} elseif (is_array($result)) {
					$this->addTranslation(basename($language_file, '.php'), $result);
				}
			}
		}

		return $return;
	}

	/**
	 * Reload all translations from all registered paths.
	 *
	 * This is only called by functions which need to know all possible translations.
	 *
	 * @todo Better on demand loading based on language_paths array
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR))
                            (NULL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR))
                            (NULL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_CALL))
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_CONST)
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)))))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_UNARY_OP
                                        (SCALAR))))
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_INCLUDE_OR_EVAL
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))
                                    (AST_CONTINUE
                                        (NULL))))
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)))
                                            (AST_VAR)))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))
        (
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR))
                            (NULL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_ENCAPS_LIST
                                (AST_VAR)
                                (SCALAR))
                            (NULL))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_CALL))
                    (
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_CONST)
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)))))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (SCALAR)))
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_UNARY_OP
                                        (SCALAR))))
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_INCLUDE_OR_EVAL
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))
                                    (AST_CONTINUE
                                        (NULL))))
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)))
                                            (AST_VAR)))))))))))
    (AST_RETURN
        (AST_VAR)))