    public function validateConflicts()
    {
        $moduleNames = array_keys($this->modules);
        foreach ($moduleNames as $moduleName) {
            $currentModule = $this->modules[$moduleName];
            /** @var $currentModule Module  * */
            if (!$currentModule instanceof ConflictsWithModule) {
                continue; // don't validate modules which are not in conflict
            }
            if ($currentModule instanceof PartedModule) {
                if ($currentModule->_getConfig('part')) {
                    continue; // skip partially loaded modules
                }
            }
            $conflicts = $currentModule->_conflicts();
            if (!interface_exists($conflicts) and !class_exists($conflicts)) {
                if (!$this->hasModule($conflicts)) {
                    continue;
                }
                $conflicts = get_class($this->getModule($conflicts)); // try get module by name
            }
            foreach(get_class_methods($conflicts) as $interfaceMethod) {
                if (!isset($this->actions[$interfaceMethod])) {
                    continue;
                }
                $inspectedModule = $this->modules[$this->actions[$interfaceMethod]];
                if ($inspectedModule instanceof $currentModule) {
                    continue; // if action is from current module then ok
                }
                // if action from a conflicted interface is not in current module - throw an exception
                throw new ModuleConflictException($currentModule, $inspectedModule, $interfaceMethod);
            }
        }
    }

||||||||    public function validateConflicts()
    {
        $moduleNames = array_keys($this->modules);
        foreach ($moduleNames as $moduleName) {
            $currentModule = $this->modules[$moduleName];
            /** @var $currentModule Module  * */
            if (!$currentModule instanceof ConflictsWithModule) {
                continue; // don't validate modules which are not in conflict
            }
            if ($currentModule instanceof PartedModule) {
                if ($currentModule->_getConfig('part')) {
                    continue; // skip partially loaded modules
                }
            }
            $conflicts = $currentModule->_conflicts();
            if (!interface_exists($conflicts) and !class_exists($conflicts)) {
                if (!$this->hasModule($conflicts)) {
                    continue;
                }
                $conflicts = get_class($this->getModule($conflicts)); // try get module by name
            }
            foreach(get_class_methods($conflicts) as $interfaceMethod) {
                if (!isset($this->actions[$interfaceMethod])) {
                    continue;
                }
                $inspectedModule = $this->modules[$this->actions[$interfaceMethod]];
                if ($inspectedModule instanceof $currentModule) {
                    continue; // if action is from current module then ok
                }
                // if action from a conflicted interface is not in current module - throw an exception
                throw new ModuleConflictException($currentModule, $inspectedModule, "Conflicts with method: $interfaceMethod");
            }
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_INSTANCEOF
                            (AST_VAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))
                                (
                                    (AST_CONTINUE
                                        (NULL))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))))))))
            (AST_FOREACH
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_ISSET
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_INSTANCEOF
                                (AST_VAR)
                                (AST_VAR))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_INSTANCEOF
                            (AST_VAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))
                                (
                                    (AST_CONTINUE
                                        (NULL))))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)))))))))
            (AST_FOREACH
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_ISSET
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_INSTANCEOF
                                (AST_VAR)
                                (AST_VAR))
                            (
                                (AST_CONTINUE
                                    (NULL)))))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))))))))))