    public function evaluate($other, $description = '', $returnResult = FALSE)
    {
        try {
            $comparator = PHPUnit_Framework_Comparator::getInstance($other, $this->value);
            $comparator->assertEquals($this->value, $other, $this->delta, $this->canonicalize, $this->ignoreCase);
        }

        catch (PHPUnit_Framework_ComparisonFailure $f) {
            if ($returnResult) {
                return FALSE;
            }

            throw new PHPUnit_Framework_ExpectationFailedException(
              trim($description."\n".$f->getMessage()),
              $f
            );
        }

        return TRUE;
    }

    /**
     * Returns a string representation of the constraint.
     *
     * @return string
     */
||||||||    public function evaluate($other, $description = '', $returnResult = FALSE)
    {
        $comparatorFactory = new PHPUnit_Framework_ComparatorFactory;

        try {
            $comparator = $comparatorFactory->getComparatorFor(
              $other, $this->value
            );

            $comparator->assertEquals(
              $this->value,
              $other,
              $this->delta,
              $this->canonicalize,
              $this->ignoreCase
            );
        }

        catch (PHPUnit_Framework_ComparisonFailure $f) {
            if ($returnResult) {
                return FALSE;
            }

            throw new PHPUnit_Framework_ExpectationFailedException(
              trim($description."\n".$f->getMessage()),
              $f
            );
        }

        return TRUE;
    }

    /**
     * Returns a string representation of the constraint.
     *
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_VAR)
                            (
                                (AST_RETURN
                                    (AST_CONST)))))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))
                                (AST_VAR)))))))
        (NULL))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_VAR)
                            (
                                (AST_RETURN
                                    (AST_CONST)))))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (SCALAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))
                                (AST_VAR)))))))
        (NULL))
    (AST_RETURN
        (AST_CONST)))