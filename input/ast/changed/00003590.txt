    private function injectMethod($object, MethodInjection $methodInjection)
    {
        $methodName = $methodInjection->getMethodName();
        $classReflection = new ReflectionClass($object);
        $methodReflection = $classReflection->getMethod($methodName);

        // Check the definition and the class parameter number match
        $nbRequiredParameters = $methodReflection->getNumberOfRequiredParameters();
        $parameterInjections = $methodInjection ? $methodInjection->getParameterInjections() : array();
        if (count($parameterInjections) < $nbRequiredParameters) {
            throw new DefinitionException("{$classReflection->name}::$methodName takes "
                . "$nbRequiredParameters parameters, " . count($parameterInjections) . " defined or guessed");
        }

        // No parameters
        if (count($parameterInjections) === 0) {
            $methodReflection->invoke($object);
            return;
        }

        $parameters = $this->getMethodReflectionParameters($methodReflection);

        $args = array();
        foreach ($parameterInjections as $parameterInjection) {
            $entryName = $parameterInjection->getEntryName();

            if ($entryName === null) {
                // If the parameter is optional and wasn't specified, then we skip all next parameters
                if ($parameters[$parameterInjection->getParameterName()]->isOptional()) {
                    $args[] = $this->getParameterDefaultValue($parameters[$parameterInjection->getParameterName()], $methodReflection);
                    continue;
                }
                throw new DefinitionException("The parameter '" . $parameterInjection->getParameterName()
                    . "' of {$classReflection->name}::$methodName has no type defined or guessable");
            }

            if ($parameterInjection->isLazy()) {
                $args[] = $this->container->get($entryName, true);
            } else {
                $args[] = $this->container->get($entryName);
            }
        }

        $methodReflection->invokeArgs($object, $args);
    }

    /**
     * Inject dependencies into properties
     *
     * @param object            $object            Object to inject dependencies into
     * @param PropertyInjection $propertyInjection Property injection definition
     *
     * @throws DependencyException
     * @throws DefinitionException
     */
||||||||    private function injectMethod($object, MethodInjection $methodInjection)
    {
        $classReflection = new ReflectionClass($object);
        $methodReflection = $classReflection->getMethod($methodInjection->getMethodName());

        $args = $this->prepareMethodParameters(
            $methodInjection,
            $methodReflection,
            $classReflection->getName()
        );

        $methodReflection->invokeArgs($object, $args);
    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ARRAY)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_ENCAPS_LIST
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR)))
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR))))
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)))
                                                (AST_VAR))))
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (AST_ENCAPS_LIST
                                            (SCALAR)
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)
                                    (AST_CONST))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))