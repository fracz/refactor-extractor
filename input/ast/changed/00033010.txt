	public function preUnlink( $path ) {

		// let the trashbin handle this
		if ( \OCP\App::isEnabled('files_trashbin') ) {
		     return true;
		}

		$path = Keymanager::fixPartialFilePath( $path );

		// Disable encryption proxy to prevent recursive calls
		\OC_FileProxy::$enabled = false;

		$view = new \OC_FilesystemView( '/' );

		$userId = \OCP\USER::getUser();

		$util = new Util( $view, $userId );

		// Format path to be relative to user files dir
		$relPath = $util->stripUserFilesPath( $path );

 		list( $owner, $ownerPath ) = $util->getUidAndFilename( $relPath );

		// Delete keyfile & shareKey so it isn't orphaned
		if (
			! (
				Keymanager::deleteFileKey( $view, $owner, $ownerPath )
				&& Keymanager::delAllShareKeys( $view, $owner, $ownerPath )
			)
		) {

			\OC_Log::write( 'Encryption library', 'Keyfile or shareKey could not be deleted for file "'.$ownerPath.'"', \OC_Log::ERROR );

		}

		\OC_FileProxy::$enabled = true;

		// If we don't return true then file delete will fail; better
		// to leave orphaned keyfiles than to disallow file deletion
		return true;

	}

	/**
	 * @brief When a file is renamed, rename its keyfile also
	 * @return bool Result of rename()
	 * @note This is pre rather than post because using post didn't work
	 */
||||||||	public function preUnlink( $path ) {

		// let the trashbin handle this
		if ( \OCP\App::isEnabled('files_trashbin') ) {
		     return true;
		}

		$path = Keymanager::fixPartialFilePath( $path );

		// Disable encryption proxy to prevent recursive calls
        $proxyStatus = \OC_FileProxy::$enabled;
        \OC_FileProxy::$enabled = false;

		$view = new \OC_FilesystemView( '/' );

		$userId = \OCP\USER::getUser();

		$util = new Util( $view, $userId );

		// Format path to be relative to user files dir
		$relPath = $util->stripUserFilesPath( $path );

 		list( $owner, $ownerPath ) = $util->getUidAndFilename( $relPath );

		// Delete keyfile & shareKey so it isn't orphaned
		if (
			! (
				Keymanager::deleteFileKey( $view, $owner, $ownerPath )
				&& Keymanager::delAllShareKeys( $view, $owner, $ownerPath )
			)
		) {

			\OC_Log::write( 'Encryption library', 'Keyfile or shareKey could not be deleted for file "'.$ownerPath.'"', \OC_Log::ERROR );

		}

		\OC_FileProxy::$enabled = $proxyStatus;

		// If we don't return true then file delete will fail; better
		// to leave orphaned keyfiles than to disallow file deletion
		return true;

	}

	/**
	 * @brief When a file is renamed, rename its keyfile also
	 * @return bool Result of rename()
	 * @note This is pre rather than post because using post didn't work
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_RETURN
        (AST_CONST)))