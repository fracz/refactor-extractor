    protected function registerTransformers()
    {
        $filterInjector   = new FilterInjectorTransformer($this->options, SourceTransformingLoader::getId());
        $magicTransformer = new MagicConstantTransformer($this);
        $aspectKernel     = $this;

        $sourceTransformers = function () use ($filterInjector, $magicTransformer, $aspectKernel) {
            $transformers = array(
                $filterInjector,
                $magicTransformer,
                new WeavingTransformer(
                    $aspectKernel,
                    new TokenReflection\Broker(
                        new CleanableMemory()
                    ),
                    $aspectKernel->getContainer()->get('aspect.advice_matcher')
                )
            );
            if ($aspectKernel->hasFeature(Features::INTERCEPT_INITIALIZATIONS)) {
                $transformers[] = new ConstructorExecutionTransformer();
            }

            return $transformers;
        };

        return array(
            new CachingTransformer($this, $sourceTransformers)
        );
    }

    /**
     * Add resources for kernel
     *
     * @param AspectContainer $container
     */
||||||||    protected function registerTransformers()
    {
        $filterInjector   = new FilterInjectorTransformer($this, SourceTransformingLoader::getId());
        $magicTransformer = new MagicConstantTransformer($this);
        $aspectKernel     = $this;

        $sourceTransformers = function () use ($filterInjector, $magicTransformer, $aspectKernel) {
            $transformers = array(
                $filterInjector,
                $magicTransformer,
                new WeavingTransformer(
                    $aspectKernel,
                    new TokenReflection\Broker(
                        new CleanableMemory()
                    ),
                    $aspectKernel->getContainer()->get('aspect.advice_matcher')
                )
            );
            if ($aspectKernel->hasFeature(Features::INTERCEPT_INITIALIZATIONS)) {
                $transformers[] = new ConstructorExecutionTransformer();
            }

            return $aspectKernel->customizeTransformers($transformers);
        };

        return array(
            new CachingTransformer($this, $sourceTransformers)
        );
    }

    /**
     * An opportunity to add/remove some transformers depending on project needs
     *
     * @param array|SourceTransformer[] $defaultTransformers
     *
     * @return array|\Go\Instrument\Transformer\SourceTransformer[]
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (AST_NEW)))
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (
                                            (SCALAR)))))
                            (NULL))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (AST_NEW)))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (NULL)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_STATIC_CALL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (AST_NEW)))
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (
                                            (SCALAR)))))
                            (NULL))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (AST_NEW)))))
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_VAR)))
                (NULL)))))