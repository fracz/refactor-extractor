	protected function makeSlugUnique($slug)
	{
		$config = $this->getSluggableConfig();
		if (!$config['unique']) return $slug;

		$separator  = $config['separator'];
		$use_cache  = $config['use_cache'];
		$save_to    = $config['save_to'];

		// if using the cache, check if we have an entry already instead
		// of querying the database
		if ( $use_cache )
		{
			$increment = \Cache::tags('sluggable')->get($slug);
			if ( $increment === null )
			{
				\Cache::tags('sluggable')->put($slug, 0, $use_cache);
			}
			else
			{
				\Cache::tags('sluggable')->put($slug, ++$increment, $use_cache);
				$slug .= $separator . $increment;
			}
			return $slug;
		}

		// no cache, so we need to check directly
		// find all models where the slug is like the current one
		$list = $this->getExistingSlugs($slug);

		// if ...
		// 	a) the list is empty
		// 	b) our slug isn't in the list
		// 	c) our slug is in the list and it's for our model
		// ... we are okay
		if (
			count($list)===0 ||
			!in_array($slug, $list) ||
			( array_key_exists($this->getKey(), $list) && $list[$this->getKey()]===$slug )
		)
		{
			return $slug;
		}

		$suffix = $this->generateSuffix($slug, $list);

		return $slug . $separator . $suffix;

	}

	/**
	 * @param string $slug
	 * @param array  $list
	 *
	 * @return string
	 */
||||||||	protected function makeSlugUnique($slug) {
		$config = $this->getSluggableConfig();
		if (!$config['unique']) {
			return $slug;
		}

		$separator = $config['separator'];

		// find all models where the slug is like the current one
		$list = $this->getExistingSlugs($slug);

		// if ...
		// 	a) the list is empty
		// 	b) our slug isn't in the list
		// 	c) our slug is in the list and it's for our model
		// ... we are okay
		if (
			count($list) === 0 ||
			!in_array($slug, $list) ||
			(array_key_exists($this->getKey(), $list) && $list[$this->getKey()] === $slug)
		) {
			return $slug;
		}

		$suffix = $this->generateSuffix($slug, $list);

		return $slug . $separator . $suffix;
	}

	/**
	 * Generate a unique suffix for the given slug (and list of existing, "similar" slugs.
	 *
	 * @param string $slug
	 * @param array $list
	 *
	 * @return string
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (
                                    (AST_VAR)
                                    (AST_PRE_INC
                                        (AST_VAR))
                                    (AST_VAR)))
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR)))
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (AST_VAR))))