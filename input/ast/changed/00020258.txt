    public function get($key, $strictness = IGNORE_MISSING) {
        // Check the tracked user.
        $this->check_tracked_user();
        // 2. Parse the key.
        $parsedkey = $this->parse_key($key);
        // 3. Get it from the store.
        $result = false;
        $session = $this->get_session_data();
        if (array_key_exists($parsedkey, $session)) {
            $result = $session[$parsedkey];
            if ($result instanceof cache_ttl_wrapper) {
                if ($result->has_expired()) {
                    $this->get_store()->delete($parsedkey);
                    $result = false;
                } else {
                    $result = $result->data;
                }
            }
            if ($result instanceof cache_cached_object) {
                $result = $result->restore_object();
            }
        }
        // 4. Load if from the loader/datasource if we don't already have it.
        $setaftervalidation = false;
        if ($result === false) {
            if ($this->perfdebug) {
                cache_helper::record_cache_miss('**static session**', $this->get_definition()->get_id());
            }
            if ($this->get_loader() !== false) {
                // We must pass the original (unparsed) key to the next loader in the chain.
                // The next loader will parse the key as it sees fit. It may be parsed differently
                // depending upon the capabilities of the store associated with the loader.
                $result = $this->get_loader()->get($key);
            } else if ($this->get_datasource() !== false) {
                $result = $this->get_datasource()->load_for_cache($key);
            }
            $setaftervalidation = ($result !== false);
        } else if ($this->perfdebug) {
            cache_helper::record_cache_hit('**static session**', $this->get_definition()->get_id());
        }
        // 5. Validate strictness.
        if ($strictness === MUST_EXIST && $result === false) {
            throw new moodle_exception('Requested key did not exist in any cache stores and could not be loaded.');
        }
        // 6. Set it to the store if we got it from the loader/datasource.
        if ($setaftervalidation) {
            $this->set($key, $result);
        }
        // 7. Make sure we don't pass back anything that could be a reference.
        //    We don't want people modifying the data in the cache.
        if (!is_scalar($result)) {
            // If data is an object it will be a reference.
            // If data is an array if may contain references.
            // We want to break references so that the cache cannot be modified outside of itself.
            // Call the function to unreference it (in the best way possible).
            $result = $this->unref($result);
        }
        return $result;
    }

    /**
     * Sends a key => value pair to the cache.
     *
     * <code>
     * // This code will add four entries to the cache, one for each url.
     * $cache->set('main', 'http://moodle.org');
     * $cache->set('docs', 'http://docs.moodle.org');
     * $cache->set('tracker', 'http://tracker.moodle.org');
     * $cache->set('qa', 'http://qa.moodle.net');
     * </code>
     *
     * @param string|int $key The key for the data being requested.
     *      It can be any structure although using a scalar string or int is recommended in the interests of performance.
     *      In advanced cases an array may be useful such as in situations requiring the multi-key functionality.
     * @param mixed $data The data to set against the key.
     * @return bool True on success, false otherwise.
     */
||||||||    public function get($key, $strictness = IGNORE_MISSING) {
        // Check the tracked user.
        $this->check_tracked_user();
        // 2. Parse the key.
        $parsedkey = $this->parse_key($key);
        // 3. Get it from the store.
        $result = $this->get_store()->get($parsedkey);
        if ($result !== false) {
            if ($result instanceof cache_ttl_wrapper) {
                if ($result->has_expired()) {
                    $this->get_store()->delete($parsedkey);
                    $result = false;
                } else {
                    $result = $result->data;
                }
            }
            if ($result instanceof cache_cached_object) {
                $result = $result->restore_object();
            }
        }
        // 4. Load if from the loader/datasource if we don't already have it.
        if ($result === false) {
            if ($this->perfdebug) {
                cache_helper::record_cache_miss($this->storetype, $this->get_definition()->get_id());
            }
            if ($this->get_loader() !== false) {
                // We must pass the original (unparsed) key to the next loader in the chain.
                // The next loader will parse the key as it sees fit. It may be parsed differently
                // depending upon the capabilities of the store associated with the loader.
                $result = $this->get_loader()->get($key);
            } else if ($this->get_datasource() !== false) {
                $result = $this->get_datasource()->load_for_cache($key);
            }
            // 5. Set it to the store if we got it from the loader/datasource.
            if ($result !== false) {
                $this->set($key, $result);
            }
        } else if ($this->perfdebug) {
            cache_helper::record_cache_hit($this->storetype, $this->get_definition()->get_id());
        }
        // 5. Validate strictness.
        if ($strictness === MUST_EXIST && $result === false) {
            throw new moodle_exception('Requested key did not exist in any cache stores and could not be loaded.');
        }
        // 6. Make sure we don't pass back anything that could be a reference.
        //    We don't want people modifying the data in the cache.
        if (!is_scalar($result)) {
            // If data is an object it will be a reference.
            // If data is an array if may contain references.
            // We want to break references so that the cache cannot be modified outside of itself.
            // Call the function to unreference it (in the best way possible).
            $result = $this->unref($result);
        }
        return $result;
    }

    /**
     * Sends a key => value pair to the cache.
     *
     * <code>
     * // This code will add four entries to the cache, one for each url.
     * $cache->set('main', 'http://moodle.org');
     * $cache->set('docs', 'http://docs.moodle.org');
     * $cache->set('tracker', 'http://tracker.moodle.org');
     * $cache->set('qa', 'http://qa.moodle.net');
     * </code>
     *
     * @param string|int $key The key for the data being requested.
     *      It can be any structure although using a scalar string or int is recommended in the interests of performance.
     *      In advanced cases an array may be useful such as in situations requiring the multi-key functionality.
     * @param mixed $data The data to set against the key.
     * @return bool True on success, false otherwise.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (
                                                (AST_VAR)))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CONST))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_PROP
                                                (AST_VAR)))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_CONST))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (
                                                    (AST_VAR))))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (
                                                (AST_VAR)))
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CONST))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_PROP
                                                (AST_VAR)))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_CONST))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (
                                                    (AST_VAR))))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_VAR)))