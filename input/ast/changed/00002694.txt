	function getUserCollections($owner_guid, $site_guid = 0) {

		$owner_guid = (int) $owner_guid;
		$site_guid = (int) $site_guid;

		if (($site_guid == 0) && (isset($this->CONFIG->site_guid))) {
			$site_guid = $this->CONFIG->site_guid;
		}

		$query = "SELECT * FROM {$this->CONFIG->dbprefix}access_collections
				WHERE owner_guid = {$owner_guid}
				AND site_guid = {$site_guid}
				ORDER BY name ASC";

		$collections = _elgg_services()->db->getData($query);

		return $collections;
	}

	/**
	 * Get all of members of an access collection
	 *
	 * @param int  $collection The collection's ID
	 * @param bool $idonly     If set to true, will only return the members' GUIDs (default: false)
	 *
	 * @return \ElggUser[]|int[]|false guids or entities if successful, false if not
	 */
||||||||	function getUserCollections($owner_guid, $site_guid = 0) {
		$owner_guid = (int) $owner_guid;
		$site_guid = (int) $site_guid;

		if (($site_guid == 0) && $this->site_guid) {
			$site_guid = $this->site_guid;
		}

		$db = _elgg_services()->db;
		$prefix = $db->getTablePrefix();

		$query = "SELECT * FROM {$prefix}access_collections
				WHERE owner_guid = {$owner_guid}
				AND site_guid = {$site_guid}
				ORDER BY name ASC";

		$collections = $db->getData($query);

		return $collections;
	}

	/**
	 * Get all of members of an access collection
	 *
	 * @param int  $collection The collection's ID
	 * @param bool $idonly     If set to true, will only return the members' GUIDs (default: false)
	 *
	 * @return \ElggUser[]|int[]|false guids or entities if successful, false if not
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_ISSET
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_CALL))
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))