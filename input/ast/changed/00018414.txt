	public static function connection($connection = null)
	{
		if (is_null($connection)) $connection = Config::get('db.default');

		if ( ! array_key_exists($connection, static::$connections))
		{
			if (is_null($config = Config::get('db.connections.'.$connection)))
			{
				throw new \Exception("Database connection [$connection] is not defined.");
			}

			$connector = DB\Connector\Factory::make($config['driver']);

			static::$connections[$connection] = DB\Connection\Factory::make($connection, $config, $connector);
		}

		return static::$connections[$connection];
	}

	/**
	 * Begin a fluent query against a table.
	 *
	 * This method primarily serves as a short-cut to the $connection->table() method.
	 *
	 * <code>
	 *		// Begin a fluent query against the "users" table
	 *		$query = DB::table('users');
	 *
	 *		// Equivalent call using the connection table method.
	 *		$query = DB::connection()->table('users');
	 *
	 *		// Begin a fluent query against the "users" table for a specific connection
	 *		$query = DB::table('users', 'mysql');
	 * </code>
	 *
	 * @param  string    $table
	 * @param  string    $connection
	 * @return DB\Query
	 */
||||||||	public static function connection($connection = null)
	{
		if (is_null($connection)) $connection = Config::get('db.default');

		if ( ! array_key_exists($connection, static::$connections))
		{
			if (is_null($config = Config::get('db.connections.'.$connection)))
			{
				throw new \Exception("Database connection [$connection] is not defined.");
			}

			$connector = DB\Connector\Factory::make($config);

			static::$connections[$connection] = new DB\Connection($connection, $config, $connector);
		}

		return static::$connections[$connection];
	}

	/**
	 * Begin a fluent query against a table.
	 *
	 * This method primarily serves as a short-cut to the $connection->table() method.
	 *
	 * <code>
	 *		// Begin a fluent query against the "users" table
	 *		$query = DB::table('users');
	 *
	 *		// Equivalent call using the connection table method.
	 *		$query = DB::connection()->table('users');
	 *
	 *		// Begin a fluent query against the "users" table for a specific connection
	 *		$query = DB::table('users', 'mysql');
	 * </code>
	 *
	 * @param  string    $table
	 * @param  string    $connection
	 * @return DB\Query
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_STATIC_PROP))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_STATIC_CALL
                                        (
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR)))))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_ENCAPS_LIST
                                            (SCALAR)
                                            (AST_VAR)
                                            (SCALAR))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_STATIC_PROP))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_STATIC_CALL
                                        (
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR)))))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_ENCAPS_LIST
                                            (SCALAR)
                                            (AST_VAR)
                                            (SCALAR))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR))))