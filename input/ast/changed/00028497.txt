    public function fail($other, $description, $not = FALSE)
    {
        if (!empty($description)) {
            $description .= "\n";
        }

        $failureDescription = sprintf(
          '%sFailed asserting that %s %s.',

           $description,
           PHPUnit_Util_Type::toString($other),
           $this->toString()
        );

        if (!$not) {
            throw new PHPUnit_Framework_ExpectationFailedException(
              $failureDescription,
              PHPUnit_Framework_ComparisonFailure::diffIdentical($this->value, $other)
            );
        } else {
            throw new PHPUnit_Framework_ExpectationFailedException(
              $failureDescription
            );
        }
    }

    /**
     * Returns a string representation of the constraint.
     *
     * @return string
     * @access public
     */
||||||||    public function fail($other, $description, $not = FALSE)
    {
        $failureDescription = $this->failureDescription(
          $other,
          $description,
          $not
        );

        if (!$not) {
            throw new PHPUnit_Framework_ExpectationFailedException(
              $failureDescription,
              PHPUnit_Framework_ComparisonFailure::diffIdentical($this->value, $other)
            );
        } else {
            throw new PHPUnit_Framework_ExpectationFailedException(
              self::negate($failureDescription)
            );
        }
    }

    /**
     * Returns a string representation of the constraint.
     *
     * @return string
     * @access public
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))))))))