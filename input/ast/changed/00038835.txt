	public static function parseExcludePattern($pattern)
	{
		if (!is_string($pattern)) {
			throw new \yii\base\Exception('Exclude/include pattern must be a string.');
		}
		$result = array(
			'pattern' => $pattern,
			'flags' => 0,
			'hasWildcard' => false,
		);
		if (!isset($pattern[0]))
			return $result;

		if ($pattern[0] == '!') {
			$result['flags'] |= self::EXC_FLAG_NEGATIVE;
			$pattern = StringHelper::byteSubstr($pattern, 1, StringHelper::byteLength($pattern));
		}
		$len = StringHelper::byteLength($pattern);
		if ($len && StringHelper::byteSubstr($pattern, -1, 1) == '/') {
			$pattern = StringHelper::byteSubstr($pattern, 0, -1);
			$len--;
			$result['flags'] |= self::EXC_FLAG_MUSTBEDIR;
		}
		if (strpos($pattern, '/') === false)
			$result['flags'] |= self::EXC_FLAG_NODIR;
		$result['hasWildcard'] = self::firstWildcardInPattern($pattern);
		if ($pattern[0] == '*' && self::firstWildcardInPattern(StringHelper::byteSubstr($pattern, 1, StringHelper::byteLength($pattern))) === false)
			$result['flags'] |= self::EXC_FLAG_ENDSWITH;
		$result['pattern'] = $pattern;
		return $result;
	}

||||||||	private static function parseExcludePattern($pattern)
	{
		if (!is_string($pattern)) {
			throw new InvalidParamException('Exclude/include pattern must be a string.');
		}
		$result = array(
			'pattern' => $pattern,
			'flags' => 0,
			'firstWildcard' => false,
		);
		if (!isset($pattern[0]))
			return $result;

		if ($pattern[0] == '!') {
			$result['flags'] |= self::EXC_FLAG_NEGATIVE;
			$pattern = StringHelper::byteSubstr($pattern, 1, StringHelper::byteLength($pattern));
		}
		$len = StringHelper::byteLength($pattern);
		if ($len && StringHelper::byteSubstr($pattern, -1, 1) == '/') {
			$pattern = StringHelper::byteSubstr($pattern, 0, -1);
			$len--;
			$result['flags'] |= self::EXC_FLAG_MUSTBEDIR;
		}
		if (strpos($pattern, '/') === false)
			$result['flags'] |= self::EXC_FLAG_NODIR;
		$result['firstWildcard'] = self::firstWildcardInPattern($pattern);
		if ($pattern[0] == '*' && self::firstWildcardInPattern(StringHelper::byteSubstr($pattern, 1, StringHelper::byteLength($pattern))) === false)
			$result['flags'] |= self::EXC_FLAG_ENDSWITH;
		$result['pattern'] = $pattern;
		return $result;
	}

	/**
	 * Searches for the first wildcard character in the pattern.
	 * @param string $pattern the pattern to search in
	 * @return integer|boolean position of first wildcard character or false if not found
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_UNARY_OP
                                (SCALAR)))))
                (AST_POST_DEC
                    (AST_VAR))
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)))))))
                    (AST_CONST)))
            (
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_UNARY_OP
                                (SCALAR)))))
                (AST_POST_DEC
                    (AST_VAR))
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)))))))
                    (AST_CONST)))
            (
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))