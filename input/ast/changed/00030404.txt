    public function installPlugin()
    {
        $pluginName = Common::getRequestVar('pluginName', '', 'string');
        $nonce      = Common::getRequestVar('nonce', '', 'string');

        if (empty($pluginName)) {
            return;
        }

        if (Nonce::verifyNonce('CorePluginsAdmin.installPlugin', $nonce)) {
            // todo display error
            return;
        }

        Nonce::discardNonce('CorePluginsAdmin.installPlugin');
        $pluginInstaller = new PluginInstaller($pluginName);
        $pluginInstaller->installOrUpdatePluginFromMarketplace();
        $marketplace = new MarketplaceApiClient();

        $view         = $this->configureView('@CorePluginsAdmin/installPlugin');
        $view->plugin = $marketplace->getPluginInfo($pluginName);
        $view->nonce  = Nonce::getNonce('CorePluginsAdmin.activatePlugin');

        echo $view->render();
    }

||||||||    public function installPlugin()
    {
        $pluginName = Common::getRequestVar('pluginName', '', 'string');
        $nonce      = Common::getRequestVar('nonce', '', 'string');

        if (empty($pluginName)) {
            return;
        }

        if (!Nonce::verifyNonce('CorePluginsAdmin.installPlugin', $nonce)) {
            // todo display error
            return;
        }

        Nonce::discardNonce('CorePluginsAdmin.installPlugin');
        $pluginInstaller = new PluginInstaller($pluginName);
        $pluginInstaller->installOrUpdatePluginFromMarketplace();
        $marketplace = new MarketplaceApiClient();

        $view         = $this->configureView('@CorePluginsAdmin/installPlugin');
        $view->plugin = $marketplace->getPluginInfo($pluginName);
        $view->nonce  = Nonce::getNonce('CorePluginsAdmin.activatePlugin');

        echo $view->render();
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR))))