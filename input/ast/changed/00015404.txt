	function plgSystemLegacy(& $subject)
	{
		parent::__construct($subject);

		global $mainframe;

		// Define the 1.0 legacy mode constant
		define('_JLEGACY', '1.0');

		// Set global configuration var for legacy mode
		$config = &JFactory::getConfig();
		$config->setValue('config.legacy', 1);

		// Import library dependencies
		require_once(dirname(__FILE__).DS.'legacy'.DS.'classes.php');
		require_once(dirname(__FILE__).DS.'legacy'.DS.'functions.php');
		require_once(dirname(__FILE__).DS.'legacy'.DS.'toolbar.php');

		/**
		 * Legacy define, _ISO define not used anymore. All output is forced as utf-8.
		 * @deprecated	As of version 1.5
		 */
		define('_ISO','charset=utf-8');

		/**
		 * Legacy constant, use _JEXEC instead
		 * @deprecated	As of version 1.5
		 */
		define( '_VALID_MOS', 1 );

		/**
		 * Legacy constant, use _JEXEC instead
		 * @deprecated	As of version 1.5
		 */
		define( '_MOS_MAMBO_INCLUDED', 1 );

		/**
		 * Legacy constant, use DATE_FORMAT_LC instead
		 * @deprecated	As of version 1.5
		 */
		DEFINE('_DATE_FORMAT_LC', JText::_('DATE_FORMAT_LC1') ); //Uses PHP's strftime Command Format

		/**
		 * Legacy constant, use DATE_FORMAT_LC2 instead
		 * @deprecated	As of version 1.5
		 */
		DEFINE('_DATE_FORMAT_LC2', JText::_('DATE_FORMAT_LC2'));

		/**
		 * Legacy global, use JVersion->getLongVersion() instead
		 * @name $_VERSION
		 * @deprecated	As of version 1.5
		 */
		 $GLOBALS['_VERSION']	= new JVersion();
		 $version				= $GLOBALS['_VERSION']->getLongVersion();

		/**
		 * Legacy global, use JFactory::getDBO() instead
		 * @name $database
		 * @deprecated	As of version 1.5
		 */
		$conf =& JFactory::getConfig();
		$GLOBALS['database'] = new database($conf->getValue('config.host'), $conf->getValue('config.user'), $conf->getValue('config.password'), $conf->getValue('config.db'), $conf->getValue('config.dbprefix'));
		$GLOBALS['database']->debug($conf->getValue('config.debug'));

		/**
		 * Legacy global, use JFactory::getUser() [JUser object] instead
		 * @name $my
		 * @deprecated	As of version 1.5
		 */
		$user				=& JFactory::getUser();
		$GLOBALS['my']		= clone($user->getTable());
		$GLOBALS['my']->gid	= $user->get('aid', 0);

		//Insert configuration values into global scope (for backwards compatibility)
		$temp = new JConfig;
		foreach (get_object_vars($temp) as $k => $v) {
			$name = 'mosConfig_'.$k;
			$GLOBALS[$name] = $v;
		}

		$url = $mainframe->isAdmin() ? $mainframe->getSiteURL() : JURI::base();
		$GLOBALS['mosConfig_live_site']		= substr_replace($url, '', -1, 1);
		$GLOBALS['mosConfig_absolute_path']	= JPATH_SITE;
		/**
		 * Legacy global, use JFactory::getUser() instead
		 * @name $acl
		 * @deprecated	As of version 1.5
		 */
		$acl =& JFactory::getACL();

		// Legacy ACL's for backward compat
		$acl->addACL( 'administration', 'edit', 'users', 'super administrator', 'components', 'all' );
		$acl->addACL( 'administration', 'edit', 'users', 'administrator', 'components', 'all' );
		$acl->addACL( 'administration', 'edit', 'users', 'super administrator', 'user properties', 'block_user' );
		$acl->addACL( 'administration', 'manage', 'users', 'super administrator', 'components', 'com_users' );
		$acl->addACL( 'administration', 'manage', 'users', 'administrator', 'components', 'com_users' );
		$acl->addACL( 'administration', 'config', 'users', 'super administrator' );
		//$acl->addACL( 'administration', 'config', 'users', 'administrator' );

		$acl->addACL( 'action', 'add', 'users', 'author', 'content', 'all' );
		$acl->addACL( 'action', 'add', 'users', 'editor', 'content', 'all' );
		$acl->addACL( 'action', 'add', 'users', 'publisher', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'author', 'content', 'own' );
		$acl->addACL( 'action', 'edit', 'users', 'editor', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'publisher', 'content', 'all' );
		$acl->addACL( 'action', 'publish', 'users', 'publisher', 'content', 'all' );

		$acl->addACL( 'action', 'add', 'users', 'manager', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'manager', 'content', 'all' );
		$acl->addACL( 'action', 'publish', 'users', 'manager', 'content', 'all' );

		$acl->addACL( 'action', 'add', 'users', 'administrator', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'administrator', 'content', 'all' );
		$acl->addACL( 'action', 'publish', 'users', 'administrator', 'content', 'all' );

		$acl->addACL( 'action', 'add', 'users', 'super administrator', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'super administrator', 'content', 'all' );
		$acl->addACL( 'action', 'publish', 'users', 'super administrator', 'content', 'all' );

		$acl->addACL( 'com_syndicate', 'manage', 'users', 'super administrator' );
		$acl->addACL( 'com_syndicate', 'manage', 'users', 'administrator' );
		$acl->addACL( 'com_syndicate', 'manage', 'users', 'manager' );

		$GLOBALS['acl'] =& $acl;

		/**
		 * Legacy global
		 * @name $task
		 * @deprecated	As of version 1.5
		 */
		$GLOBALS['task'] = JRequest::getString('task');

		/**
		 * Load the site language file (the old way - to be deprecated)
		 * @deprecated	As of version 1.5
		 */
		global $mosConfig_lang;
		$mosConfig_lang = JFilterInput::clean($mosConfig_lang, 'cmd');
		$file = JPATH_SITE.DS.'language'.DS.$mosConfig_lang.'.php';
		if (file_exists( $file )) {
			require_once( $file);
		} else {
			$file = JPATH_SITE.DS.'language'.DS.'english.php';
			if (file_exists( $file )) {
				require_once( $file );
			}
		}

		/**
		 *  Legacy global
		 * 	use JApplicaiton->registerEvent and JApplication->triggerEvent for event handling
		 *  use JPlugingHelper::importPlugin to load bot code
		 *  @deprecated As of version 1.5
		 */
		$GLOBALS['_MAMBOTS'] = new mosMambotHandler();
	}

||||||||	function plgSystemLegacy(& $subject)
	{
		parent::__construct($subject);

		global $mainframe;

		// Define the 1.0 legacy mode constant
		define('_JLEGACY', '1.0');

		// Set global configuration var for legacy mode
		$config = &JFactory::getConfig();
		$config->setValue('config.legacy', 1);

		// Import library dependencies
		require_once(dirname(__FILE__).DS.'legacy'.DS.'classes.php');
		require_once(dirname(__FILE__).DS.'legacy'.DS.'functions.php');
		require_once(dirname(__FILE__).DS.'legacy'.DS.'toolbar.php');

		/**
		 * Legacy define, _ISO define not used anymore. All output is forced as utf-8.
		 * @deprecated	As of version 1.5
		 */
		define('_ISO','charset=utf-8');

		/**
		 * Legacy constant, use _JEXEC instead
		 * @deprecated	As of version 1.5
		 */
		define( '_VALID_MOS', 1 );

		/**
		 * Legacy constant, use _JEXEC instead
		 * @deprecated	As of version 1.5
		 */
		define( '_MOS_MAMBO_INCLUDED', 1 );

		/**
		 * Legacy constant, use DATE_FORMAT_LC instead
		 * @deprecated	As of version 1.5
		 */
		DEFINE('_DATE_FORMAT_LC', JText::_('DATE_FORMAT_LC1') ); //Uses PHP's strftime Command Format

		/**
		 * Legacy constant, use DATE_FORMAT_LC2 instead
		 * @deprecated	As of version 1.5
		 */
		DEFINE('_DATE_FORMAT_LC2', JText::_('DATE_FORMAT_LC2'));

		/**
		 * Legacy global, use JVersion->getLongVersion() instead
		 * @name $_VERSION
		 * @deprecated	As of version 1.5
		 */
		 $GLOBALS['_VERSION']	= new JVersion();
		 $version				= $GLOBALS['_VERSION']->getLongVersion();

		/**
		 * Legacy global, use JFactory::getDBO() instead
		 * @name $database
		 * @deprecated	As of version 1.5
		 */
		$conf =& JFactory::getConfig();
		$GLOBALS['database'] = new database($conf->getValue('config.host'), $conf->getValue('config.user'), $conf->getValue('config.password'), $conf->getValue('config.db'), $conf->getValue('config.dbprefix'));
		$GLOBALS['database']->debug($conf->getValue('config.debug'));

		/**
		 * Legacy global, use JFactory::getUser() [JUser object] instead
		 * @name $my
		 * @deprecated	As of version 1.5
		 */
		$user				=& JFactory::getUser();
		$GLOBALS['my']		= clone($user->getTable());
		$GLOBALS['my']->gid	= $user->get('aid', 0);

		/**
		 * Insert configuration values into global scope (for backwards compatibility)
		 * @deprecated	As of version 1.5
		 */

		$temp = new JConfig;
		foreach (get_object_vars($temp) as $k => $v) {
			$name = 'mosConfig_'.$k;
			$GLOBALS[$name] = $v;
		}

		$url = $mainframe->isAdmin() ? $mainframe->getSiteURL() : JURI::base();
		$GLOBALS['mosConfig_live_site']		= substr_replace($url, '', -1, 1);
		$GLOBALS['mosConfig_absolute_path']	= JPATH_SITE;

		$lang =& JFactory::getLanguage();
		$GLOBALS['mosConfig_lang']          = $lang->getBackwardLang();

		/**
		 * Legacy global, use JFactory::getUser() instead
		 * @name $acl
		 * @deprecated	As of version 1.5
		 */
		$acl =& JFactory::getACL();

		// Legacy ACL's for backward compat
		$acl->addACL( 'administration', 'edit', 'users', 'super administrator', 'components', 'all' );
		$acl->addACL( 'administration', 'edit', 'users', 'administrator', 'components', 'all' );
		$acl->addACL( 'administration', 'edit', 'users', 'super administrator', 'user properties', 'block_user' );
		$acl->addACL( 'administration', 'manage', 'users', 'super administrator', 'components', 'com_users' );
		$acl->addACL( 'administration', 'manage', 'users', 'administrator', 'components', 'com_users' );
		$acl->addACL( 'administration', 'config', 'users', 'super administrator' );
		//$acl->addACL( 'administration', 'config', 'users', 'administrator' );

		$acl->addACL( 'action', 'add', 'users', 'author', 'content', 'all' );
		$acl->addACL( 'action', 'add', 'users', 'editor', 'content', 'all' );
		$acl->addACL( 'action', 'add', 'users', 'publisher', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'author', 'content', 'own' );
		$acl->addACL( 'action', 'edit', 'users', 'editor', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'publisher', 'content', 'all' );
		$acl->addACL( 'action', 'publish', 'users', 'publisher', 'content', 'all' );

		$acl->addACL( 'action', 'add', 'users', 'manager', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'manager', 'content', 'all' );
		$acl->addACL( 'action', 'publish', 'users', 'manager', 'content', 'all' );

		$acl->addACL( 'action', 'add', 'users', 'administrator', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'administrator', 'content', 'all' );
		$acl->addACL( 'action', 'publish', 'users', 'administrator', 'content', 'all' );

		$acl->addACL( 'action', 'add', 'users', 'super administrator', 'content', 'all' );
		$acl->addACL( 'action', 'edit', 'users', 'super administrator', 'content', 'all' );
		$acl->addACL( 'action', 'publish', 'users', 'super administrator', 'content', 'all' );

		$acl->addACL( 'com_syndicate', 'manage', 'users', 'super administrator' );
		$acl->addACL( 'com_syndicate', 'manage', 'users', 'administrator' );
		$acl->addACL( 'com_syndicate', 'manage', 'users', 'manager' );

		$GLOBALS['acl'] =& $acl;

		/**
		 * Legacy global
		 * @name $task
		 * @deprecated	As of version 1.5
		 */
		$GLOBALS['task'] = JRequest::getString('task');

		/**
		 * Load the site language file (the old way - to be deprecated)
		 * @deprecated	As of version 1.5
		 */
		global $mosConfig_lang;
		$mosConfig_lang = JFilterInput::clean($mosConfig_lang, 'cmd');
		$file = JPATH_SITE.DS.'language'.DS.$mosConfig_lang.'.php';
		if (file_exists( $file )) {
			require_once( $file);
		} else {
			$file = JPATH_SITE.DS.'language'.DS.'english.php';
			if (file_exists( $file )) {
				require_once( $file );
			}
		}

		/**
		 *  Legacy global
		 * 	use JApplicaiton->registerEvent and JApplication->triggerEvent for event handling
		 *  use JPlugingHelper::importPlugin to load bot code
		 *  @deprecated As of version 1.5
		 */
		$GLOBALS['_MAMBOTS'] = new mosMambotHandler();
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_GLOBAL
        (AST_VAR))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CLONE
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_DIM
                (AST_VAR)
                (SCALAR)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_CALL
            (
                (AST_VAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_UNARY_OP
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CONST))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CONST))
                        (SCALAR))
                    (AST_CONST))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_CONST))
                                (SCALAR))
                            (AST_CONST))
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_INCLUDE_OR_EVAL
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_GLOBAL
        (AST_VAR))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (AST_CONST))
                    (SCALAR))
                (AST_CONST))
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_CALL
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CLONE
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_DIM
                (AST_VAR)
                (SCALAR)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_CALL
            (
                (AST_VAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)
                (AST_UNARY_OP
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CONST))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CONST))
                        (SCALAR))
                    (AST_CONST))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (AST_CONST))
                                (SCALAR))
                            (AST_CONST))
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_INCLUDE_OR_EVAL
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW)))