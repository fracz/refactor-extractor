    public function testDynamicResolverSitesCreated()
    {
    	self::logVisitsWithDynamicResolver(self::$tokenAuth);

    	// reload access so new sites are viewable
    	Zend_Registry::get('access')->setSuperUser(true);

    	// make sure sites aren't created twice
    	$piwikDotNet = Piwik_SitesManager_API::getInstance()->getSitesIdFromSiteUrl('http://piwik.net');
    	$this->assertEquals(1, count($piwikDotNet));

    	$anothersiteDotCom = Piwik_SitesManager_API::getInstance()->getSitesIdFromSiteUrl('http://anothersite.com');
    	$this->assertEquals(1, count($anothersiteDotCom));

    	$whateverDotCom = Piwik_SitesManager_API::getInstance()->getSitesIdFromSiteUrl('http://whatever.com');
    	$this->assertEquals(1, count($whateverDotCom));
	}

||||||||    public function testDynamicResolverSitesCreated()
    {
    	self::$fixture->logVisitsWithDynamicResolver();

    	// reload access so new sites are viewable
    	Zend_Registry::get('access')->setSuperUser(true);

    	// make sure sites aren't created twice
    	$piwikDotNet = Piwik_SitesManager_API::getInstance()->getSitesIdFromSiteUrl('http://piwik.net');
    	$this->assertEquals(1, count($piwikDotNet));

    	$anothersiteDotCom = Piwik_SitesManager_API::getInstance()->getSitesIdFromSiteUrl('http://anothersite.com');
    	$this->assertEquals(1, count($anothersiteDotCom));

    	$whateverDotCom = Piwik_SitesManager_API::getInstance()->getSitesIdFromSiteUrl('http://whatever.com');
    	$this->assertEquals(1, count($whateverDotCom));
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_STATIC_CALL
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_STATIC_PROP))
    (AST_METHOD_CALL
        (AST_STATIC_CALL
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR))))))