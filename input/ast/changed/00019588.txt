    public function __construct($amount, Currency $currency)
    {
        if (false === filter_var($amount, FILTER_VALIDATE_INT) && Number::fromString($amount)->getFractionalPart() !== '') {
            throw new \InvalidArgumentException('Amount must be an integer');
        }

        $this->amount = (string) $amount;
        $this->currency = $currency;
    }

    /**
     * Convenience factory method for a Money object.
     *
     * <code>
     * $fiveDollar = Money::USD(500);
     * </code>
     *
     * @param string $method
     * @param array  $arguments
     *
     * @return Money
     *
     * @throws \InvalidArgumentException If amount is not integer
     */
||||||||    public function __construct($amount, Currency $currency)
    {
        if (false === filter_var($amount, FILTER_VALIDATE_INT) && !Number::fromString($amount)->isInteger()) {
            throw new \InvalidArgumentException('Amount must be an integer');
        }

        $this->amount = (string) $amount;
        $this->currency = $currency;
    }

    /**
     * Convenience factory method for a Money object.
     *
     * <code>
     * $fiveDollar = Money::USD(500);
     * </code>
     *
     * @param string $method
     * @param array  $arguments
     *
     * @return Money
     *
     * @throws \InvalidArgumentException If amount is not integer
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST))))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))
                    (SCALAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CONST)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CONST))))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CAST
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))