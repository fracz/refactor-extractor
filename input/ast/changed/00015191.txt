	function editModule( &$row, &$orders2, &$lists, &$params, $option, $client )
	{
		global $mainframe;
		global $mosConfig_cachepath;

		require_once( dirname( __FILE__ ) . '/helpers/module.php' );
		$helper		= new JModuleEditHelper( $row->module, $client->id );
		$control	= $helper->getControlParams( $row->control );
		$params		= $helper->getViewParams( $row->params, $control );

		$editor 	=& $mainframe->getEditor();

		$row->titleA = '';
		if ( $row->id ) {
			$row->titleA = '<small><small>[ '. $row->title .' ]</small></small>';
		}

		mosCommonHTML::loadOverlib();
		?>
		<script language="javascript" type="text/javascript">
		function submitbutton(pressbutton) {
			if ( ( pressbutton == 'save' ) && ( document.adminForm.title.value == "" ) ) {
				alert("<?php echo JText::_( 'Module must have a title', true ); ?>");
			} else {
				<?php
				if ($row->module == '' || $row->module == 'custom') {
					echo $editor->save( 'content' );
				}
				?>
			}
			submitform(pressbutton);
		}
		<!--
		var originalOrder 	= '<?php echo $row->ordering;?>';
		var originalPos 	= '<?php echo $row->position;?>';
		var orders 			= new Array();	// array in the format [key,value,text]
		<?php	$i = 0;
		foreach ($orders2 as $k=>$items) {
			foreach ($items as $v) {
				echo "\n	orders[".$i++."] = new Array( \"$k\",\"$v->value\",\"$v->text\" );";
			}
		}
		?>
		//-->
		</script>
		<form action="index2.php" method="post" name="adminForm">


		<div class="col60">
			<fieldset class="adminform">
				<legend><?php echo JText::_( 'Details' ); ?></legend>

				<table class="admintable" cellspacing="1">
					<tr>
						<td valign="top" class="key">
							<?php echo JText::_( 'Module Type' ); ?>:
						</td>
						<td>
							<strong>
								<?php echo JText::_($row->module); ?>
							</strong>
						</td>
					</tr>
					<tr>
						<td class="key">
							<label for="title">
								<?php echo JText::_( 'Title' ); ?>:
							</label>
						</td>
						<td>
							<input class="text_area" type="text" name="title" id="title" size="35" value="<?php echo $row->title; ?>" />
						</td>
					</tr>
					<tr>
						<td width="100" class="key">
							<?php echo JText::_( 'Show title' ); ?>:
						</td>
						<td>
							<?php echo $lists['showtitle']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<?php echo JText::_( 'Published' ); ?>:
						</td>
						<td>
							<?php echo $lists['published']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<label for="position">
								<?php echo JText::_( 'Position' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['position']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top"  class="key">
							<label for="ordering">
								<?php echo JText::_( 'Module Order' ); ?>:
							</label>
						</td>
						<td>
							<script language="javascript" type="text/javascript">
							<!--
							writeDynaList( 'class="inputbox" name="ordering" id="ordering" size="1"', orders, originalPos, originalPos, originalOrder );
							//-->
							</script>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<label for="access">
								<?php echo JText::_( 'Access Level' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['access']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<?php echo JText::_( 'ID' ); ?>:
						</td>
						<td>
							<?php echo $row->id; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<?php echo JText::_( 'Description' ); ?>:
						</td>
						<td>
							<?php echo JText::_($row->description); ?>
						</td>
					</tr>
				</table>

			</fieldset>

			<?php
			// Hide params for Custom/New modules
			// Show custom.xml params for backward compat with existing custom modules
			// that are used to show rss feeds
			// extra backward compat check [$row->module == ''] can be depreciated in 1.2
			if ( !$row->module == '' || $row->module == 'custom' ) {
				// Render Control Parameters
					if ($helper->hasControlParams()) {
				?>
					<fieldset class="adminform">
						<legend>
							<?php echo JText::_( 'Control Parameters' ); ?>
						</legend>
					<?php
						echo $control->render( 'control' );
					?>
					</fieldset>
			<?php
					}
				// Render Parameter list
				?>
				<fieldset class="adminform">
					<legend><?php echo JText::_( 'Parameters' ); ?></legend>
						<table class="admintable">
						<tr>
							<td>
								<?php echo $params->render();?>
							</td>
						</tr>
						</table>
				</fieldset>
				<?php
			}
			?>

		</div>
		<div class="col40">
			<fieldset class="adminform">
				<legend><?php echo JText::_( 'Pages / Items' ); ?></legend>

				<table class="admintable">
				<tr>
					<td class="key vtop">
						<label for="selections">
							<?php echo JText::_( 'Menu Item Link(s)' ); ?>:
						</label>
					</td>
				</tr>
				<tr>
					<td>
						<?php echo $lists['selections']; ?>
					</td>
				</tr>
				</table>


			</fieldset>

		</div>
		<div class="clr"></div>

		<?php
		if ( !$row->module || $row->module == 'custom' ) {
			?>
			<fieldset class="adminform">
				<legend><?php echo JText::_( 'Custom Output' ); ?></legend>

				<?php
				// parameters : areaname, content, hidden field, width, height, rows, cols
				echo $editor->display( 'content', $row->content, '800', '400', '', '' ) ;
				echo $editor->getButtons('content');
				?>

			</fieldset>
			<?php
		}
		?>

		<input type="hidden" name="option" value="<?php echo $option; ?>" />
		<input type="hidden" name="id" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="cid[]" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="original" value="<?php echo $row->ordering; ?>" />
		<input type="hidden" name="module" value="<?php echo $row->module; ?>" />
		<input type="hidden" name="task" value="" />
		<input type="hidden" name="client" value="<?php echo $client->id ?>" />
		</form>
		<?php
	}

||||||||	function editModule( &$row, &$orders2, &$lists, &$params, $option, $client )
	{
		global $mainframe;
		//global $mosConfig_cachepath;		@todo; not anymore in use

		require_once( dirname( __FILE__ ) . '/helpers/module.php' );
		$helper		= new JModuleEditHelper( $row->module, $client->id );
		$control	= $helper->getControlParams( $row->control );
		$params		= $helper->getViewParams( $row->params, $control );

		$editor 	=& $mainframe->getEditor();

		$row->titleA = '';
		if ( $row->id ) {
			$row->titleA = '<small><small>[ '. $row->title .' ]</small></small>';
		}

		mosCommonHTML::loadOverlib();
		?>
		<script language="javascript" type="text/javascript">
		function submitbutton(pressbutton) {
			if ( ( pressbutton == 'save' ) && ( document.adminForm.title.value == "" ) ) {
				alert("<?php echo JText::_( 'Module must have a title', true ); ?>");
			} else {
				<?php
				if ($row->module == '' || $row->module == 'custom') {
					echo $editor->save( 'content' );
				}
				?>
			}
			submitform(pressbutton);
		}
		<!--
		var originalOrder 	= '<?php echo $row->ordering;?>';
		var originalPos 	= '<?php echo $row->position;?>';
		var orders 			= new Array();	// array in the format [key,value,text]
		<?php	$i = 0;
		foreach ($orders2 as $k=>$items) {
			foreach ($items as $v) {
				echo "\n	orders[".$i++."] = new Array( \"$k\",\"$v->value\",\"$v->text\" );";
			}
		}
		?>
		//-->
		</script>
		<form action="index2.php" method="post" name="adminForm">


		<div class="col60">
			<fieldset class="adminform">
				<legend><?php echo JText::_( 'Details' ); ?></legend>

				<table class="admintable" cellspacing="1">
					<tr>
						<td valign="top" class="key">
							<?php echo JText::_( 'Module Type' ); ?>:
						</td>
						<td>
							<strong>
								<?php echo JText::_($row->module); ?>
							</strong>
						</td>
					</tr>
					<tr>
						<td class="key">
							<label for="title">
								<?php echo JText::_( 'Title' ); ?>:
							</label>
						</td>
						<td>
							<input class="text_area" type="text" name="title" id="title" size="35" value="<?php echo $row->title; ?>" />
						</td>
					</tr>
					<tr>
						<td width="100" class="key">
							<?php echo JText::_( 'Show title' ); ?>:
						</td>
						<td>
							<?php echo $lists['showtitle']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<?php echo JText::_( 'Published' ); ?>:
						</td>
						<td>
							<?php echo $lists['published']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<label for="position">
								<?php echo JText::_( 'Position' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['position']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top"  class="key">
							<label for="ordering">
								<?php echo JText::_( 'Module Order' ); ?>:
							</label>
						</td>
						<td>
							<script language="javascript" type="text/javascript">
							<!--
							writeDynaList( 'class="inputbox" name="ordering" id="ordering" size="1"', orders, originalPos, originalPos, originalOrder );
							//-->
							</script>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<label for="access">
								<?php echo JText::_( 'Access Level' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['access']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<?php echo JText::_( 'ID' ); ?>:
						</td>
						<td>
							<?php echo $row->id; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" class="key">
							<?php echo JText::_( 'Description' ); ?>:
						</td>
						<td>
							<?php echo JText::_($row->description); ?>
						</td>
					</tr>
				</table>

			</fieldset>

			<?php
			// Hide params for Custom/New modules
			// Show custom.xml params for backward compat with existing custom modules
			// that are used to show rss feeds
			// extra backward compat check [$row->module == ''] can be depreciated in 1.2
			if ( !$row->module == '' || $row->module == 'custom' ) {
				// Render Control Parameters
					if ($helper->hasControlParams()) {
				?>
					<fieldset class="adminform">
						<legend>
							<?php echo JText::_( 'Control Parameters' ); ?>
						</legend>
					<?php
						echo $control->render( 'control' );
					?>
					</fieldset>
			<?php
					}
				// Render Parameter list
				?>
				<fieldset class="adminform">
					<legend><?php echo JText::_( 'Parameters' ); ?></legend>
						<table class="admintable">
						<tr>
							<td>
								<?php echo $params->render();?>
							</td>
						</tr>
						</table>
				</fieldset>
				<?php
			}
			?>

		</div>
		<div class="col40">
			<fieldset class="adminform">
				<legend><?php echo JText::_( 'Pages / Items' ); ?></legend>

				<table class="admintable">
				<tr>
					<td class="key vtop">
						<label for="selections">
							<?php echo JText::_( 'Menu Item Link(s)' ); ?>:
						</label>
					</td>
				</tr>
				<tr>
					<td>
						<?php echo $lists['selections']; ?>
					</td>
				</tr>
				</table>


			</fieldset>

		</div>
		<div class="clr"></div>

		<?php
		if ( !$row->module || $row->module == 'custom' ) {
			?>
			<fieldset class="adminform">
				<legend><?php echo JText::_( 'Custom Output' ); ?></legend>

				<?php
				// parameters : areaname, content, hidden field, width, height, rows, cols
				echo $editor->display( 'content', $row->content, '800', '400', '', '' ) ;
				echo $editor->getButtons('content');
				?>

			</fieldset>
			<?php
		}
		?>

		<input type="hidden" name="option" value="<?php echo $option; ?>" />
		<input type="hidden" name="id" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="cid[]" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="original" value="<?php echo $row->ordering; ?>" />
		<input type="hidden" name="module" value="<?php echo $row->module; ?>" />
		<input type="hidden" name="task" value="" />
		<input type="hidden" name="client" value="<?php echo $client->id ?>" />
		</form>
		<?php
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_MAGIC_CONST)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_STATIC_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_POST_INC
                                    (AST_VAR)))
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_ECHO
                                (SCALAR))
                            (AST_ECHO
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR))))
                            (AST_ECHO
                                (SCALAR))
                            (AST_ECHO
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))
                            (AST_ECHO
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR))))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_INCLUDE_OR_EVAL
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_MAGIC_CONST)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_STATIC_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_POST_INC
                                    (AST_VAR)))
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR)))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (AST_ECHO
                                (SCALAR))
                            (AST_ECHO
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR))))
                            (AST_ECHO
                                (SCALAR))
                            (AST_ECHO
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR))))
                            (AST_ECHO
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR))))
                (AST_ECHO
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR)))