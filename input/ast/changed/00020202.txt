    function internal_get_tracked_users($sortfirstname, $groupid=0) {
        global $CFG, $DB;

        if (!empty($CFG->progresstrackedroles)) {
            $roles = explode(', ', $CFG->progresstrackedroles);
        } else {
            // This causes it to default to everyone (if there is no student role)
            $roles = array();
        }
        $users = get_role_users($roles, get_context_instance(CONTEXT_COURSE, $this->course->id), true,
            'u.id, u.firstname, u.lastname, u.idnumber',
            $sortfirstname ? 'u.firstname ASC' : 'u.lastname ASC', true, $groupid);
        $users = $users ? $users : array(); // In case it returns false
        return $users;
    }

    /**
     * Obtains progress information across a course for all users on that course, or
     * for all users in a specific group. Intended for use when displaying progress.
     *
     * This includes only users who, in course context, have one of the roles for
     * which progress is tracked (the progresstrackedroles admin option).
     *
     * Users are included (in the first array) even if they do not have
     * completion progress for any course-module.
     *
     * @global object
     * @global object
     * @param bool $sortfirstname If true, sort by first name, otherwise sort by
     *   last name
     * @param int $groupid Group ID or 0 (default)/false for all groups
     * @param int $pagesize Number of users to actually return (0 = unlimited)
     * @param int $start User to start at if paging (0 = first set)
     * @return Object with ->total and ->start (same as $start) and ->users;
     *   an array of user objects (like mdl_user id, firstname, lastname)
     *   containing an additional ->progress array of coursemoduleid => completionstate
     */
||||||||    function internal_get_tracked_users($sortfirstname = false, $groupid = 0) {
        global $CFG, $DB;

        if (!empty($CFG->progresstrackedroles)) {
            $roles = explode(', ', $CFG->progresstrackedroles);
        } else {
            // This causes it to default to everyone (if there is no student role)
            $roles = array();
        }
        $users = get_role_users($roles, get_context_instance(CONTEXT_COURSE, $this->course->id), true,
            'u.id, u.firstname, u.lastname, u.idnumber',
            $sortfirstname ? 'u.firstname ASC' : 'u.lastname ASC', true, $groupid);
        $users = $users ? $users : array(); // In case it returns false
        return $users;
    }

    /**
     * Obtains progress information across a course for all users on that course, or
     * for all users in a specific group. Intended for use when displaying progress.
     *
     * This includes only users who, in course context, have one of the roles for
     * which progress is tracked (the progresstrackedroles admin option).
     *
     * Users are included (in the first array) even if they do not have
     * completion progress for any course-module.
     *
     * @global object
     * @global object
     * @param bool $sortfirstname If true, sort by first name, otherwise sort by
     *   last name
     * @param int $groupid Group ID or 0 (default)/false for all groups
     * @param int $pagesize Number of users to actually return (0 = unlimited)
     * @param int $start User to start at if paging (0 = first set)
     * @return Object with ->total and ->start (same as $start) and ->users;
     *   an array of user objects (like mdl_user id, firstname, lastname)
     *   containing an additional ->progress array of coursemoduleid => completionstate
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_CONST)
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))))
                (AST_CONST)
                (SCALAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR))
                (AST_CONST)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_VAR)
            (AST_ARRAY)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_CONST)
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))))
                (AST_CONST)
                (SCALAR)
                (AST_CONDITIONAL
                    (AST_VAR)
                    (SCALAR)
                    (SCALAR))
                (AST_CONST)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_VAR)
            (AST_ARRAY)))
    (AST_RETURN
        (AST_VAR)))