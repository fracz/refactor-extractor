	final function __construct() {

		// a little magic to find the current instantiated class's folder
		$currClass = new ReflectionClass(get_class($this));
		$currClassFolder = dirname($currClass->getFileName());

		$defaultLangFileStr = Core::getDefaultLanguageFile();
		$currentLangFileStr = Core::$language->getCurrentLanguageFile();

		$currentLangFile = $currClassFolder . "/lang/" . $currentLangFileStr . ".php";
		$defaultLangFile = $currClassFolder . "/lang/" . $defaultLangFileStr . ".php";

		if (file_exists($currentLangFile)) {
			require($currentLangFile);
		} else if (file_exists($defaultLangFile)) {
			require($defaultLangFile);
		}

		if (isset($L)) {
			$this->L = $L;
		}
	}


	// TODO should return in current language...
||||||||	public function __construct($runtimeContext) {

		// a little magic to find the current instantiated class's folder
		$currClass = new ReflectionClass(get_class($this));
		$currClassFolder = dirname($currClass->getFileName());

		$defaultLangFileStr = Core::getDefaultLanguageFile();
		$currentLangFileStr = Core::$language->getCurrentLanguageFile();

		$currentLangFile = $currClassFolder . "/lang/" . $currentLangFileStr . ".php";
		$defaultLangFile = $currClassFolder . "/lang/" . $defaultLangFileStr . ".php";

		if (file_exists($currentLangFile)) {
			require($currentLangFile);
		} else if (file_exists($defaultLangFile)) {
			require($defaultLangFile);
		}

		if (isset($L)) {
			$this->L = $L;
		}
	}


	/**
	 * This is called once during the initial installation of the script, or when the installation is reset (which is
	 * effectively a fresh install). It is called AFTER the Core tables are installed, and you can rely
	 * on Core::$db having been initialized and the database connection having been set up.
	 *
	 * @return array [0] success / error
	 * 				 [1] the error message, if there was a problem
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_INCLUDE_OR_EVAL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_INCLUDE_OR_EVAL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))))))