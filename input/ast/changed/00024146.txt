    public static function getServiceLocator()
    {
        if (self::$locator === NULL) {
            $type = self::$defaultServices['Nette::IServiceLocator'];

            /**/// fix for namespaced classes/interfaces in PHP < 5.3
            if ($a = strrpos($type, ':')) $type = substr($type, $a + 1);/**/

            require_once dirname(__FILE__) . '/ServiceLocator.php';

            self::$locator = new $type;

            foreach (self::$defaultServices as $type => $service) {
                self::$locator->addService($service/*, $type*/);
            }
        }

        return self::$locator;
    }



    /**
     * Gets the service.
     * @param  string
     * @return object
     */
||||||||    public static function getServiceLocator()
    {
        if (self::$locator === NULL) {
            self::$locator = new self::$defaultServices['Nette::IServiceLocator'];
            foreach (self::$defaultServices as $name => $service) {
                self::$locator->addService($service, $name);
            }
        }
        return self::$locator;
    }



    /**
     * Gets the service.
     * @param  string
     * @return object
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))))))))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_NEW
                        (AST_VAR)))
                (AST_FOREACH
                    (AST_STATIC_PROP)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_PROP)
                            (
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_STATIC_PROP)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_NEW
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (SCALAR))))
                (AST_FOREACH
                    (AST_STATIC_PROP)
                    (AST_VAR)
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_PROP)
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_STATIC_PROP)))