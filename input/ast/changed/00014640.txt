	function edit( &$row, &$lists, $redirect, $menus ) {
		if ($row->image == '') {
			$row->image = 'blank.png';
		}

		if ( $redirect == 'content' ) {
			$component = 'Content';
		} else {
			$component = ucfirst( substr( $redirect, 4 ) );
			if ( $redirect == 'com_contact_details' ) {
				$component = 'Contact';
			}
		}
		mosMakeHtmlSafe( $row, ENT_QUOTES, 'description' );
		?>
		<script language="javascript" type="text/javascript">
		function submitbutton(pressbutton, section) {
			var form = document.adminForm;
			if (pressbutton == 'cancel') {
				submitform( pressbutton );
				return;
			}

			if ( pressbutton == 'menulink' ) {
				if ( form.menuselect.value == "" ) {
					alert( "<?php echo JText::_( 'Please select a Menu', true ); ?>" );
					return;
				} else if ( form.link_type.value == "" ) {
					alert( "<?php echo JText::_( 'Please select a menu type', true ); ?>" );
					return;
				} else if ( form.link_name.value == "" ) {
					alert( "<?php echo JText::_( 'Please enter a Name for this menu item', true ); ?>" );
					return;
				}
			}

			if ( form.name.value == "" ) {
				alert("<?php echo JText::_( 'Category must have a name', true ); ?>");
			} else {
				<?php
				$editor =& JEditor::getInstance();
				echo $editor->getEditorContents( 'editor1', 'description' ) ; ?>
				submitform(pressbutton);
			}
		}
		</script>

		<form action="index2.php" method="post" name="adminForm">

		<div id="editcell">
			<table width="100%">
			<tr>
				<td valign="top" width="60%">
					<table class="adminform">
					<tr>
						<th colspan="3">
							<?php echo JText::_( 'Category Details' ); ?>
						</th>
					</tr>
					<tr>
						<td>
							<label for="title">
								<?php echo JText::_( 'Category Title' ); ?>:
							</label>
						</td>
						<td colspan="2">
							<input class="text_area" type="text" name="title" id="title" value="<?php echo $row->title; ?>" size="50" maxlength="50" title="<?php echo JText::_( 'A short name to appear in menus' ); ?>" />
						</td>
					</tr>
					<tr>
						<td>
							<label for="name">
								<?php echo JText::_( 'Category Name' ); ?>:
							</label>
						</td>
						<td colspan="2">
							<input class="text_area" type="text" name="name" id="name" value="<?php echo $row->name; ?>" size="50" maxlength="255" title="<?php echo JText::_( 'A long name to be displayed in headings' ); ?>" />
						</td>
					</tr>
					<tr>
						<td width="120">
							<?php echo JText::_( 'Published' ); ?>:
						</td>
						<td>
							<?php echo $lists['published']; ?>
						</td>
					</tr>
					<tr>
						<td>
							<label for="section">
								<?php echo JText::_( 'Section' ); ?>:
							</label>
						</td>
						<td colspan="2">
							<?php echo $lists['section']; ?>
						</td>
					</tr>
					<tr>
						<td>
							<label for="image">
								<?php echo JText::_( 'Image' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['image']; ?>
						</td>
						<td rowspan="4" width="50%">
							<script language="javascript" type="text/javascript">
							if (document.forms[0].image.options.value!=''){
							  jsimg='../images/stories/' + getSelectedValue( 'adminForm', 'image' );
							} else {
							  jsimg='../images/M_images/blank.png';
							}
							document.write('<img src=' + jsimg + ' name="imagelib" width="80" height="80" border="2" alt="<?php echo JText::_( 'Preview' ); ?>" />');
							</script>
						</td>
					</tr>
					<tr>
						<td>
							<label for="image_position">
								<?php echo JText::_( 'Image Position' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['image_position']; ?>
						</td>
					</tr>
					<tr>
						<td>
							<label for="ordering">
								<?php echo JText::_( 'Ordering' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['ordering']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top">
							<label for="access">
								<?php echo JText::_( 'Access Level' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['access']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" colspan="3">
							<label for="description">
								<?php echo JText::_( 'Description' ); ?>:
							</label>
							<?php
							// parameters : areaname, content, hidden field, width, height, rows, cols
							$editor =& JEditor::getInstance();
							echo $editor->getEditor( 'editor1',  $row->description , 'description', '100%;', '300', '60', '20' ) ;
							?>
						</td>
					</tr>
					</table>
				</td>
				<td valign="top" width="40%">
					<?php
					if ( $row->id > 0 ) {
						?>
						<table class="adminform">
						<tr>
							<th colspan="2">
								<?php echo JText::_( 'Link to Menu' ); ?>
							</th>
						</tr>
						<tr>
							<td colspan="2">
								<?php echo JText::_( 'Will Create New Menu Item in Menu Selected' ); ?>
							<br /><br />
							</td>
						</tr>
						<tr>
							<td valign="top" width="100">
								<label for="menuselect">
									<?php echo JText::_( 'Select a Menu' ); ?>
								</label>
							</td>
							<td>
								<?php echo $lists['menuselect']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" width="100">
								<label for="link_type">
									<?php echo JText::_( 'Select Menu Type' ); ?>
								</label>
							</td>
							<td>
								<?php echo $lists['link_type']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" width="100">
								<label for="link_name">
									<?php echo JText::_( 'Menu Item Name' ); ?>
								</label>
							</td>
							<td>
								<input type="text" name="link_name" id="link_name" class="inputbox" value="" size="25" />
							</td>
						</tr>
						<tr>
							<td>
							</td>
							<td>
								<input name="menu_link" type="button" class="button" value="<?php echo JText::_( 'Link to Menu' ); ?>" onclick="submitbutton('menulink');" />
							</td>
						</tr>
						</table>

						<br />

						<?php
						if ( $menus != NULL ) {
							?>
							<table class="adminform">
							<?php mosCommonHTML::menuLinksSecCat( $menus ); ?>
							</table>
							<?php
						}
						?>
						<?php
					} else {
						?>
						<table class="adminform" width="40%">
						<tr>
							<td>
								<?php echo JText::_( 'Menu links available when saved' ); ?>
							</td>
						</tr>
						</table>
						<?php
					}
					?>
				</td>
			</tr>
			</table>
		</div>

		<input type="hidden" name="option" value="com_categories" />
		<input type="hidden" name="oldtitle" value="<?php echo $row->title ; ?>" />
		<input type="hidden" name="id" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="sectionid" value="<?php echo $row->section; ?>" />
		<input type="hidden" name="task" value="" />
		<input type="hidden" name="redirect" value="<?php echo $redirect; ?>" />
		<input type="hidden" name="hidemainmenu" value="0" />
		</form>
		<?php
	}


	/**
	* Form to select Section to move Category to
	*/
||||||||	function edit( &$row, &$lists, $redirect, $menus )
	{
		jimport( 'joomla.presentation.editor' );
		$editor =& JEditor::getInstance();

		if ($row->image == '') {
			$row->image = 'blank.png';
		}

		if ( $redirect == 'content' ) {
			$component = 'Content';
		} else {
			$component = ucfirst( substr( $redirect, 4 ) );
			if ( $redirect == 'com_contact_details' ) {
				$component = 'Contact';
			}
		}
		mosMakeHtmlSafe( $row, ENT_QUOTES, 'description' );
		?>
		<script language="javascript" type="text/javascript">
		function submitbutton(pressbutton, section) {
			var form = document.adminForm;
			if (pressbutton == 'cancel') {
				submitform( pressbutton );
				return;
			}

			if ( pressbutton == 'menulink' ) {
				if ( form.menuselect.value == "" ) {
					alert( "<?php echo JText::_( 'Please select a Menu', true ); ?>" );
					return;
				} else if ( form.link_type.value == "" ) {
					alert( "<?php echo JText::_( 'Please select a menu type', true ); ?>" );
					return;
				} else if ( form.link_name.value == "" ) {
					alert( "<?php echo JText::_( 'Please enter a Name for this menu item', true ); ?>" );
					return;
				}
			}

			if ( form.name.value == "" ) {
				alert("<?php echo JText::_( 'Category must have a name', true ); ?>");
			} else {
				<?php
				echo $editor->getEditorContents( 'editor1', 'description' ) ; ?>
				submitform(pressbutton);
			}
		}
		</script>

		<form action="index2.php" method="post" name="adminForm">

		<div id="editcell">
			<table width="100%">
			<tr>
				<td valign="top" width="60%">
					<table class="adminform">
					<tr>
						<th colspan="3">
							<?php echo JText::_( 'Category Details' ); ?>
						</th>
					</tr>
					<tr>
						<td>
							<label for="title">
								<?php echo JText::_( 'Category Title' ); ?>:
							</label>
						</td>
						<td colspan="2">
							<input class="text_area" type="text" name="title" id="title" value="<?php echo $row->title; ?>" size="50" maxlength="50" title="<?php echo JText::_( 'A short name to appear in menus' ); ?>" />
						</td>
					</tr>
					<tr>
						<td>
							<label for="name">
								<?php echo JText::_( 'Category Name' ); ?>:
							</label>
						</td>
						<td colspan="2">
							<input class="text_area" type="text" name="name" id="name" value="<?php echo $row->name; ?>" size="50" maxlength="255" title="<?php echo JText::_( 'A long name to be displayed in headings' ); ?>" />
						</td>
					</tr>
					<tr>
						<td width="120">
							<?php echo JText::_( 'Published' ); ?>:
						</td>
						<td>
							<?php echo $lists['published']; ?>
						</td>
					</tr>
					<tr>
						<td>
							<label for="section">
								<?php echo JText::_( 'Section' ); ?>:
							</label>
						</td>
						<td colspan="2">
							<?php echo $lists['section']; ?>
						</td>
					</tr>
					<tr>
						<td>
							<label for="image">
								<?php echo JText::_( 'Image' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['image']; ?>
						</td>
						<td rowspan="4" width="50%">
							<script language="javascript" type="text/javascript">
							if (document.forms[0].image.options.value!=''){
							  jsimg='../images/stories/' + getSelectedValue( 'adminForm', 'image' );
							} else {
							  jsimg='../images/M_images/blank.png';
							}
							document.write('<img src=' + jsimg + ' name="imagelib" width="80" height="80" border="2" alt="<?php echo JText::_( 'Preview' ); ?>" />');
							</script>
						</td>
					</tr>
					<tr>
						<td>
							<label for="image_position">
								<?php echo JText::_( 'Image Position' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['image_position']; ?>
						</td>
					</tr>
					<tr>
						<td>
							<label for="ordering">
								<?php echo JText::_( 'Ordering' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['ordering']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top">
							<label for="access">
								<?php echo JText::_( 'Access Level' ); ?>:
							</label>
						</td>
						<td>
							<?php echo $lists['access']; ?>
						</td>
					</tr>
					<tr>
						<td valign="top" colspan="3">
							<label for="description">
								<?php echo JText::_( 'Description' ); ?>:
							</label>
							<?php
							// parameters : areaname, content, hidden field, width, height, rows, cols
							echo $editor->getEditor( 'editor1',  $row->description , 'description', '100%;', '300', '60', '20' ) ;
							?>
						</td>
					</tr>
					</table>
				</td>
				<td valign="top" width="40%">
					<?php
					if ( $row->id > 0 ) {
						?>
						<table class="adminform">
						<tr>
							<th colspan="2">
								<?php echo JText::_( 'Link to Menu' ); ?>
							</th>
						</tr>
						<tr>
							<td colspan="2">
								<?php echo JText::_( 'Will Create New Menu Item in Menu Selected' ); ?>
							<br /><br />
							</td>
						</tr>
						<tr>
							<td valign="top" width="100">
								<label for="menuselect">
									<?php echo JText::_( 'Select a Menu' ); ?>
								</label>
							</td>
							<td>
								<?php echo $lists['menuselect']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" width="100">
								<label for="link_type">
									<?php echo JText::_( 'Select Menu Type' ); ?>
								</label>
							</td>
							<td>
								<?php echo $lists['link_type']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" width="100">
								<label for="link_name">
									<?php echo JText::_( 'Menu Item Name' ); ?>
								</label>
							</td>
							<td>
								<input type="text" name="link_name" id="link_name" class="inputbox" value="" size="25" />
							</td>
						</tr>
						<tr>
							<td>
							</td>
							<td>
								<input name="menu_link" type="button" class="button" value="<?php echo JText::_( 'Link to Menu' ); ?>" onclick="submitbutton('menulink');" />
							</td>
						</tr>
						</table>

						<br />

						<?php
						if ( $menus != NULL ) {
							?>
							<table class="adminform">
							<?php mosCommonHTML::menuLinksSecCat( $menus ); ?>
							</table>
							<?php
						}
						?>
						<?php
					} else {
						?>
						<table class="adminform" width="40%">
						<tr>
							<td>
								<?php echo JText::_( 'Menu links available when saved' ); ?>
							</td>
						</tr>
						</table>
						<?php
					}
					?>
				</td>
			</tr>
			</table>
		</div>

		<input type="hidden" name="option" value="com_categories" />
		<input type="hidden" name="oldtitle" value="<?php echo $row->title ; ?>" />
		<input type="hidden" name="id" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="sectionid" value="<?php echo $row->section; ?>" />
		<input type="hidden" name="task" value="" />
		<input type="hidden" name="redirect" value="<?php echo $redirect; ?>" />
		<input type="hidden" name="hidemainmenu" value="0" />
		</form>
		<?php
	}


	/**
	* Form to select Section to move Category to
	*/
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_ECHO
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_ECHO
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_ECHO
                                (SCALAR))
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_ECHO
                                (SCALAR)))))
                (AST_ECHO
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR)))