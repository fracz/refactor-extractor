	 protected function _fetchTemplate($params = array())
	 {
		// check
		$directory	= isset($params['directory']) ? $params['directory'] : 'templates';
		$filter		= JFilterInput::getInstance();
		$template	= $filter->clean($params['template'], 'cmd');
		$file		= $filter->clean($params['file'], 'cmd');

		if (!file_exists($directory.DS.$template.DS.$file)) {
			$template = 'system';
		}

		// Load the language file for the template
		$lang = &JFactory::getLanguage();
		// 1.6
		$lang->load('tpl_'.$template, $directory.DS.$template);
		// 1.5 or core
		$lang->load('tpl_'.$template);

		// Assign the variables
		$this->template = $template;
		$this->baseurl  = JURI::base(true);
		$this->params   = new JParameter(isset($params['params']) ? $params['params'] : null);

		// load
		$this->_template = $this->_loadTemplate($directory.DS.$template, $file);
	}

	/**
	 * Parse a document template
	 *
	 * @access	public
	 * @return	The parsed contents of the template
	 */
||||||||	 protected function _fetchTemplate($params = array())
	 {
		// check
		$directory	= isset($params['directory']) ? $params['directory'] : 'templates';
		$filter		= JFilterInput::getInstance();
		$template	= $filter->clean($params['template'], 'cmd');
		$file		= $filter->clean($params['file'], 'cmd');

		if (!file_exists($directory.DS.$template.DS.$file)) {
			$template = 'system';
		}

		// Load the language file for the template
		$lang = &JFactory::getLanguage();
		// 1.6
		$lang->load('tpl_'.$template, $directory.DS.$template);
		// 1.5 or core
		$lang->load('tpl_'.$template);

		// Assign the variables
		$this->template = $template;
		$this->baseurl  = JURI::base(true);
		$this->params   = isset($params['params']) ? $params['params'] : new JParameter;

		// load
		$this->_template = $this->_loadTemplate($directory.DS.$template, $file);
	}

	/**
	 * Parse a document template
	 *
	 * @access	public
	 * @return	The parsed contents of the template
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_CONST))
                                    (AST_VAR))
                                (AST_CONST))
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (AST_VAR))
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_CONST))
                                    (AST_VAR))
                                (AST_CONST))
                            (AST_VAR)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_NEW)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (AST_VAR))
                (AST_VAR)))))