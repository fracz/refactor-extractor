	public function testHasManyRelationWithLimitAndOrder() {
		$this->_db->log = true;
		$this->_db->return['_execute'] = new MockResult(array(
			'records' => array(
				array(0 => 5)
			)
		));

		MockDatabasePost::first(array(
			'with' => array(
				'MockDatabaseComment',
			),
			'order' => array(
				'title',
				'MockDatabaseComment.body' => 'DESC'
			)
		));
		$this->_db->log = false;

		$result = $this->_db->logs;

		$expected[0] = <<<SQL
SELECT _ID_ FROM (
		SELECT DISTINCT ON({MockDatabasePost}.{id}) {MockDatabasePost}.{id} AS _ID_,
			{MockDatabasePost}.{title} AS {_MockDatabasePost_title_},
			{MockDatabaseComment}.{body} AS {_MockDatabaseComment_body_}
			FROM {mock_database_posts} AS {MockDatabasePost}
			LEFT JOIN {mock_database_comments} AS {MockDatabaseComment}
				ON {MockDatabasePost}.{id} = {MockDatabaseComment}.{mock_database_post_id}
	) AS _TEMP_
	ORDER BY {_MockDatabasePost_title_} ASC, {_MockDatabaseComment_body_} DESC
	LIMIT 1;
SQL;
		$expected[1] = <<<SQL
SELECT * FROM {mock_database_posts} AS {MockDatabasePost}
	LEFT JOIN {mock_database_comments} AS {MockDatabaseComment}
		ON {MockDatabasePost}.{id} = {MockDatabaseComment}.{mock_database_post_id}
	WHERE {MockDatabasePost}.{id} IN (5)
	ORDER BY {MockDatabasePost}.{title} ASC, {MockDatabaseComment}.{body} DESC;
SQL;

		$expected = array_map(function($v) {
			return preg_replace('/[\t\n]+/', ' ', $v);
		}, $expected);
		$this->assertEqual($expected, $result);
	}
}

?>||||||||	public function testHasManyRelationWithLimitAndOrder() {
		$this->_db->log = true;
		$this->_db->return['_execute'] = new MockResult(array(
			'records' => array(
				array(0 => 5)
			)
		));

		MockDatabasePost::first(array(
			'with' => array(
				'MockDatabaseComment',
			),
			'order' => array(
				'title',
				'id',
				'MockDatabaseComment.body' => 'DESC'
			)
		));
		$this->_db->log = false;

		$result = $this->_db->logs;

		$expected[0] = <<<SQL
SELECT _ID_ FROM (
		SELECT DISTINCT ON({MockDatabasePost}.{id}) {MockDatabasePost}.{id} AS _ID_,
			{MockDatabasePost}.{title} AS {_MockDatabasePost_title_},
			{MockDatabasePost}.{id} AS {_MockDatabasePost_id_},
			{MockDatabaseComment}.{body} AS {_MockDatabaseComment_body_}
			FROM {mock_database_posts} AS {MockDatabasePost}
			LEFT JOIN {mock_database_comments} AS {MockDatabaseComment}
				ON {MockDatabasePost}.{id} = {MockDatabaseComment}.{mock_database_post_id}
	) AS _TEMP_
	ORDER BY {_MockDatabasePost_title_} ASC, {_MockDatabasePost_id_} ASC, {_MockDatabaseComment_body_} DESC
	LIMIT 1;
SQL;
		$expected[1] = <<<SQL
SELECT * FROM {mock_database_posts} AS {MockDatabasePost}
	LEFT JOIN {mock_database_comments} AS {MockDatabaseComment}
		ON {MockDatabasePost}.{id} = {MockDatabaseComment}.{mock_database_post_id}
	WHERE {MockDatabasePost}.{id} IN (5)
	ORDER BY {MockDatabasePost}.{title} ASC, {MockDatabasePost}.{id} ASC, {MockDatabaseComment}.{body} DESC;
SQL;

		$expected = array_map(function($v) {
			return preg_replace('/[\t\n]+/', ' ', $v);
		}, $expected);
		$this->assertEqual($expected, $result);
	}
}

?>||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR))
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR)))
                                (NULL)))
                        (SCALAR))))))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (SCALAR))
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (SCALAR)))
                                (NULL)))
                        (SCALAR))))))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))