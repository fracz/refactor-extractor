    public function find($name, $property = null)
    {
        if ($this->containsKey($name)) {
            $object = $this->get($name);

            if ($property !== null) {
                if (property_exists($object, $property)) {
                    $prop = new \ReflectionProperty($object, $property);

                    if ($prop->isPublic()) {
                        return $object->{$property};
                    }
                }

                $getter = 'get'.ucfirst($property);
                if (method_exists($object, $getter) && is_callable([$object, $getter])) {
                    return $object->$getter();
                }

                throw new \UnexpectedValueException('Property '.$property.' is not defined for instance '.$name);
            }

            return $object;
        }

        throw new \UnexpectedValueException('Instance '.$name.' is not defined');
    }

    /**
     * returns a random object or objects from the collection, or a property on that object if $property is not null
     *
     * @param  string  $mask
     * @param  integer $count
     * @param  string  $property
     * @return mixed
     */
||||||||    public function find($name, $property = null)
    {
        if ($this->containsKey($name)) {
            $object = $this->get($name);

            if ($property !== null) {
                if (property_exists($object, $property)) {
                    $prop = new \ReflectionProperty($object, $property);

                    if ($prop->isPublic()) {
                        return $object->{$property};
                    }
                }

                $getter = 'get'.ucfirst($property);
                if (method_exists($object, $getter) && is_callable([$object, $getter])) {
                    return $object->$getter();
                }

                throw new \UnexpectedValueException(
                    sprintf('Property %s is not defined for instance %s', $property, $name)
                );
            }

            return $object;
        }

        throw new \UnexpectedValueException(
            sprintf('Instance %s is not defined', $name)
        );
    }

    /**
     * returns a random object or objects from the collection, or a property on that object if $property is not null
     *
     * @param  string  $mask
     * @param  integer $count
     * @param  string  $property
     * @return mixed
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_NEW
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR))))
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (
                                                    (AST_RETURN
                                                        (AST_PROP
                                                            (AST_VAR)))))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (AST_CALL
                                            (
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_VAR)
                                                        (NULL))
                                                    (AST_ARRAY_ELEM
                                                        (AST_VAR)
                                                        (NULL))))))
                                    (
                                        (AST_RETURN
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_VAR))))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_NEW
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR))))
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (
                                                    (AST_RETURN
                                                        (AST_PROP
                                                            (AST_VAR)))))))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (AST_CALL
                                            (
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_VAR)
                                                        (NULL))
                                                    (AST_ARRAY_ELEM
                                                        (AST_VAR)
                                                        (NULL))))))
                                    (
                                        (AST_RETURN
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_VAR)))))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))))))