    static function get_users($params) {
        global $USER;

        $params['search'] = clean_param($params['search'], PARAM_ALPHANUM);

        if (has_capability('moodle/user:viewdetails', get_context_instance(CONTEXT_SYSTEM))) {
            return get_users(true, $params['search'], false, null, 'firstname ASC','', '', '', 1000, 'id, auth, confirmed, username, idnumber, firstname, lastname, email, emailstop, lang, theme, timezone, mailformat, city, description, country');
        }
        else {
            throw new moodle_exception('wscouldnotvieweusernopermission');
        }
    }

     /**
     * Create multiple users
     * @param array|struct $params - need to be define as struct for XMLRPC
     * @subparam string $params:user->username
     * @subparam string $params:user->firstname
     * @subparam string $params:user->lastname
     * @subparam string $params:user->email
     * @subparam string $params:user->password
     * @return array $return ids of new user
     * @subreturn integer $return:id user id
     */
||||||||    public function get_users($params) {
        global $USER;

        $this->clean_function_params('get_users', $params);

        if (has_capability('moodle/user:viewdetails', get_context_instance(CONTEXT_SYSTEM))) {
            return get_users(true, $params['search'], false, null, 'firstname ASC','', '', '', 1000, 'id, auth, confirmed, username, idnumber, firstname, lastname, email, emailstop, lang, theme, timezone, mailformat, city, description, country');
        }
        else {
            throw new moodle_exception('wscouldnotvieweusernopermission');
        }
    }

    /**
     * Create multiple users
     * @param array|struct $params - need to be define as struct for XMLRPC
     * @return array $return ids of new user
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_CONST)))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_CONST)
                            (AST_CONST)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_CONST)))))
            (
                (AST_RETURN
                    (AST_CALL
                        (
                            (AST_CONST)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_CONST)
                            (AST_CONST)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR))))))))