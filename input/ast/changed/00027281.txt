  public function addTemplate($name)
  {
    // if the template is already loaded we do not reload it.
    if (in_array($name, $this->getTemplates()))
    {
      return;
    }

    $config = $this->getConfig();
    if (!isset($config->templates->$name))
    {
      throw new InvalidArgumentException('Template could not be found');
    }

    // track templates to be able to refer to them later
    $this->templates[] = $name;

    // template does not have transformations; return
    if (!isset($config->templates->$name->transformations))
    {
      return;
    }

    $transformations = $config->templates->$name->transformations->transformation->toArray();

    // if the array key is not numeric; then there is a single value instead of an array of transformations
    $transformations = (is_numeric(key($transformations)))
      ? $transformations
      : array($transformations);

    foreach($transformations as $transformation)
    {
      $this->addTransformation($transformation);
    }
  }

  /**
   * Adds the given transformation to the transformer for execution.
   *
   * It is also allowed to pass an array notation for the transformation; then this method will create
   * a transformation object out of it.
   *
   * The structure for this array must be:
   * array(
   *   'query'        => <query>,
   *   'writer'       => <writer>,
   *   'source'       => <source>,
   *   'artifact'     => <artifact>,
   *   'parameters'   => array(<parameters>),
   *   'dependencies' => array(<dependencies>)
   * )
   *
   * @param Transformation|array $transformation
   *
   * @return void
   */
||||||||  public function addTemplate($name)
  {
    // if the template is already loaded we do not reload it.
    if (in_array($name, $this->getTemplates()))
    {
      return;
    }

    $config = $this->getConfig();
    if (!isset($config->templates->$name))
    {
      throw new InvalidArgumentException('Template "' . $name . '" could not be found');
    }

    // track templates to be able to refer to them later
    $this->templates[] = $name;

    // template does not have transformations; return
    if (!isset($config->templates->$name->transformations))
    {
      return;
    }

    $transformations = $config->templates->$name->transformations->transformation->toArray();

    // if the array key is not numeric; then there is a single value instead of an array of transformations
    $transformations = (is_numeric(key($transformations)))
      ? $transformations
      : array($transformations);

    foreach($transformations as $transformation)
    {
      $this->addTransformation($transformation);
    }
  }

  /**
   * Adds the given transformation to the transformer for execution.
   *
   * It is also allowed to pass an array notation for the transformation; then this method will create
   * a transformation object out of it.
   *
   * The structure for this array must be:
   * array(
   *   'query'        => <query>,
   *   'writer'       => <writer>,
   *   'source'       => <source>,
   *   'artifact'     => <artifact>,
   *   'parameters'   => array(<parameters>),
   *   'dependencies' => array(<dependencies>)
   * )
   *
   * @param Transformation|array $transformation
   *
   * @return void
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (NULL))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (NULL))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))