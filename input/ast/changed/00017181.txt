    public function calculatePositions($project_id, $task_id, $column_id, $position, $swimlane_id = 0)
    {
        // The position can't be lower than 1
        if ($position < 1) {
            return false;
        }

        $board = $this->db->table(Board::TABLE)->eq('project_id', $project_id)->asc('position')->findAllByColumn('id');
        $columns = array();

        // For each column fetch all tasks ordered by position
        foreach ($board as $board_column_id) {

            $columns[$board_column_id] = $this->db->table(Task::TABLE)
                          ->eq('is_active', 1)
                          ->eq('swimlane_id', $swimlane_id)
                          ->eq('project_id', $project_id)
                          ->eq('column_id', $board_column_id)
                          ->neq('id', $task_id)
                          ->asc('position')
                          ->findAllByColumn('id');
        }

        // The column must exists
        if (! isset($columns[$column_id])) {
            return false;
        }

        // We put our task to the new position
        if ($task_id) {
            array_splice($columns[$column_id], $position - 1, 0, $task_id);
        }

        return $columns;
    }

    /**
     * Save task positions
     *
     * @access private
     * @param  array       $columns          Sorted tasks
     * @param  integer     $swimlane_id      Swimlane id
     * @return boolean
     */
||||||||    public function calculatePositions($project_id, $task_id, $column_id, $position, $swimlane_id = 0)
    {
        // The position can't be lower than 1
        if ($position < 1) {
            return false;
        }

        $board = $this->db->table(Board::TABLE)->eq('project_id', $project_id)->asc('position')->findAllByColumn('id');
        $columns = array();

        // For each column fetch all tasks ordered by position
        foreach ($board as $board_column_id) {

            $columns[$board_column_id] = $this->db->table(Task::TABLE)
                          ->eq('is_active', 1)
                          ->eq('swimlane_id', $swimlane_id)
                          ->eq('project_id', $project_id)
                          ->eq('column_id', $board_column_id)
                          ->neq('id', $task_id)
                          ->asc('position')
                          ->asc('id') // Fix Postgresql unit test
                          ->findAllByColumn('id');
        }

        // The column must exists
        if (! isset($columns[$column_id])) {
            return false;
        }

        // We put our task to the new position
        if ($task_id) {
            array_splice($columns[$column_id], $position - 1, 0, $task_id);
        }

        return $columns;
    }

    /**
     * Save task positions
     *
     * @access private
     * @param  array       $columns          Sorted tasks
     * @param  integer     $swimlane_id      Swimlane id
     * @return boolean
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (
                        (SCALAR)
                        (AST_VAR)))
                (
                    (SCALAR)))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR))
                                                (
                                                    (AST_CLASS_CONST
                                                        (SCALAR))))
                                            (
                                                (SCALAR)
                                                (SCALAR)))
                                        (
                                            (SCALAR)
                                            (AST_VAR)))
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (
                                    (SCALAR)
                                    (AST_VAR)))
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (
                            (SCALAR)))
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (
                        (SCALAR)
                        (AST_VAR)))
                (
                    (SCALAR)))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (
                                                        (AST_CLASS_CONST
                                                            (SCALAR))))
                                                (
                                                    (SCALAR)
                                                    (SCALAR)))
                                            (
                                                (SCALAR)
                                                (AST_VAR)))
                                        (
                                            (SCALAR)
                                            (AST_VAR)))
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (
                                    (SCALAR)
                                    (AST_VAR)))
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))