    protected function setUseErrorHandlerFromAnnotation()
    {
        try {
            $className        = get_class($this);
            $class            = new ReflectionClass($className);
            $classDocComment  = $class->getDocComment();
            $method           = new ReflectionMethod($className, $this->name);
            $methodDocComment = $method->getDocComment();

            $useErrorHandler = PHPUnit_Util_Test::getErrorHandlerSettings(
              $classDocComment, $methodDocComment
            );

            if ($useErrorHandler !== NULL) {
                $this->setUseErrorHandler($useErrorHandler);
            }
        }

        catch (ReflectionException $e) {
        }
    }

    /**
     * @param boolean $useOutputBuffering
     * @since Method available since Release 3.4.0
     */
||||||||    protected function setUseErrorHandlerFromAnnotation()
    {
        try {
            $useErrorHandler = PHPUnit_Util_Test::getErrorHandlerSettings(
              get_class($this), $this->name
            );

            if ($useErrorHandler !== NULL) {
                $this->setUseErrorHandler($useErrorHandler);
            }
        }

        catch (ReflectionException $e) {
        }
    }

    /**
     * @param boolean $useOutputBuffering
     * @since Method available since Release 3.4.0
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_PROP
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_CONST))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL)))