	public static function hash($string, $type = null, $salt = null) {
		$string = $salt . $string;

		switch (true) {
			case (($type == 'sha1' || $type == null) && function_exists('sha1')):
				return sha1($string);
			case ($type == 'sha256' && function_exists('mhash')):
				return bin2hex(mhash(MHASH_SHA256, $string));
			case (function_exists('hash')):
				return hash($type, $string);
			default:
		}
		return md5($string);
	}

	/**
	 * Replaces variable placeholders inside a string with any given data. Each key
	 * in the `$data` array corresponds to a variable placeholder name in `$str`.
	 *
	 * Usage:
	 * {{{
	 * String::insert(
	 *     'My name is {:name} and I am {:age} years old.',
	 *     array('name' => 'Bob', 'age' => '65')
	 * ); // returns 'My name is Bob and I am 65 years old.'
	 * }}}
	 *
	 * @param string $str A string containing variable place-holders.
	 * @param string $data A key, value array where each key stands for a place-holder variable
	 *                     name to be replaced with value.
	 * @param string $options Available options are:
	 *        - `'after'`: The character or string after the name of the variable place-holder
	 *          (defaults to `null`).
	 *        - `'before'`: The character or string in front of the name of the variable place-holder
	 *          (defaults to `':'`).
	 *        - `'clean'`: A boolean or array with instructions for `String::clean()`.
	 *        - `'escape'`: The character or string used to escape the before character or string
	 *          (defaults to `'\'`).
	 *        - `'format'`: A regular expression to use for matching variable place-holders
	 *          (defaults to `'/(?<!\\)\:%s/'`. Please note that this option takes precedence over
	 *          all other options except `'clean'`.
	 * @return string
	 * @todo Optimize this
	 */
||||||||	public static function hash($string, $type = null, $salt = null) {
		$string = $salt . $string;

		switch (true) {
			case (($type == 'sha1' || !$type) && function_exists('sha1')):
				return sha1($string);
			case ($type == 'sha256' && function_exists('mhash')):
				return bin2hex(mhash(MHASH_SHA256, $string));
			case (function_exists('hash')):
				return hash($type, $string);
			default:
		}
		return md5($string);
	}

	/**
	 * Replaces variable placeholders inside a string with any given data. Each key
	 * in the `$data` array corresponds to a variable placeholder name in `$str`.
	 *
	 * Usage:
	 * {{{
	 * String::insert(
	 *     'My name is {:name} and I am {:age} years old.',
	 *     array('name' => 'Bob', 'age' => '65')
	 * ); // returns 'My name is Bob and I am 65 years old.'
	 * }}}
	 *
	 * @param string $str A string containing variable place-holders.
	 * @param string $data A key, value array where each key stands for a place-holder variable
	 *                     name to be replaced with value.
	 * @param string $options Available options are:
	 *        - `'after'`: The character or string after the name of the variable place-holder
	 *          (defaults to `null`).
	 *        - `'before'`: The character or string in front of the name of the variable place-holder
	 *          (defaults to `':'`).
	 *        - `'clean'`: A boolean or array with instructions for `String::clean()`.
	 *        - `'escape'`: The character or string used to escape the before character or string
	 *          (defaults to `'\'`).
	 *        - `'format'`: A regular expression to use for matching variable place-holders
	 *          (defaults to `'/(?<!\\)\:%s/'`. Please note that this option takes precedence over
	 *          all other options except `'clean'`.
	 * @return string
	 * @todo Optimize this
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_SWITCH
        (AST_CONST)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST)))
                    (AST_CALL
                        (
                            (SCALAR))))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_CALL
                        (
                            (SCALAR))))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_CONST)
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CALL
                    (
                        (SCALAR)))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (NULL))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_SWITCH
        (AST_CONST)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (AST_UNARY_OP
                            (AST_VAR)))
                    (AST_CALL
                        (
                            (SCALAR))))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_CALL
                        (
                            (SCALAR))))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_CONST)
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CALL
                    (
                        (SCALAR)))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (NULL))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))