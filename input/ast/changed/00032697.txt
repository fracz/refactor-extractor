	public function getKey() {

		// Check if key is already set
		if ( isset( $this->plainKey ) && isset( $this->encKeyfile ) ) {

			return true;

		}

		// Avoid problems with .part file extensions
		$this->relPath = Keymanager::fixPartialFilePath( $this->relPath );

		// If a keyfile already exists
		if ( $this->rootView->file_exists( $this->userId . '/'. 'files_encryption' . '/' . 'keyfiles' . '/' . $this->relPath . '.key' ) ) {

			// Fetch and decrypt keyfile
			// Fetch existing keyfile
			$this->encKeyfile = Keymanager::getFileKey( $this->rootView, $this->userId, $this->relPath );

			$this->setUserProperty();

			$session = new Session( $this->rootView );

			$privateKey = $session->getPrivateKey( $this->userId );

			$shareKey = Keymanager::getShareKey( $this->rootView, $this->userId, $this->relPath );

			$this->plainKey = Crypt::multiKeyDecrypt( $this->encKeyfile, $shareKey, $privateKey );

// 			trigger_error( '$this->relPath = '.$this->relPath );
// 			trigger_error( '$this->userId = '.$this->userId);
// 			trigger_error( '$this->encKeyfile  = '.$this->encKeyfile );
// 			trigger_error( '$this->plainKey1 = '.var_export($this->plainKey, 1));

			return true;

		} else {

			return false;

		}

	}

||||||||	public function getKey() {

		// Check if key is already set
		if ( isset( $this->plainKey ) && isset( $this->encKeyfile ) ) {

			return true;

		}

		// Avoid problems with .part file extensions
		$this->relPath = Keymanager::fixPartialFilePath( $this->relPath );

        // Fetch and decrypt keyfile
        // Fetch existing keyfile
        $this->encKeyfile = Keymanager::getFileKey( $this->rootView, $this->userId, $this->relPath );

		// If a keyfile already exists
		if ( $this->encKeyfile ) {
			$this->setUserProperty();

			$session = new Session( $this->rootView );

			$privateKey = $session->getPrivateKey( $this->userId );

			$shareKey = Keymanager::getShareKey( $this->rootView, $this->userId, $this->relPath );

			$this->plainKey = Crypt::multiKeyDecrypt( $this->encKeyfile, $shareKey, $privateKey );

// 			trigger_error( '$this->relPath = '.$this->relPath );
// 			trigger_error( '$this->userId = '.$this->userId);
// 			trigger_error( '$this->encKeyfile  = '.$this->encKeyfile );
// 			trigger_error( '$this->plainKey1 = '.var_export($this->plainKey, 1));

			return true;

		} else {

			return false;

		}

	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR))
                                            (SCALAR))
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))