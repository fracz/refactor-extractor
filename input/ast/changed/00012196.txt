    public function visitProp(Node $node) : UnionType {
        try {
            $property = (new ContextNode(
                $this->code_base,
                $this->context,
                $node
            ))->getProperty($node->children['prop']);

            return $property->getUnionType();
        }  catch (IssueException $exception) {
            $exception->getIssueInstance()();
        } catch (CodeBaseException $exception) {
            $property_name = $node->children['prop'];
            Issue::emit(
                Issue::UndeclaredProperty,
                $this->context->getFile(),
                $node->lineno ?? 0,
                "{$exception->getFQSEN()}->{$property_name}"
            );
        } catch (UnanalyzableException $exception) {
            // Swallow it. There are some constructs that we
            // just can't figure out.
        } catch (NodeException $exception) {
            // Swallow it. There are some constructs that we
            // just can't figure out.
        }

        return new UnionType();
    }

    /**
     * Visit a node with kind `\ast\AST_STATIC_PROP`
     *
     * @param Node $node
     * A node of the type indicated by the method name that we'd
     * like to figure out the type that it produces.
     *
     * @return UnionType
     * The set of types that are possibly produced by the
     * given node
     */
||||||||    public function visitProp(Node $node) : UnionType {
        try {
            $property = (new ContextNode(
                $this->code_base,
                $this->context,
                $node
            ))->getProperty($node->children['prop']);

            return $property->getUnionType();
        }  catch (IssueException $exception) {
            $exception->getIssueInstance()->collect();
        } catch (CodeBaseException $exception) {
            $property_name = $node->children['prop'];
            Issue::emit(
                Issue::UndeclaredProperty,
                $this->context->getFile(),
                $node->lineno ?? 0,
                "{$exception->getFQSEN()}->{$property_name}"
            );
        } catch (UnanalyzableException $exception) {
            // Swallow it. There are some constructs that we
            // just can't figure out.
        } catch (NodeException $exception) {
            // Swallow it. There are some constructs that we
            // just can't figure out.
        }

        return new UnionType();
    }

    /**
     * Visit a node with kind `\ast\AST_STATIC_PROP`
     *
     * @param Node $node
     * A node of the type indicated by the method name that we'd
     * like to figure out the type that it produces.
     *
     * @return UnionType
     * The set of types that are possibly produced by the
     * given node
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_NEW
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))
                    (
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))
            (AST_RETURN
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_STATIC_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ENCAPS_LIST
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)
                                (AST_VAR))))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_RETURN
        (AST_NEW)))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_NEW
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR)))
                    (
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))))
            (AST_RETURN
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (AST_STATIC_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_ENCAPS_LIST
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR)
                                (AST_VAR))))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_RETURN
        (AST_NEW)))