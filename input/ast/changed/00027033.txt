    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $target  = $input->getOption('target');
        $name    = $input->getOption('name');

        $this->validateTargetOption($target);
        $this->validateNameOption($name);

        $path = $this->getDestinationLocation($target, $name);
        $this->prepareLocation($path, $input->getOption('force'));

        $output->writeln('Generating files');

        $this->generateConfigurationFile(
            $path,
            $name,
            $this->getVersion($input),
            $input->getOption('author')
        );
        $this->generateListenerFile($path, $name);
        $this->generateBaseException($path, $name);

        $output->writeln('Finished generating a new plugin at: ' . $path);
        $output->writeln('');

        return 0;
    }

    /**
     * Validates whether the given plugin name is not empty.
     *
     * @param string $name
     *
     * @throws \InvalidArgumentException if no name is provided
     *
     * @return void
     */
||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $target  = $input->getOption('target');
        $name    = $input->getOption('name');

        $this->validateTargetOption($target);
        $this->validateNameOption($name);

        $path = $this->getDestinationLocation($target, $name);
        $this->prepareLocation($path, $input->getOption('force'));

        $output->writeln('Generating files');

        $this->generateConfigurationFile($path, $name, $this->getVersion($input), $input->getOption('author'));
        $this->generateListenerFile($path, $name);
        $this->generateBaseException($path, $name);

        $output->writeln('Finished generating a new plugin at: ' . $path. PHP_EOL);

        return 0;
    }

    /**
     * Validates whether the given plugin name is not empty.
     *
     * @param string $name
     *
     * @throws \InvalidArgumentException if no name is provided
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_RETURN
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (AST_CONST))))
    (AST_RETURN
        (SCALAR)))