	public function offsetGet($key)
	{
		if (!is_scalar($key)) {
			throw new /*\*/InvalidArgumentException('Key must be either a string or an integer.');
		}

		if (parent::offsetExists($key)) {
			return parent::offsetGet($key);

		} elseif ($this->throwKeyNotFound) {
			throw new KeyNotFoundException;

		} else {
			return NULL;
		}
	}



	/**
	 * Exists item? (\ArrayAccess implementation).
	 * @param  string key
	 * @return bool
	 * @throws \InvalidArgumentException
	 */
||||||||	public function offsetGet($key)
	{
		if (!is_scalar($key)) {
			throw new /*\*/InvalidArgumentException("Key must be either a string or an integer, " . gettype($key) ." given.");
		}

		if (parent::offsetExists($key)) {
			return parent::offsetGet($key);

		} elseif ($this->throwKeyNotFound) {
			throw new KeyNotFoundException;

		} else {
			return NULL;
		}
	}



	/**
	 * Exists item? (\ArrayAccess implementation).
	 * @param  string key
	 * @return bool
	 * @throws \InvalidArgumentException
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))