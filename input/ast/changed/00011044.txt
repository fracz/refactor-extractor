	public static function combine_css($files=array(), $media='screen', $type = '')
	{
		// Are there any scripts to include?
		if ($type == 'module' AND count($files) == 0)
		{
			return;
		}
		else if ($type != 'module' && count($files) == 0)
		{
			return;
		}

		$output = '';
		$min	= '';

		// Add the theme name to the filename
		// to account for different frontend/backend themes.
		$theme = trim(Template::get('active_theme'), '/');
		$theme = empty($theme) ? trim(Template::get('default_theme'), '/') : $theme;

		$file_name = $theme .'_'. self::$ci->router->fetch_module() .'_'. self::$ci->router->fetch_class();

		if (self::$ci->config->item('assets.encrypt_name') == TRUE)
		{
			$file_name = md5($file_name);
		}

		if ($type == 'module')
		{
			$file_name .= '_mod';
		}
		else
		{
			$file_name .= '_combined';
		}

		if (self::$ci->config->item('assets.css_minify') == TRUE)
		{
			$file_name .= '.min';
		}

		//Debugging issues with media being set to 1 on module_js
		if ( $media == '1')
		{
			$media = 'screen';
		}

		// Create our link attributes
		$attr = array(
			'rel'	=> 'stylesheet',
			'type'	=> 'text/css',
			'href'	=> base_url() .self::$asset_base . '/' . self::$asset_cache_folder . '/' . $file_name.$min.".css",
			'media'	=> $media
		);

		if (self::generate_file($files, $file_name, 'css')) {
			$output .= '<link'. self::attributes($attr) ." />\n";
		}

		return $output;

	}//end combine_css()

	//--------------------------------------------------------------------


	/**
	 * Adds a file to be the CSS queue to be rendered out.
	 *
	 * @access public
	 * @static
	 *
	 * @param mixed  $style The style(s) to be added
	 * @param string $media The type of media the stylesheet styles.
	 *
	 * @return void
	 */
||||||||	public static function combine_css($files=array(), $media='screen', $type = '')
	{
		// Are there any scripts to include?
		if (count($files) == 0)
		{
			return;
		}

		$output = '';
		$min	= '';

		// Add the theme name to the filename
		// to account for different frontend/backend themes.
		$theme = trim(Template::get('active_theme'), '/');
		$theme = empty($theme) ? trim(Template::get('default_theme'), '/') : $theme;

		$file_name = $theme .'_'. self::$ci->router->fetch_module() .'_'. self::$ci->router->fetch_class();

		if (self::$ci->config->item('assets.encrypt_name') == TRUE)
		{
			$file_name = md5($file_name);
		}

		if ($type == 'module')
		{
			$file_name .= '_mod';
		}
		else
		{
			$file_name .= '_combined';
		}

		if (self::$ci->config->item('assets.css_minify') == TRUE)
		{
			$file_name .= '.min';
		}

		//Debugging issues with media being set to 1 on module_js
		if ( $media == '1')
		{
			$media = 'screen';
		}

		// Create our link attributes
		$attr = array(
			'rel'	=> 'stylesheet',
			'type'	=> 'text/css',
			'href'	=> base_url() .self::$asset_base . '/' . self::$asset_cache_folder . '/' . $file_name.$min.".css",
			'media'	=> $media
		);

		if (self::generate_file($files, $file_name, 'css')) {
			$output .= '<link'. self::attributes($attr) ." />\n";
		}

		return $output;

	}//end combine_css()

	//--------------------------------------------------------------------


	/**
	 * Adds a file to be the CSS queue to be rendered out.
	 *
	 * @access public
	 * @static
	 *
	 * @param mixed  $style The style(s) to be added
	 * @param string $media The type of media the stylesheet styles.
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_RETURN
                    (NULL))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (NULL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))
                    (SCALAR)))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_STATIC_PROP))))
                (SCALAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_CALL)
                                            (AST_STATIC_PROP))
                                        (SCALAR))
                                    (AST_STATIC_PROP))
                                (SCALAR))
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)))
                    (SCALAR)))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_STATIC_PROP))))
                (SCALAR))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_STATIC_PROP))
                    (
                        (SCALAR)))
                (AST_CONST))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_CALL)
                                            (AST_STATIC_PROP))
                                        (SCALAR))
                                    (AST_STATIC_PROP))
                                (SCALAR))
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))