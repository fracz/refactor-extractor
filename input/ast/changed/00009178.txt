    public function upload($bucket, $key, $body, $acl = 'private', array $options = array())
    {
        $body = EntityBody::factory($body);
        $options = Collection::fromConfig(array_change_key_case($options), array(
            'min_part_size' => AbstractMulti::MIN_PART_SIZE,
            'params'        => array(),
            'concurrency'   => $body->getWrapper() == 'plainfile' ? 3 : 1
        ));

        if ($body->getSize() < $options['min_part_size']) {
            // Perform a simple PutObject operation
            return $this->putObject(array(
                'Bucket' => $bucket,
                'Key'    => $key,
                'Body'   => $body,
                'ACL'    => $acl
            ) + $options['params']);
        }

        // Perform a multipart upload if the file is large enough
        $transfer = UploadBuilder::newInstance()
            ->setBucket($bucket)
            ->setKey($key)
            ->setMinPartSize($options['min_part_size'])
            ->setConcurrency($options['concurrency'])
            ->setClient($this)
            ->setSource($body)
            ->setTransferOptions($options->toArray())
            ->addOptions($options['params'])
            ->setOption('ACL', $acl)
            ->build()
            ->upload();

        if ($options['before_upload']) {
            $transfer->getEventDispatcher()->addListener(
                AbstractTransfer::BEFORE_PART_UPLOAD,
                $options['before_upload']
            );
        }

        return $transfer;
    }

    /**
     * Recursively uploads all files in a given directory to a given bucket.
     *
     * @param string $directory Full path to a directory to upload
     * @param string $bucket    Name of the bucket
     * @param string $keyPrefix Virtual directory key prefix to add to each upload
     * @param array  $options   Associative array of upload options
     *     - params: Array of parameters to use with each PutObject operation performed during the transfer
     *     - base_dir: Base directory to remove from each object key
     *     - force: Set to true to upload every file, even if the file is already in Amazon S3 and has not changed
     *     - concurrency: Maximum number of parallel uploads (defaults to 10)
     *     - debug: Set to true or an fopen resource to enable debug mode to print information about each upload
     *     - multipart_upload_size: When the size of a file exceeds this value, the file will be uploaded using a
     *       multipart upload.
     *
     * @see Aws\S3\S3Sync\S3Sync for more options and customization
     */
||||||||    public function upload(
        $bucket,
        $key,
        $body,
        $acl = 'private',
        array $options = []
    ) {
        $body = Stream\create($body);
        $options = Collection::fromConfig(array_change_key_case($options), [
            'min_part_size' => AbstractMulti::MIN_PART_SIZE,
            'params'        => [],
            'concurrency'   => $body->getWrapper() == 'plainfile' ? 3 : 1
        ]);

        if ($body->getSize() < $options['min_part_size']) {
            // Perform a simple PutObject operation
            return $this->putObject([
                'Bucket' => $bucket,
                'Key'    => $key,
                'Body'   => $body,
                'ACL'    => $acl
            ] + $options['params']);
        }

        // Perform a multipart upload if the file is large enough
        $transfer = UploadBuilder::newInstance()
            ->setBucket($bucket)
            ->setKey($key)
            ->setMinPartSize($options['min_part_size'])
            ->setConcurrency($options['concurrency'])
            ->setClient($this)
            ->setSource($body)
            ->setTransferOptions($options->toArray())
            ->addOptions($options['params'])
            ->setOption('ACL', $acl)
            ->build()
            ->upload();

        if ($options['before_upload']) {
            $transfer->getEmitter()->on('prepare', $options['before_upload']);
        }

        return $transfer;
    }

    /**
     * Recursively uploads all files in a given directory to a given bucket.
     *
     * @param string $directory Full path to a directory to upload
     * @param string $bucket    Name of the bucket
     * @param string $keyPrefix Virtual directory key prefix to add to each upload
     * @param array  $options   Associative array of upload options
     *
     *     - params: Array of parameters to use with each PutObject operation
     *       performed during the transfer.
     *     - base_dir: Base directory to remove from each object key
     *     - force: Set to true to upload every file, even if the file is
     *       already in Amazon S3 and has not changed.
     *     - concurrency: Maximum number of parallel uploads (defaults to 10)
     *     - debug: Set to true or an fopen resource to enable debug mode to
     *       print information about each upload.
     *     - multipart_upload_size: When the size of a file exceeds this value,
     *       the file will be uploaded using a multipart upload.
     *
     * @see Aws\S3\S3Sync\S3Sync for more options and customization
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_STATIC_CALL)
                                                    (
                                                        (AST_VAR)))
                                                (
                                                    (AST_VAR)))
                                            (
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))))
                                        (
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_CLASS_CONST
                            (SCALAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))
                            (SCALAR)
                            (SCALAR))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_STATIC_CALL)
                                                    (
                                                        (AST_VAR)))
                                                (
                                                    (AST_VAR)))
                                            (
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR))))
                                        (
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_RETURN
        (AST_VAR)))