    public function bindCoreClasses()
    {
        $this->app->bind('rocketeer.environment', Environment::class);
        $this->app->bind('rocketeer.timer', QueueTimer::class);
        $this->app->singleton('rocketeer.builder', Builder::class);
        $this->app->singleton('rocketeer.bash', Bash::class);
        $this->app->singleton('rocketeer.connections', ConnectionsHandler::class);
        $this->app->singleton('rocketeer.coordinator', Coordinator::class);
        $this->app->singleton('rocketeer.explainer', QueueExplainer::class);
        $this->app->singleton('rocketeer.history', History::class);
        $this->app->singleton('rocketeer.logs', LogsHandler::class);
        $this->app->singleton('rocketeer.queue', TasksQueue::class);
        $this->app->singleton('rocketeer.releases', ReleasesManager::class);
        $this->app->singleton('rocketeer.rocketeer', Rocketeer::class);
        $this->app->singleton('rocketeer.roles', RolesManager::class);
        $this->app->singleton('rocketeer.tasks', TasksHandler::class);

        $this->app->singleton('rocketeer.storage.local', function ($app) {
            $filename = $app['rocketeer.rocketeer']->getApplicationName();
            $filename = $filename === '{application_name}' ? 'deployments' : $filename;

            return new LocalStorage($app, $filename);
        });
    }

    /**
     * Bind the CredentialsGatherer and Console application.
     */
||||||||    public function bindCoreClasses()
    {
        $this->app->bind('rocketeer.environment', Environment::class);
        $this->app->bind('rocketeer.timer', QueueTimer::class);
        $this->app->singleton('rocketeer.builder', Builder::class);
        $this->app->singleton('rocketeer.bash', Bash::class);
        $this->app->singleton('rocketeer.connections', ConnectionsHandler::class);
        $this->app->singleton('rocketeer.coordinator', Coordinator::class);
        $this->app->singleton('rocketeer.explainer', QueueExplainer::class);
        $this->app->singleton('rocketeer.history', History::class);
        $this->app->singleton('rocketeer.logs', LogsHandler::class);
        $this->app->singleton('rocketeer.queue', TasksQueue::class);
        $this->app->singleton('rocketeer.releases', ReleasesManager::class);
        $this->app->singleton('rocketeer.rocketeer', Rocketeer::class);
        $this->app->singleton('rocketeer.roles', RolesManager::class);
        $this->app->singleton('rocketeer.tasks', TasksHandler::class);

        $this->app->singleton('rocketeer.storage.local', function ($app) {
            $folder = $app['rocketeer.paths']->getRocketeerConfigFolder();
            $filename = $app['rocketeer.rocketeer']->getApplicationName();
            $filename = $filename === '{application_name}' ? 'deployments' : $filename;

            return new Storage($app, 'local', $folder, $filename);
        });
    }

    /**
     * Bind the CredentialsGatherer and Console application.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)
                            (AST_VAR)))
                    (AST_RETURN
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)
                            (AST_VAR)))
                    (AST_RETURN
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR)))))))))