    public function __construct($type_list = null)
    {
        $this->type_set = new Set($type_list);
    }

    /**
     * After a clone is called on this object, clone our
     * deep objects.
     *
     * @return null
     */
||||||||    public function __construct($type_list = null, bool $is_an_array_set = false)
    {
        if ($is_an_array_set) {
            // Disable asserts in production
            /**
            assert(is_array($type_list),
                   'should be an array array');
            assert(ArraySet::is_array_set($type_list),
                   'Should be an array set');
             */
            $this->type_set = $type_list;
            return;
        }
        $this->type_set = ArraySet::from_list($type_list);
    }

    // __clone of $this->type_set would be a no-op due to copy on write semantics.

    /**
     * @param string $fully_qualified_string
     * A '|' delimited string representing a type in the form
     * 'int|string|null|ClassName'.
     *
     * @return UnionType
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_VAR)))))