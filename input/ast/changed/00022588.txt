    public static function get_conversations($userid, $limitfrom = 0, $limitnum = 20) {
        global $DB;

        // The case statement is used to make sure the same key is generated
        // whether a user sent or received a message (it's the same conversation).
        // E.g. If there is a message from user 1 to user 2 and then from user 2 to user 1 the result set
        // will group those into a single record, since 1 -> 2 and 2 -> 1 is the same conversation.
        $case1 = $DB->sql_concat('useridfrom', "'-'", 'useridto');
        $case2 = $DB->sql_concat('useridto', "'-'", 'useridfrom');
        $convocase = "CASE WHEN useridfrom > useridto
                        THEN $case1
                        ELSE $case2 END";
        $convosig = "$convocase AS convo_signature";

        // This is a snippet to join the message tables and filter out any messages the user has deleted
        // and ignore notifications. The fields are specified by name so that the union works on MySQL.
        $allmessages = "SELECT
                            id, useridfrom, useridto, subject, fullmessage, fullmessageformat,
                            fullmessagehtml, smallmessage, notification, contexturl,
                            contexturlname, timecreated, timeuserfromdeleted, timeusertodeleted,
                            component, eventtype, 0 as timeread
                        FROM {message}
                        WHERE
                            (useridto = ? AND timeusertodeleted = 0 AND notification = 0)
                            OR
                            (useridfrom = ? AND timeuserfromdeleted = 0 AND notification = 0)
                        UNION ALL
                        SELECT
                            id, useridfrom, useridto, subject, fullmessage, fullmessageformat,
                            fullmessagehtml, smallmessage, notification, contexturl,
                            contexturlname, timecreated, timeuserfromdeleted, timeusertodeleted,
                            component, eventtype, timeread
                        FROM {message_read}
                        WHERE
                            (useridto = ? AND timeusertodeleted = 0 AND notification = 0)
                            OR
                            (useridfrom = ? AND timeuserfromdeleted = 0 AND notification = 0)";
        $allmessagesparams = [$userid, $userid, $userid, $userid];

        // Create a transaction to protect against concurrency issues.
        $transaction = $DB->start_delegated_transaction();

        // First we need to get the list of conversations from the database ordered by the conversation
        // with the most recent message first.
        //
        // This query will join the two message tables and then group the results by the combination
        // of useridfrom and useridto (the 'convo_signature').
        $conversationssql = "SELECT $convosig, max(timecreated) as timecreated
                             FROM ($allmessages) x
                             GROUP BY $convocase
                             ORDER BY timecreated DESC, max(id) DESC";
        $conversationrecords = $DB->get_records_sql($conversationssql, $allmessagesparams, $limitfrom, $limitnum);

        // This user has no conversations so we can return early here.
        if (empty($conversationrecords)) {
            return [];
        }

        // Next we need to get the max id of the messages sent at the latest time for each conversation.
        // This needs to be a separate query to above because there is no guarantee that the message with
        // the highest id will also have the highest timecreated value (in fact that is fairly likely due
        // to the split between the message tables).
        //
        // E.g. if we just added max(id) to the conversation query above and ran it on data like:
        // id, userfrom, userto, timecreated
        //  1,        1,      2,           2
        //  2,        2,      1,           1
        //
        // Then the result of the query would be:
        // convo_signature, timecreated, id
        //             2-1,           2,  2
        //
        // That would be incorrect since the message with id 2 actually has a lower timecreated. Hence why
        // the two queries need to be split.
        //
        // The same result could also be achieved with an inner join in a single query however we're specifically
        // avoiding multiple joins in the messaging queries because of the size of the messaging tables.
        $whereclauses = [];
        $createdtimes = [];
        foreach ($conversationrecords as $convoid => $record) {
            $whereclauses[] = "($convocase = '$convoid' AND timecreated = {$record->timecreated})";
            $createdtimes[] = $record->timecreated;
        }
        $messageidwhere = implode(' OR ', $whereclauses);
        list($timecreatedsql, $timecreatedparams) = $DB->get_in_or_equal($createdtimes);

        $allmessagestimecreated = "SELECT id, useridfrom, useridto, timecreated
                        FROM {message}
                        WHERE
                            (useridto = ? AND timeusertodeleted = 0 AND notification = 0)
                            OR
                            (useridfrom = ? AND timeuserfromdeleted = 0 AND notification = 0)
                            AND timecreated $timecreatedsql
                        UNION ALL
                        SELECT id, useridfrom, useridto, timecreated
                        FROM {message_read}
                        WHERE
                            (useridto = ? AND timeusertodeleted = 0 AND notification = 0)
                            OR
                            (useridfrom = ? AND timeuserfromdeleted = 0 AND notification = 0)
                            AND timecreated $timecreatedsql";
        $messageidsql = "SELECT $convosig, max(id) as id, timecreated
                         FROM ($allmessagestimecreated) x
                         WHERE $messageidwhere
                         GROUP BY $convocase, timecreated";
        $messageidparams = array_merge([$userid, $userid], $timecreatedparams, [$userid, $userid], $timecreatedparams);
        $messageidrecords = $DB->get_records_sql($messageidsql, $messageidparams);

        // Ok, let's recap. We've pulled a descending ordered list of conversations by latest time created
        // for the given user. For each of those conversations we've grabbed the max id for messages
        // created at that time.
        //
        // So at this point we have the list of ids for the most recent message in each of the user's most
        // recent conversations. Now we need to pull all of the message and user data for each message id.
        $whereclauses = [];
        foreach ($messageidrecords as $record) {
            $whereclauses[] = "(m.id = {$record->id} AND timecreated = {$record->timecreated})";
        }
        $messagewhere = implode(' OR ', $whereclauses);
        $messagesql = "SELECT $convosig, m.smallmessage, m.id, m.useridto, m.useridfrom, m.timeread
                       FROM ($allmessages) m
                       WHERE $messagewhere";

        // We need to handle the case where the $messageids contains two ids from the same conversation
        // (which can happen because there can be id clashes between the read and unread tables). In
        // this case we will prioritise the unread message.
        $messageset = $DB->get_recordset_sql($messagesql, $allmessagesparams);
        $messages = [];
        foreach ($messageset as $message) {
            $id = $message->convo_signature;
            if (!isset($messages[$id]) || empty($message->timeread)) {
                $messages[$id] = $message;
            }
        }
        $messageset->close();

        // We need to pull out the list of other users that are part of each of these conversations. This
        // needs to be done in a separate query to avoid doing a join on the messages tables and the user
        // tables because on large sites these tables are massive which results in extremely slow
        // performance (typically due to join buffer exhaustion).
        $otheruserids = array_map(function($message) use ($userid) {
            return ($message->useridfrom == $userid) ? $message->useridto : $message->useridfrom;
        }, array_values($messages));

        list($useridsql, $usersparams) = $DB->get_in_or_equal($otheruserids);
        $userfields = \user_picture::fields('', array('lastaccess'));
        $userssql = "SELECT $userfields
                     FROM {user}
                     WHERE id $useridsql";
        $otherusers = $DB->get_records_sql($userssql, $usersparams);

        // Similar to the above use case, we need to pull the contact information and again this has
        // specifically been separated into another query to avoid having to do joins on the message
        // tables.
        $contactssql = "SELECT contactid, blocked
                        FROM {message_contacts}
                        WHERE userid = ? AND contactid $useridsql";
        $contacts = $DB->get_records_sql($contactssql, array_merge([$userid], $otheruserids));

        // Finally, let's get the unread messages count for this user so that we can add them
        // to the conversation.
        $unreadcountssql = 'SELECT useridfrom, count(*) as count
                            FROM {message}
                            WHERE useridto = ?
                                AND timeusertodeleted = 0
                                AND notification = 0
                            GROUP BY useridfrom';
        $unreadcounts = $DB->get_records_sql($unreadcountssql, [$userid]);

        // We can close off the transaction now.
        $DB->commit_delegated_transaction($transaction);

        // Now we need to order the messages back into the same order of the conversations.
        $orderedconvosigs = array_keys($conversationrecords);
        usort($messages, function($a, $b) use ($orderedconvosigs) {
            $aindex = array_search($a->convo_signature, $orderedconvosigs);
            $bindex = array_search($b->convo_signature, $orderedconvosigs);

            return ($aindex < $bindex) ? -1 : 1;
        });

        // Preload the contexts before we construct the conversation to prevent the
        // create_contact helper from needing to query the DB so often.
        $ctxselect = \context_helper::get_preload_record_columns_sql('ctx');
        $sql = "SELECT {$ctxselect}
                FROM {context} ctx
                WHERE ctx.contextlevel = ? AND
                ctx.instanceid {$useridsql}";
        $contexts = [];
        $contexts = $DB->get_records_sql($sql, array_merge([CONTEXT_USER], $usersparams));
        foreach ($contexts as $context) {
            \context_helper::preload_from_record($context);
        }

        $userproperties = explode(',', $userfields);
        $arrconversations = array();
        // The last step now is to bring all of the data we've gathered together to create
        // a conversation (or contact, as the API is named...).
        foreach ($messages as $message) {
            $conversation = new \stdClass();
            $otheruserid = ($message->useridfrom == $userid) ? $message->useridto : $message->useridfrom;
            $otheruser = isset($otherusers[$otheruserid]) ? $otherusers[$otheruserid] : null;
            $contact = isset($contacts[$otheruserid]) ? $contacts[$otheruserid] : null;

            // Add the other user's information to the conversation, if we have one.
            foreach ($userproperties as $prop) {
                $conversation->$prop = ($otheruser) ? $otheruser->$prop : null;
            }

            // Add the contact's information, if we have one.
            $conversation->blocked = ($contact) ? $contact->blocked : null;

            // Add the message information.
            $conversation->messageid = $message->id;
            $conversation->smallmessage = $message->smallmessage;
            $conversation->useridfrom = $message->useridfrom;

            // Only consider it unread if $user has unread messages.
            if (isset($unreadcounts[$otheruserid])) {
                $conversation->isread = false;
                $conversation->unreadcount = $unreadcounts[$otheruserid]->count;
            } else {
                $conversation->isread = true;
            }

            $arrconversations[$otheruserid] = helper::create_contact($conversation);
        }

        return $arrconversations;
    }

    /**
     * Returns the contacts to display in the contacts area.
     *
     * @param int $userid The user id
     * @param int $limitfrom
     * @param int $limitnum
     * @return array
     */
||||||||    public static function get_conversations($userid, $limitfrom = 0, $limitnum = 20) {
        global $DB;

        // The case statement is used to make sure the same key is generated
        // whether a user sent or received a message (it's the same conversation).
        // E.g. If there is a message from user 1 to user 2 and then from user 2 to user 1 the result set
        // will group those into a single record, since 1 -> 2 and 2 -> 1 is the same conversation.
        $case1 = $DB->sql_concat('useridfrom', "'-'", 'useridto');
        $case2 = $DB->sql_concat('useridto', "'-'", 'useridfrom');
        $convocase = "CASE WHEN useridfrom > useridto
                        THEN $case1
                        ELSE $case2 END";
        $convosig = "$convocase AS convo_signature";

        // This is a snippet to join the message tables and filter out any messages the user has deleted
        // and ignore notifications. The fields are specified by name so that the union works on MySQL.
        $allmessages = "SELECT
                            id, useridfrom, useridto, subject, fullmessage, fullmessageformat,
                            fullmessagehtml, smallmessage, notification, contexturl,
                            contexturlname, timecreated, timeuserfromdeleted, timeusertodeleted,
                            component, eventtype, 0 as timeread
                        FROM {message}
                        WHERE
                            (useridto = ? AND timeusertodeleted = 0 AND notification = 0)
                            OR
                            (useridfrom = ? AND timeuserfromdeleted = 0 AND notification = 0)
                        UNION ALL
                        SELECT
                            id, useridfrom, useridto, subject, fullmessage, fullmessageformat,
                            fullmessagehtml, smallmessage, notification, contexturl,
                            contexturlname, timecreated, timeuserfromdeleted, timeusertodeleted,
                            component, eventtype, timeread
                        FROM {message_read}
                        WHERE
                            (useridto = ? AND timeusertodeleted = 0 AND notification = 0)
                            OR
                            (useridfrom = ? AND timeuserfromdeleted = 0 AND notification = 0)";
        $allmessagesparams = [$userid, $userid, $userid, $userid];

        // Create a transaction to protect against concurrency issues.
        $transaction = $DB->start_delegated_transaction();

        // First we need to get the list of conversations from the database ordered by the conversation
        // with the most recent message first.
        //
        // This query will join the two message tables and then group the results by the combination
        // of useridfrom and useridto (the 'convo_signature').
        $conversationssql = "SELECT $convosig, max(timecreated) as timecreated
                             FROM ($allmessages) x
                             GROUP BY $convocase
                             ORDER BY timecreated DESC, max(id) DESC";
        $conversationrecords = $DB->get_records_sql($conversationssql, $allmessagesparams, $limitfrom, $limitnum);

        // This user has no conversations so we can return early here.
        if (empty($conversationrecords)) {
            return [];
        }

        // Next we need to get the max id of the messages sent at the latest time for each conversation.
        // This needs to be a separate query to above because there is no guarantee that the message with
        // the highest id will also have the highest timecreated value (in fact that is fairly likely due
        // to the split between the message tables).
        //
        // E.g. if we just added max(id) to the conversation query above and ran it on data like:
        // id, userfrom, userto, timecreated
        //  1,        1,      2,           2
        //  2,        2,      1,           1
        //
        // Then the result of the query would be:
        // convo_signature, timecreated, id
        //             2-1,           2,  2
        //
        // That would be incorrect since the message with id 2 actually has a lower timecreated. Hence why
        // the two queries need to be split.
        //
        // The same result could also be achieved with an inner join in a single query however we're specifically
        // avoiding multiple joins in the messaging queries because of the size of the messaging tables.
        $whereclauses = [];
        $createdtimes = [];
        foreach ($conversationrecords as $convoid => $record) {
            $whereclauses[] = "($convocase = '$convoid' AND timecreated = {$record->timecreated})";
            $createdtimes[] = $record->timecreated;
        }
        $messageidwhere = implode(' OR ', $whereclauses);
        list($timecreatedsql, $timecreatedparams) = $DB->get_in_or_equal($createdtimes);

        $allmessagestimecreated = "SELECT id, useridfrom, useridto, timecreated
                        FROM {message}
                        WHERE
                            (useridto = ? AND timeusertodeleted = 0 AND notification = 0)
                            OR
                            (useridfrom = ? AND timeuserfromdeleted = 0 AND notification = 0)
                            AND timecreated $timecreatedsql
                        UNION ALL
                        SELECT id, useridfrom, useridto, timecreated
                        FROM {message_read}
                        WHERE
                            (useridto = ? AND timeusertodeleted = 0 AND notification = 0)
                            OR
                            (useridfrom = ? AND timeuserfromdeleted = 0 AND notification = 0)
                            AND timecreated $timecreatedsql";
        $messageidsql = "SELECT $convosig, max(id) as id, timecreated
                         FROM ($allmessagestimecreated) x
                         WHERE $messageidwhere
                         GROUP BY $convocase, timecreated";
        $messageidparams = array_merge([$userid, $userid], $timecreatedparams, [$userid, $userid], $timecreatedparams);
        $messageidrecords = $DB->get_records_sql($messageidsql, $messageidparams);

        // Ok, let's recap. We've pulled a descending ordered list of conversations by latest time created
        // for the given user. For each of those conversations we've grabbed the max id for messages
        // created at that time.
        //
        // So at this point we have the list of ids for the most recent message in each of the user's most
        // recent conversations. Now we need to pull all of the message and user data for each message id.
        $whereclauses = [];
        foreach ($messageidrecords as $record) {
            $whereclauses[] = "(id = {$record->id} AND timecreated = {$record->timecreated})";
        }
        $messagewhere = implode(' OR ', $whereclauses);
        $messagesunionsql = "SELECT
                                id, useridfrom, useridto, smallmessage, 0 as timeread
                            FROM {message}
                            WHERE
                                {$messagewhere}
                            UNION ALL
                            SELECT
                                id, useridfrom, useridto, smallmessage, timeread
                            FROM {message_read}
                            WHERE
                                {$messagewhere}";
        $messagesql = "SELECT $convosig, m.smallmessage, m.id, m.useridto, m.useridfrom, m.timeread
                       FROM ($messagesunionsql) m";

        // We need to handle the case where the $messageids contains two ids from the same conversation
        // (which can happen because there can be id clashes between the read and unread tables). In
        // this case we will prioritise the unread message.
        $messageset = $DB->get_recordset_sql($messagesql, $allmessagesparams);
        $messages = [];
        foreach ($messageset as $message) {
            $id = $message->convo_signature;
            if (!isset($messages[$id]) || empty($message->timeread)) {
                $messages[$id] = $message;
            }
        }
        $messageset->close();

        // We need to pull out the list of other users that are part of each of these conversations. This
        // needs to be done in a separate query to avoid doing a join on the messages tables and the user
        // tables because on large sites these tables are massive which results in extremely slow
        // performance (typically due to join buffer exhaustion).
        $otheruserids = array_map(function($message) use ($userid) {
            return ($message->useridfrom == $userid) ? $message->useridto : $message->useridfrom;
        }, array_values($messages));

        list($useridsql, $usersparams) = $DB->get_in_or_equal($otheruserids);
        $userfields = \user_picture::fields('', array('lastaccess'));
        $userssql = "SELECT $userfields
                     FROM {user}
                     WHERE id $useridsql";
        $otherusers = $DB->get_records_sql($userssql, $usersparams);

        // Similar to the above use case, we need to pull the contact information and again this has
        // specifically been separated into another query to avoid having to do joins on the message
        // tables.
        $contactssql = "SELECT contactid, blocked
                        FROM {message_contacts}
                        WHERE userid = ? AND contactid $useridsql";
        $contacts = $DB->get_records_sql($contactssql, array_merge([$userid], $otheruserids));

        // Finally, let's get the unread messages count for this user so that we can add them
        // to the conversation.
        $unreadcountssql = 'SELECT useridfrom, count(*) as count
                            FROM {message}
                            WHERE useridto = ?
                                AND timeusertodeleted = 0
                                AND notification = 0
                            GROUP BY useridfrom';
        $unreadcounts = $DB->get_records_sql($unreadcountssql, [$userid]);

        // We can close off the transaction now.
        $DB->commit_delegated_transaction($transaction);

        // Now we need to order the messages back into the same order of the conversations.
        $orderedconvosigs = array_keys($conversationrecords);
        usort($messages, function($a, $b) use ($orderedconvosigs) {
            $aindex = array_search($a->convo_signature, $orderedconvosigs);
            $bindex = array_search($b->convo_signature, $orderedconvosigs);

            return ($aindex < $bindex) ? -1 : 1;
        });

        // Preload the contexts before we construct the conversation to prevent the
        // create_contact helper from needing to query the DB so often.
        $ctxselect = \context_helper::get_preload_record_columns_sql('ctx');
        $sql = "SELECT {$ctxselect}
                FROM {context} ctx
                WHERE ctx.contextlevel = ? AND
                ctx.instanceid {$useridsql}";
        $contexts = [];
        $contexts = $DB->get_records_sql($sql, array_merge([CONTEXT_USER], $usersparams));
        foreach ($contexts as $context) {
            \context_helper::preload_from_record($context);
        }

        $userproperties = explode(',', $userfields);
        $arrconversations = array();
        // The last step now is to bring all of the data we've gathered together to create
        // a conversation (or contact, as the API is named...).
        foreach ($messages as $message) {
            $conversation = new \stdClass();
            $otheruserid = ($message->useridfrom == $userid) ? $message->useridto : $message->useridfrom;
            $otheruser = isset($otherusers[$otheruserid]) ? $otherusers[$otheruserid] : null;
            $contact = isset($contacts[$otheruserid]) ? $contacts[$otheruserid] : null;

            // Add the other user's information to the conversation, if we have one.
            foreach ($userproperties as $prop) {
                $conversation->$prop = ($otheruser) ? $otheruser->$prop : null;
            }

            // Add the contact's information, if we have one.
            $conversation->blocked = ($contact) ? $contact->blocked : null;

            // Add the message information.
            $conversation->messageid = $message->id;
            $conversation->smallmessage = $message->smallmessage;
            $conversation->useridfrom = $message->useridfrom;

            // Only consider it unread if $user has unread messages.
            if (isset($unreadcounts[$otheruserid])) {
                $conversation->isread = false;
                $conversation->unreadcount = $unreadcounts[$otheruserid]->count;
            } else {
                $conversation->isread = true;
            }

            $arrconversations[$otheruserid] = helper::create_contact($conversation);
        }

        return $arrconversations;
    }

    /**
     * Returns the contacts to display in the contacts area.
     *
     * @param int $userid The user id
     * @param int $limitfrom
     * @param int $limitnum
     * @return array
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_ISSET
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (AST_CLOSURE_USES
                        (AST_CLOSURE_VAR))
                    (
                        (AST_RETURN
                            (AST_CONDITIONAL
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL)))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (AST_RETURN
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))
                            (AST_UNARY_OP
                                (SCALAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (NULL)))
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_CONST)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONDITIONAL
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (NULL))
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_ISSET
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_EMPTY
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (AST_CLOSURE_USES
                        (AST_CLOSURE_VAR))
                    (
                        (AST_RETURN
                            (AST_CONDITIONAL
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR))))))
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL)))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))
                    (AST_RETURN
                        (AST_CONDITIONAL
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))
                            (AST_UNARY_OP
                                (SCALAR))
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (NULL)))
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (AST_CONST)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CONDITIONAL
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))