	public static function paths($path = null) {
		if (empty($path)) {
			return static::$_paths;
		}
		if (is_string($path)) {
			return isset(static::$_paths[$path]) ? static::$_paths[$path] : null;
		}
		static::$_paths = array_merge(static::$_paths, (array) $path);
	}

	/**
	 * Adds a class library from which files can be loaded.
	 *
	 * The `add()` method registers a named library configuration to your application, and is used
	 * to allow the framework to auto-load classes on an as-needed basis.
	 *
	 * ### Adding libraries to your application
	 *
	 * In Lithium, libraries represent the broadest unit of class organization in an application,
	 * and _everything_ is a library; this includes your application, and the Lithium framework
	 * itself. Libraries can also be other frameworks, like Solar, Zend Framework or PEAR, or
	 * Lithium plugins, which are simply libraries that follow the same organizational standards
	 * as Lithium applications.
	 *
	 * By convention, libraries are placed in the `libraries` directory inside your application, or
	 * the root `libraries` directory at the top level of the default distribution (i.e. the one
	 * that contains the `lithium` directory), however, you can change this on a case-by-case basis
	 * using the `'path'` key to specify an absolute path to the library's directory.
	 *
	 * @param string $name Library name, i.e. `'app'`, `'lithium'`, `'pear'` or `'solar'`.
	 * @param array $config Specifies where the library is in the filesystem, and how classes
	 *        should be loaded from it.  Allowed keys are:
	 *        - `'bootstrap'`: A file path (relative to `'path'`) to a bootstrap script that should
	 *          be run when the library is added.
	 *        - `'defer'`: If true, indicates that, when locating classes, this library should
	 *          defer to other libraries in order of preference.
	 *        - `'includePath'`: If `true`, appends the absolutely-resolved value of `'path'` to
	 *          the PHP include path.
	 *        - `'loader'`: An auto-loader method associated with the library, if any.
	 *        - `'path'`: The directory containing the library.
	 *        - `'prefix'`: The class prefix this library uses, i.e. `'lithium\'`, `'Zend_'` or
	 *          `'Solar_'`.
	 *        - `'suffix'`: Gets appended to the end of the file name. For example, most libraries
	 *          end classes in `'.php'`, but some use `'.class.php'`, or `'.inc.php'`.
	 *        - `'transform'`: Defines a custom way to transform a class name into its
	 *          corresponding file path.  Accepts either an array of two strings which are
	 *          interpreted as the pattern and replacement for a regex, or an anonymous function,
	 *          which receives the class name as a parameter, and returns a file path as output.
	 * @return array Returns the resulting set of options created for this library.
	 */
||||||||	public static function paths($path = null) {
		if (empty($path)) {
			return static::$_paths;
		}
		if (is_string($path)) {
			return isset(static::$_paths[$path]) ? static::$_paths[$path] : null;
		}
		static::$_paths = array_filter(array_merge(static::$_paths, (array) $path));
	}

	/**
	 * Adds a class library from which files can be loaded.
	 *
	 * The `add()` method registers a named library configuration to your application, and is used
	 * to allow the framework to auto-load classes on an as-needed basis.
	 *
	 * ### Adding libraries to your application
	 *
	 * In Lithium, libraries represent the broadest unit of class organization in an application,
	 * and _everything_ is a library; this includes your application, and the Lithium framework
	 * itself. Libraries can also be other frameworks, like Solar, Zend Framework or PEAR, or
	 * Lithium plugins, which are simply libraries that follow the same organizational standards
	 * as Lithium applications.
	 *
	 * By convention, libraries are placed in the `libraries` directory inside your application, or
	 * the root `libraries` directory at the top level of the default distribution (i.e. the one
	 * that contains the `lithium` directory), however, you can change this on a case-by-case basis
	 * using the `'path'` key to specify an absolute path to the library's directory.
	 *
	 * @param string $name Library name, i.e. `'app'`, `'lithium'`, `'pear'` or `'solar'`.
	 * @param array $config Specifies where the library is in the filesystem, and how classes
	 *        should be loaded from it.  Allowed keys are:
	 *        - `'bootstrap'`: A file path (relative to `'path'`) to a bootstrap script that should
	 *          be run when the library is added.
	 *        - `'defer'`: If true, indicates that, when locating classes, this library should
	 *          defer to other libraries in order of preference.
	 *        - `'includePath'`: If `true`, appends the absolutely-resolved value of `'path'` to
	 *          the PHP include path.
	 *        - `'loader'`: An auto-loader method associated with the library, if any.
	 *        - `'path'`: The directory containing the library.
	 *        - `'prefix'`: The class prefix this library uses, i.e. `'lithium\'`, `'Zend_'` or
	 *          `'Solar_'`.
	 *        - `'suffix'`: Gets appended to the end of the file name. For example, most libraries
	 *          end classes in `'.php'`, but some use `'.class.php'`, or `'.inc.php'`.
	 *        - `'transform'`: Defines a custom way to transform a class name into its
	 *          corresponding file path.  Accepts either an array of two strings which are
	 *          interpreted as the pattern and replacement for a regex, or an anonymous function,
	 *          which receives the class name as a parameter, and returns a file path as output.
	 * @return array Returns the resulting set of options created for this library.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR)))
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (AST_VAR))
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CALL
            (
                (AST_STATIC_PROP)
                (AST_CAST
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_ISSET
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR)))
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (AST_VAR))
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_STATIC_PROP)
                        (AST_CAST
                            (AST_VAR))))))))