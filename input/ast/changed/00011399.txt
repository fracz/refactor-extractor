    public function installProject(IOInterface $io, $packageName, $directory = null, $packageVersion = null, $preferSource = false, $installDevPackages = false, $repositoryUrl = null, $disableCustomInstallers = false, $noScripts = false)
    {
        $dm = $this->createDownloadManager($io);
        if ($preferSource) {
            $dm->setPreferSource(true);
        }

        $config = Factory::createConfig();
        if (null === $repositoryUrl) {
            $sourceRepo = new CompositeRepository(Factory::createDefaultRepositories($io, $config));
        } elseif ("json" === pathinfo($repositoryUrl, PATHINFO_EXTENSION)) {
            $sourceRepo = new FilesystemRepository(new JsonFile($repositoryUrl, new RemoteFilesystem($io)));
        } elseif (0 === strpos($repositoryUrl, 'http')) {
            $sourceRepo = new ComposerRepository(array('url' => $repositoryUrl), $io, $config);
        } else {
            throw new \InvalidArgumentException("Invalid repository url given. Has to be a .json file or an http url.");
        }

        $candidates = array();
        $name = strtolower($packageName);

        if ($packageVersion === null) {
            $sourceRepo->filterPackages(function ($package) use (&$candidates, $name) {
                if ($package->getName() === $name) {
                    $candidates[] = $package;
                }
            });
        } else {
            $parser = new VersionParser();
            $version = $parser->normalize($packageVersion);
            $sourceRepo->filterPackages(function ($package) use (&$candidates, $name, $version) {
                if ($package->getName() === $name && $version === $package->getVersion()) {
                    $candidates[] = $package;

                    return false;
                }
            });
        }

        if (!$candidates) {
            throw new \InvalidArgumentException("Could not find package $packageName" . ($packageVersion ? " with version $packageVersion." : ''));
        }

        if (null === $directory) {
            $parts = explode("/", $packageName, 2);
            $directory = getcwd() . DIRECTORY_SEPARATOR . array_pop($parts);
        }

        // select highest version if we have many
        $package = $candidates[0];
        foreach ($candidates as $candidate) {
            if (version_compare($package->getVersion(), $candidate->getVersion(), '<')) {
                $package = $candidate;
            }
        }

        $io->write('<info>Installing ' . $package->getName() . ' (' . VersionParser::formatVersion($package, false) . ')</info>', true);

        if ($disableCustomInstallers) {
            $io->write('<info>Custom installers have been disabled.</info>');
        }

        if (0 === strpos($package->getPrettyVersion(), 'dev-') && in_array($package->getSourceType(), array('git', 'hg'))) {
            $package->setSourceReference(substr($package->getPrettyVersion(), 4));
        }

        $projectInstaller = new ProjectInstaller($directory, $dm);
        $projectInstaller->install(new InstalledFilesystemRepository(new JsonFile('php://memory')), $package);
        if ($package->getRepository() instanceof NotifiableRepositoryInterface) {
            $package->getRepository()->notifyInstall($package);
        }

        $io->write('<info>Created project in ' . $directory . '</info>', true);
        chdir($directory);

        putenv('COMPOSER_ROOT_VERSION='.$package->getPrettyVersion());

        $composer = Factory::create($io);
        $installer = Installer::create($io, $composer);

        $installer->setPreferSource($preferSource)
            ->setDevMode($installDevPackages)
            ->setRunScripts( ! $noScripts);

        if ($disableCustomInstallers) {
            $installer->disableCustomInstallers();
        }

        $installer->run();
    }

||||||||    public function installProject(IOInterface $io, $packageName, $directory = null, $packageVersion = null, $preferSource = false, $installDevPackages = false, $repositoryUrl = null, $disableCustomInstallers = false, $noScripts = false)
    {
        $dm = $this->createDownloadManager($io);
        if ($preferSource) {
            $dm->setPreferSource(true);
        }

        $config = Factory::createConfig();
        if (null === $repositoryUrl) {
            $sourceRepo = new CompositeRepository(Factory::createDefaultRepositories($io, $config));
        } elseif ("json" === pathinfo($repositoryUrl, PATHINFO_EXTENSION)) {
            $sourceRepo = new FilesystemRepository(new JsonFile($repositoryUrl, new RemoteFilesystem($io)));
        } elseif (0 === strpos($repositoryUrl, 'http')) {
            $sourceRepo = new ComposerRepository(array('url' => $repositoryUrl), $io, $config);
        } else {
            throw new \InvalidArgumentException("Invalid repository url given. Has to be a .json file or an http url.");
        }

        $candidates = array();
        $name = strtolower($packageName);

        if ($packageVersion === null) {
            $sourceRepo->filterPackages(function ($package) use (&$candidates, $name) {
                if ($package->getName() === $name) {
                    $candidates[] = $package;
                }
            });
        } else {
            $parser = new VersionParser();
            $version = $parser->normalize($packageVersion);
            $sourceRepo->filterPackages(function ($package) use (&$candidates, $name, $version) {
                if ($package->getName() === $name && $version === $package->getVersion()) {
                    $candidates[] = $package;

                    return false;
                }
            });
        }

        if (!$candidates) {
            throw new \InvalidArgumentException("Could not find package $packageName" . ($packageVersion ? " with version $packageVersion." : ''));
        }

        if (null === $directory) {
            $parts = explode("/", $packageName, 2);
            $directory = getcwd() . DIRECTORY_SEPARATOR . array_pop($parts);
        }

        // select highest version if we have many
        $package = $candidates[0];
        foreach ($candidates as $candidate) {
            if (version_compare($package->getVersion(), $candidate->getVersion(), '<')) {
                $package = $candidate;
            }
        }
        unset($candidates);

        $io->write('<info>Installing ' . $package->getName() . ' (' . VersionParser::formatVersion($package, false) . ')</info>', true);

        if ($disableCustomInstallers) {
            $io->write('<info>Custom installers have been disabled.</info>');
        }

        if (0 === strpos($package->getPrettyVersion(), 'dev-') && in_array($package->getSourceType(), array('git', 'hg'))) {
            $package->setSourceReference(substr($package->getPrettyVersion(), 4));
        }

        $projectInstaller = new ProjectInstaller($directory, $dm);
        $projectInstaller->install(new InstalledFilesystemRepository(new JsonFile('php://memory')), $package);
        if ($package->getRepository() instanceof NotifiableRepositoryInterface) {
            $package->getRepository()->notifyInstall($package);
        }

        $io->write('<info>Created project in ' . $directory . '</info>', true);
        chdir($directory);

        putenv('COMPOSER_ROOT_VERSION='.$package->getPrettyVersion());

        // clean up memory
        unset($dm, $config, $projectInstaller, $sourceRepo, $package);

        // install dependencies of the created project
        $composer = Factory::create($io);
        $installer = Installer::create($io, $composer);

        $installer->setPreferSource($preferSource)
            ->setDevMode($installDevPackages)
            ->setRunScripts( ! $noScripts);

        if ($disableCustomInstallers) {
            $installer->disableCustomInstallers();
        }

        $installer->run();
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (AST_VAR))))))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLOSURE
                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                            (AST_CLOSURE_USES
                                (AST_CLOSURE_VAR)
                                (AST_CLOSURE_VAR))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_VAR))
                                        (
                                            (AST_ASSIGN
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (NULL))
                                                (AST_VAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLOSURE
                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                            (AST_CLOSURE_USES
                                (AST_CLOSURE_VAR)
                                (AST_CLOSURE_VAR)
                                (AST_CLOSURE_VAR))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_VAR))
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))
                                        (
                                            (AST_ASSIGN
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (NULL))
                                                (AST_VAR))
                                            (AST_RETURN
                                                (AST_CONST))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))
                                (AST_CONDITIONAL
                                    (AST_VAR)
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL)
                            (AST_CONST))
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_CONST))))
                (SCALAR))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_NEW
                        (
                            (SCALAR)))))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_CONST)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (
                (AST_VAR)))
        (
            (AST_UNARY_OP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_NEW
                                (
                                    (AST_VAR)
                                    (AST_NEW
                                        (
                                            (AST_VAR))))))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLOSURE
                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                            (AST_CLOSURE_USES
                                (AST_CLOSURE_VAR)
                                (AST_CLOSURE_VAR))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_VAR))
                                        (
                                            (AST_ASSIGN
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (NULL))
                                                (AST_VAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CLOSURE
                            (NO_PARAM_TYPENO_PARAM_DEFAULT)
                            (AST_CLOSURE_USES
                                (AST_CLOSURE_VAR)
                                (AST_CLOSURE_VAR)
                                (AST_CLOSURE_VAR))
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_VAR))
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))
                                        (
                                            (AST_ASSIGN
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (NULL))
                                                (AST_VAR))
                                            (AST_RETURN
                                                (AST_CONST))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))
                                (AST_CONDITIONAL
                                    (AST_VAR)
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL)
                            (AST_CONST))
                        (AST_CALL
                            (
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_UNSET
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (SCALAR))
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_CONST))))
                (SCALAR))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR))))
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_NEW
                        (
                            (SCALAR)))))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_CONST)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (
                (AST_VAR)))
        (
            (AST_UNARY_OP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)))