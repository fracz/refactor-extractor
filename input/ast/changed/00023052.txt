    function invoke() {
        parent::invoke();

        $result = true;

    /// Set own core attributes
        $this->does_generate = ACTION_GENERATE_HTML;

    /// These are always here
        global $CFG, $XMLDB;

    /// Do the job, setting result as needed
    /// Get the dir containing the file
        $dirpath = required_param('dir', PARAM_PATH);
        $dirpath = $CFG->dirroot . stripslashes_safe($dirpath);

    /// Get the correct dirs
        if (!empty($XMLDB->dbdirs)) {
            $dbdir =& $XMLDB->dbdirs[$dirpath];
        } else {
            return false;
        }
        if (!empty($XMLDB->editeddirs)) {
            $editeddir =& $XMLDB->editeddirs[$dirpath];
            $structure =& $editeddir->xml_file->getStructure();
        }
    /// ADD YOUR CODE HERE

        $tableparam = required_param('table', PARAM_PATH);

        $table =& $structure->getTable($tableparam);
        $fields = $table->getFields();
        $field = reset($fields);
        $defaultfieldkeyindex = null;
        if ($field) {
            $defaultfieldkeyindex = $field->getName();
        }

    /// Get parameters
        $commandparam = optional_param('command', 'add_field', PARAM_PATH);
        $fieldkeyindexparam = optional_param('fieldkeyindex', $defaultfieldkeyindex, PARAM_PATH);

    /// The back to edit xml button
        $b = ' <p align="center" class="buttons">';
        $b .= '<a href="index.php?action=edit_xml_file&amp;dir=' . urlencode(str_replace($CFG->dirroot, '', $dirpath)) . '">[' . $this->str['back'] . ']</a>';
        $b .= '</p>';
        $o = $b;

    /// Calculate the popup of commands
        $commands = array('add_field',
                         'drop_field',
                         'rename_field');
        foreach ($commands as $command) {
            $popcommands[$command] = str_replace('_', ' ', $command);
        }
    /// Calculate the popup of tables
        foreach ($fields as $field) {
            $poptables[$field->getName()] = $field->getName();
        }
    /// Now build the form
        $o.= '<form id="form" action="index.php" method="post">';
        $o.= '    <input type="hidden" name ="dir" value="' . str_replace($CFG->dirroot, '', $dirpath) . '" />';
        $o.= '    <input type="hidden" name ="action" value="view_table_php" />';
        $o.= '    <table id="formelements" align="center" cellpadding="5">';
        $o.= '      <tr><td><label for="action" accesskey="c">' . $this->str['selectaction'] .' </label>' . choose_from_menu($popcommands, 'command', $commandparam, '', '', 0, true) . '&nbsp;<label for="table" accesskey="t">' . $this->str['selectfieldkeyindex'] . ' </label>' .choose_from_menu($poptables, 'table', $tableparam, '', '', 0, true) . '</td></tr>';
        $o.= '      <tr><td colspan="2" align="center"><input type="submit" value="' .$this->str['view'] . '" /></td></tr>';
        $o.= '    </table>';
        $o.= '</form>';
        $o.= '    <table id="phpcode" align="center" cellpadding="5">';
        $o.= '      <tr><td><textarea cols="80" rows="32">';
    /// Based on current params, call the needed function
        switch ($commandparam) {
            case 'create_table':
                $o.= s($this->create_table_php($structure, $tableparam));
                break;
            case 'drop_table':
                $o.= s($this->drop_table_php($structure, $tableparam));
                break;
            case 'rename_table':
                $o.= s($this->rename_table_php($structure, $tableparam));
                break;
        }
        $o.= '</textarea></td></tr>';
        $o.= '    </table>';

        $this->output = $o;

    /// Launch postaction if exists (leave this here!)
        if ($this->getPostAction() && $result) {
            return $this->launch($this->getPostAction());
        }

    /// Return ok if arrived here
        return $result;
    }

    /**
     * This function will generate all the PHP code needed to
     * create one table using XMLDB objects and functions
     *
     * @param XMLDBStructure structure object containing all the info
     * @param string table table code to be created
     * @return string PHP code to be used to create the table
     */
||||||||    function invoke() {
        parent::invoke();

        $result = true;

    /// Set own core attributes
        $this->does_generate = ACTION_GENERATE_HTML;

    /// These are always here
        global $CFG, $XMLDB;

    /// Do the job, setting result as needed
    /// Get the dir containing the file
        $dirpath = required_param('dir', PARAM_PATH);
        $dirpath = $CFG->dirroot . stripslashes_safe($dirpath);

    /// Get the correct dirs
        if (!empty($XMLDB->dbdirs)) {
            $dbdir =& $XMLDB->dbdirs[$dirpath];
        } else {
            return false;
        }
        if (!empty($XMLDB->editeddirs)) {
            $editeddir =& $XMLDB->editeddirs[$dirpath];
            $structure =& $editeddir->xml_file->getStructure();
        }
    /// ADD YOUR CODE HERE

        $tableparam = required_param('table', PARAM_PATH);

        $table =& $structure->getTable($tableparam);
        $fields = $table->getFields();
        $field = reset($fields);
        $defaultfieldkeyindex = null;
        if ($field) {
            $defaultfieldkeyindex = 'f#' . $field->getName();
        }
        $keys = $table->getKeys();
        $indexes = $table->getIndexes();

    /// Get parameters
        $commandparam = optional_param('command', 'add_field', PARAM_PATH);
        $fieldkeyindexparam = optional_param('fieldkeyindex', $defaultfieldkeyindex, PARAM_PATH);
        $fieldkeyindexparam = preg_replace('/[fki]#/i', '', $fieldkeyindexparam); ///Strip the initials

    /// The back to edit xml button
        $b = ' <p align="center" class="buttons">';
        $b .= '<a href="index.php?action=edit_table&amp;dir=' . urlencode(str_replace($CFG->dirroot, '', $dirpath)) . '&amp;table=' . $tableparam . '">[' . $this->str['back'] . ']</a>';
        $b .= '</p>';
        $o = $b;

    /// The table currently being edited
        $o .= '<h3 class="main">' . $this->str['table'] . ': ' . s($tableparam) . '</h3>';

    /// Calculate the popup of commands
        $commands = array('add_field',
                         'drop_field',
                         'rename_field');
        foreach ($commands as $command) {
            $popcommands[$command] = str_replace('_', ' ', $command);
        }
    /// Calculate the popup of fields/keys/indexes
        $optionspacer = '&nbsp;&nbsp;&nbsp;';
        if ($fields) {
            $poptables['fieldshead'] = 'Fields';
            foreach ($fields as $field) {
                $poptables['f#' . $field->getName()] = $optionspacer . $field->getName();
            }
        }
        if ($keys) {
            $poptables['keyshead'] = 'Keys';
            foreach ($keys as $key) {
                $poptables['k#' . $key->getName()] = $optionspacer . $key->getName();
            }
        }
        if ($indexes) {
            $poptables['indexeshead'] = 'Indexes';
            foreach ($indexes as $index) {
                $poptables['i#' . $index->getName()] = $optionspacer . $index->getName();
            }
        }

    /// Now build the form
        $o.= '<form id="form" action="index.php" method="post">';
        $o.= '    <input type="hidden" name ="dir" value="' . str_replace($CFG->dirroot, '', $dirpath) . '" />';
        $o.= '    <input type="hidden" name ="table" value="' . s($tableparam) . '" />';
        $o.= '    <input type="hidden" name ="action" value="view_table_php" />';
        $o.= '    <table id="formelements" align="center" cellpadding="5">';
        $o.= '      <tr><td><label for="action" accesskey="c">' . $this->str['selectaction'] .' </label>' . choose_from_menu($popcommands, 'command', $commandparam, '', '', 0, true) . '&nbsp;<label for="fieldkeyindex" accesskey="f">' . $this->str['selectfieldkeyindex'] . ' </label>' .choose_from_menu($poptables, 'fieldkeyindex', 'f#' . $fieldkeyindexparam, '', '', 0, true) . '</td></tr>';
        $o.= '      <tr><td colspan="2" align="center"><input type="submit" value="' .$this->str['view'] . '" /></td></tr>';
        $o.= '    </table>';
        $o.= '</form>';

        $o.= '    <table id="phpcode" align="center" cellpadding="5">';
        $o.= '      <tr><td><textarea cols="80" rows="32">';
    /// Check we have selected some field/key/index from the popup
        if ($fieldkeyindexparam == 'fieldshead' || $fieldkeyindexparam == 'keyshead' || $fieldkeyindexparam == 'indexeshead') {
            $o.= s($this->str['selectonefieldkeyindex']);
         } else {
        /// Based on current params, call the needed function
            switch ($commandparam) {
                case 'create_table':
                    $o.= s($this->create_table_php($structure, $tableparam));
                    break;
                case 'drop_table':
                    $o.= s($this->drop_table_php($structure, $tableparam));
                    break;
                case 'rename_table':
                    $o.= s($this->rename_table_php($structure, $tableparam));
                    break;
            }
        }
        $o.= '</textarea></td></tr>';
        $o.= '    </table>';

        $this->output = $o;

    /// Launch postaction if exists (leave this here!)
        if ($this->getPostAction() && $result) {
            return $this->launch($this->getPostAction());
        }

    /// Return ok if arrived here
        return $result;
    }

    /**
     * This function will generate all the PHP code needed to
     * create one table using XMLDB objects and functions
     *
     * @param XMLDBStructure structure object containing all the info
     * @param string table table code to be created
     * @return string PHP code to be used to create the table
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)
                                        (AST_VAR))))))
                    (SCALAR))
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_CONST))))
                            (SCALAR))
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST))))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_ASSIGN_OP
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_BREAK
                        (NULL))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_ASSIGN_REF
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR)
                                                (AST_VAR))))))
                            (SCALAR))
                        (AST_VAR))
                    (SCALAR))
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR)
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_CONST))))
                            (SCALAR))
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST))))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (SCALAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_SWITCH
                    (AST_VAR)
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR))))))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR))))))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_ASSIGN_OP
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR))))))
                                (AST_BREAK
                                    (NULL)))))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))