    private function _getDataCellForNonNumericColumns(
        $column, $class, $meta, $map, $_url_params, $condition_field,
        $transformation_plugin, $default_function, $transform_options,
        $is_field_truncated, $analyzed_sql, &$dt_result, $col_index
    ) {
        $is_analyse = $this->__get('is_analyse');
        $field_flags = $GLOBALS['dbi']->fieldFlags($dt_result, $col_index);

        $bIsText = gettype($transformation_plugin) === 'object'
            && strpos($transformation_plugin->getMIMEtype(), 'Text')
            === false;

        // disable inline grid editing
        // if binary fields are protected
        // or transformation plugin is of non text type
        // such as image
        if ((stristr($field_flags, self::BINARY_FIELD)
            && ($GLOBALS['cfg']['ProtectBinary'] === 'all'
            || ($GLOBALS['cfg']['ProtectBinary'] === 'noblob'
            && !stristr($meta->type, self::BLOB_FIELD))
            || ($GLOBALS['cfg']['ProtectBinary'] === 'blob'
            && stristr($meta->type, self::BLOB_FIELD))))
            || $bIsText
        ) {
            $class = str_replace('grid_edit', '', $class);
        }

        if (! isset($column) || is_null($column)) {
            $cell = $this->_buildNullDisplay($class, $condition_field, $meta);
            return $cell;
        }

        if ($column == '') {
            $cell = $this->_buildEmptyDisplay($class, $condition_field, $meta);
            return $cell;
        }

        // Cut all fields to $GLOBALS['cfg']['LimitChars']
        // (unless it's a link-type transformation or binary)
        if (!(gettype($transformation_plugin) === "object"
            && strpos($transformation_plugin->getName(), 'Link') !== false)
            && !stristr($field_flags, self::BINARY_FIELD)
        ) {
            list(
                $is_field_truncated,
                $column,
                $original_length
            ) = $this->_getPartialText($column);
        }

        $formatted = false;
        if (isset($meta->_type) && $meta->_type === MYSQLI_TYPE_BIT) {

            $column = PMA_Util::printableBitValue(
                $column, $meta->length
            );

            // some results of PROCEDURE ANALYSE() are reported as
            // being BINARY but they are quite readable,
            // so don't treat them as BINARY
        } elseif (stristr($field_flags, self::BINARY_FIELD)
            && !(isset($is_analyse) && $is_analyse)
        ) {
            // we show the BINARY or BLOB message and field's size
            // (or maybe use a transformation)
            $binary_or_blob = self::BLOB_FIELD;
            if ($meta->type === self::STRING_FIELD) {
                $binary_or_blob = self::BINARY_FIELD;
            }
            $column = $this->_handleNonPrintableContents(
                $binary_or_blob, $column, $transformation_plugin,
                $transform_options, $default_function,
                $meta, $_url_params, $is_field_truncated
            );
            $class = $this->_addClass(
                $class, $condition_field, $meta, '',
                $is_field_truncated, $transformation_plugin, $default_function
            );
            $result = strip_tags($column);
            // disable inline grid editing
            // if binary or blob data is not shown
            if (stristr($result, $binary_or_blob)) {
                $class = str_replace('grid_edit', '', $class);
            }
            $formatted = true;
        }

        if ($formatted) {
            $cell = $this->_buildValueDisplay(
                $class, $condition_field, $column
            );
            return $cell;
        }

        // transform functions may enable no-wrapping:
        $function_nowrap = 'applyTransformationNoWrap';

        $bool_nowrap = (($default_function != $transformation_plugin)
            && function_exists($transformation_plugin->$function_nowrap()))
            ? $transformation_plugin->$function_nowrap($transform_options)
            : false;

        // do not wrap if date field type
        $nowrap = (preg_match('@DATE|TIME@i', $meta->type)
            || $bool_nowrap) ? ' nowrap' : '';

        $where_comparison = ' = \''
            . PMA_Util::sqlAddSlashes($column)
            . '\'';

        $cell = $this->_getRowData(
            $class, $condition_field,
            $analyzed_sql, $meta, $map, $column,
            $transformation_plugin, $default_function, $nowrap,
            $where_comparison, $transform_options,
            $is_field_truncated, $original_length
        );

        return $cell;

    } // end of the '_getDataCellForNonNumericColumns()' function

    /**
     * Get checkboxes for multiple row data operations
     *
     * @param string $dir          _left / _right
     * @param array  $displayParts which elements to display
     *
     * @return String $checkBoxes_html html content
     *
     * @access private
     */
||||||||    private function _getDataCellForNonNumericColumns(
        $column, $class, $meta, $map, $_url_params, $condition_field,
        $transformation_plugin, $default_function, $transform_options,
        $is_field_truncated, $analyzed_sql, &$dt_result, $col_index
    ) {
        $original_length = 0;

        $is_analyse = $this->__get('is_analyse');
        $field_flags = $GLOBALS['dbi']->fieldFlags($dt_result, $col_index);

        $bIsText = gettype($transformation_plugin) === 'object'
            && strpos($transformation_plugin->getMIMEtype(), 'Text')
            === false;

        // disable inline grid editing
        // if binary fields are protected
        // or transformation plugin is of non text type
        // such as image
        if ((stristr($field_flags, self::BINARY_FIELD)
            && ($GLOBALS['cfg']['ProtectBinary'] === 'all'
            || ($GLOBALS['cfg']['ProtectBinary'] === 'noblob'
            && !stristr($meta->type, self::BLOB_FIELD))
            || ($GLOBALS['cfg']['ProtectBinary'] === 'blob'
            && stristr($meta->type, self::BLOB_FIELD))))
            || $bIsText
        ) {
            $class = str_replace('grid_edit', '', $class);
        }

        if (! isset($column) || is_null($column)) {
            $cell = $this->_buildNullDisplay($class, $condition_field, $meta);
            return $cell;
        }

        if ($column == '') {
            $cell = $this->_buildEmptyDisplay($class, $condition_field, $meta);
            return $cell;
        }

        // Cut all fields to $GLOBALS['cfg']['LimitChars']
        // (unless it's a link-type transformation or binary)
        if (!(gettype($transformation_plugin) === "object"
            && strpos($transformation_plugin->getName(), 'Link') !== false)
            && !stristr($field_flags, self::BINARY_FIELD)
        ) {
            list(
                $is_field_truncated,
                $column,
                $original_length
            ) = $this->_getPartialText($column);
        }

        $formatted = false;
        if (isset($meta->_type) && $meta->_type === MYSQLI_TYPE_BIT) {

            $column = PMA_Util::printableBitValue(
                $column, $meta->length
            );

            // some results of PROCEDURE ANALYSE() are reported as
            // being BINARY but they are quite readable,
            // so don't treat them as BINARY
        } elseif (stristr($field_flags, self::BINARY_FIELD)
            && !(isset($is_analyse) && $is_analyse)
        ) {
            // we show the BINARY or BLOB message and field's size
            // (or maybe use a transformation)
            $binary_or_blob = self::BLOB_FIELD;
            if ($meta->type === self::STRING_FIELD) {
                $binary_or_blob = self::BINARY_FIELD;
            }
            $column = $this->_handleNonPrintableContents(
                $binary_or_blob, $column, $transformation_plugin,
                $transform_options, $default_function,
                $meta, $_url_params, $is_field_truncated
            );
            $class = $this->_addClass(
                $class, $condition_field, $meta, '',
                $is_field_truncated, $transformation_plugin, $default_function
            );
            $result = strip_tags($column);
            // disable inline grid editing
            // if binary or blob data is not shown
            if (stristr($result, $binary_or_blob)) {
                $class = str_replace('grid_edit', '', $class);
            }
            $formatted = true;
        }

        if ($formatted) {
            $cell = $this->_buildValueDisplay(
                $class, $condition_field, $column
            );
            return $cell;
        }

        // transform functions may enable no-wrapping:
        $function_nowrap = 'applyTransformationNoWrap';

        $bool_nowrap = (($default_function != $transformation_plugin)
            && function_exists($transformation_plugin->$function_nowrap()))
            ? $transformation_plugin->$function_nowrap($transform_options)
            : false;

        // do not wrap if date field type
        $nowrap = (preg_match('@DATE|TIME@i', $meta->type)
            || $bool_nowrap) ? ' nowrap' : '';

        $where_comparison = ' = \''
            . PMA_Util::sqlAddSlashes($column)
            . '\'';

        $cell = $this->_getRowData(
            $class, $condition_field,
            $analyzed_sql, $meta, $map, $column,
            $transformation_plugin, $default_function, $nowrap,
            $where_comparison, $transform_options,
            $is_field_truncated, $original_length
        );

        return $cell;

    } // end of the '_getDataCellForNonNumericColumns()' function

    /**
     * Get checkboxes for multiple row data operations
     *
     * @param string $dir          _left / _right
     * @param array  $displayParts which elements to display
     *
     * @return String $checkBoxes_html html content
     *
     * @access private
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (SCALAR))
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CLASS_CONST
                                                (SCALAR)))))))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CLASS_CONST
                                        (SCALAR)))))))
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_ISSET
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_CONST))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR))))))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_VAR))
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_VAR))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR)))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))
                                    (SCALAR))
                                (AST_UNARY_OP
                                    (AST_CALL
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CLASS_CONST
                                                (SCALAR)))))))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CLASS_CONST
                                        (SCALAR)))))))
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_ISSET
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_CONST))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR))))))
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_VAR))
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CLASS_CONST
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_VAR))
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))