	public function save($modelName, $id = false)
	{
		$config = App::make('itemconfig');
		$model = ModelHelper::getModel($id, false, false, true);
		$editFields = Field::getEditFields($config, false);

		//fetch the proper model so we don't have to deal with any extra attributes
		if ($model->exists)
		{
			$model = $model::find($id);
		}

		//fill the model with our input
		ModelHelper::fillModel($model);

		$rules = isset($model::$rules) ? $model::$rules : array();

		//iterate over the edit fields to see if any are setters (and therefore need their values unset)
		foreach ($editFields['objectFields'] as $field => $info)
		{
			if (($info->setter && $info->type !== 'password') || ($info->type === 'password' && empty($model->{$field})))
			{
				$model->__unset($field);
			}
		}

		//if the model exists, this is an update
		if ($model->exists)
		{
			//check if the user has permission to update
			if (!$config->actionPermissions['update'])
			{
				return Response::json(array(
					'success' => false,
					'errors' => 'There was an error updating this item. Please reload the page and try again.',
				));
			}

			//so only include dirty fields
			$data = $model->getDirty();

			//and validate the fields that are being updated
			$rules = array_intersect_key($rules, $data);
		}
		else
		{
			//check if the user has permission to create
			if (!$config->actionPermissions['create'])
			{
				return Response::json(array(
					'success' => false,
					'errors' => 'There was an error creating this item. Please reload the page and try again.',
				));
			}

			//otherwise validate everything
			$data = $model->getAttributes();
		}

		//validate the model
		$validator = Validator::make($data, $rules);

		if ($validator->fails())
		{
			return Response::json(array(
				'success' => false,
				'errors' => $validator->errors()->all(),
			));
		}
		else
		{
			$model->save();

			//Save the relationships
			ModelHelper::saveRelationships($model);

			return Response::json(array(
				'success' => true,
				'data' => $model->toArray(),
			));
		}
	}

	/**
	 * POST delete method that accepts data via JSON POST and either saves an old
	 *
	 * @param string		$modelName
	 * @param int			$id
	 *
	 * @return JSON
	 */
||||||||	public function save($modelName, $id = false)
	{
		$config = App::make('itemconfig');
		$fieldFactory = App::make('admin_field_factory');
		$actionFactory = App::make('admin_action_factory');
		$save = $config->save(App::make('request'), $fieldFactory->getEditFields(), $actionFactory->getActionPermissions(), $id);

		if (is_string($save))
		{
			return Response::json(array(
				'success' => false,
				'errors' => $save,
			));
		}
		else
		{
			return Response::json(array(
				'success' => true,
				'data' => $config->getDataModel()->toArray(),
			));
		}
	}

	/**
	 * POST delete method that accepts data via JSON POST and either saves an old
	 *
	 * @param string		$modelName
	 * @param int			$id
	 *
	 * @return JSON
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_CONST)
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_STATIC_PROP
                    (AST_VAR)))
            (AST_STATIC_PROP
                (AST_VAR))
            (AST_ARRAY)))
    (AST_FOREACH
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_EMPTY
                                (AST_PROP
                                    (AST_VAR)))))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_CONST)
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (SCALAR)
                                                (SCALAR)))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_CONST)
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (SCALAR)
                                                (SCALAR)))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (SCALAR))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (SCALAR))
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (SCALAR))))))))))