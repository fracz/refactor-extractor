    protected function createDefaultCryptoTokenStorage()
    {
        if (!isset($this->storages['public_key'])) {
            throw new \LogicException("You must supply a storage object implementing OAuth2\Storage\PublicKeyInterface to use crypto tokens");
        }
        $tokenStorage = null;
        if (!empty($this->config['store_encrypted_token_string']) && isset($this->storages['access_token'])) {
            $tokenStorage = $this->storages['access_token'];
        }
        // wrap the access token storage as required.
        $this->storages['access_token'] = new CryptoTokenStorage($this->storages['public_key'], $tokenStorage);
    }

||||||||    protected function createDefaultCryptoTokenStorage()
    {
        if (!isset($this->storages['public_key'])) {
            throw new \LogicException("You must supply a storage object implementing OAuth2\Storage\PublicKeyInterface to use crypto tokens");
        }
        $tokenStorage = null;
        if (!empty($this->config['store_encrypted_token_string']) && isset($this->storages['access_token'])) {
            $tokenStorage = $this->storages['access_token'];
        }
        // wrap the access token storage as required.
        return new CryptoTokenStorage($this->storages['public_key'], $tokenStorage);
    }

    /**
     * For Authorize and Token Controllers
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR))
        (AST_NEW
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR))))
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_RETURN
        (AST_NEW
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_VAR)))))