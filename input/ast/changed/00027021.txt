    protected function processUse(DocBlox_Token_Iterator $tokens)
    {
        /** @var DocBlox_Token $token */
        $aliases = array('');
        while (($token = $tokens->next()) && ($token->getContent() != ';')) {
            // if a comma is found, go to the next alias
            if (!$token->getType() && $token->getContent() == ',') {
                $aliases[] = '';
                continue;
            }

            $aliases[count($aliases) - 1] .= $token->getContent();
        }

        $result = array();
        foreach ($aliases as $key => $alias) {
            // an AS is always surrounded by spaces; by trimming the $alias we
            // then know that the first element is the namespace and the last
            // is the alias.
            // We explicitly do not use spliti to prevent regular expressions
            // for performance reasons (the AS may be any case).
            $alias = explode(' ', trim($alias));

            // if there is only one part, that means no AS is given and the
            // last segment of the namespace functions as alias.
            if (count($alias) == 1) {
                $alias_parts = explode('\\', $alias[0]);
                $alias[] = $alias_parts[count($alias_parts) - 1];
            }

            $result[$alias[count($alias) - 1]] = $alias[0];
            unset($aliases[$key]);
        }

        $this->namespace_aliases = array_merge(
            $this->namespace_aliases,
            $result
        );
    }

    /**
     * Changes the active namespace indicator when a namespace token is
     * encountered to indicate that the space has changed.
     *
     * @param DocBlox_Token_Iterator $tokens Tokens to interpret with the
     *      pointer at the token to be processed.
     *
     * @return void
     */
||||||||    protected function processUse(DocBlox_Token_Iterator $tokens)
    {
        /** @var DocBlox_Token $token */
        $aliases = array('');
        while (($token = $tokens->next()) && ($token->content != ';')) {
            // if a comma is found, go to the next alias
            if (!$token->type && $token->content == ',') {
                $aliases[] = '';
                continue;
            }

            $aliases[count($aliases) - 1] .= $token->content;
        }

        $result = array();
        foreach ($aliases as $key => $alias) {
            // an AS is always surrounded by spaces; by trimming the $alias we
            // then know that the first element is the namespace and the last
            // is the alias.
            // We explicitly do not use spliti to prevent regular expressions
            // for performance reasons (the AS may be any case).
            $alias = explode(' ', trim($alias));

            // if there is only one part, that means no AS is given and the
            // last segment of the namespace functions as alias.
            if (count($alias) == 1) {
                $alias_parts = explode('\\', $alias[0]);
                $alias[] = $alias_parts[count($alias_parts) - 1];
            }

            $result[$alias[count($alias) - 1]] = $alias[0];
            unset($aliases[$key]);
        }

        $this->namespace_aliases = array_merge(
            $this->namespace_aliases,
            $result
        );
    }

    /**
     * Changes the active namespace indicator when a namespace token is
     * encountered to indicate that the space has changed.
     *
     * @param DocBlox_Token_Iterator $tokens Tokens to interpret with the
     *      pointer at the token to be processed.
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (SCALAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (SCALAR))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN_OP
                (AST_DIM
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_DIM
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR)))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_PROP
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (SCALAR))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN_OP
                (AST_DIM
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_DIM
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_UNSET
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR)))))