	private function doTest_oneVisitorTwoVisits($t, $dateTime, $idSite )
	{
        $t->setUrlReferrer( 'http://referer.com/page.htm?param=valuewith some spaces');

    	// Testing URL excluded parameters
    	$parameterToExclude = 'excluded_parameter';
    	Piwik_SitesManager_API::getInstance()->updateSite($idSite, 'new name', $url=array('http://site.com'),$ecommerce = 0, $excludedIps = null, $parameterToExclude . ',anotherParameter');

    	// Record 1st page view
    	$urlPage1 = 'http://example.org/index.htm?excluded_Parameter=SHOULD_NOT_DISPLAY&parameter=Should display';
        $t->setUrl( $urlPage1 );
        $this->checkResponse($t->doTrackPageView( 'incredible title!'));

        // Testing that / and index.htm above record with different URLs
        // Recording the 2nd page after 3 minutes
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.05)->getDatetime());
        $urlPage2 = 'http://example.org/' ;
        $t->setUrl( $urlPage2 );
//        $t->setUrlReferrer($urlPage1);
        $this->checkResponse($t->doTrackPageView( 'Second page view - should be registered as URL /'));

//        $t->setUrlReferrer($urlPage2);
        // Click on external link after 6 minutes (3rd action)
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.1)->getDatetime());
        $this->checkResponse($t->doTrackAction( 'http://dev.piwik.org/svn', 'link' ));

        // Click on file download after 12 minutes (4th action)
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.2)->getDatetime());
        $this->checkResponse($t->doTrackAction( 'http://piwik.org/path/again/latest.zip', 'download' ));

        // Create Goal 1: Triggered by JS, after 18 minutes
        $idGoal = Piwik_Goals_API::getInstance()->addGoal($idSite, 'triggered js', 'manually', '', '');
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.3)->getDatetime());
        $this->checkResponse($t->doTrackGoal($idGoal, $revenue = 42));

        // Track same Goal twice (after 24 minutes), should only be tracked once
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.4)->getDatetime());
        $this->checkResponse($t->doTrackGoal($idGoal, $revenue = 42));

        // Final page view (after 27 min)
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.45)->getDatetime());
        $t->setUrl( 'http://example.org/index.htm' );
        $this->checkResponse($t->doTrackPageView( 'Looking at homepage (again)...'));

        // -
        // End of first visit: 24min

        // Create Goal 2: Matching on URL
        Piwik_Goals_API::getInstance()->addGoal($idSite, 'matching purchase.htm', 'url', '(.*)store\/purchase\.(.*)', 'regex', false, $revenue = 1);

        // -
        // Start of returning visit, 1 hour after first page view
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(1)->getDatetime());
        $t->setUrl( 'http://example.org/store/purchase.htm' );
        $t->setUrlReferrer( 'http://search.yahoo.com/search?p=purchase');

        // Goal Tracking URL matching, testing custom referer including keyword
        $this->checkResponse($t->doTrackPageView( 'Checkout/Purchasing...'));
        // -
        // End of second visit
	}

	/*
	 * Tests Tracker several websites, different days.
	 * Tests API for period=day/week/month/year, requesting data for both websites,
	 * and requesting data for last N periods.
	 * Also tests a visit that spans over 2 days.
	 * And testing empty URL and empty Page name request
	 * Also testing a click on a mailto counted as outlink
	 * Also testing metadata API for multiple periods
	 */
||||||||	private function doTest_oneVisitorTwoVisits($t, $dateTime, $idSite )
	{
        $t->setUrlReferrer( 'http://referer.com/page.htm?param=valuewith some spaces');

    	// __testing URL excluded parameters
    	$parameterToExclude = 'excluded_parameter';
    	Piwik_SitesManager_API::getInstance()->updateSite($idSite, 'new name', $url=array('http://site.com'),$ecommerce = 0, $excludedIps = null, $parameterToExclude . ',anotherParameter');

    	// Record 1st page view
    	$urlPage1 = 'http://example.org/index.htm?excluded_Parameter=SHOULD_NOT_DISPLAY&parameter=Should display';
        $t->setUrl( $urlPage1 );
        $this->checkResponse($t->doTrackPageView( 'incredible title!'));

        // __testing that / and index.htm above record with different URLs
        // Recording the 2nd page after 3 minutes
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.05)->getDatetime());
        $urlPage2 = 'http://example.org/' ;
        $t->setUrl( $urlPage2 );
//        $t->setUrlReferrer($urlPage1);
        $this->checkResponse($t->doTrackPageView( 'Second page view - should be registered as URL /'));

//        $t->setUrlReferrer($urlPage2);
        // Click on external link after 6 minutes (3rd action)
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.1)->getDatetime());
        $this->checkResponse($t->doTrackAction( 'http://dev.piwik.org/svn', 'link' ));

        // Click on file download after 12 minutes (4th action)
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.2)->getDatetime());
        $this->checkResponse($t->doTrackAction( 'http://piwik.org/path/again/latest.zip', 'download' ));

        // Create Goal 1: Triggered by JS, after 18 minutes
        $idGoal = Piwik_Goals_API::getInstance()->addGoal($idSite, 'triggered js', 'manually', '', '');
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.3)->getDatetime());
        $this->checkResponse($t->doTrackGoal($idGoal, $revenue = 42));

        // Track same Goal twice (after 24 minutes), should only be tracked once
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.4)->getDatetime());
        $this->checkResponse($t->doTrackGoal($idGoal, $revenue = 42));

        // Final page view (after 27 min)
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(0.45)->getDatetime());
        $t->setUrl( 'http://example.org/index.htm' );
        $this->checkResponse($t->doTrackPageView( 'Looking at homepage (again)...'));

        // -
        // End of first visit: 24min

        // Create Goal 2: Matching on URL
        Piwik_Goals_API::getInstance()->addGoal($idSite, 'matching purchase.htm', 'url', '(.*)store\/purchase\.(.*)', 'regex', false, $revenue = 1);

        // -
        // Start of returning visit, 1 hour after first page view
        $t->setForceVisitDateTime(Piwik_Date::factory($dateTime)->addHour(1)->getDatetime());
        $t->setUrl( 'http://example.org/store/purchase.htm' );
        $t->setUrlReferrer( 'http://search.yahoo.com/search?p=purchase');
		// Temporary, until we implement 1st party cookies in PiwikTracker
        $t->DEBUG_APPEND_URL = '&_idvc=2';

        // Goal Tracking URL matching, __testing custom referer including keyword
        $this->checkResponse($t->doTrackPageView( 'Checkout/Purchasing...'));
        // -
        // End of second visit
	}

	/*
	 * __tests Tracker several websites, different days.
	 * __tests API for period=day/week/month/year, requesting data for both websites,
	 * and requesting data for last N periods.
	 * Also __tests a visit that spans over 2 days.
	 * And __testing empty URL and empty Page name request
	 * Also __testing a click on a mailto counted as outlink
	 * Also __testing metadata API for multiple periods
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_VAR)
            (SCALAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CONST)
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_VAR)
            (SCALAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (AST_VAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_ASSIGN
                        (AST_VAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CONST)
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))))