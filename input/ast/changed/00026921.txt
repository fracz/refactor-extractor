    public function testExecuteTransform()
    {
        touch(PHPUnit\TEMP_DIR . '/phpdoc_a');
        @unlink(PHPUnit\TEMP_DIR . '/phpdoc_b');
        $this->assertFileExists(PHPUnit\TEMP_DIR . '/phpdoc_a');
        $this->assertFileNotExists(PHPUnit\TEMP_DIR . '/phpdoc_b');

        $transformer = new \phpDocumentor\Transformer\Transformer();
        $transformer->setTarget(PHPUnit\TEMP_DIR);

        try
        {
            $transformation = new \phpDocumentor\Transformer\Transformation(
                $transformer, 'copyz', 'FileIo', PHPUnit\TEMP_DIR . '/phpdoc_a', 'phpdoc_b'
            );
            $this->fixture->transform(new \DOMDocument(), $transformation);

            $this->fail(
                'When un unknown query type is used an exception is expected'
            );
        }
        catch (\InvalidArgumentException $e)
        {
            // this is good
        }

        $this->markTestIncomplete(
            'Absolute files are no longer supported using the FileIo writer, '
            .'the test code should be adapted'
        );

        unlink(PHPUnit\TEMP_DIR . '/phpdoc_a');
        unlink(PHPUnit\TEMP_DIR . '/phpdoc_b');
    }
}||||||||    public function testExecuteTransform()
    {
        // FIXME
        $this->markTestIncomplete('Fix with mocks');
        touch(PHPUnit\TEMP_DIR . '/phpdoc_a');
        @unlink(PHPUnit\TEMP_DIR . '/phpdoc_b');
        $this->assertFileExists(PHPUnit\TEMP_DIR . '/phpdoc_a');
        $this->assertFileNotExists(PHPUnit\TEMP_DIR . '/phpdoc_b');

        $transformer = new \phpDocumentor\Transformer\Transformer();
        $transformer->setTarget(PHPUnit\TEMP_DIR);

        try
        {
            $transformation = new \phpDocumentor\Transformer\Transformation(
                $transformer, 'copyz', 'FileIo', PHPUnit\TEMP_DIR . '/phpdoc_a', 'phpdoc_b'
            );
            $this->fixture->transform(new \DOMDocument(), $transformation);

            $this->fail(
                'When un unknown query type is used an exception is expected'
            );
        }
        catch (\InvalidArgumentException $e)
        {
            // this is good
        }

        $this->markTestIncomplete(
            'Absolute files are no longer supported using the FileIo writer, '
            .'the test code should be adapted'
        );

        unlink(PHPUnit\TEMP_DIR . '/phpdoc_a');
        unlink(PHPUnit\TEMP_DIR . '/phpdoc_b');
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_UNARY_OP
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_UNARY_OP
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_NEW)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR)))))