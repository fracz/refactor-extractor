    public function process_course_module($data, $raw) {
        global $CFG;

        // check that this type of module should be included in the mbz
        $modinfo = $this->converter->get_stash_itemids('modinfo_'.$data['modulename']);
        if (empty($modinfo)) {
            return;
        }

        // add the course module into the course contents list
        $this->coursecontents[$data['id']] = array(
            'cmid'       => $data['id'],
            'instanceid' => $raw['INSTANCE'],
            'sectionid'  => $this->currentsection['id'],
            'modulename' => $data['modulename'],
            'title'      => null
        );

        // add the course module id into the section's sequence
        if (is_null($this->currentsection['sequence'])) {
            $this->currentsection['sequence'] = $data['id'];
        } else {
            $this->currentsection['sequence'] .= ',' . $data['id'];
        }

        // add the sectionid and sectionnumber
        $data['sectionid']      = $this->currentsection['id'];
        $data['sectionnumber']  = $this->currentsection['number'];

        // generate the module version - this is a bit tricky as this information
        // is not present in 1.9 backups. we will use the currently installed version
        // whenever we can but that might not be accurate for some modules.
        // also there might be problem with modules that are not present at the target
        // host...
        $versionfile = $CFG->dirroot.'/mod/'.$data['modulename'].'/version.php';
        if (file_exists($versionfile)) {
            $module = new stdClass();
            include($versionfile);
            $data['version'] = $module->version;
        } else {
            $data['version'] = null;
        }

        // stash the course module info in stashes like 'cminfo_forum' with
        // itemid set to the instance id. this is needed so that module handlers
        // can later obtain information about the course module and dump it into
        // the module.xml file
        $this->converter->set_stash('cminfo_'.$data['modulename'], $data, $raw['INSTANCE']);
    }

    /**
     * Writes sections/section_xxx/section.xml file and stashes it, too
     */
||||||||    public function process_course_module($data, $raw) {
        global $CFG;

        // check that this type of module should be included in the mbz
        $modinfo = $this->converter->get_stash_itemids('modinfo_'.$data['modulename']);
        if (empty($modinfo)) {
            return;
        }

        // add the course module into the course contents list
        $this->coursecontents[$data['id']] = array(
            'cmid'       => $data['id'],
            'instanceid' => $raw['INSTANCE'],
            'sectionid'  => $this->currentsection['id'],
            'modulename' => $data['modulename'],
            'title'      => null
        );

        // add the course module id into the section's sequence
        if (is_null($this->currentsection['sequence'])) {
            $this->currentsection['sequence'] = $data['id'];
        } else {
            $this->currentsection['sequence'] .= ',' . $data['id'];
        }

        // add the sectionid and sectionnumber
        $data['sectionid']      = $this->currentsection['id'];
        $data['sectionnumber']  = $this->currentsection['number'];

        // generate the module version - this is a bit tricky as this information
        // is not present in 1.9 backups. we will use the currently installed version
        // whenever we can but that might not be accurate for some modules.
        // also there might be problem with modules that are not present at the target
        // host...
        $versionfile = $CFG->dirroot.'/mod/'.$data['modulename'].'/version.php';
        if (file_exists($versionfile)) {
            $plugin = new stdClass();
            $plugin->version = null;
            $module = $plugin;
            include($versionfile);
            $data['version'] = $plugin->version;
        } else {
            $data['version'] = null;
        }

        // stash the course module info in stashes like 'cminfo_forum' with
        // itemid set to the instance id. this is needed so that module handlers
        // can later obtain information about the course module and dump it into
        // the module.xml file
        $this->converter->set_stash('cminfo_'.$data['modulename'], $data, $raw['INSTANCE']);
    }

    /**
     * Writes sections/section_xxx/section.xml file and stashes it, too
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR)))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_VAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_VAR)
                (SCALAR)))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_VAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR)))))