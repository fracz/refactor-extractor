	function showNewsFeeds( &$rows, &$lists, &$pageNav, $option ) {
		global $my, $mosConfig_cachepath;

		mosCommonHTML::loadOverlib();
		?>
		<form action="index2.php?option=com_newsfeeds" method="post" name="adminForm">

		<table class="adminform">
		<tr>
			<td align="left" width="100%">
				<?php echo JText::_( 'Filter' ); ?>:
				<input type="text" name="search" id="search" value="<?php echo $lists['search'];?>" class="text_area" onchange="document.adminForm.submit();" />
				<input type="button" value="<?php echo JText::_( 'Go' ); ?>" class="button" onclick="this.form.submit();" />
				<input type="button" value="<?php echo JText::_( 'Reset' ); ?>" class="button" onclick="getElementById('search').value='';this.form.submit();" />
			</td>
			<td nowrap="nowrap">
				<?php
				echo $lists['catid'];
				echo $lists['state'];
				?>
			</td>
		</tr>
		</table>

		<div id="tablecell">
			<table class="adminlist">
			<tr>
				<th width="10">
					<?php echo JText::_( 'NUM' ); ?>
				</th>
				<th width="10">
					<input type="checkbox" name="toggle" value="" onclick="checkAll(<?php echo count( $rows ); ?>);" />
				</th>
				<th class="title">
					<?php mosCommonHTML::tableOrdering( 'News Feed', 'a.name', $lists ); ?>
				</th>
				<th width="7%">
					<?php mosCommonHTML::tableOrdering( 'Published', 'a.published', $lists ); ?>
				</th>
				<th colspan="2" width="2%">
					<?php echo JText::_( 'Reorder' ); ?>
				</th>
				<th width="2%" nowrap="nowrap">
					<?php mosCommonHTML::tableOrdering( 'Order', 'a.ordering', $lists ); ?>
	 			</th>
				<th width="1%">
					<?php mosCommonHTML::saveorderButton( $rows ); ?>
				</th>
				<th width="5%" nowrap="nowrap">
					<?php mosCommonHTML::tableOrdering( 'ID', 'a.id', $lists ); ?>
				</th>
				<th class="title" width="17%">
					<?php mosCommonHTML::tableOrdering( 'Category', 'catname', $lists ); ?>
				</th>
				<th width="5%" nowrap="nowrap">
					<?php mosCommonHTML::tableOrdering( 'Num Articles', 'a.numarticles', $lists ); ?>
				</th>
				<th width="10%">
					<?php mosCommonHTML::tableOrdering( 'Cache time', 'a.cache_time', $lists ); ?>
				</th>
			</tr>
			<?php
			$k = 0;
			for ($i=0, $n=count( $rows ); $i < $n; $i++) {
				$row = &$rows[$i];

				$link 		= ampReplace( 'index2.php?option=com_newsfeeds&task=editA&hidemainmenu=1&id='. $row->id );

				$checked 	= mosCommonHTML::CheckedOutProcessing( $row, $i );
				$published 	= mosCommonHTML::PublishedProcessing( $row, $i );

				$row->cat_link 	= ampReplace( 'index2.php?option=com_categories&section=com_newsfeeds&task=editA&hidemainmenu=1&id='. $row->catid );
				?>
				<tr class="<?php echo 'row'. $k; ?>">
					<td align="center">
						<?php echo $pageNav->rowNumber( $i ); ?>
					</td>
					<td>
						<?php echo $checked; ?>
					</td>
					<td>
						<?php
						if ( $row->checked_out && ( $row->checked_out != $my->id ) ) {
							?>
							<?php echo $row->name; ?>
							&nbsp;[ <i><?php echo JText::_( 'Checked Out' ); ?></i> ]
							<?php
						} else {
							?>
							<a href="<?php echo $link; ?>" title="<?php echo JText::_( 'Edit Newsfeed' ); ?>">
								<?php echo $row->name; ?></a>
							<?php
						}
						?>
					</td>
					<td width="10%" align="center">
						<?php echo $published;?>
					</td>
					<td align="center">
						<?php echo $pageNav->orderUpIcon($i, ($row->catid == @$rows[$i-1]->catid) ); ?>
					</td>
					<td align="center">
						<?php echo $pageNav->orderDownIcon($i, $n, ($row->catid == @$rows[$i+1]->catid) ); ?>
					</td>
					<td align="center" colspan="2">
						<input type="text" name="order[]" size="5" value="<?php echo $row->ordering;?>" class="text_area" style="text-align: center" />
					</td>
					<td align="center">
						<?php echo $row->id; ?>
					</td>
					<td>
						<a href="<?php echo $row->cat_link; ?>" title="<?php echo JText::_( 'Edit Category' ); ?>">
							<?php echo $row->catname;?></a>
					</td>
					<td align="center">
						<?php echo $row->numarticles;?>
					</td>
					<td align="center">
						<?php echo $row->cache_time;?>
					</td>
				</tr>
				<?php
				$k = 1 - $k;
			}
			?>
			</table>

			<?php echo $pageNav->getListFooter(); ?>

			<table class="adminform">
			<tr>
				<td>
					<table align="center">
					<?php
					$visible = 0;
					// check to hide certain paths if not super admin
					if ( $my->gid == 25 ) {
						$visible = 1;
					}
					mosHTML::writableCell( $mosConfig_cachepath, 0, '<strong>Cache Directory</strong> ', $visible );
					?>
					</table>
				</td>
			</tr>
			</table>
		</div>

		<input type="hidden" name="option" value="<?php echo $option;?>" />
		<input type="hidden" name="task" value="" />
		<input type="hidden" name="boxchecked" value="0" />
		<input type="hidden" name="hidemainmenu" value="0" />
		<input type="hidden" name="filter_order" value="<?php echo $lists['order']; ?>" />
		<input type="hidden" name="filter_order_Dir" value="" />
		</form>
		<?php
	}


||||||||	function showNewsFeeds( &$rows, &$lists, &$pageNav, $option ) {
		global $mainframe;

		$user = $mainframe->getUser();

		mosCommonHTML::loadOverlib();
		?>
		<form action="index2.php?option=com_newsfeeds" method="post" name="adminForm">

		<table class="adminform">
		<tr>
			<td align="left" width="100%">
				<?php echo JText::_( 'Filter' ); ?>:
				<input type="text" name="search" id="search" value="<?php echo $lists['search'];?>" class="text_area" onchange="document.adminForm.submit();" />
				<input type="button" value="<?php echo JText::_( 'Go' ); ?>" class="button" onclick="this.form.submit();" />
				<input type="button" value="<?php echo JText::_( 'Reset' ); ?>" class="button" onclick="getElementById('search').value='';this.form.submit();" />
			</td>
			<td nowrap="nowrap">
				<?php
				echo $lists['catid'];
				echo $lists['state'];
				?>
			</td>
		</tr>
		</table>

		<div id="tablecell">
			<table class="adminlist">
			<tr>
				<th width="10">
					<?php echo JText::_( 'NUM' ); ?>
				</th>
				<th width="10">
					<input type="checkbox" name="toggle" value="" onclick="checkAll(<?php echo count( $rows ); ?>);" />
				</th>
				<th class="title">
					<?php mosCommonHTML::tableOrdering( 'News Feed', 'a.name', $lists ); ?>
				</th>
				<th width="7%">
					<?php mosCommonHTML::tableOrdering( 'Published', 'a.published', $lists ); ?>
				</th>
				<th colspan="2" width="2%">
					<?php echo JText::_( 'Reorder' ); ?>
				</th>
				<th width="2%" nowrap="nowrap">
					<?php mosCommonHTML::tableOrdering( 'Order', 'a.ordering', $lists ); ?>
	 			</th>
				<th width="1%">
					<?php mosCommonHTML::saveorderButton( $rows ); ?>
				</th>
				<th width="5%" nowrap="nowrap">
					<?php mosCommonHTML::tableOrdering( 'ID', 'a.id', $lists ); ?>
				</th>
				<th class="title" width="17%">
					<?php mosCommonHTML::tableOrdering( 'Category', 'catname', $lists ); ?>
				</th>
				<th width="5%" nowrap="nowrap">
					<?php mosCommonHTML::tableOrdering( 'Num Articles', 'a.numarticles', $lists ); ?>
				</th>
				<th width="10%">
					<?php mosCommonHTML::tableOrdering( 'Cache time', 'a.cache_time', $lists ); ?>
				</th>
			</tr>
			<?php
			$k = 0;
			for ($i=0, $n=count( $rows ); $i < $n; $i++) {
				$row = &$rows[$i];

				$link 		= ampReplace( 'index2.php?option=com_newsfeeds&task=edit&hidemainmenu=1&cid[]='. $row->id );

				$checked 	= mosCommonHTML::CheckedOutProcessing( $row, $i );
				$published 	= mosCommonHTML::PublishedProcessing( $row, $i );

				$row->cat_link 	= ampReplace( 'index2.php?option=com_categories&section=com_newsfeeds&task=edit&hidemainmenu=1&cid[]='. $row->catid );
				?>
				<tr class="<?php echo 'row'. $k; ?>">
					<td align="center">
						<?php echo $pageNav->rowNumber( $i ); ?>
					</td>
					<td>
						<?php echo $checked; ?>
					</td>
					<td>
						<?php
						if ( $row->checked_out && ( $row->checked_out != $user->get('id') ) ) {
							?>
							<?php echo $row->name; ?>
							&nbsp;[ <i><?php echo JText::_( 'Checked Out' ); ?></i> ]
							<?php
						} else {
							?>
							<a href="<?php echo $link; ?>" title="<?php echo JText::_( 'Edit Newsfeed' ); ?>">
								<?php echo $row->name; ?></a>
							<?php
						}
						?>
					</td>
					<td width="10%" align="center">
						<?php echo $published;?>
					</td>
					<td align="center">
						<?php echo $pageNav->orderUpIcon($i, ($row->catid == @$rows[$i-1]->catid) ); ?>
					</td>
					<td align="center">
						<?php echo $pageNav->orderDownIcon($i, $n, ($row->catid == @$rows[$i+1]->catid) ); ?>
					</td>
					<td align="center" colspan="2">
						<input type="text" name="order[]" size="5" value="<?php echo $row->ordering;?>" class="text_area" style="text-align: center" />
					</td>
					<td align="center">
						<?php echo $row->id; ?>
					</td>
					<td>
						<a href="<?php echo $row->cat_link; ?>" title="<?php echo JText::_( 'Edit Category' ); ?>">
							<?php echo $row->catname;?></a>
					</td>
					<td align="center">
						<?php echo $row->numarticles;?>
					</td>
					<td align="center">
						<?php echo $row->cache_time;?>
					</td>
				</tr>
				<?php
				$k = 1 - $k;
			}
			?>
			</table>

			<?php echo $pageNav->getListFooter(); ?>

			<table class="adminform">
			<tr>
				<td>
					<table align="center">
					<?php
					$visible = 0;
					// check to hide certain paths if not super admin
					if ( $user->get('gid') == 25 ) {
						$visible = 1;
					}
					mosHTML::writableCell( $mainframe->getCfg('cachepath'), 0, '<strong>Cache Directory</strong> ', $visible );
					?>
					</table>
				</td>
			</tr>
			</table>
		</div>

		<input type="hidden" name="option" value="<?php echo $option;?>" />
		<input type="hidden" name="task" value="" />
		<input type="hidden" name="boxchecked" value="0" />
		<input type="hidden" name="hidemainmenu" value="0" />
		<input type="hidden" name="filter_order" value="<?php echo $lists['order']; ?>" />
		<input type="hidden" name="filter_order_Dir" value="" />
		</form>
		<?php
	}


||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_STATIC_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)))))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN_REF
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_VAR))
            (AST_ECHO
                (SCALAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_PROP
                                (AST_VAR)))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))
                        (AST_ECHO
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_VAR))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_PROP
                                (AST_VAR)))
                        (AST_ECHO
                            (SCALAR)))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_VAR))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_STATIC_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)))))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR)))
        (AST_EXPR_LIST
            (AST_POST_INC
                (AST_VAR)))
        (
            (AST_ASSIGN_REF
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_PROP
                                (AST_VAR))))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_VAR))
            (AST_ECHO
                (SCALAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))))
                    (
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_PROP
                                (AST_VAR)))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))
                        (AST_ECHO
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_VAR))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_STATIC_CALL
                                (
                                    (SCALAR))))
                        (AST_ECHO
                            (SCALAR))
                        (AST_ECHO
                            (AST_PROP
                                (AST_VAR)))
                        (AST_ECHO
                            (SCALAR)))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_VAR))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_PROP
                                    (AST_DIM
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR)))))))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_STATIC_CALL
                    (
                        (SCALAR))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_PROP
                    (AST_VAR)))
            (AST_ECHO
                (SCALAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (SCALAR)
            (SCALAR)
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR)))