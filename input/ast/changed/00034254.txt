    public function testRenderViewElement($expected, $type, $value, array $options)
    {
        $object = new \stdClass();

        $admin = $this->getMock('Sonata\AdminBundle\Admin\AdminInterface');

        $admin->expects($this->any())
                ->method('getTemplate')
                ->will($this->returnValue('SonataAdminBundle:CRUD:base_show_field.html.twig'));

        $admin->expects($this->any())
                ->method('id')
                ->with($this->equalTo($object))
                ->will($this->returnValue(12345));

        $admin->expects($this->any())
                ->method('trans')
                ->will($this->returnCallback(function($id) {
                                    return $id;
                                }));

        $fieldDescription = $this->getMock('Sonata\AdminBundle\Admin\FieldDescriptionInterface');

        $fieldDescription->expects($this->any())
                ->method('getAdmin')
                ->will($this->returnValue($admin));

        $fieldDescription->expects($this->any())
                ->method('getValue')
                ->will($this->returnValue($value));

        $fieldDescription->expects($this->any())
                ->method('getLabel')
                ->will($this->returnValue('Data'));

        $fieldDescription->expects($this->any())
                ->method('getType')
                ->will($this->returnValue($type));

        $fieldDescription->expects($this->any())
                ->method('getOptions')
                ->will($this->returnValue($options));

        $fieldDescription->expects($this->any())
                ->method('getTemplate')
                ->will($this->returnCallback(
                    function() use ($type) {
                        switch ($type) {
                            case 'boolean':
                                return 'SonataAdminBundle:CRUD:show_boolean.html.twig';
                            case 'datetime':
                                return 'SonataAdminBundle:CRUD:show_datetime.html.twig';
                            case 'date':
                                return 'SonataAdminBundle:CRUD:show_date.html.twig';
                            case 'time':
                                return 'SonataAdminBundle:CRUD:show_time.html.twig';
                            case 'currency':
                                return 'SonataAdminBundle:CRUD:show_currency.html.twig';
                            case 'percent':
                                return 'SonataAdminBundle:CRUD:show_percent.html.twig';
                            case 'array':
                                return 'SonataAdminBundle:CRUD:show_array.html.twig';
                            case 'trans':
                                return 'SonataAdminBundle:CRUD:show_trans.html.twig';
                            default:
                                return false;
                        }
                    }
        ));

        $this->assertEquals($expected, trim(preg_replace('/\s+/', ' ', $this->twigExtension->renderListElement($object, $fieldDescription))));
    }

||||||||    public function testRenderViewElement($expected, $type, $value, array $options)
    {
        $object = new \stdClass();

        $admin = $this->getMock('Sonata\AdminBundle\Admin\AdminInterface');

        $admin->expects($this->any())
            ->method('getTemplate')
            ->will($this->returnValue('SonataAdminBundle:CRUD:base_show_field.html.twig'));

        $admin->expects($this->any())
            ->method('id')
            ->with($this->equalTo($object))
            ->will($this->returnValue(12345));

        $admin->expects($this->any())
            ->method('trans')
            ->will($this->returnCallback(function($id) {
                return $id;
            }));

        $fieldDescription = $this->getMock('Sonata\AdminBundle\Admin\FieldDescriptionInterface');

        $fieldDescription->expects($this->any())
            ->method('getAdmin')
            ->will($this->returnValue($admin));

        $fieldDescription->expects($this->any())
            ->method('getValue')
            ->will($this->returnCallback(function() use ($value) {
                if ($value instanceof NoValueException) {
                    throw  $value;
                }

                return $value;
            }));

        $fieldDescription->expects($this->any())
            ->method('getLabel')
            ->will($this->returnValue('Data'));

        $fieldDescription->expects($this->any())
            ->method('getType')
            ->will($this->returnValue($type));

        $fieldDescription->expects($this->any())
            ->method('getOptions')
            ->will($this->returnValue($options));

        $fieldDescription->expects($this->any())
            ->method('getTemplate')
            ->will($this->returnCallback(function() use ($type) {
                switch ($type) {
                    case 'boolean':
                        return 'SonataAdminBundle:CRUD:show_boolean.html.twig';
                    case 'datetime':
                        return 'SonataAdminBundle:CRUD:show_datetime.html.twig';
                    case 'date':
                        return 'SonataAdminBundle:CRUD:show_date.html.twig';
                    case 'time':
                        return 'SonataAdminBundle:CRUD:show_time.html.twig';
                    case 'currency':
                        return 'SonataAdminBundle:CRUD:show_currency.html.twig';
                    case 'percent':
                        return 'SonataAdminBundle:CRUD:show_percent.html.twig';
                    case 'array':
                        return 'SonataAdminBundle:CRUD:show_array.html.twig';
                    case 'trans':
                        return 'SonataAdminBundle:CRUD:show_trans.html.twig';
                    default:
                        return false;
                }
            }));

        $this->assertEquals($expected, trim(preg_replace('/\s+/', ' ', $this->twigExtension->renderViewElement($fieldDescription, $object))));
    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_SWITCH
                                (AST_VAR)
                                (AST_SWITCH_LIST
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (NULL)
                                        (
                                            (AST_RETURN
                                                (AST_CONST))))))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                        (NULL)
                        (
                            (AST_RETURN
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_INSTANCEOF
                                        (AST_VAR))
                                    (
                                        (AST_THROW
                                            (AST_VAR)))))
                            (AST_RETURN
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_SWITCH
                                (AST_VAR)
                                (AST_SWITCH_LIST
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (SCALAR)
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_SWITCH_CASE
                                        (NULL)
                                        (
                                            (AST_RETURN
                                                (AST_CONST))))))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CALL
                (
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))))