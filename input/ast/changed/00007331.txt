	public function testInitializationInheritance() {
		$meta = array (
			'name' => 'MockAntiqueForSchemas',
			'source' => 'mock_products',
			'title' => 'name',
			'class' => 'lithium\tests\mocks\data\MockAntiqueForSchemas',
			'connection' => false
		);
		$this->assertEqual($meta, MockAntiqueForSchemas::meta());

		$this->assertArrayHasKey('MockCreator', MockAntiqueForSchemas::relations());

		$this->assertCount(3, MockAntiqueForSchemas::finders());

		$this->assertCount(1, MockAntiqueForSchemas::initializers());

		$config = array(
			'query' => array(
				'with' => array('MockCreator')
			)
		);
		MockProductForSchemas::config(compact('config'));
		$this->assertEqual(MockProductForSchemas::query(), MockAntiqueForSchemas::query());

		$expected = array('limit' => 50) + MockProductForSchemas::query();
		MockAntiqueForSchemas::config(array('query' => $expected));
		$this->assertEqual($expected, MockAntiqueForSchemas::query());

		MockPostForValidates::config(array(
			'classes' => array('connections' => 'lithium\tests\mocks\data\MockConnections'),
			'meta' => array('connection' => new MockCallable())
		));
		$conn = MockPostForValidates::connection();

		$this->assertInstanceOf('lithium\tests\mocks\core\MockCallable', $conn);
	}

||||||||	public function testInitializationInheritance() {
		$meta = array (
			'name'       => 'MockAntiqueForSchemas',
			'source'     => 'mock_products',
			'title'      => 'name',
			'class'      => 'lithium\tests\mocks\data\MockAntiqueForSchemas',
			'connection' => 'mockconn',
			'key'        => 'id',
			'locked'     => true
		);
		$this->assertEqual($meta, MockAntiqueForSchemas::meta());

		$this->assertArrayHasKey('MockCreator', MockAntiqueForSchemas::relations());

		$this->assertCount(3, MockAntiqueForSchemas::finders());

		$this->assertCount(1, MockAntiqueForSchemas::initializers());

		$config = array('query' => array('with' => array('MockCreator')));
		MockProductForSchemas::config(compact('config'));
		$this->assertEqual(MockProductForSchemas::query(), MockAntiqueForSchemas::query());

		$expected = array('limit' => 50) + MockProductForSchemas::query();
		MockAntiqueForSchemas::config(array('query' => $expected));
		$this->assertEqual($expected, MockAntiqueForSchemas::query());

		MockPostForValidates::config(array(
			'classes' => array('connections' => 'lithium\tests\mocks\data\MockConnections'),
			'meta' => array('connection' => new MockCallable())
		));
		$conn = MockPostForValidates::connection();

		$this->assertInstanceOf('lithium\tests\mocks\core\MockCallable', $conn);
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (SCALAR)))
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL)
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))
            (AST_STATIC_CALL)))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_STATIC_CALL)))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW)
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (SCALAR)))
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL)
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))
            (AST_STATIC_CALL)))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_STATIC_CALL)))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR)))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW)
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))