    protected function proceedSee($text, $selector = null) {
        if (!$selector) return parent::proceedSee($this->escape($text), $selector);
        $nodes = $this->session->getPage()->findAll('css', $selector);
		$values = '';
		foreach ($nodes as $node) {
            if (!$this->session->getDriver()->isVisible($node->getXpath())) continue;

            $values .= '<!-- Merged Output -->'.$node->getText();
        }
		return array('contains', $this->escape($text), $values, "'$selector' selector For more details look for page snapshot in the log directory");
    }

    /**
     * Presses key on element found by css is focused
     * A char and modifier (ctrl, alt, shift, meta) can be provided.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->pressKey('#page','u','ctrl');
     * ?>
     * ```
     *
     * @param $element
     * @param $char char can be either char ('b') or char-code (98)
     * @param null $modifier keyboard modifier (could be 'ctrl', 'alt', 'shift' or 'meta')
     */
||||||||    protected function proceedSee($text, $selector = null) {
        if (!$selector) return parent::proceedSee($this->escape($text), $selector);
        try {
            $nodes = $this->session->getPage()->findAll('css', $selector);
        } catch (\Symfony\Component\CssSelector\Exception\ParseException $e) {
            $nodes = @$this->session->getPage()->findAll('xpath', $selector);
        }

		$values = '';
		foreach ($nodes as $node) {
            if (!$this->session->getDriver()->isVisible($node->getXpath())) continue;

            $values .= '<!-- Merged Output -->'.$node->getText();
        }
		return array('contains', $this->escape($text), $values, "'$selector' selector For more details look for page snapshot in the log directory");
    }

    /**
     * Presses key on element found by css is focused
     * A char and modifier (ctrl, alt, shift, meta) can be provided.
     *
     * Example:
     *
     * ``` php
     * <?php
     * $I->pressKey('#page','u','ctrl');
     * ?>
     * ```
     *
     * @param $element
     * @param $char char can be either char ('b') or char-code (98)
     * @param null $modifier keyboard modifier (could be 'ctrl', 'alt', 'shift' or 'meta')
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (NULL)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))
                            (AST_VAR)))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (SCALAR)
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (SCALAR)
                                    (AST_VAR))))))))
        (NULL))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR))
                (NULL)))))