    private function rewriteRequest($request) {
        $pathAndQuery = $request->PathAndQuery();
        $matchRoute = Gdn::router()->matchRoute($pathAndQuery);

        // We have a route. Take action.
        if (!empty($matchRoute)) {
            $dest = $matchRoute['FinalDestination'];

            if (strpos($dest, '?') === false) {
                // The rewrite rule doesn't include a query string so keep the current one intact.
                $request->path($dest);
            } else {
                // The rewrite rule has a query string so rewrite that too.
                $request->pathAndQuery($dest);
            }

            switch ($matchRoute['Type']) {
                case 'Internal':
                    // Do nothing. The request has been rewritten.
                    break;
                case 'Temporary':
                    safeHeader("HTTP/1.1 302 Moved Temporarily");
                    safeHeader("Location: ".url($matchRoute['FinalDestination']));
                    exit();
                    break;

                case 'Permanent':
                    safeHeader("HTTP/1.1 301 Moved Permanently");
                    safeHeader("Location: ".url($matchRoute['FinalDestination']));
                    exit();
                    break;

                case 'NotAuthorized':
                    safeHeader("HTTP/1.1 401 Not Authorized");

                    break;

                case 'NotFound':
                    safeHeader("HTTP/1.1 404 Not Found");
                    break;

                case 'Drop':
                    die();

                case 'Test':
                    decho($matchRoute, 'Route');
                    decho(array(
                        'Path' => $request->path(),
                        'Get' => $request->get()
                    ), 'Request');
                    die();
            }
        }
    }
}

/**
 * Class GdnDispatcherControllerNotFoundException
 */
class GdnDispatcherControllerNotFoundException extends Exception {
}

/**
 * Class GdnDispatcherControllerFoundException
 */
class GdnDispatcherControllerFoundException extends Exception {
}||||||||    private function rewriteRequest($request) {
        $pathAndQuery = $request->PathAndQuery();
        $matchRoute = Gdn::router()->matchRoute($pathAndQuery);

        // We have a route. Take action.
        if (!empty($matchRoute)) {
            $dest = $matchRoute['FinalDestination'];

            if (strpos($dest, '?') === false) {
                // The rewrite rule doesn't include a query string so keep the current one intact.
                $request->path($dest);
            } else {
                // The rewrite rule has a query string so rewrite that too.
                $request->pathAndQuery($dest);
            }

            switch ($matchRoute['Type']) {
                case 'Internal':
                    // Do nothing. The request has been rewritten.
                    break;
                case 'Temporary':
                    safeHeader("HTTP/1.1 302 Moved Temporarily");
                    safeHeader("Location: ".url($matchRoute['FinalDestination']));
                    exit();
                    break;

                case 'Permanent':
                    safeHeader("HTTP/1.1 301 Moved Permanently");
                    safeHeader("Location: ".url($matchRoute['FinalDestination']));
                    exit();
                    break;

                case 'NotAuthorized':
                    safeHeader("HTTP/1.1 401 Not Authorized");

                    break;

                case 'NotFound':
                    safeHeader("HTTP/1.1 404 Not Found");
                    break;

                case 'Drop':
                    die();

                case 'Test':
                    decho($matchRoute, 'Route');
                    decho(array(
                        'Path' => $request->path(),
                        'Get' => $request->get()
                    ), 'Request');
                    die();
            }
        } elseif (in_array($request->path(), ['', '/'])) {
            $defaultController = Gdn::router()->getRoute('DefaultController');
            $request->pathAndQuery($defaultController['Destination']);
        }

        return $request;
    }

    /**
     * Parse the delivery method base on the file extension.
     *
     * If a valid file extension is found then it will be removed from {@link $parts}.
     *
     * @param string[] $parts The path parts to parse.
     * @return array Returns an array in the form `[$parts, $deliveryMethod]`.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))))
                (AST_SWITCH
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))))
                                (AST_EXIT
                                    (NULL))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))))
                                (AST_EXIT
                                    (NULL))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_EXIT
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR)))
                                        (SCALAR)))
                                (AST_EXIT
                                    (NULL))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))))
                (AST_SWITCH
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_SWITCH_LIST
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))))
                                (AST_EXIT
                                    (NULL))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CALL
                                                (
                                                    (AST_DIM
                                                        (AST_VAR)
                                                        (SCALAR)))))))
                                (AST_EXIT
                                    (NULL))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (AST_BREAK
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_EXIT
                                    (NULL))))
                        (AST_SWITCH_CASE
                            (SCALAR)
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_CALL
                                    (
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR))
                                            (AST_ARRAY_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR)))
                                        (SCALAR)))
                                (AST_EXIT
                                    (NULL))))))))
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_RETURN
        (AST_VAR)))