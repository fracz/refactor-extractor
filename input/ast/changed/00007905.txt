	public function testAddCustomRegexMethods() {
		// $this->expectException("Rule 'foo' is not a validation rule");
		// $this->assertNull(Validator::isFoo('foo'));

		Validator::add('foo', '/^foo$/');
		$this->assertTrue(Validator::isFoo('foo'));
		$this->assertFalse(Validator::isFoo('bar'));

		// $this->expectException("Rule 'uuid' is not a validation rule");
		// $this->assertNull(Validator::isUuid('1c0a5830-6025-11de-8a39-0800200c9a66'));

		$uuid = '/[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}/';
		Validator::add('uuid', $uuid);
		$this->assertTrue(Validator::isUuid('1c0a5830-6025-11de-8a39-0800200c9a66'));
		$this->assertTrue(Validator::isUuid('1c0a5831-6025-11de-8a39-0800200c9a66'));
		$this->assertTrue(Validator::isUuid('1c0a5832-6025-11de-8a39-0800200c9a66'));
		$this->assertFalse(Validator::isUuid('zc0a5832-6025-11de-8a39-0800200c9a66'));
	}

	/**
	 * Tests that the rules state is reset when calling `Validator::__init()`.
	 *
	 * @return void
	 */
||||||||	public function testAddCustomRegexMethods() {
		$this->assertNull(Validator::rules('foo'));

		Validator::add('foo', '/^foo$/');
		$this->assertTrue(Validator::isFoo('foo'));
		$this->assertFalse(Validator::isFoo('bar'));
		$this->assertTrue(in_array('foo', Validator::rules()));
		$this->assertEqual('/^foo$/', Validator::rules('foo'));

		$this->expectException("Rule 'bar' is not a validation rule");
		$this->assertNull(Validator::isBar('foo'));
	}

	/**
	 * Tests that the rules state is reset when calling `Validator::__init()`.
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)
                    (AST_STATIC_CALL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR))))))