    public function register(Application $app)
    {
        /** @var Translator $translator  */
        $translator = $app['translator'];
        $translator->addTranslationFolder(__DIR__ . DIRECTORY_SEPARATOR . 'Messages');

        /** @var Collection $writerCollection */
        $writerCollection = $app['transformer.writer.collection'];

        $writerCollection['FileIo']     = new Writer\FileIo();
        $writerCollection['checkstyle'] = new Writer\Checkstyle();
        $writerCollection['sourcecode'] = new Writer\Sourcecode();
        $writerCollection['statistics'] = new Writer\Statistics();
        $writerCollection['xml']        = new Writer\Xml($app['transformer.routing.standard']);
        $writerCollection['xsl']        = new Writer\Xsl($app['monolog']);

        $writerCollection['checkstyle']->setTranslator($translator);
        $writerCollection['xml']->setTranslator($translator);

        Xslt\Extension::$routers           = $app['transformer.routing.queue'];
        Xslt\Extension::$descriptorBuilder = $app['descriptor.builder'];

        $app->register(new \phpDocumentor\Plugin\Graphs\ServiceProvider());
        $app->register(new \phpDocumentor\Plugin\Twig\ServiceProvider());
        $app->register(new \phpDocumentor\Plugin\Pdf\ServiceProvider());
    }
}||||||||    public function register(Application $app)
    {
        $this->registerTranslationMessages($app);
        $this->registerWriters($app);
        $this->registerDependenciesOnXsltExtension($app);

        $app->register(new \phpDocumentor\Plugin\Graphs\ServiceProvider());
        $app->register(new \phpDocumentor\Plugin\Twig\ServiceProvider());
        $app->register(new \phpDocumentor\Plugin\Pdf\ServiceProvider());
    }

    /**
     * Creates all writers for this plugin and adds them to the WriterCollection object.
     *
     * This action will enable transformations in templates to make use of these writers.
     *
     * @param Application $app
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_MAGIC_CONST)
                    (AST_CONST))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_NEW
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW))))