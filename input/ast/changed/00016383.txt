	public function __toString()
	{
		$temp = array();

		foreach ($this->data as $name => $rule)
		{
			// Convert the action to JSON, then back into an array otherwise
			// re-encoding will quote the JSON for the identities in the action.
			$temp[$name] = json_decode((string) $rule);
		}

		return json_encode($temp);
	}
}||||||||	public function __toString()
	{
		$temp = array();

		foreach ($this->data as $name => $rule)
		{
			if ($data = $rule->getData())
			{
				$temp[$name] = $data;
			}
		}

		return json_encode($temp, JSON_FORCE_OBJECT);
	}
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_CAST
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)))))