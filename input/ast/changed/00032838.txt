	function testLegacyDecryptLong($crypted)
	{

		$decrypted = Encryption\Crypt::legacyDecrypt($crypted, $this->pass);

		$this->assertEquals($this->dataLong, $decrypted);

	}

	/**
	 * @brief test generation of legacy encryption key
	 * @depends testLegacyDecryptShort
	 */
||||||||	function testLegacyDecryptLong($crypted)
	{

		$decrypted = Encryption\Crypt::legacyDecrypt($crypted, $this->pass);

		$this->assertEquals($this->dataLong, $decrypted);

		$this->assertFalse(Encryption\Crypt::getBlowfish(''));
	}

	/**
	 * @brief test generation of legacy encryption key
	 * @depends testLegacyDecryptShort
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_CALL
                (
                    (SCALAR))))))