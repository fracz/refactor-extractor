	public function delete()
	{
		$this->verify_not_readonly('delete');

		$this->invoke_callback('before_destroy');
		static::table()->delete($this->values_for_pk());
		$this->invoke_callback('after_destroy');

		return true;
	}

	/**
	 * Helper that creates an array of values for the primary key(s) of this model in the form of
	 * key_name => value
	 * @return array
	 */
||||||||	public function delete()
	{
		$this->verify_not_readonly('delete');

		$this->invoke_callback('before_destroy',false);
		static::table()->delete($this->values_for_pk());
		$this->invoke_callback('after_destroy',false);

		return true;
	}

	/**
	 * Helper that creates an array of values for the primary key(s) of this model in the form of
	 * key_name => value
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_STATIC_CALL)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CONST)))
    (AST_RETURN
        (AST_CONST)))