	private function writeCleanedTranslationFile($translations, $language)
	{
		$pathFixedTranslations = PIWIK_INCLUDE_PATH . '/tmp/';
		$filename = $language . '.php';
		$tstr = '<?php'.PHP_EOL;
		$tstr .= '$translations = array('.PHP_EOL;
		foreach($translations as $key => $value)
		{
			if(!empty($value))
			{
				$tstr .= "\t'".$key."' => '".addcslashes($value,"'")."',".PHP_EOL;
			}
		}
		$tstr .= ');'.PHP_EOL;
		$path = $pathFixedTranslations . $filename;
		file_put_contents($path, $tstr);
		$this->fail('Translation file errors detected in '.$filename.'...
					Wrote cleaned translation file in: '.$path .".
					You can copy the cleaned files to /langs/<br/>\n");
	}

||||||||	private function writeCleanedTranslationFile($translations, $language)
	{
		$path = Piwik_TranslationWriter::getTranslationPath($language, 'tmp');
		Piwik_TranslationWriter::saveTranslation($translations, $path);
		$this->fail('Translation file errors detected in '.$language.'...
					Wrote cleaned translation file in: '.$path .".
					You can copy the cleaned files to /lang/<br/>\n");
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_CONST)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_CONST)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_EMPTY
                            (AST_VAR)))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR))))
                                    (SCALAR))
                                (AST_CONST))))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR)))))