    public function push($value)
    {
        if ($this->busy) {
            throw new BusyError(
                'Still busy emitting the last value. Wait until the $emit coroutine has resolved.'
            );
        }

        $this->busy = true;

        if ($value instanceof \Generator) {
            $value = new Coroutine($value);
        }

        if ($value instanceof Awaitable) {
            $value = (yield $value);
        }

        $this->delayed->resolve($value);
        $this->delayed = new Delayed();

        $placeholder = $this->placeholder;
        $this->placeholder = new Placeholder($this->delayed);

        try {
            yield $placeholder->wait();
            yield $value;
        } finally {
            $this->busy = false;
        }
    }

    /**
     * Increments the number of listening iterators.
     */
||||||||    public function push($value)
    {
        while ($this->busy) {
            if (null === $this->emitting) {
                $this->emitting = new Delayed();
            }

            yield $this->emitting; // Prevent simultaneous emit.
        }

        $this->busy = true;

        try {
            if ($value instanceof \Generator) {
                $value = new Coroutine($value);
            }

            if ($value instanceof Awaitable) {
                $value = (yield $value);
            }

            if (null === $this->observable) {
                throw new CompletedError();
            }

            $this->delayed->resolve($value);
            $this->delayed = new Delayed();

            $placeholder = $this->placeholder;
            $this->placeholder = new Placeholder($this->delayed);

            yield $placeholder->wait();
        } finally {
            $this->busy = false;
            if (null !== $this->emitting) {
                $this->emitting->resolve($value);
                $this->emitting = null;
            }
        }

        yield $value;
    }

    /**
     * Increments the number of listening iterators.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_YIELD
                        (AST_VAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_TRY
        (
            (AST_YIELD
                (AST_METHOD_CALL
                    (AST_VAR))
                (NULL))
            (AST_YIELD
                (AST_VAR)
                (NULL)))
        (AST_CATCH_LIST)
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CONST)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_WHILE
        (AST_PROP
            (AST_VAR))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_NEW)))))
            (AST_YIELD
                (AST_PROP
                    (AST_VAR))
                (NULL))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (AST_VAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_YIELD
                                (AST_VAR)
                                (NULL))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW)))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_NEW))
            (AST_ASSIGN
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (AST_YIELD
                (AST_METHOD_CALL
                    (AST_VAR))
                (NULL)))
        (AST_CATCH_LIST)
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))))
    (AST_YIELD
        (AST_VAR)
        (NULL)))