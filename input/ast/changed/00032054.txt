    function parse_signed(&$p)
    {
        $struct = $p['structure'];

        // S/MIME
        if ($struct->parts[1] && $struct->parts[1]->mimetype == 'application/pkcs7-signature') {
            $this->parse_smime_signed($p);
        }
        // PGP/MIME: RFC3156
        // The multipart/signed body MUST consist of exactly two parts.
        // The first part contains the signed data in MIME canonical format,
        // including a set of appropriate content headers describing the data.
        // The second body MUST contain the PGP digital signature.  It MUST be
        // labeled with a content type of "application/pgp-signature".
        else if ($struct->ctype_parameters['protocol'] == 'application/pgp-signature'
            && count($struct->parts) == 2
            && $struct->parts[1] && $struct->parts[1]->mimetype == 'application/pgp-signature'
        ) {
            $this->parse_pgp_signed($p);
        }
    }

    /**
     * Handler for multipart/encrypted message.
     *
     * @param array Reference to hook's parameters
     */
||||||||    function parse_signed(&$p, $body = null)
    {
        $struct = $p['structure'];

        // S/MIME
        if ($struct->parts[1] && $struct->parts[1]->mimetype == 'application/pkcs7-signature') {
            $this->parse_smime_signed($p, $body);
        }
        // PGP/MIME: RFC3156
        // The multipart/signed body MUST consist of exactly two parts.
        // The first part contains the signed data in MIME canonical format,
        // including a set of appropriate content headers describing the data.
        // The second body MUST contain the PGP digital signature.  It MUST be
        // labeled with a content type of "application/pgp-signature".
        else if ($struct->ctype_parameters['protocol'] == 'application/pgp-signature'
            && count($struct->parts) == 2
            && $struct->parts[1] && $struct->parts[1]->mimetype == 'application/pgp-signature'
        ) {
            $this->parse_pgp_signed($p, $body);
        }
    }

    /**
     * Handler for multipart/encrypted message.
     *
     * @param array Reference to hook's parameters
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR))))
                                        (SCALAR)))
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)))
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR))))
                                        (SCALAR)))
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)))
                                (SCALAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR))))))))))