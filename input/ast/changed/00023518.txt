	public function nodeOpened(Latte\MacroNode $node)
	{
		$this->used = TRUE;
		$node->isEmpty = FALSE;
		$writer = new Latte\PhpWriter;
		return '<?php if (Nette\Latte\Macros\CacheMacro::createCache($netteCacheStorage, '
			. var_export(Nette\Utils\Strings::random(), TRUE)
			. ', $_g->caches' . $writer->formatArray($node->args, ', ') . ')) { ?>';
	}



	/**
	 * Node is closed.
	 * @return string
	 */
||||||||	public function nodeOpened(Latte\MacroNode $node)
	{
		$this->used = TRUE;
		$node->isEmpty = FALSE;
		return '<?php if (Nette\Latte\Macros\CacheMacro::createCache($netteCacheStorage, '
			. var_export(Nette\Utils\Strings::random(), TRUE)
			. ', $_g->caches' . Latte\PhpWriter::using($node)->formatArray(', ') . ')) { ?>';
	}



	/**
	 * Node is closed.
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_STATIC_CALL)
                                (AST_CONST))))
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_STATIC_CALL)
                                (AST_CONST))))
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))
                    (
                        (SCALAR))))
            (SCALAR))))