	public static function connect($template, $params = array(), array $options = array()) {
		if (!is_object($template)) {
			$params + array('action' => 'index');
			$class = static::$_classes['route'];
			$template = new $class(compact('template', 'params', 'options'));
		}
		return (static::$_configurations[] = $template);
	}

	/**
	 * Accepts an instance of `lithium\action\Request` (or a subclass) and matches it against each
	 * route, in the order that the routes are connected.
	 *
	 * @see lithium\action\Request
	 * @see lithium\net\http\Router::connect()
	 * @param object $request A request object containing URL and environment data.
	 * @return array Returns an array of parameters specifying how the given request should be
	 *         routed. The keys returned depend on the `Route` object that was matched, but
	 *         typically include `'controller'` and `'action'` keys.
	 */
||||||||	public static function connect($template, $params = array(), array $options = array()) {
		if (!is_object($template)) {
			$params + array('action' => 'index');
			$class = static::$_classes['route'];
			$template = new $class(compact('template', 'params') + $options);
		}
		return (static::$_configurations[] = $template);
	}

	/**
	 * Wrapper method which takes a `Request` object, parses it through all attached `Route`
	 * objects, and assigns the resulting parameters to the `Request` object, and returning it.
	 *
	 * @param object $request A request object, usually an instance of `lithium\action\Request`.
	 * @return object Returns a copy of the `Request` object with parameters applied.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (AST_VAR)
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (SCALAR)))))))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_DIM
                (AST_STATIC_PROP)
                (NULL))
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)))
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_DIM
                (AST_STATIC_PROP)
                (NULL))
            (AST_VAR))))