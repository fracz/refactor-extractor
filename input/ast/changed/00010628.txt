    public static function localizedTime($check, $type = 'datetime', $format = null)
    {
        if ($check instanceof DateTime) {
            return true;
        }
        static $methods = [
            'date' => 'parseDate',
            'time' => 'parseTime',
            'datetime' => 'parseDateTime',
        ];
        if (empty($methods[$type])) {
            throw new \InvalidArgumentException('Unsupported parser type given.');
        }
        return (!is_null(Time::{$methods[$type]}($check, $format)));
    }

    /**
     * Boolean validation, determines if value passed is a boolean integer or true/false.
     *
     * @param string $check a valid boolean
     * @return bool Success
     */
||||||||    public static function localizedTime($check, $type = 'datetime', $format = null)
    {
        if ($check instanceof DateTime) {
            return true;
        }
        static $methods = [
            'date' => 'parseDate',
            'time' => 'parseTime',
            'datetime' => 'parseDateTime',
        ];
        if (empty($methods[$type])) {
            throw new \InvalidArgumentException('Unsupported parser type given.');
        }
        return (Time::{$methods[$type]}($check, $format) !== null);
    }

    /**
     * Boolean validation, determines if value passed is a boolean integer or true/false.
     *
     * @param string $check a valid boolean
     * @return bool Success
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_RETURN
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_STATIC_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_CONST))))