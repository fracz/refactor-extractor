    public function setUp()
    {
        parent::setUp();

        if (!defined('__PS_BASE_URI__')) {
            define('__PS_BASE_URI__', "http://www.example.com/shop");
        }

        $this->context->language = new \stdClass();
        $this->context->language->id = 42;
        $this->context->language->iso_code = 'fr';
        $this->legacyContext = Phake::partialMock('PrestaShop\\PrestaShop\\Adapter\\LegacyContext');
        Phake::when($this->legacyContext)->getAdminBaseUrl()->thenReturn('admin_fake_base');

        if (! isset($_SERVER['HTTP_HOST'])) {
            $this->http_host_not_found = true;
            $_SERVER['HTTP_HOST'] = 'localhost';
        }

        $this->setupSfKernel();
        $this->sfRouter = $this->sfKernel->getContainer()->get('router');

        // We try to load the Addons catalog. If it fails, we skip the tests of this file.
        try {
            $dataProvider = new AdminModuleDataProvider($this->context->language->iso_code, $this->sfRouter);
            $dataProvider->getCatalogModules();
        } catch (\Exception $e) {
            if ($e->getMessage() == 'Data from PrestaShop Addons is invalid, and cannot fallback on cache') {
                $this->markTestSkipped('The Addons catalog is not available, test skipped x_x');
            }
        }
    }

||||||||    public function setUp()
    {
        parent::setUp();

        $this->context->language = new \stdClass();
        $this->context->language->id = 42;
        $this->context->language->iso_code = 'fr';
        $this->legacyContext = Phake::partialMock('PrestaShop\\PrestaShop\\Adapter\\LegacyContext');
        Phake::when($this->legacyContext)->getAdminBaseUrl()->thenReturn('admin_fake_base');

        if (! isset($_SERVER['HTTP_HOST'])) {
            $this->http_host_not_found = true;
            $_SERVER['HTTP_HOST'] = 'localhost';
        }

        $this->setupSfKernel();
        $this->sfRouter = $this->sfKernel->getContainer()->get('router');

        // We try to load the Addons catalog. If it fails, we skip the tests of this file.
        try {
            $dataProvider = new AdminModuleDataProvider($this->context->language->iso_code, $this->sfRouter);
            $dataProvider->getCatalogModules();
        } catch (\Exception $e) {
            if ($e->getMessage() == 'Data from PrestaShop Addons is invalid, and cannot fallback on cache') {
                $this->markTestSkipped('The Addons catalog is not available, test skipped x_x');
            }
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_PROP
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))))))))
        (NULL)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR)))))
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (SCALAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (AST_PROP
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (SCALAR)))))))))
        (NULL)))