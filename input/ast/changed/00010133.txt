	public function __get($name) {
		list($plugin, $class) = pluginSplit($this->modelClass, true);
		if ($class === $name) {
			$this->loadModel($plugin . $class);
			return $this->{$class};
		}
		return false;
	}

/**
 * Sets the request objects and configures a number of controller properties
 * based on the contents of the request. Controller acts as a proxy for certain View variables
 * which must also be updated here. The properties that get set are:
 *
 * - $this->request - To the $request parameter
 * - $this->plugin - To the $request->params['plugin']
 * - $this->autoRender - To false if $request->params['return'] == 1
 * - $this->passedArgs - The the combined results of params['named'] and params['pass]
 * - View::$passedArgs - $this->passedArgs
 * - View::$plugin - $this->plugin
 * - View::$view - To the $request->params['action']
 * - View::$autoLayout - To the false if $request->params['bare']; is set.
 *
 * @param \Cake\Network\Request $request Request instance.
 * @return void
 */
||||||||	public function __get($name) {
		list($plugin, $class) = pluginSplit($this->modelClass, true);
		if ($class !== $name) {
			return false;
		}
		return $this->loadModel($plugin . $class);
	}

/**
 * Sets the request objects and configures a number of controller properties
 * based on the contents of the request. Controller acts as a proxy for certain View variables
 * which must also be updated here. The properties that get set are:
 *
 * - $this->request - To the $request parameter
 * - $this->plugin - To the $request->params['plugin']
 * - $this->autoRender - To false if $request->params['return'] == 1
 * - $this->passedArgs - The the combined results of params['named'] and params['pass]
 * - View::$passedArgs - $this->passedArgs
 * - View::$plugin - $this->plugin
 * - View::$view - To the $request->params['action']
 * - View::$autoLayout - To the false if $request->params['bare']; is set.
 *
 * @param \Cake\Network\Request $request Request instance.
 * @return void
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))))
                (AST_RETURN
                    (AST_PROP
                        (AST_VAR))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))))))