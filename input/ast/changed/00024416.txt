	protected function finishPartialMode()
	{
		// discard any output
		ob_end_clean();

		$httpResponse = Environment::getHttpResponse();
		$httpResponse->setContentType('application/x-javascript', 'utf-8');
		$httpResponse->expire(FALSE);

		/*
		if ($this->isInvalid()) {
			$uri = $this->thisPresenter()->constructUrl();
			echo "nette.redirect(", json_encode($uri), ");\n";
			return;
		}
		*/

		// TODO: use partial template?
		foreach ($this->partials as $id => $content) {
			echo "nette.updateHtml(", json_encode($id), ', ', json_encode($content), ");\n";
		}

		$state = array();
		$this->saveState($state);
		$state = http_build_query($state, NULL, '&');
		echo "nette.updateState(", json_encode($state), ");\n";
	}



	/********************* navigation & flow ****************d*g**/



	/**
	 * Generate URL to presenter/view/signal.
	 * @param  string
	 * @param  array|mixed
	 * @return string
	 */
||||||||	protected function finishPartialMode()
	{
		// discard any output
		ob_end_clean();

		$this->httpResponse->setContentType('application/x-javascript', 'utf-8');
		$this->httpResponse->expire(FALSE);

		/*
		if ($this->isInvalid()) {
			$uri = $this->thisPresenter()->constructUrl();
			echo "nette.redirect(", json_encode($uri), ");\n";
			return;
		}
		*/

		// TODO: use partial template?
		foreach ($this->partials as $id => $content) {
			echo "nette.updateHtml(", json_encode($id), ', ', json_encode($content), ");\n";
		}

		$state = array();
		$this->saveState($state);
		$state = http_build_query($state, NULL, '&');
		echo "nette.updateState(", json_encode($state), ");\n";
	}



	/********************* navigation & flow ****************d*g**/



	/**
	 * Generate URL to presenter/view/signal.
	 * @param  string
	 * @param  array|mixed
	 * @return string
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_ECHO
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ECHO
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL)
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CONST)))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_ECHO
                (SCALAR))
            (AST_ECHO
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_ECHO
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ECHO
        (SCALAR)))