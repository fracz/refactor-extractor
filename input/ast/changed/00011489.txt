	public function testBeforeMatch()
	{

		$trace = 0;

		$router = new Phalcon\Mvc\Router(false);

		$router
			->add('/static/route')
			->beforeMatch(function() use (&$trace) {
				$trace++;
				return false;
			});

		$router
			->add('/static/route2')
			->beforeMatch(function() use (&$trace) {
				$trace++;
				return true;
			});

		$router->handle();
		$this->assertFalse($router->wasMatched());

		$router->handle('/static/route');
		$this->assertFalse($router->wasMatched());

		$router->handle('/static/route2');
		$this->assertTrue($router->wasMatched());

		$this->assertEquals($trace, 2);
	}

}||||||||	public function testBeforeMatch()
	{
		Phalcon\Mvc\Router\Route::reset();

		$trace = 0;

		$router = new Phalcon\Mvc\Router(false);

		$router
			->add('/static/route')
			->beforeMatch(function() use (&$trace) {
				$trace++;
				return false;
			});

		$router
			->add('/static/route2')
			->beforeMatch(function() use (&$trace) {
				$trace++;
				return true;
			});

		$router->handle();
		$this->assertFalse($router->wasMatched());

		$router->handle('/static/route');
		$this->assertFalse($router->wasMatched());

		$router->handle('/static/route2');
		$this->assertTrue($router->wasMatched());

		$this->assertEquals($trace, 2);
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_CLOSURE
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_POST_INC
                        (AST_VAR))
                    (AST_RETURN
                        (AST_CONST))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_CLOSURE
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_POST_INC
                        (AST_VAR))
                    (AST_RETURN
                        (AST_CONST))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_CLOSURE
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_POST_INC
                        (AST_VAR))
                    (AST_RETURN
                        (AST_CONST))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_CLOSURE
                (AST_CLOSURE_USES
                    (AST_CLOSURE_VAR))
                (
                    (AST_POST_INC
                        (AST_VAR))
                    (AST_RETURN
                        (AST_CONST))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR))))