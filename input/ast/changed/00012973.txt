	public static function configureFacadeWithToolbox( RedBean_ToolBox $tb ) {

		$oldTools = self::$toolbox;

		self::$toolbox = $tb;
		self::$writer = self::$toolbox->getWriter();
		self::$adapter = self::$toolbox->getDatabaseAdapter();
		self::$redbean = self::$toolbox->getRedBean();
		self::$associationManager = new RedBean_AssociationManager( self::$toolbox );
		self::$treeManager = new RedBean_TreeManager( self::$toolbox );
		self::$linkManager = new RedBean_LinkManager( self::$toolbox );
		self::$extAssocManager = new RedBean_ExtAssociationManager( self::$toolbox );
		$helper = new RedBean_ModelHelper();
		self::$redbean->addEventListener("update", $helper );
		self::$redbean->addEventListener("open", $helper );
		self::$redbean->addEventListener("delete", $helper );
		self::$redbean->addEventListener("after_delete", $helper );
		self::$redbean->addEventListener("after_update", $helper );
		self::$redbean->addEventListener("dispense", $helper );

		return $oldTools;
	}

	/**
	 * facade method for Cooker.
	 *
	 * @static
	 * @param  $arr
	 * @return array
	 */
||||||||	public static function configureFacadeWithToolbox( RedBean_ToolBox $tb ) {

		$oldTools = self::$toolbox;

		self::$toolbox = $tb;
		self::$writer = self::$toolbox->getWriter();
		self::$adapter = self::$toolbox->getDatabaseAdapter();
		self::$redbean = self::$toolbox->getRedBean();
		self::$associationManager = new RedBean_AssociationManager( self::$toolbox );
		self::$treeManager = new RedBean_TreeManager( self::$toolbox );
		self::$linkManager = new RedBean_LinkManager( self::$toolbox );
		self::$extAssocManager = new RedBean_ExtAssociationManager( self::$toolbox );
		$helper = new RedBean_ModelHelper();
		self::$redbean->addEventListener("update", $helper );
		self::$redbean->addEventListener("open", $helper );
		self::$redbean->addEventListener("delete", $helper );


		self::$associationManager->addEventListener("delete", $helper );

		self::$redbean->addEventListener("after_delete", $helper );
		self::$redbean->addEventListener("after_update", $helper );
		self::$redbean->addEventListener("dispense", $helper );

		return $oldTools;
	}

	/**
	 * facade method for Cooker.
	 *
	 * @static
	 * @param  $arr
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_METHOD_CALL
            (AST_STATIC_PROP)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_NEW
            (
                (AST_STATIC_PROP))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))