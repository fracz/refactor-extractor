class RedBean_OODB { public $pkey = false; private $rollback = false; private static $me = null; private $engine = "myisam"; private $frozen = false; private $toolbox = null; public function initWithToolBox( RedBean_ToolBox_ModHub $toolbox ) { $this->toolbox = $toolbox; $db = $this->toolbox->getDatabase(); $writer = $this->toolbox->getWriter(); if ($this->engine === "innodb") { $db->exec($writer->getQuery("prepare_innodb")); $db->exec($writer->getQuery("starttransaction")); } else if ($this->engine === "myisam") { $db->exec($writer->getQuery("prepare_myisam")); } if (!$this->frozen) { $db->exec($writer->getQuery("clear_dtyp")); $db->exec($writer->getQuery("setup_dtyp")); $db->exec($writer->getQuery("setup_locking")); $db->exec($writer->getQuery("setup_tables")); } return true; } public function __destruct() { $this->getToolBox()->getLockManager()->unlockAll(); $this->toolbox->getDatabase()->exec( $this->toolbox->getWriter()->getQuery("destruct", array("engine"=>$this->engine,"rollback"=>$this->rollback)) ); } public function isFrozen() { return (boolean) $this->frozen; } public static function getInstance( RedBean_ToolBox_ModHub $toolbox = NULL ) { if (self::$me === null) { self::$me = new RedBean_OODB; } if ($toolbox) self::$me->initWithToolBox( $toolbox ); return self::$me; } public function getToolBox() { return $this->toolbox; } public function getEngine() { return $this->engine; } public function setEngine( $engine ) { if ($engine=="myisam" || $engine=="innodb") { $this->engine = $engine; } else { throw new Exception("Unsupported database engine"); } return $this->engine; } public static function rollback() { $this->rollback = true; } public function freeze() { $this->frozen = true; } public function unfreeze() { $this->frozen = false; } public function generate( $classes, $prefix = false, $suffix = false ) { return $this->toolbox->getClassGenerator()->generate($classes,$prefix,$suffix); } public static function gen($arg, $prefix = false, $suffix = false) { return self::getInstance()->generate($arg, $prefix, $suffix); } public static function keepInShape($gc = false ,$stdTable=false, $stdCol=false) { return self::getInstance()->getToolBox()->getOptimizer()->run($gc, $stdTable, $stdCol); } public static function kickstartDev( $gen, $dsn, $username="root", $password="", $debug=false ) { return RedBean_Setup::kickstartDev( $gen, $dsn, $username, $password, $debug ); } public static function kickstartFrozen( $gen, $dsn, $username="root", $password="" ) { return RedBean_Setip::kickstartFrozen( $gen, $dsn, $username, $password); } }
class RedBean_OODBBean { }
||||||||class RedBean_OODB extends RedBean_Observable { private $writer; private $isFrozen = false; public function __construct( RedBean_QueryWriter $writer ) { $this->writer = $writer; $this->tableRegister = new RedBean_TableRegister( $writer ); } public function freeze( $tf ) { $isFrozen = (bool) $tf; } public function dispense($type ) { $bean = new RedBean_Bean(); $bean->__info = array( "type"=>$type ); $bean->id = 0; $this->check( $bean ); return $bean; } public function check( RedBean_OODBBean $bean ) { if (!isset($bean->__info)) { throw new RedBean_Exception_Security("Bean has no Meta Information"); } if (!isset($bean->id) || !isset($bean->__info["type"])) { throw new RedBean_Exception_Security("Bean has incomplete Meta Information"); } $pattern = '/[^abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_]/'; if (preg_match($pattern,$bean->__info["type"])) { throw new RedBean_Exception_Security("Bean Type is invalid"); } foreach($bean as $prop=>$value) { if ( ($prop != "__info") && ( is_array($value) || is_object($value) || strlen($prop)<1 || preg_match($pattern,$prop) ) ) { throw new RedBean_Exception_Security("Invalid Bean: property $prop OR value $value "); } } } public function store( RedBean_OODBBean $bean ) { $this->signal( "update", $bean ); $this->check($bean); $table = $this->writer->escape($bean->__info["type"]); if (!$this->isFrozen) { $tables = $this->writer->getTables(); if (!in_array($table, $tables)) { $this->writer->createTable( $table ); } $columns = $this->writer->getColumns($table) ; $insertvalues = array(); $insertcolumns = array(); $updatevalues = array(); foreach( $bean as $p=>$v) { if ($p!="__info" && $p!="id") { $typeno = $this->writer->scanType($v); if (isset($columns[$p])) { $sqlt = $this->writer->code($columns[$p]); if ($typeno > $sqlt) { $this->writer->widenColumn( $table, $p, $typeno ); } } else { $this->writer->addColumn($table, $p, $typeno); } $insertvalues[] = $v; $insertcolumns[] = $p; $updatevalues[] = array( "property"=>$p, "value"=>$v ); } } if ($bean->id) { if (count($updatevalues)>0) { $this->writer->updateRecord( $table, $updatevalues, $bean->id ); } return (int) $bean->id; } else { $id = $this->writer->insertRecord( $table, $insertcolumns, $insertvalues ); $bean->id = $id; return (int) $id; } } } public function load($type, $id) { $bean = $this->dispense( $type ); $row = $this->writer->selectRecord($type,$id); foreach($row as $p=>$v) { $bean->$p = $v; } $this->signal( "open", $bean ); return $bean; } public function trash( $bean ) { $this->check( $bean ); $this->writer->deleteRecord( $bean->__info["type"], $bean->id ); } }
interface RedBean_OODBBean { } class RedBean_Bean implements RedBean_OODBBean { }
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR))))