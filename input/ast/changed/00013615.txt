    private function transfer(RequestInterface $request, array $options)
    {
        if (!isset($options['stack'])) {
            $options['stack'] = new HandlerBuilder();
        } elseif (!($options['stack'] instanceof HandlerBuilder)) {
            throw new \InvalidArgumentException('The stack option must be an instance of GuzzleHttp\\HandlerBuilder');
        }

        $handler = $this->createHandler($request, $options);
        $request = $this->applyOptions($request, $options);

        try {
            $response = $handler($request, $options);
            if ($response instanceof ResponsePromiseInterface) {
                return $response;
            } elseif ($response instanceof PromiseInterface) {
                return ResponsePromise::fromPromise($response);
            }
            return new FulfilledResponse($response);
        } catch (\Exception $e) {
            return new RejectedResponse($e);
        }
    }

    /**
     * Create a composite handler based on the given request options.
     *
     * @param RequestInterface $request Request to send.
     * @param array            $options Array of request options.
     *
     * @return callable
     */
||||||||    private function transfer(RequestInterface $request, array $options)
    {
        if (!isset($options['stack'])) {
            $options['stack'] = new HandlerBuilder();
        } elseif (!($options['stack'] instanceof HandlerBuilder)) {
            throw new \InvalidArgumentException('The stack option must be an instance of GuzzleHttp\\HandlerBuilder');
        }

        $handler = $this->createHandler($request, $options);
        $request = $this->applyOptions($request, $options);

        try {
            $response = $handler($request, $options);
            if ($response instanceof PromiseInterface) {
                return $response;
            }
            return \GuzzleHttp\Promise\promise_for($response);
        } catch (\Exception $e) {
            return \GuzzleHttp\Promise\rejection_for($e);
        }
    }

    /**
     * Create a composite handler based on the given request options.
     *
     * @param RequestInterface $request Request to send.
     * @param array            $options Array of request options.
     *
     * @return callable
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_NEW))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_RETURN
                            (AST_VAR))))
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_RETURN
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))
            (AST_RETURN
                (AST_NEW
                    (
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_NEW
                            (
                                (AST_VAR)))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_NEW))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_RETURN
                            (AST_VAR)))))
            (AST_RETURN
                (AST_CALL
                    (
                        (AST_VAR)))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR)))))))
        (NULL)))