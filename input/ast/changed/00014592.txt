	public static function optimize()
	{
		// Get the indexer state.
		$state = self::getState();

		// Get the database object.
		$db = JFactory::getDBO();
		$query = $db->getQuery(true);

		// Delete all orphaned terms.
		$query->delete();
		$query->from($db->quoteName('#__finder_terms'));
		$query->where($db->quoteName('links') . ' <= 0');
		$db->setQuery($query);
		$db->execute();

		// Optimize the links table.
		//@TODO: PostgreSQL doesn't support OPTIMIZE TABLE
		// Temporary workaround for non-MySQL solutions
		if (strpos($db->name, 'mysql') === 0)
		{
			$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links'));
			$db->execute();
		}

		//@TODO: PostgreSQL doesn't support OPTIMIZE TABLE
		// Temporary workaround for non-MySQL solutions
		if (strpos($db->name, 'mysql') === 0)
		{
			for ($i = 0; $i <= 15; $i++)
			{
				// Optimize the terms mapping table.
				$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links_terms' . dechex($i)));
				$db->execute();
			}
		}

		// Optimize the terms mapping table.
		//@TODO: PostgreSQL doesn't support OPTIMIZE TABLE
		// Temporary workaround for non-MySQL solutions
		if (strpos($db->name, 'mysql') === 0)
		{
			$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_links_terms'));
			$db->execute();
		}

		// Remove the orphaned taxonomy nodes.
		FinderIndexerTaxonomy::removeOrphanNodes();

		// Optimize the taxonomy mapping table.
		//@TODO: PostgreSQL doesn't support OPTIMIZE TABLE
		// Temporary workaround for non-MySQL solutions
		if (strpos($db->name, 'mysql') === 0)
		{
			$db->setQuery('OPTIMIZE TABLE ' . $db->quoteName('#__finder_taxonomy_map'));
			$db->execute();
		}

		return true;
	}

	/**
	 * Method to get a content item's signature.
	 *
	 * @param   object  $item  The content item to index.
	 *
	 * @return  string  The content item's signature.
	 *
	 * @since   2.5
	 */
||||||||	abstract public function optimize();

	/**
	 * Method to get a content item's signature.
	 *
	 * @param   object  $item  The content item to index.
	 *
	 * @return  string  The content item's signature.
	 *
	 * @since   2.5
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))
            (
                (AST_FOR
                    (AST_EXPR_LIST
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))
                    (AST_EXPR_LIST
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (AST_EXPR_LIST
                        (AST_POST_INC
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))))))))
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_STATIC_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NULL)