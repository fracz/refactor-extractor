    public function parseForContentType(AbstractCommand $command, Response $response, $contentType)
    {
        $operation = $command->getOperation();

        $model = $operation->getResponseType() == 'model'
            && $command->get(AbstractCommand::RESPONSE_PROCESSING) == AbstractCommand::TYPE_MODEL
            ? $operation->getServiceDescription()->getModel($operation->getResponseClass())
            : null;

        // No further processing is needed if the responseType is not model or using native responses, or the model
        // cannot be found
        if (!$model) {
            return parent::parseForContentType($command, $response, $contentType);
        }

        $result = null;
        if ($body = $response->getBody()) {
            if (stripos($contentType, 'json') !== false) {
                $result = $this->parseJson($body);
            } if (stripos($contentType, 'xml') !== false) {
                $result = json_decode(json_encode(new \SimpleXMLElement((string) $body)), true);
            }
        }

        if ($result === null) {
            $result = array();
        }

        // Perform transformations on the result using location visitors
        return $this->visitResult($model, $command, $response, $result);
    }

    /**
     * Perform transformations on the result array
     *
     * @param Parameter        $model    Model that defines the structure
     * @param CommandInterface $command  Command that performed the operation
     * @param Response         $response Response received
     * @param array            $result   Result array
     * @param mixed            $context  Parsing context
     *
     * @return Model
     */
||||||||    public function parseForContentType(AbstractCommand $command, Response $response, $contentType)
    {
        // Perform that default native processing
        $result = parent::parseForContentType($command, $response, $contentType);

        $operation = $command->getOperation();
        $model = $operation->getResponseType() == 'model'
            && $command->get(AbstractCommand::RESPONSE_PROCESSING) == AbstractCommand::TYPE_MODEL
            ? $operation->getServiceDescription()->getModel($operation->getResponseClass())
            : null;

        // No further processing is needed if the responseType is not model or using native responses, or the model
        // cannot be found
        if (!$model) {
            return $result;
        }

        if ($result instanceof \SimpleXMLElement) {
            $result = json_decode(json_encode($result), true);
        } elseif ($result instanceof Response) {
            $result = array();
        }

        // Perform transformations on the result using location visitors
        $this->visitResult($model, $command, $response, $result);

        return new Model($result, $model);
    }

    /**
     * Perform transformations on the result array
     *
     * @param Parameter        $model    Model that defines the structure
     * @param CommandInterface $command  Command that performed the operation
     * @param Response         $response Response received
     * @param array            $result   Result array
     * @param mixed            $context  Parsing context
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_NEW
                                                    (
                                                        (AST_CAST
                                                            (AST_VAR))))))
                                        (AST_CONST))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (AST_CLASS_CONST
                        (SCALAR))))
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_CONST)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_CONST))))))
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR)))))