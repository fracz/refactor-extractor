    public function changeProfilePicture(
        $photoFilename)
    {
        $this->_throwIfNotLoggedIn();

        $endpoint = 'accounts/change_profile_picture/';

        // Verify that the file exists locally.
        if (!is_file($photoFilename)) {
            throw new \InvalidArgumentException(sprintf('The photo file "%s" does not exist on disk.', $photoFilename));
        }

        // Prepare payload for the upload request.
        $boundary = Utils::generateMultipartBoundary();
        $uData = json_encode([
            '_csrftoken' => $this->_parent->token,
            '_uuid'      => $this->_parent->uuid,
            '_uid'       => $this->_parent->account_id,
        ]);
        $bodies = [
            [
                'type' => 'form-data',
                'name' => 'ig_sig_key_version',
                'data' => Constants::SIG_KEY_VERSION,
            ],
            [
                'type' => 'form-data',
                'name' => 'signed_body',
                'data' => hash_hmac('sha256', $uData, Constants::IG_SIG_KEY).$uData,
            ],
            [
                'type'     => 'form-data',
                'name'     => 'profile_pic',
                'data'     => file_get_contents($photoFilename),
                'filename' => 'profile_pic',
                'headers'  => [
                    'Content-Type: application/octet-stream',
                    'Content-Transfer-Encoding: binary',
                ],
            ],
        ];
        $payload = $this->_buildBody($bodies, $boundary);

        // Build the request options.
        $method = 'POST';
        $headers = [
            'User-Agent'       => $this->_userAgent,
            'Proxy-Connection' => 'keep-alive',
            'Connection'       => 'keep-alive',
            'Accept'           => '*/*',
            'Content-Type'     => 'multipart/form-data; boundary='.$boundary,
            'Accept-Language'  => Constants::ACCEPT_LANGUAGE,
        ];
        $options = [
            'headers' => $headers,
            'body'    => $payload,
        ];

        // Perform the API request.
        $response = $this->_apiRequest(
            $method,
            1, // API Version.
            $endpoint,
            $options,
            [
                'debugUploadedBody'  => false,
                'debugUploadedBytes' => true,
                'decodeToObject'     => new Response\Model\User(),
            ]
        );

        return $response['object'];
    }

    /**
     * Perform a direct media share to specific users.
     *
     * @param string          $shareType  Either "share", "message" or "photo".
     * @param string[]|string $recipients Either a single recipient or an array
     *                                    of multiple recipient strings.
     * @param array           $shareData  Depends on shareType: "share" uses
     *                                    "text" and "media_id". "message" uses
     *                                    "text". "photo" uses "text" and "filepath".
     *
     * @throws \InvalidArgumentException
     * @throws \InstagramAPI\Exception\InstagramException
     *
     * @return \InstagramAPI\Response
     */
||||||||    public function changeProfilePicture(
        $photoFilename)
    {
        $this->_throwIfNotLoggedIn();

        $endpoint = 'accounts/change_profile_picture/';

        // Verify that the file exists locally.
        if (!is_file($photoFilename)) {
            throw new \InvalidArgumentException(sprintf('The photo file "%s" does not exist on disk.', $photoFilename));
        }

        // Prepare payload for the upload request.
        $boundary = Utils::generateMultipartBoundary();
        $uData = json_encode([
            '_csrftoken' => $this->getToken(),
            '_uuid'      => $this->_parent->uuid,
            '_uid'       => $this->_parent->account_id,
        ]);
        $bodies = [
            [
                'type' => 'form-data',
                'name' => 'ig_sig_key_version',
                'data' => Constants::SIG_KEY_VERSION,
            ],
            [
                'type' => 'form-data',
                'name' => 'signed_body',
                'data' => hash_hmac('sha256', $uData, Constants::IG_SIG_KEY).$uData,
            ],
            [
                'type'     => 'form-data',
                'name'     => 'profile_pic',
                'data'     => file_get_contents($photoFilename),
                'filename' => 'profile_pic',
                'headers'  => [
                    'Content-Type: application/octet-stream',
                    'Content-Transfer-Encoding: binary',
                ],
            ],
        ];
        $payload = $this->_buildBody($bodies, $boundary);

        // Build the request options.
        $method = 'POST';
        $headers = [
            'User-Agent'       => $this->_userAgent,
            'Proxy-Connection' => 'keep-alive',
            'Connection'       => 'keep-alive',
            'Accept'           => '*/*',
            'Content-Type'     => 'multipart/form-data; boundary='.$boundary,
            'Accept-Language'  => Constants::ACCEPT_LANGUAGE,
        ];
        $options = [
            'headers' => $headers,
            'body'    => $payload,
        ];

        // Perform the API request.
        $response = $this->_apiRequest(
            $method,
            1, // API Version.
            $endpoint,
            $options,
            [
                'debugUploadedBody'  => false,
                'debugUploadedBytes' => true,
                'decodeToObject'     => new Response\Model\User(),
            ]
        );

        return $response['object'];
    }

    /**
     * Perform a direct media share to specific users.
     *
     * @param string          $shareType  Either "share", "message" or "photo".
     * @param string[]|string $recipients Either a single recipient or an array
     *                                    of multiple recipient strings.
     * @param array           $shareData  Depends on shareType: "share" uses
     *                                    "text" and "media_id". "message" uses
     *                                    "text". "photo" uses "text" and "filepath".
     *
     * @throws \InvalidArgumentException
     * @throws \InstagramAPI\Exception\InstagramException
     *
     * @return \InstagramAPI\Response
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (AST_VAR))
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (SCALAR)))
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (SCALAR))))))
    (AST_RETURN
        (AST_DIM
            (AST_VAR)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_PROP
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))))
                            (AST_VAR))
                        (SCALAR)))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL)))
                        (SCALAR)))
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_CONST)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (SCALAR))))))
    (AST_RETURN
        (AST_DIM
            (AST_VAR)
            (SCALAR))))