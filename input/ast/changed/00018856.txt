    public function validate( $rules = array(), $customMessages = array() ) {

        $success = true;

        $rules = ( empty( $rules ) ) ? static::$rules : $rules;

        if ( empty( $this->attributes ) && $this->autoHydrateEntityFromInput ) {
            // pluck only the fields which are defined in the validation rule-set
            $this->attributes = array_intersect_key( Input::all(), $rules );
        }

        $data = $this->attributes; // the data under validation

        if ( !empty( $rules ) || !empty( static::$rules ) ) {

            // check for overrides
            $rules = ( empty( $rules ) ) ? static::$rules : $rules;
            $customMessages = ( empty( $customMessages ) ) ? static::$customMessages : $customMessages;

            // construct the validator
            $validator = Validator::make( $data, $rules, $customMessages );
            $success = $validator->passes();

            if ( $success ) {
                // if the model is valid, unset old errors
                if ( $this->validationErrors->count() > 0 ) {
                    $this->validationErrors = new MessageBag;
                }
            } else {
                // otherwise set the new ones
                $this->validationErrors = $validator->messages();

                // stash the input to the current session
                if ( Input::hasSessionStore() ) {
                    Input::flash();
                }
            }

        }

        return $success;
    }

    /**
     * Invoked before a model is saved. Return false to abort the operation.
     *
     * @param bool    $forced Indicates whether the model is being saved forcefully
     * @return bool
     */
||||||||    public function validate( $rules = array(), $customMessages = array() ) {

        $success = false;

        if ( empty( $this->attributes ) && $this->autoHydrateEntityFromInput ) {
            // pluck only the fields which are defined in the validation rule-set
            $this->attributes = array_intersect_key( Input::all(), $rules );
        }

        $data = $this->attributes; // the data under validation

        // check for overrides
        $rules = ( empty( $rules ) ) ? static::$rules : $rules;
        $customMessages = ( empty( $customMessages ) ) ? static::$customMessages : $customMessages;

        if ( !empty( $data ) && !empty( $rules ) ) {

            // perform validation
            $validator = Validator::make( $data, $rules, $customMessages );
            $success = $validator->passes();

            if ( $success ) {
                // if the model is valid, unset old errors
                if ( $this->validationErrors->count() > 0 ) {
                    $this->validationErrors = new MessageBag;
                }
            } else {
                // otherwise set the new ones
                $this->validationErrors = $validator->messages();

                // stash the input to the current session
                if ( Input::hasSessionStore() ) {
                    Input::flash();
                }
            }

        }

        return $success;
    }

    /**
     * Invoked before a model is saved. Return false to abort the operation.
     *
     * @param bool    $forced Indicates whether the model is being saved forcefully
     * @return bool
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (AST_STATIC_PROP)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (AST_STATIC_CALL)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_STATIC_PROP))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_STATIC_PROP)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_STATIC_PROP)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR))
                                    (
                                        (AST_ASSIGN
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_NEW)))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_STATIC_CALL)
                                    (
                                        (AST_STATIC_CALL))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR)))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL
                        (
                            (AST_STATIC_CALL)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (AST_STATIC_PROP)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_EMPTY
                (AST_VAR))
            (AST_STATIC_PROP)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_EMPTY
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR))
                                    (
                                        (AST_ASSIGN
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_NEW)))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_STATIC_CALL)
                                    (
                                        (AST_STATIC_CALL))))))))))
    (AST_RETURN
        (AST_VAR)))