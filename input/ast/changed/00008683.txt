	protected function single_install_switcher( $theme ) {
		$show_button            = true;
		$options                = get_site_option( 'github_updater' );
		$theme_update_transient = get_site_transient( 'update_themes' );
		$nonced_update_url      = wp_nonce_url(
			$this->get_update_url( 'theme', 'upgrade-theme', $theme->repo ),
			'upgrade-theme_' . $theme->repo
		);
		$rollback_url           = sprintf( '%s%s', $nonced_update_url, '&rollback=' );

		ob_start();
		printf( '<p>' . esc_html__( 'Current branch is `%s`. Try %sanother version%s', 'github-updater' ),
			$theme->branch,
			'<a href="#" onclick="jQuery(\'#ghu_versions\').toggle();return false;">',
			'</a></p>'
		);
		?>
		<div id="ghu_versions" style="display:none; width: 100%;">
			<label><select style="width: 60%;"
			               onchange="if(jQuery(this).val() != '') {
				               jQuery(this).parent().next().show();
				               jQuery(this).parent().next().attr('href','<?php echo esc_url( $rollback_url ) ?>'+jQuery(this).val());
				               }
				               else jQuery(this).parent().next().hide();
				               ">
					<option value=""><?php esc_html_e( 'Choose a Version', 'github-updater' ); ?>&#8230;</option>
					<?php
					if ( ! empty( $options['branch_switch'] ) ) {
						foreach ( array_keys( $theme->branches ) as $branch ) {
							echo '<option>' . $branch . '</option>';
						}
					}
					if ( isset( $theme_update_transient->up_to_date[ $theme->repo ] ) ) {
						foreach ( array_keys( $theme_update_transient->up_to_date[ $theme->repo ]['rollback'] ) as $version ) {
							echo '<option>' . $version . '</option>';
						}
					}
					if ( empty( $options['branch_switch'] ) &&
					     empty( $theme_update_transient->up_to_date[ $theme->repo ]['rollback'] )
					) {
						echo '<option>' . esc_html__( 'No previous tags to rollback to.', 'github-updater' ) . '</option></select></label>';
						$show_button = false;
					}
					?>
				</select></label>
			<?php if ( $show_button ) : ?>
				<a style="display: none;" class="button-primary" href="?"><?php esc_html_e( 'Install', 'github-updater' ); ?></a>
			<?php endif; ?>
		</div>
		<?php

		return trim( ob_get_clean(), '1' );
	}

	/**
	 * Hook into pre_set_site_transient_update_themes to update.
	 * Finds newest tag and compares to current tag.
	 *
	 * @param array $transient
	 *
	 * @return array|object
	 */
||||||||	protected function single_install_switcher( $theme ) {
		$show_button            = true;
		$options                = get_site_option( 'github_updater' );
		$theme_update_transient = get_site_transient( 'update_themes' );
		$nonced_update_url      = wp_nonce_url(
			$this->get_update_url( 'theme', 'upgrade-theme', $theme->repo ),
			'upgrade-theme_' . $theme->repo
		);
		$rollback_url           = sprintf( '%s%s', $nonced_update_url, '&rollback=' );

		ob_start();
		printf( '<p>' . esc_html__( 'Current branch is `%s`. Try %sanother version%s', 'github-updater' ),
			$theme->branch,
			'<a href="#" onclick="jQuery(\'#ghu_versions\').toggle();return false;">',
			'</a></p>'
		);
		?>
		<div id="ghu_versions" style="display:none; width: 100%;">
			<label><select style="width: 60%;"
			               onchange="if(jQuery(this).val() != '') {
				               jQuery(this).parent().next().show();
				               jQuery(this).parent().next().attr('href','<?php echo esc_url( $rollback_url ) ?>'+jQuery(this).val());
				               }
				               else jQuery(this).parent().next().hide();
				               ">
					<option value=""><?php esc_html_e( 'Choose a Version', 'github-updater' ); ?>&#8230;</option>
					<?php
					if ( ! empty( $options['branch_switch'] ) ) {
						foreach ( array_keys( $theme->branches ) as $branch ) {
							echo '<option>' . $branch . '</option>';
						}
					}
					if ( isset( $theme_update_transient->up_to_date[ $theme->repo ] ) ) {
						$rollback = array_slice( $theme_update_transient->up_to_date[ $theme->repo ]['rollback'], 0, 4, true );
						array_shift( $rollback );
						foreach ( array_keys( $rollback ) as $version ) {
							echo '<option>' . $version . '</option>';
						}
					}
					if ( empty( $options['branch_switch'] ) &&
					     empty( $theme_update_transient->up_to_date[ $theme->repo ]['rollback'] )
					) {
						echo '<option>' . esc_html__( 'No previous tags to rollback to.', 'github-updater' ) . '</option></select></label>';
						$show_button = false;
					}
					?>
				</select></label>
			<?php if ( $show_button ) : ?>
				<a style="display: none;" class="button-primary" href="?"><?php esc_html_e( 'Install', 'github-updater' ); ?></a>
			<?php endif; ?>
		</div>
		<?php

		return trim( ob_get_clean(), '1' );
	}

	/**
	 * Hook into pre_set_site_transient_update_themes to update.
	 * Finds newest tag and compares to current tag.
	 *
	 * @param array $transient
	 *
	 * @return array|object
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_CALL)
    (AST_CALL
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_FOREACH
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_FOREACH
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_EMPTY
                    (AST_DIM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR))))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_RETURN
        (AST_CALL
            (
                (AST_CALL)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_CALL)
    (AST_CALL
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_FOREACH
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))
                            (SCALAR)
                            (SCALAR)
                            (AST_CONST))))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_FOREACH
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ECHO
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_EMPTY
                    (AST_DIM
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))
                        (SCALAR))))
            (
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR))))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ECHO
                    (SCALAR))
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_RETURN
        (AST_CALL
            (
                (AST_CALL)
                (SCALAR)))))