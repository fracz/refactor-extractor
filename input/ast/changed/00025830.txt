  public static function loadClusterTokenForUser(PhabricatorUser $user) {
    if (!$user->isLoggedIn()) {
      return null;
    }

    $tokens = id(new PhabricatorConduitTokenQuery())
      ->setViewer($user)
      ->withObjectPHIDs(array($user->getPHID()))
      ->withTokenTypes(array(self::TYPE_CLUSTER))
      ->withExpired(false)
      ->execute();

    // Only return a token if it has at least 5 minutes left before
    // expiration. Cluster tokens cycle regularly, so we don't want to use
    // one that's going to expire momentarily.
    $now = PhabricatorTime::getNow();
    $must_expire_after = $now + phutil_units('5 minutes in seconds');

    foreach ($tokens as $token) {
      if ($token->getExpires() > $must_expire_after) {
        return $token;
      }
    }

    // We didn't find any existing tokens (or the existing tokens are all about
    // to expire) so generate a new token.

    $unguarded = AphrontWriteGuard::beginScopedUnguardedWrites();
      $token = self::initializeNewToken(
        $user->getPHID(),
        self::TYPE_CLUSTER);
      $token->save();
    unset($unguarded);

    return $token;
  }

||||||||  public static function loadClusterTokenForUser(PhabricatorUser $user) {
    if (!$user->isLoggedIn()) {
      return null;
    }

    if ($user->hasConduitClusterToken()) {
      return $user->getConduitClusterToken();
    }

    $tokens = id(new PhabricatorConduitTokenQuery())
      ->setViewer($user)
      ->withObjectPHIDs(array($user->getPHID()))
      ->withTokenTypes(array(self::TYPE_CLUSTER))
      ->withExpired(false)
      ->execute();

    // Only return a token if it has at least 5 minutes left before
    // expiration. Cluster tokens cycle regularly, so we don't want to use
    // one that's going to expire momentarily.
    $now = PhabricatorTime::getNow();
    $must_expire_after = $now + phutil_units('5 minutes in seconds');

    $valid_token = null;
    foreach ($tokens as $token) {
      if ($token->getExpires() > $must_expire_after) {
        $valid_token = $token;
        break;
      }
    }

    // We didn't find any existing tokens (or the existing tokens are all about
    // to expire) so generate a new token.
    if (!$valid_token) {
      $unguarded = AphrontWriteGuard::beginScopedUnguardedWrites();
        $valid_token = self::initializeNewToken(
          $user->getPHID(),
          self::TYPE_CLUSTER);
        $valid_token->save();
      unset($unguarded);
    }

    $user->attachConduitClusterToken($valid_token);

    return $valid_token;
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_VAR)))
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (NULL)))))
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (NULL)))))
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_RETURN
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_UNSET
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_VAR)))
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (NULL)))))
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (NULL)))))
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_CLASS_CONST
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_UNSET
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))