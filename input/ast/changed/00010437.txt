	public static function load($className) {
		if (isset(self::$__classMap[$className])) {
			if ($file = self::__mapped($className)) {
				return include $file;
			}

			$parts = explode('.', self::$__classMap[$className], 2);
			list($plugin, $package) = count($parts) > 1 ? $parts : array(null, current($parts));
			$paths = self::path($package, $plugin);

			if (empty($plugin)) {
				$appLibs = empty(self::$__packages['Lib']) ? APPLIBS : current(self::$__packages['Lib']);
				$paths[] =  $appLibs . $package . DS;
				$paths[] = LIBS . $package . DS;
			}

			foreach ($paths as $path) {
				$file = $path . $className . '.php';
				if (file_exists($file)) {
					self::__map($file, $className);
					return include $file;
				}
			}

			//To help apps migrate to 2.0 old style file names are allowed
			foreach ($paths as $path) {
				$underscored = Inflector::underscore($className);
				$tries = array($path . $underscored . '.php');
				$parts = explode('_', $underscored);
				if (count($parts) > 1) {
					array_pop($parts);
					$tries[] = $path . implode('_', $parts) . '.php';
				}
				foreach ($tries as $file) {
					if (file_exists($file)) {
						self::__map($file, $className);
						return include $file;
					}
				}
			}
		}

		return false;
	}

/**
 * Finds classes based on $name or specific file(s) to search.  Calling App::import() will
 * not construct any classes contained in the files. It will only find and require() the file.
 *
 * @link          http://book.cakephp.org/view/934/Using-App-import
 * @param mixed $type The type of Class if passed as a string, or all params can be passed as
 *                    an single array to $type,
 * @param string $name Name of the Class or a unique name for the file
 * @param mixed $parent boolean true if Class Parent should be searched, accepts key => value
 *              array('parent' => $parent ,'file' => $file, 'search' => $search, 'ext' => '$ext');
 *              $ext allows setting the extension of the file name
 *              based on Inflector::underscore($name) . ".$ext";
 * @param array $search paths to search for files, array('path 1', 'path 2', 'path 3');
 * @param string $file full name of the file to search for including extension
 * @param boolean $return, return the loaded file, the file must have a return
 *                         statement in it to work: return $variable;
 * @return boolean true if Class is already in memory or if file is found and loaded, false if not
 */
||||||||	public static function load($className) {
		if (!isset(self::$__classMap[$className])) {
			return false;
		}

		if ($file = self::__mapped($className)) {
			return include $file;
		}

		$parts = explode('.', self::$__classMap[$className], 2);
		list($plugin, $package) = count($parts) > 1 ? $parts : array(null, current($parts));
		$paths = self::path($package, $plugin);

		if (empty($plugin)) {
			$appLibs = empty(self::$__packages['Lib']) ? APPLIBS : current(self::$__packages['Lib']);
			$paths[] =  $appLibs . $package . DS;
			$paths[] = LIBS . $package . DS;
		}

		foreach ($paths as $path) {
			$file = $path . $className . '.php';
			if (file_exists($file)) {
				self::__map($file, $className);
				return include $file;
			}
		}

		//To help apps migrate to 2.0 old style file names are allowed
		foreach ($paths as $path) {
			$underscored = Inflector::underscore($className);
			$tries = array($path . $underscored . '.php');
			$parts = explode('_', $underscored);
			if (count($parts) > 1) {
				array_pop($parts);
				$tries[] = $path . implode('_', $parts) . '.php';
			}
			foreach ($tries as $file) {
				if (file_exists($file)) {
					self::__map($file, $className);
					return include $file;
				}
			}
		}

		return false;
	}

/**
 * Finds classes based on $name or specific file(s) to search.  Calling App::import() will
 * not construct any classes contained in the files. It will only find and require() the file.
 *
 * @link          http://book.cakephp.org/view/934/Using-App-import
 * @param mixed $type The type of Class if passed as a string, or all params can be passed as
 *                    an single array to $type,
 * @param string $name Name of the Class or a unique name for the file
 * @param mixed $parent boolean true if Class Parent should be searched, accepts key => value
 *              array('parent' => $parent ,'file' => $file, 'search' => $search, 'ext' => '$ext');
 *              $ext allows setting the extension of the file name
 *              based on Inflector::underscore($name) . ".$ext";
 * @param array $search paths to search for files, array('path 1', 'path 2', 'path 3');
 * @param string $file full name of the file to search for including extension
 * @param boolean $return, return the loaded file, the file must have a return
 *                         statement in it to work: return $variable;
 * @return boolean true if Class is already in memory or if file is found and loaded, false if not
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (
                            (AST_RETURN
                                (AST_INCLUDE_OR_EVAL
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (SCALAR))
                        (AST_VAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CONST)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (NULL)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONDITIONAL
                                    (AST_EMPTY
                                        (AST_DIM
                                            (AST_STATIC_PROP)
                                            (SCALAR)))
                                    (AST_CONST)
                                    (AST_CALL
                                        (
                                            (AST_DIM
                                                (AST_STATIC_PROP)
                                                (SCALAR))))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_CONST)))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (AST_VAR))
                                    (AST_CONST))))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_VAR))
                                (SCALAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (AST_RETURN
                                        (AST_INCLUDE_OR_EVAL
                                            (AST_VAR))))))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (NULL))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (SCALAR))
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_VAR)
                                                (AST_CALL
                                                    (
                                                        (SCALAR)
                                                        (AST_VAR))))
                                            (SCALAR))))))
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (
                                            (AST_STATIC_CALL
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)))
                                            (AST_RETURN
                                                (AST_INCLUDE_OR_EVAL
                                                    (AST_VAR)))))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_INCLUDE_OR_EVAL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_CONST)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_EMPTY
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (SCALAR)))
                        (AST_CONST)
                        (AST_CALL
                            (
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (AST_CONST)))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_VAR))
                        (AST_CONST))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_RETURN
                            (AST_INCLUDE_OR_EVAL
                                (AST_VAR))))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))
                            (SCALAR))
                        (NULL))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_VAR))))
                                (SCALAR))))))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))
                                (AST_RETURN
                                    (AST_INCLUDE_OR_EVAL
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CONST)))