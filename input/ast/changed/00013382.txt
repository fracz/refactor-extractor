    public function __construct($parentClass, $thisName, array $advices = array())
    {
        if (!$parentClass instanceof ReflectionClass && !$parentClass instanceof ParsedClass) {
            throw new \InvalidArgumentException("Invalid argument for class");
        }
        $this->advices = $this->flattenAdvices($advices);
        $this->class   = $parentClass;
        $this->name    = $thisName;

        $this->parentClassName = $parentClass->getShortName();
    }

    /**
     * Updates parent name for child
     *
     * @param string $newParentName New class name
     *
     * @return AbstractProxy
     */
||||||||    public function __construct(array $advices = array())
    {
        $this->advices = $this->flattenAdvices($advices);
    }

    /**
     * Returns text representation of class
     *
     * @return string
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR)))
                (AST_UNARY_OP
                    (AST_INSTANCEOF
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))