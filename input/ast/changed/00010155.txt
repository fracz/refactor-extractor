	public function dropSchema(CakeSchema $schema, $table = null) {
		$out = '';

		foreach ($schema->tables as $curTable => $columns) {
			if (!$table || $table == $curTable) {
				$out .= 'DROP TABLE ' . $this->fullTableName($curTable) . ";\n";
			}
		}
		return $out;
	}

/**
 * Generate a database-native column schema string
 *
 * @param array $column An array structured like the following: array('name' => 'value', 'type' => 'value'[, options]),
 *   where options can be 'default', 'length', or 'key'.
 * @return string
 */
||||||||	public function dropSchema(CakeSchema $schema, $table = null) {
		$out = '';

		if ($table && array_key_exists($table, $schema->tables)) {
			return $this->_dropTable($table) . "\n";
		} elseif ($table) {
			return $out;
		}

		foreach (array_keys($schema->tables) as $curTable) {
			$out .= $this->_dropTable($curTable) . "\n";
		}
		return $out;
	}

/**
 * Generate a "drop table" statement for a single table
 *
 * @param type $table Name of the table to drop
 * @return string Drop table SQL statement
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (SCALAR))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))