    public static function request($url, $etag = null, $post = false, array $data = array())
    {
        $debug = false;
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_HEADER, 1);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        $header = array('Authorization: token ' . self::getConfig('access_token'));
        curl_setopt($ch, CURLOPT_USERAGENT, 'alfred-github-workflow');
        if ($debug) {
            curl_setopt($ch, CURLOPT_PROXY, 'localhost');
            curl_setopt($ch, CURLOPT_PROXYPORT, 8888);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
        }
        if ($post) {
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
        } elseif ($etag) {
            $header[] = 'If-None-Match: ' . $etag;
        }
        curl_setopt($ch, CURLOPT_HTTPHEADER, $header);
        $rawResponse = curl_exec($ch);
        if (false === $rawResponse) {
            curl_close($ch);
            return null;
        }
        if ($debug) {
            list(, $header, $body) = explode("\r\n\r\n", $rawResponse, 3);
        } else {
            list($header, $body) = explode("\r\n\r\n", $rawResponse, 2);
        }
        $response = new stdClass();
        $response->status = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        $headerNames = array(
            'etag' => 'ETag',
            'contentType' => 'Content-Type',
            'link' => 'Link',
        );
        foreach ($headerNames as $key => $name) {
            if (preg_match('/^' . preg_quote($name, '/') . ': (\V*)/mi', $header, $match)) {
                $response->$key = $match[1];
            } else {
                $response->$key = null;
            }
        }
        if (200 == $response->status) {
            $response->content = $body;
        }
        return $response;
    }

||||||||    public static function request($url, Curl $curl = null, $callback = null)
    {
        $return = false;
        $returnValue = null;
        if (!$curl) {
            $curl = new Curl();
            $return = true;
            $callback = function ($content) use (&$returnValue) {
                $returnValue = $content;
            };
        }

        $curl->add(new CurlRequest($url, null, function (CurlResponse $response) use ($callback) {
            if (is_callable($callback) && isset($response->content)) {
                $callback($response->content);
            }
        }));

        if ($return) {
            $curl->execute();
        }
        return $returnValue;
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (SCALAR)))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (NULL))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (SCALAR)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (SCALAR)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)))
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CALL
                            (
                                (AST_VAR)))))))
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (NULL)
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (SCALAR))))
                                (SCALAR))
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CLOSURE
                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_VAR)
                    (AST_CONST)
                    (AST_CLOSURE
                        (PARAM_TYPENO_PARAM_DEFAULT)
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)))
                                        (AST_ISSET
                                            (AST_PROP
                                                (AST_VAR))))
                                    (
                                        (AST_CALL
                                            (AST_VAR)
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))