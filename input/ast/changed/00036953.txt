    public function process(ContainerBuilder $container)
    {
        $file = self::getBuilderCacheFilename($container);

        if (false !== @file_put_contents($file, serialize($container))) {
            chmod($file, 0666);
        } else {
            throw new \RuntimeException(sprintf('Failed to write cache file "%s".', $file));
        }
    }

    /**
     * Calculates the cache filename to be used to cache the ContainerBuilder
     *
     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
     * @return string
     */
||||||||    public function process(ContainerBuilder $container)
    {
        $cache = new ConfigCache(self::getBuilderCacheFilename($container), false);

        $cache->write(serialize($container));
    }

    /**
     * Calculates the cache filename to be used to cache the ContainerBuilder
     *
     * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
     *
     * @return string
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))))))
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR))))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR))))))