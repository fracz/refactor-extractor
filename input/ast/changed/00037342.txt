    public function testCreateFromStreamFromStream($stream)
    {
        $csv = Reader::createFromStream($stream);
        $this->assertInstanceof(Reader::class, $csv);
        $this->assertInstanceof(StreamIterator::class, $csv->getIterator());
    }

||||||||    public function testCreateFromStreamFromStream()
    {
        $csv = Reader::createFromStream(fopen(__DIR__.'/data/foo.csv', 'r'));
        $this->assertInstanceof(Reader::class, $csv);
        $this->assertInstanceof(StreamIterator::class, $csv->getIterator());
    }

    /**
     * @expectedException InvalidArgumentException
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR))
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR)))))