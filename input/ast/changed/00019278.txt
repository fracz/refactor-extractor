    protected function validateTokenIsTrackable($token, $tokenizedHost = null)
    {
        // Token as URL
        if ($tokenizedHost && !preg_match('/^(\{\S+?\})$/', $tokenizedHost)) {
            // Currently this does not apply to something like "{leadfield=firstname}.com" since that could result in URL per lead

            return false;
        }

        // Validate if this token is listed as not to be tracked
        if ($this->isInDoNotTrack($token)) {

            return false;
        }

        // Validate that the token is
        if (!isset($this->contentTokens[$token])) {

            return false;
        }

        return true;
    }

    /**
     * Find and extract tokens from the URL as this have to be processed outside of tracking tokens
     *
     * @param $urlParts Array from parse_url
     *
     * @return array|false
     */
||||||||    protected function validateTokenIsTrackable($token, $tokenizedHost = null)
    {
        // Token as URL
        if ($tokenizedHost && !preg_match('/^(\{\S+?\})$/', $tokenizedHost)) {
            // Currently this does not apply to something like "{leadfield=firstname}.com" since that could result in URL per lead

            return false;
        }

        // Validate if this token is listed as not to be tracked
        if ($this->isInDoNotTrack($token)) {

            return false;
        }

        // Validate that the token is available and is a URL
        if (!isset($this->contentTokens[$token]) || !$this->isValidUrl($this->contentTokens[$token])) {

            return false;
        }

        return true;
    }

    /**
     * @param      $url
     * @param bool $forceScheme
     *
     * @return bool
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_ISSET
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR))))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_CONST)))