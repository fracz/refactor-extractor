	public function setUp($connection_name=null)
	{
		parent::setUp($connection_name);

		self::$instance = $this;

		$this->fired = array();
		$this->test_closure = null;

/*
		//reset all call_backs on our model
		$this->klass = ActiveRecord\Reflections::instance()->add('VenueCB')->get('VenueCB');
		$call_backs = array_intersect_key(array_flip(ActiveRecord\CallBack::get_allowed_call_backs()), $this->klass->getStaticProperties());
		foreach ($call_backs as $call_back => $v)
			VenueCB::$$call_back = null;

		//set default closure
		$test_case = $this;
		$closure = function($record) use ($test_case) {
			$test_case->assertObjectHasAttribute('attributes', $record);
		};
		$this->set_test_closure($closure);

		//set call_back to the method name
		$default_call_back = str_replace('test_', '', $this->getName());
		if (array_key_exists($default_call_back, $this->klass->getStaticProperties()))
			$this->set_cb($default_call_back, $this->getName());
*/
	}

||||||||	public function setUp($connection_name=null)
	{
		parent::setUp($connection_name);

		VenueCB::find(1);
		$this->callback = new ActiveRecord\CallBack('VenueCB');
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (SCALAR)))))