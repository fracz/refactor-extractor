	static public function getCountry( $lang )
	{
		require_once "core/DataFiles/Countries.php";

		$countryList = $GLOBALS['Piwik_CountryList'];

		$replaceLangCodeByCountryCode = array(
		// replace cs language (Serbia Montenegro country code) with czech country code
			'cs' => 'cz',
		// replace sv language (El Salvador country code) with sweden country code
			'sv' => 'se',
		// replace fa language (Unknown country code) with Iran country code
			'fa' => 'ir',
		// replace ja language (Unknown country code) with japan country code
			'ja' => 'jp',
		// replace ko language (Unknown country code) with corée country code
			'ko' => 'kr',
		// replace he language (Unknown country code) with Israel country code
			'he' => 'il',
		// replace da language (Unknown country code) with Danemark country code
			'da' => 'dk',
		// replace gb code with UK country code
			'gb' => 'uk',
		);

		if(empty($lang) || strlen($lang) < 2)
		{
			return 'xx';
		}

		$browserLanguage = str_replace(
					array_keys($replaceLangCodeByCountryCode),
					array_values($replaceLangCodeByCountryCode),
					$lang
				);
		$validLanguages = array_keys($countryList);
		return Piwik_Common::extractLanguageCodeFromBrowserLanguage($browserLanguage, $validLanguages);
	}

||||||||	static public function getCountry( $lang )
	{
		$replaceLangCodeByCountryCode = array(
		// replace cs language (Serbia Montenegro country code) with czech country code
			'cs' => 'cz',
		// replace sv language (El Salvador country code) with sweden country code
			'sv' => 'se',
		// replace fa language (Unknown country code) with Iran country code
			'fa' => 'ir',
		// replace ja language (Unknown country code) with japan country code
			'ja' => 'jp',
		// replace ko language (Unknown country code) with corée country code
			'ko' => 'kr',
		// replace he language (Unknown country code) with Israel country code
			'he' => 'il',
		// replace da language (Unknown country code) with Danemark country code
			'da' => 'dk',
		// replace gb code with UK country code
			'gb' => 'uk',
		);

		if(empty($lang) || strlen($lang) < 2)
		{
			return 'xx';
		}

		$browserLanguage = str_replace(
					array_keys($replaceLangCodeByCountryCode),
					array_values($replaceLangCodeByCountryCode),
					$lang
				);

		$validCountries = self::getCountriesList();
		return Piwik_Common::extractLanguageCodeFromBrowserLanguage($browserLanguage, $validCountries);
	}

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_INCLUDE_OR_EVAL
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (SCALAR)))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)))))