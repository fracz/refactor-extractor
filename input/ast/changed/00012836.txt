	abstract public function join($alias_from, $alias_to);

	/**
	 * Takes the current relations and attempts to save them when cascading is allowed or forced
	 *
	 * @param  array|Model  single or multiple model instances to save
	 * @param  mixed        cascading setting
	 */
	//abstract public function save($objects, $cascade = 'default');

	/**
	 * Takes the current relations and attempts to delete them when cascading is allowed or forced
	 *
	 * @param  array|Model  single or multiple model instances to delete
	 * @param  mixed        cascading setting
	 */
	//abstract public function delete($objects, $cascade = 'default');

	/**
	 * Allow outside access to protected properties
	 *
	 * @param  $property
	 */
||||||||	abstract public function join($alias_from, $rel_name, $alias_to);

	/**
	 * Takes the current relations and attempts to save them when cascading is allowed or forced
	 *
	 * @param  array|Model  single or multiple model instances to save
	 * @param  mixed        cascading setting
	 */
	//abstract public function save($objects, $cascade = 'default');

	/**
	 * Takes the current relations and attempts to delete them when cascading is allowed or forced
	 *
	 * @param  array|Model  single or multiple model instances to delete
	 * @param  mixed        cascading setting
	 */
	//abstract public function delete($objects, $cascade = 'default');

	/**
	 * Allow outside access to protected properties
	 *
	 * @param  $property
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(NULL)||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(NULL)