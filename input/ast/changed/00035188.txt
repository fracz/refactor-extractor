    private function findAdderAndRemover(\ReflectionClass $reflClass, $singular)
    {
        if (null !== $singular) {
            $addMethod = 'add' . ucfirst($singular);
            $removeMethod = 'remove' . ucfirst($singular);

            if (!$this->isAccessible($reflClass, $addMethod, 1)) {
                throw new InvalidPropertyException(sprintf(
                    'The public method "%s" with exactly one required parameter was not found on class %s',
                    $addMethod,
                    $reflClass->getName()
                ));
            }

            if (!$this->isAccessible($reflClass, $removeMethod, 1)) {
                throw new InvalidPropertyException(sprintf(
                    'The public method "%s" with exactly one required parameter was not found on class %s',
                    $removeMethod,
                    $reflClass->getName()
                ));
            }

            return array($addMethod, $removeMethod);
        } else {
            // The plural form is the last element of the property path
            $plural = ucfirst($this->elements[$this->length - 1]);

            // Any of the two methods is required, but not yet known
            $singulars = (array) FormUtil::singularify($plural);

            foreach ($singulars as $singular) {
                $methodsFound = 0;
                $addMethodFound = false;
                $addMethodName = 'add' . $singular;
                $removeMethodName = 'remove' . $singular;

                if ($this->isAccessible($reflClass, $addMethodName, 1)) {
                    $addMethod = $addMethodName;
                    $addMethodFound = true;
                    $methodsFound++;
                }

                if ($this->isAccessible($reflClass, $removeMethodName, 1)) {
                    $removeMethod = $removeMethodName;
                    $methodsFound++;
                }

                if (2 == $methodsFound) {
                    return array($addMethod, $removeMethod);
                }

                if (1 == $methodsFound) {
                    throw new InvalidPropertyException(sprintf(
                        'Found the public method "%s", but did not find a public "%s" on class %s',
                        $addMethodFound ? $addMethodName : $removeMethodName,
                        $addMethodFound ? $removeMethodName : $addMethodName,
                        $reflClass->getName()
                    ));
                }
            }
        }

        return null;
    }

    /**
     * Returns whether a method is public and has a specific number of required parameters.
     *
     * @param  \ReflectionClass $class      The class of the method.
     * @param  string           $methodName The method name.
     * @param  integer          $parameters The number of parameters.
     *
     * @return Boolean Whether the method is public and has $parameters
     *                                      required parameters.
     */
||||||||    private function findAdderAndRemover(\ReflectionClass $reflClass, $singular)
    {
        if (null !== $singular) {
            $addMethod = 'add' . ucfirst($singular);
            $removeMethod = 'remove' . ucfirst($singular);

            if (!$this->isAccessible($reflClass, $addMethod, 1)) {
                throw new InvalidPropertyException(sprintf(
                    'The public method "%s" with exactly one required parameter was not found on class %s',
                    $addMethod,
                    $reflClass->getName()
                ));
            }

            if (!$this->isAccessible($reflClass, $removeMethod, 1)) {
                throw new InvalidPropertyException(sprintf(
                    'The public method "%s" with exactly one required parameter was not found on class %s',
                    $removeMethod,
                    $reflClass->getName()
                ));
            }

            return array($addMethod, $removeMethod);
        }

        // The plural form is the last element of the property path
        $plural = ucfirst($this->elements[$this->length - 1]);

        // Any of the two methods is required, but not yet known
        $singulars = (array) FormUtil::singularify($plural);

        foreach ($singulars as $singular) {
            $addMethod = 'add' . $singular;
            $removeMethod = 'remove' . $singular;

            $addMethodFound = $this->isAccessible($reflClass, $addMethod, 1);
            $removeMethodFound = $this->isAccessible($reflClass, $removeMethod, 1);

            if ($addMethodFound && $removeMethodFound) {
                return array($addMethod, $removeMethod);
            }

            if ($addMethodFound xor $removeMethodFound) {
                throw new InvalidPropertyException(sprintf(
                    'Found the public method "%s", but did not find a public "%s" on class %s',
                    $addMethodFound ? $addMethod : $removeMethod,
                    $addMethodFound ? $removeMethod : $addMethod,
                    $reflClass->getName()
                ));
            }
        }

        return null;
    }

    /**
     * Returns whether a method is public and has a specific number of required parameters.
     *
     * @param  \ReflectionClass $class      The class of the method.
     * @param  string           $methodName The method name.
     * @param  integer          $parameters The number of parameters.
     *
     * @return Boolean Whether the method is public and has $parameters
     *                                      required parameters.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))))))
                (AST_RETURN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (SCALAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONST))
                                    (AST_POST_INC
                                        (AST_VAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR)
                                        (AST_VAR)
                                        (SCALAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_VAR))
                                    (AST_POST_INC
                                        (AST_VAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (
                                    (AST_RETURN
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL))
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL)))))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_CALL
                                                    (
                                                        (SCALAR)
                                                        (AST_CONDITIONAL
                                                            (AST_VAR)
                                                            (AST_VAR)
                                                            (AST_VAR))
                                                        (AST_CONDITIONAL
                                                            (AST_VAR)
                                                            (AST_VAR)
                                                            (AST_VAR))
                                                        (AST_METHOD_CALL
                                                            (AST_VAR)))))))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_VAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))))))
                (AST_RETURN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_STATIC_CALL
                (
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (SCALAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_RETURN
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_CONDITIONAL
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_VAR))
                                            (AST_CONDITIONAL
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_VAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))))))
    (AST_RETURN
        (AST_CONST)))