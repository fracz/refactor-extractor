    public function addFile($path)
    {
        $is_hidden = ((substr($path, 0, 1) == '.')
            || (strpos($path, DIRECTORY_SEPARATOR . '.') !== false));

        // ignore hidden files if option is set
        if ($this->getIgnoreHidden() && $is_hidden) {
            return;
        }

        // if it is not a file contained in a phar; check it out with a glob
        if (substr($path, 0, 7) != 'phar://') {
            // search file(s) with the given expressions
            $result = glob($path);
            if (empty($result)) {
                $this->log(
                    $path . ' caused an error while performing a glob call; '
                    .'is this path accessible?'
                );
                return;
            }

            foreach ($result as $file) {
                // if the path is not a file OR it's extension does not match
                // the given, then do not process it.
                if (!is_file($file) || (!empty($this->allowed_extensions)
                    && !in_array(
                        strtolower(pathinfo($file, PATHINFO_EXTENSION)),
                        $this->allowed_extensions
                    ))
                ) {
                    continue;
                }

                $this->files[] = realpath($file);
            }
        } else {
            // only process if it is a file and it matches the allowed extensions
            if (is_file($path)
                && (empty($this->allowed_extensions)
                || in_array(
                    strtolower(pathinfo($path, PATHINFO_EXTENSION)),
                    $this->allowed_extensions
                ))
            ) {
                $this->files[] = $path;
            }
        }
    }

    /**
     * Returns a list of files that are ready to be parsed.
     *
     * Please note that the ignore pattern will be applied and all files are
     * converted to absolute paths.
     *
     * @return string[]
     */
||||||||    public function addFile($path)
    {
        $this->finder->append($path);
    }

    /**
     * Returns a list of files that are ready to be parsed.
     *
     * Please note that the ignore pattern will be applied and all files are
     * converted to absolute paths.
     *
     * @return string[]
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_CONST)
                            (SCALAR))))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_EMPTY
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (SCALAR))
                                        (SCALAR))))
                            (AST_RETURN
                                (NULL)))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR))))
                                    (AST_BINARY_OP
                                        (AST_UNARY_OP
                                            (AST_EMPTY
                                                (AST_PROP
                                                    (AST_VAR))))
                                        (AST_UNARY_OP
                                            (AST_CALL
                                                (
                                                    (AST_CALL
                                                        (
                                                            (AST_CALL
                                                                (
                                                                    (AST_VAR)
                                                                    (AST_CONST)))))
                                                    (AST_PROP
                                                        (AST_VAR)))))))
                                (
                                    (AST_CONTINUE
                                        (NULL)))))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_CALL
                                (
                                    (AST_VAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_EMPTY
                                    (AST_PROP
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_CONST)))))
                                        (AST_PROP
                                            (AST_VAR))))))
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (NULL))
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR))))