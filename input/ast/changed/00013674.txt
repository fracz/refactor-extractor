    protected function prepareRequest(RequestInterface $request)
    {
        $request->setClient($this);

        foreach ($this->getConfig()->getAll() as $key => $value) {
            if ($key == 'curl.blacklist') {
                continue;
            }
            // Add any curl options that might in the config to the request
            if (strpos($key, 'curl.') === 0) {
                $curlOption = str_replace('curl.', '', $key);
                if (defined($curlOption)) {
                    $curlValue = is_string($value) && defined($value) ? constant($value) : $value;
                    $request->getCurlOptions()->set(constant($curlOption), $curlValue);
                }
            } elseif (strpos($key, 'cache.') === 0) {
                // Add any cache options from the config to the request
                // Add any curl options that might in the config to the request
                $request->getParams()->set($key, $value);
            } elseif (strpos($key, 'params.') === 0) {
                // Add request specific parameters to all requests (prefix with 'params.')
                $request->getParams()->set(str_replace('params.', '', $key), $value);
            }
        }

        // Attach client observers to the request
        $request->setEventDispatcher(clone $this->getEventDispatcher());

        $this->dispatch('client.create_request', array(
            'client'  => $this,
            'request' => $request
        ));

        return $request;
    }

    /**
     * Get the client's base URL as either an expanded or raw URI template
     *
     * @param bool $expand (optional) Set to FALSE to get the raw base URL
     *    without URI template expansion
     *
     * @return string|null
     */
||||||||    protected function prepareRequest(RequestInterface $request)
    {
        $request->setClient($this);

        foreach ($this->getConfig()->getAll() as $key => $value) {
            if ($key == 'curl.blacklist') {
                continue;
            }
            // Add any curl options that might in the config to the request
            if (strpos($key, 'curl.') === 0) {
                $curlOption = substr($key, 5);
                // Convert constants represented as string to constant int values
                if (defined($curlOption)) {
                    $value = is_string($value) && defined($value) ? constant($value) : $value;
                    $curlOption = constant($curlOption);
                }
                $request->getCurlOptions()->set($curlOption, $value);
            } elseif (strpos($key, 'params.') === 0) {
                // Add request specific parameters to all requests (prefix with 'params.')
                $request->getParams()->set(substr($key, 7), $value);
            }
        }

        // Attach client observers to the request
        $request->setEventDispatcher(clone $this->getEventDispatcher());

        $this->dispatch('client.create_request', array(
            'client'  => $this,
            'request' => $request
        ));

        return $request;
    }

    /**
     * Get the client's base URL as either an expanded or raw URI template
     *
     * @param bool $expand (optional) Set to FALSE to get the raw base URL
     *    without URI template expansion
     *
     * @return string|null
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONDITIONAL
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (AST_CALL
                                                    (
                                                        (AST_VAR))))
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (AST_VAR))))))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLONE
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CONDITIONAL
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (AST_CALL
                                                    (
                                                        (AST_VAR))))
                                            (AST_CALL
                                                (
                                                    (AST_VAR)))
                                            (AST_VAR)))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)))))))
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR)))
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (SCALAR)))
                                (AST_VAR))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLONE
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))