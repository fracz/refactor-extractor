    protected function add_row_cells($capability) {
        if ($this->hascap) {
            $result = $this->stryes;
            $tooltip = 'whydoesuserhavecap';
        } else {
            $result = $this->strno;
            $tooltip = 'whydoesusernothavecap';
        }
        $a = new stdClass;
        $a->fullname = $this->fullname;
        $a->capability = $capability->name;
        $a->context = $this->contextname;
        echo '<td>' . $result . '</td>';
        echo '<td>';
        link_to_popup_window($this->baseurl . $capability->name, 'hascapabilityexplanation',
                $this->strexplanation, 600, 600, get_string($tooltip, 'role', $a));
        echo '</td>';
    }
}

// User selectors for managing role assignments ================================

/**
 * Base class to avoid duplicating code.
 */
abstract class role_assign_user_selector_base extends user_selector_base {
    const MAX_USERS_PER_PAGE = 100;

    protected $roleid;
    protected $context;

    /**
     * @param string $name control name
     * @param array $options should have two elements with keys groupid and courseid.
     */
    public function __construct($name, $options) {
        global $CFG;
        parent::__construct($name, $options);
        $this->roleid = $options['roleid'];
        if (isset($options['context'])) {
            $this->context = $options['context'];
        } else {
            $this->context = get_context_instance_by_id($options['contextid']);
        }
        require_once($CFG->dirroot . '/group/lib.php');
    }

    protected function get_options() {
        $options = parent::get_options();
        $options['roleid'] = $this->roleid;
        $options['contextid'] = $this->context->id;
        return $options;
    }
}

/**
 * User selector subclass for the list of potential users on the assign roles page,
 * when we are assigning in a context below the course level. (CONTEXT_MODULE and
 * CONTEXT_BLOCK).
 *
 * In this case we replicate part of get_users_by_capability() get the users
 * with moodle/course:view (or moodle/site:doanything). We can't use
 * get_users_by_capability() becuase
 *   1) get_users_by_capability() does not deal with searching by name
 *   2) exceptions array can be potentially large for large courses
 */
class potential_assignees_below_course extends role_assign_user_selector_base {
    public function find_users($search) {
        global $DB;

        // Get roles with some assignement to the 'moodle/course:view' capability.
        $possibleroles = get_roles_with_capability('moodle/course:view', CAP_ALLOW, $this->context);
        if (empty($possibleroles)) {
            // If there aren't any, we are done.
            return array();
        }

        // Now exclude the admin roles, and check the actual permission on
        // 'moodle/course:view' to make sure it is allow.
        $doanythingroles = get_roles_with_capability('moodle/site:doanything',
                CAP_ALLOW, get_context_instance(CONTEXT_SYSTEM));
        $validroleids = array();

        foreach ($possibleroles as $possiblerole) {
            if (isset($doanythingroles[$possiblerole->id])) {
                    continue;
            }

            if ($caps = role_context_capabilities($possiblerole->id, $this->context, 'moodle/course:view')) { // resolved list
                if (isset($caps['moodle/course:view']) && $caps['moodle/course:view'] > 0) { // resolved capability > 0
                    $validroleids[] = $possiblerole->id;
                }
            }
        }

        // If there are no valid roles, we are done.
        if (!$validroleids) {
            return array();
        }

        // Now we have to go to the database.
        list($wherecondition, $params) = $this->search_sql($search, 'u');
        if ($wherecondition) {
            $wherecondition = ' AND ' . $wherecondition;
        }
        $roleids =  '('.implode(',', $validroleids).')';

        $fields      = 'SELECT ' . $this->required_fields_sql('u');
        $countfields = 'SELECT COUNT(1)';

        $sql   = " FROM {user} u
                   JOIN {role_assignments} ra ON ra.userid = u.id
                   JOIN {role} r ON r.id = ra.roleid
                  WHERE ra.contextid " . get_related_contexts_string($this->context)."
                        $wherecondition
                        AND ra.roleid IN $roleids
                        AND u.id NOT IN (
                           SELECT u.id
                             FROM {role_assignments} r, {user} u
                            WHERE r.contextid = ?
                                  AND u.id = r.userid
                                  AND r.roleid = ?)";
        $order = ' ORDER BY lastname ASC, firstname ASC';

        $params[] = $this->context->id;
        $params[] = $this->roleid;

        // Check to see if there are too many to show sensibly.
        if (!$this->is_validating()) {
            $potentialmemberscount = $DB->count_records_sql($countfields . $sql, $params);
            if ($potentialmemberscount > role_assign_user_selector_base::MAX_USERS_PER_PAGE) {
                return $this->too_many_results($search, $potentialmemberscount);
            }
        }

        // If not, show them.
        $availableusers = $DB->get_records_sql($fields . $sql . $order, $params);

        if (empty($availableusers)) {
            return array();
        }

        if ($search) {
            $groupname = get_string('potusersmatching', 'role', $search);
        } else {
            $groupname = get_string('potusers', 'role');
        }

        return array($groupname => $availableusers);
    }
}

/**
 * User selector subclass for the list of potential users on the assign roles page,
 * when we are assigning in a context at or above the course level. In this case we
 * show all the users in the system who do not already have the role.
 */
class potential_assignees_course_and_above extends role_assign_user_selector_base {
    public function find_users($search) {
        global $DB;

        list($wherecondition, $params) = $this->search_sql($search, '');

        $fields      = 'SELECT ' . $this->required_fields_sql('');
        $countfields = 'SELECT COUNT(1)';

        $sql = " FROM {user}
                WHERE $wherecondition
                      AND id NOT IN (
                         SELECT u.id
                           FROM {role_assignments} r, {user} u
                          WHERE r.contextid = ?
                                AND u.id = r.userid
                                AND r.roleid = ?)";
        $order = ' ORDER BY lastname ASC, firstname ASC';

        $params[] = $this->context->id;
        $params[] = $this->roleid;

        if (!$this->is_validating()) {
            $potentialmemberscount = $DB->count_records_sql($countfields . $sql, $params);
            if ($potentialmemberscount > role_assign_user_selector_base::MAX_USERS_PER_PAGE) {
                return $this->too_many_results($search, $potentialmemberscount);
            }
        }

        $availableusers = $DB->get_records_sql($fields . $sql . $order, $params);

        if (empty($availableusers)) {
            return array();
        }

        if ($search) {
            $groupname = get_string('potusersmatching', 'role', $search);
        } else {
            $groupname = get_string('potusers', 'role');
        }

        return array($groupname => $availableusers);
    }
}

/**
 * User selector subclass for the list of users who already have the role in
 * question on the assign roles page.
 */
class existing_role_holders extends role_assign_user_selector_base {
    protected $strhidden;

    public function __construct($name, $options) {
        parent::__construct($name, $options);
        $this->strhidden = get_string('hiddenassign');
    }

    public function find_users($search) {
        list($wherecondition, $params) = $this->search_sql($search, 'u');
        $contextusers = get_role_users($this->roleid, $this->context, false,
                $this->required_fields_sql('u') . ', ra.hidden', 'u.lastname, u.firstname',
                true, '', '', '', $wherecondition, $params);

        if (empty($contextusers)) {
            return array();
        }

        if ($search) {
            $groupname = get_string('extusersmatching', 'role', $search);
        } else {
            $groupname = get_string('extusers', 'role');
        }

        return array($groupname => $contextusers);
    }

    // Override to add (hidden) to hidden role assignments.
    public function output_user($user) {
        $output = parent::output_user($user);
        if ($user->hidden) {
            $output .= ' (' . $this->strhidden . ')';
        }
        return $output;
    }
}

/**
 * A special subclass to use when unassigning admins at site level. Disables
 * the option for admins to unassign themselves.
 */
class existing_role_holders_site_admin extends existing_role_holders {
    public function find_users($search) {
        global $USER;
        $groupedusers = parent::find_users($search);
        foreach ($groupedusers as $group) {
            foreach ($group as &$user) {
                if ($user->id == $USER->id) {
                    $user->disabled = true;
                }
            }
        }
        return $groupedusers;
    }
}

?>||||||||    protected function add_row_cells($capability) {
        $disabled = '';
        if ($capability->locked || $this->inheritedcapabilities[$capability->name] == CAP_PROHIBIT) {
            $disabled = ' disabled="disabled"';
        }

    /// One cell for each possible permission.
        foreach ($this->allpermissions as $perm => $permname) {
            $extraclass = '';
            if ($perm != CAP_INHERIT && $perm == $this->inheritedcapabilities[$capability->name]) {
                $extraclass = ' capcurrent';
            }
            $checked = '';
            if ($this->localoverrides[$capability->name] == $perm) {
                $checked = ' checked="checked"';
            }
            echo '<td class="' . $permname . $extraclass . '">';
            echo '<input type="radio" title="' . $this->strperms[$permname] . '" name="' . $capability->name .
                    '" value="' . $perm . '"' . $checked . $disabled . ' />';
            echo '</td>';
        }
        parent::add_row_cells($capability);
    }
}

// User selectors for managing role assignments ================================

/**
 * Base class to avoid duplicating code.
 */
abstract class role_assign_user_selector_base extends user_selector_base {
    const MAX_USERS_PER_PAGE = 100;

    protected $roleid;
    protected $context;

    /**
     * @param string $name control name
     * @param array $options should have two elements with keys groupid and courseid.
     */
    public function __construct($name, $options) {
        global $CFG;
        parent::__construct($name, $options);
        $this->roleid = $options['roleid'];
        if (isset($options['context'])) {
            $this->context = $options['context'];
        } else {
            $this->context = get_context_instance_by_id($options['contextid']);
        }
        require_once($CFG->dirroot . '/group/lib.php');
    }

    protected function get_options() {
        $options = parent::get_options();
        $options['roleid'] = $this->roleid;
        $options['contextid'] = $this->context->id;
        return $options;
    }
}

/**
 * User selector subclass for the list of potential users on the assign roles page,
 * when we are assigning in a context below the course level. (CONTEXT_MODULE and
 * CONTEXT_BLOCK).
 *
 * In this case we replicate part of get_users_by_capability() get the users
 * with moodle/course:view (or moodle/site:doanything). We can't use
 * get_users_by_capability() becuase
 *   1) get_users_by_capability() does not deal with searching by name
 *   2) exceptions array can be potentially large for large courses
 */
class potential_assignees_below_course extends role_assign_user_selector_base {
    public function find_users($search) {
        global $DB;

        // Get roles with some assignement to the 'moodle/course:view' capability.
        $possibleroles = get_roles_with_capability('moodle/course:view', CAP_ALLOW, $this->context);
        if (empty($possibleroles)) {
            // If there aren't any, we are done.
            return array();
        }

        // Now exclude the admin roles, and check the actual permission on
        // 'moodle/course:view' to make sure it is allow.
        $doanythingroles = get_roles_with_capability('moodle/site:doanything',
                CAP_ALLOW, get_context_instance(CONTEXT_SYSTEM));
        $validroleids = array();

        foreach ($possibleroles as $possiblerole) {
            if (isset($doanythingroles[$possiblerole->id])) {
                    continue;
            }

            if ($caps = role_context_capabilities($possiblerole->id, $this->context, 'moodle/course:view')) { // resolved list
                if (isset($caps['moodle/course:view']) && $caps['moodle/course:view'] > 0) { // resolved capability > 0
                    $validroleids[] = $possiblerole->id;
                }
            }
        }

        // If there are no valid roles, we are done.
        if (!$validroleids) {
            return array();
        }

        // Now we have to go to the database.
        list($wherecondition, $params) = $this->search_sql($search, 'u');
        if ($wherecondition) {
            $wherecondition = ' AND ' . $wherecondition;
        }
        $roleids =  '('.implode(',', $validroleids).')';

        $fields      = 'SELECT ' . $this->required_fields_sql('u');
        $countfields = 'SELECT COUNT(1)';

        $sql   = " FROM {user} u
                   JOIN {role_assignments} ra ON ra.userid = u.id
                   JOIN {role} r ON r.id = ra.roleid
                  WHERE ra.contextid " . get_related_contexts_string($this->context)."
                        $wherecondition
                        AND ra.roleid IN $roleids
                        AND u.id NOT IN (
                           SELECT u.id
                             FROM {role_assignments} r, {user} u
                            WHERE r.contextid = ?
                                  AND u.id = r.userid
                                  AND r.roleid = ?)";
        $order = ' ORDER BY lastname ASC, firstname ASC';

        $params[] = $this->context->id;
        $params[] = $this->roleid;

        // Check to see if there are too many to show sensibly.
        if (!$this->is_validating()) {
            $potentialmemberscount = $DB->count_records_sql($countfields . $sql, $params);
            if ($potentialmemberscount > role_assign_user_selector_base::MAX_USERS_PER_PAGE) {
                return $this->too_many_results($search, $potentialmemberscount);
            }
        }

        // If not, show them.
        $availableusers = $DB->get_records_sql($fields . $sql . $order, $params);

        if (empty($availableusers)) {
            return array();
        }

        if ($search) {
            $groupname = get_string('potusersmatching', 'role', $search);
        } else {
            $groupname = get_string('potusers', 'role');
        }

        return array($groupname => $availableusers);
    }
}

/**
 * User selector subclass for the list of potential users on the assign roles page,
 * when we are assigning in a context at or above the course level. In this case we
 * show all the users in the system who do not already have the role.
 */
class potential_assignees_course_and_above extends role_assign_user_selector_base {
    public function find_users($search) {
        global $DB;

        list($wherecondition, $params) = $this->search_sql($search, '');

        $fields      = 'SELECT ' . $this->required_fields_sql('');
        $countfields = 'SELECT COUNT(1)';

        $sql = " FROM {user}
                WHERE $wherecondition
                      AND id NOT IN (
                         SELECT u.id
                           FROM {role_assignments} r, {user} u
                          WHERE r.contextid = ?
                                AND u.id = r.userid
                                AND r.roleid = ?)";
        $order = ' ORDER BY lastname ASC, firstname ASC';

        $params[] = $this->context->id;
        $params[] = $this->roleid;

        if (!$this->is_validating()) {
            $potentialmemberscount = $DB->count_records_sql($countfields . $sql, $params);
            if ($potentialmemberscount > role_assign_user_selector_base::MAX_USERS_PER_PAGE) {
                return $this->too_many_results($search, $potentialmemberscount);
            }
        }

        $availableusers = $DB->get_records_sql($fields . $sql . $order, $params);

        if (empty($availableusers)) {
            return array();
        }

        if ($search) {
            $groupname = get_string('potusersmatching', 'role', $search);
        } else {
            $groupname = get_string('potusers', 'role');
        }

        return array($groupname => $availableusers);
    }
}

/**
 * User selector subclass for the list of users who already have the role in
 * question on the assign roles page.
 */
class existing_role_holders extends role_assign_user_selector_base {
    protected $strhidden;

    public function __construct($name, $options) {
        parent::__construct($name, $options);
        $this->strhidden = get_string('hiddenassign');
    }

    public function find_users($search) {
        list($wherecondition, $params) = $this->search_sql($search, 'u');
        $contextusers = get_role_users($this->roleid, $this->context, false,
                $this->required_fields_sql('u') . ', ra.hidden', 'u.lastname, u.firstname',
                true, '', '', '', $wherecondition, $params);

        if (empty($contextusers)) {
            return array();
        }

        if ($search) {
            $groupname = get_string('extusersmatching', 'role', $search);
        } else {
            $groupname = get_string('extusers', 'role');
        }

        return array($groupname => $contextusers);
    }

    // Override to add (hidden) to hidden role assignments.
    public function output_user($user) {
        $output = parent::output_user($user);
        if ($user->hidden) {
            $output .= ' (' . $this->strhidden . ')';
        }
        return $output;
    }
}

/**
 * A special subclass to use when unassigning admins at site level. Disables
 * the option for admins to unassign themselves.
 */
class existing_role_holders_site_admin extends existing_role_holders {
    public function find_users($search) {
        global $USER;
        $groupedusers = parent::find_users($search);
        foreach ($groupedusers as $group) {
            foreach ($group as &$user) {
                if ($user->id == $USER->id) {
                    $user->disabled = true;
                }
            }
        }
        return $groupedusers;
    }
}

?>||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_CALL
        (
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (SCALAR)
            (AST_PROP
                (AST_VAR))
            (SCALAR)
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_PROP
                                (AST_VAR))
                            (AST_PROP
                                (AST_VAR)))
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ECHO
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR)))
            (AST_ECHO
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_DIM
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (AST_VAR)))
                                                (SCALAR))
                                            (AST_PROP
                                                (AST_VAR)))
                                        (SCALAR))
                                    (AST_VAR))
                                (SCALAR))
                            (AST_VAR))
                        (AST_VAR))
                    (SCALAR)))
            (AST_ECHO
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR))))