	protected function addToolbar()
	{
		$menutypeId = (int) $this->state->get('menutypeid');

		$canDo = JHelperContent::getActions('com_menus', 'menu', (int) $menutypeId);
		$user  = JFactory::getUser();

		// Get the menu title
		$menuTypeTitle = $this->get('State')->get('menutypetitle');

		// Get the toolbar object instance
		$bar = JToolbar::getInstance('toolbar');

		if ($menuTypeTitle)
		{
			JToolbarHelper::title(JText::sprintf('COM_MENUS_VIEW_ITEMS_MENU_TITLE', $menuTypeTitle), 'list menumgr');
		}
		else
		{
			JToolbarHelper::title(JText::_('COM_MENUS_VIEW_ITEMS_ALL_TITLE'), 'list menumgr');
		}

		if ($canDo->get('core.create'))
		{
			JToolbarHelper::addNew('item.add');
		}

		$m = $this->state->get('filter.menutype');

		if ($canDo->get('core.edit') && ($m != 'main' && $m != 'menu'))
		{
			JToolbarHelper::editList('item.edit');
		}

		if ($canDo->get('core.edit.state'))
		{
			JToolbarHelper::publish('items.publish', 'JTOOLBAR_PUBLISH', true);
			JToolbarHelper::unpublish('items.unpublish', 'JTOOLBAR_UNPUBLISH', true);
		}

		if (JFactory::getUser()->authorise('core.admin'))
		{
			JToolbarHelper::checkin('items.checkin', 'JTOOLBAR_CHECKIN', true);
		}

		if ($canDo->get('core.edit.state') && $this->state->get('filter.client_id') == 0)
		{
			JToolbarHelper::makeDefault('items.setDefault', 'COM_MENUS_TOOLBAR_SET_HOME');
		}

		if (JFactory::getUser()->authorise('core.admin'))
		{
			JToolbarHelper::custom('items.rebuild', 'refresh.png', 'refresh_f2.png', 'JToolbar_Rebuild', false);
		}

		// Add a batch button
		if ($user->authorise('core.create', 'com_menus')
			&& $user->authorise('core.edit', 'com_menus')
			&& $user->authorise('core.edit.state', 'com_menus'))
		{
			$title = JText::_('JTOOLBAR_BATCH');

			// Instantiate a new JLayoutFile instance and render the batch button
			$layout = new JLayoutFile('joomla.toolbar.batch');

			$dhtml = $layout->render(array('title' => $title));
			$bar->appendButton('Custom', $dhtml, 'batch');
		}

		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete'))
		{
			JToolbarHelper::deleteList('JGLOBAL_CONFIRM_DELETE', 'items.delete', 'JTOOLBAR_EMPTY_TRASH');
		}
		elseif ($canDo->get('core.edit.state'))
		{
			JToolbarHelper::trash('items.trash');
		}

		if ($canDo->get('core.admin') || $canDo->get('core.options'))
		{
			JToolbarHelper::divider();
			JToolbarHelper::preferences('com_menus');
		}

		JToolbarHelper::help('JHELP_MENUS_MENU_ITEM_MANAGER');
	}

	/**
	 * Returns an array of fields the table can be sorted by
	 *
	 * @return  array  Array containing the field name to sort by as the key and display text as value
	 *
	 * @since   3.0
	 */
||||||||	protected function addToolbar()
	{
		$menutypeId = (int) $this->state->get('menutypeid');

		$canDo = JHelperContent::getActions('com_menus', 'menu', (int) $menutypeId);
		$user  = JFactory::getUser();

		// Get the menu title
		$menuTypeTitle = $this->get('State')->get('menutypetitle');

		// Get the toolbar object instance
		$bar = JToolbar::getInstance('toolbar');

		if ($menuTypeTitle)
		{
			JToolbarHelper::title(JText::sprintf('COM_MENUS_VIEW_ITEMS_MENU_TITLE', $menuTypeTitle), 'list menumgr');
		}
		else
		{
			JToolbarHelper::title(JText::_('COM_MENUS_VIEW_ITEMS_ALL_TITLE'), 'list menumgr');
		}

		if ($canDo->get('core.create'))
		{
			JToolbarHelper::addNew('item.add');
		}

		$protected = $this->state->get('filter.menutype') == 'main';

		if ($canDo->get('core.edit') && !$protected)
		{
			JToolbarHelper::editList('item.edit');
		}

		if ($canDo->get('core.edit.state') && !$protected)
		{
			JToolbarHelper::publish('items.publish', 'JTOOLBAR_PUBLISH', true);
			JToolbarHelper::unpublish('items.unpublish', 'JTOOLBAR_UNPUBLISH', true);
		}

		if (JFactory::getUser()->authorise('core.admin') && !$protected)
		{
			JToolbarHelper::checkin('items.checkin', 'JTOOLBAR_CHECKIN', true);
		}

		if ($canDo->get('core.edit.state') && $this->state->get('filter.client_id') == 0)
		{
			JToolbarHelper::makeDefault('items.setDefault', 'COM_MENUS_TOOLBAR_SET_HOME');
		}

		if (JFactory::getUser()->authorise('core.admin'))
		{
			JToolbarHelper::custom('items.rebuild', 'refresh.png', 'refresh_f2.png', 'JToolbar_Rebuild', false);
		}

		// Add a batch button
		if (!$protected && $user->authorise('core.create', 'com_menus')
			&& $user->authorise('core.edit', 'com_menus')
			&& $user->authorise('core.edit.state', 'com_menus'))
		{
			$title = JText::_('JTOOLBAR_BATCH');

			// Instantiate a new JLayoutFile instance and render the batch button
			$layout = new JLayoutFile('joomla.toolbar.batch');

			$dhtml = $layout->render(array('title' => $title));
			$bar->appendButton('Custom', $dhtml, 'batch');
		}

		if (!$protected && $this->state->get('filter.published') == -2 && $canDo->get('core.delete'))
		{
			JToolbarHelper::deleteList('JGLOBAL_CONFIRM_DELETE', 'items.delete', 'JTOOLBAR_EMPTY_TRASH');
		}
		elseif (!$protected && $canDo->get('core.edit.state'))
		{
			JToolbarHelper::trash('items.trash');
		}

		if ($canDo->get('core.admin') || $canDo->get('core.options'))
		{
			JToolbarHelper::divider();
			JToolbarHelper::preferences('com_menus');
		}

		JToolbarHelper::help('JHELP_MENUS_MENU_ITEM_MANAGER');
	}

	/**
	 * Returns an array of fields the table can be sorted by
	 *
	 * @return  array  Array containing the field name to sort by as the key and display text as value
	 *
	 * @since   3.0
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_CAST
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_STATIC_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST)))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (SCALAR)))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (AST_UNARY_OP
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL)
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_STATIC_CALL
        (
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_CAST
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (AST_VAR)))
                        (SCALAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_STATIC_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST)))
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)
                                (SCALAR))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_UNARY_OP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR)))
                        (AST_UNARY_OP
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_STATIC_CALL)
                (AST_STATIC_CALL
                    (
                        (SCALAR))))))
    (AST_STATIC_CALL
        (
            (SCALAR))))