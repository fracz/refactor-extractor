    public function visitClass(Node $node) : Context {

        // Get an FQSEN for this class
        $class_name = $node->name;

        $class_fqsen = FQSEN::fromContext($this->context)
            ->withClassName($class_name);

        // Hunt for an available alternate ID if necessary
        $alternate_id = 0;
        while($this->context->getCodeBase()->hasClassWithFQSEN($class_fqsen)) {
            $class_fqsen = $class_fqsen->withAlternateId(
                ++$alternate_id
            );
        }

        // Build the class from what we know so far
        $clazz = new Clazz(
            $this->context
                ->withLineNumberStart($node->lineno)
                ->withLineNumberEnd($node->endLineno ?: -1),
            Comment::fromString($node->docComment ?: ''),
            $node->name,
            new Type([$node->name]),
            $node->flags
        );

        // Override the FQSEN with the found alternate ID
        $clazz->setFQSEN($class_fqsen);

        // Add the class to the code base as a globally
        // accessible object
        $this->context->getCodeBase()->addClass($clazz);
        $this->context->getCodeBase()->incrementClasses();

        // Look to see if we have a parent class
        if(!empty($node->children[0])) {
            $parent_class_name =
                $node->children[0]->children[0];

            // Check to see if the name isn't fully qualified
            if($node->children[0]->flags & \ast\flags\NAME_NOT_FQ) {
                // check to see if we have a '\' anywhere in there
                if(($pos = strpos($parent_class_name, '\\')) !== false) {
                    if ($this->context->hasNamespaceMapFor(
                        T_CLASS,
                        substr($parent_class_name, 0, $pos)
                    )) {
                        $parent_class_name =
                            $this->context->getNamespaceMapfor(
                                T_CLASS,
                                substr($parent_class_name, 0, $pos)
                            );
                    }
                }
            } else {
                // The name is fully qualified. Make sure it looks
                // like it is
                if(0 !== strpos($parent_class_name, '\\')) {
                    $parent_class_name = '\\' . $parent_class_name;
                }
            }

            $parent_fqsen =
                $this->context->getScopeFQSEN()
                ->withClassName($parent_class_name);

            // Set the parent for the class
            $clazz->setParentClassFQSEN($parent_fqsen);
        }

        // Update the context to signal that we're now
        // within a class context.
        $context = $clazz->getContext()->withClassFQSEN(
            $class_fqsen
        );

        return $context;
    }

    /**
     * Visit a node with kind `\ast\AST_USE_TRAIT`
     *
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||    public function visitClass(Node $node) : Context {

        // Get an FQSEN for this class
        $class_name = $node->name;

        $class_fqsen = FQSEN::fromContext($this->context)
            ->withClassName($this->context, $class_name);

        // Hunt for an available alternate ID if necessary
        $alternate_id = 0;
        while($this->context->getCodeBase()->hasClassWithFQSEN($class_fqsen)) {
            $class_fqsen = $class_fqsen->withAlternateId(
                ++$alternate_id
            );
        }

        // Build the class from what we know so far
        $clazz = new Clazz(
            $this->context
                ->withLineNumberStart($node->lineno)
                ->withLineNumberEnd($node->endLineno ?: -1),
            Comment::fromString($node->docComment ?: ''),
            $node->name,
            new Type([$node->name]),
            $node->flags
        );

        // Override the FQSEN with the found alternate ID
        $clazz->setFQSEN($class_fqsen);

        // Add the class to the code base as a globally
        // accessible object
        $this->context->getCodeBase()->addClass($clazz);
        $this->context->getCodeBase()->incrementClasses();

        // Look to see if we have a parent class
        if(!empty($node->children[0])) {
            $parent_class_name =
                $node->children[0]->children[0];

            // Check to see if the name isn't fully qualified
            if($node->children[0]->flags & \ast\flags\NAME_NOT_FQ) {
                // check to see if we have a '\' anywhere in there
                if(($pos = strpos($parent_class_name, '\\')) !== false) {
                    if ($this->context->hasNamespaceMapFor(
                        T_CLASS,
                        substr($parent_class_name, 0, $pos)
                    )) {
                        $parent_class_name =
                            $this->context->getNamespaceMapfor(
                                T_CLASS,
                                substr($parent_class_name, 0, $pos)
                            );
                    }
                }
            } else {
                // The name is fully qualified. Make sure it looks
                // like it is
                if(0 !== strpos($parent_class_name, '\\')) {
                    $parent_class_name = '\\' . $parent_class_name;
                }
            }

            $parent_fqsen =
                $this->context->getScopeFQSEN()
                ->withClassName($this->context, $parent_class_name);

            // Set the parent for the class
            $clazz->setParentClassFQSEN($parent_fqsen);
        }

        // Update the context to signal that we're now
        // within a class context.
        $context = $clazz->getContext()->withClassFQSEN(
            $class_fqsen
        );

        return $context;
    }

    /**
     * Visit a node with kind `\ast\AST_USE_TRAIT`
     *
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PRE_INC
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_CONDITIONAL
                            (AST_PROP
                                (AST_VAR))
                            (NULL)
                            (AST_UNARY_OP
                                (SCALAR)))))
                (AST_STATIC_CALL
                    (
                        (AST_CONDITIONAL
                            (AST_PROP
                                (AST_VAR))
                            (NULL)
                            (SCALAR))))
                (AST_PROP
                    (AST_VAR))
                (AST_NEW
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL)))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR)))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR))))
                                        (AST_CONST))
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (
                                                        (AST_CONST)
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)
                                                                (SCALAR)
                                                                (AST_VAR)))))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_METHOD_CALL
                                                            (AST_PROP
                                                                (AST_VAR))
                                                            (
                                                                (AST_CONST)
                                                                (AST_CALL
                                                                    (
                                                                        (AST_VAR)
                                                                        (SCALAR)
                                                                        (AST_VAR))))))))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR)))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PRE_INC
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_CONDITIONAL
                            (AST_PROP
                                (AST_VAR))
                            (NULL)
                            (AST_UNARY_OP
                                (SCALAR)))))
                (AST_STATIC_CALL
                    (
                        (AST_CONDITIONAL
                            (AST_PROP
                                (AST_VAR))
                            (NULL)
                            (SCALAR))))
                (AST_PROP
                    (AST_VAR))
                (AST_NEW
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL)))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR)))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (SCALAR)))
                            (AST_CONST))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_CALL
                                                (
                                                    (AST_VAR)
                                                    (SCALAR))))
                                        (AST_CONST))
                                    (
                                        (AST_IF
                                            (AST_IF_ELEM
                                                (AST_METHOD_CALL
                                                    (AST_PROP
                                                        (AST_VAR))
                                                    (
                                                        (AST_CONST)
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)
                                                                (SCALAR)
                                                                (AST_VAR)))))
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_METHOD_CALL
                                                            (AST_PROP
                                                                (AST_VAR))
                                                            (
                                                                (AST_CONST)
                                                                (AST_CALL
                                                                    (
                                                                        (AST_VAR)
                                                                        (SCALAR)
                                                                        (AST_VAR))))))))))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR))))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_VAR)))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))