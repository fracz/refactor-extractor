  protected function applyStandardEffect(HeraldEffect $effect) {
    $action = $effect->getAction();

    $rule_type = $effect->getRule()->getRuleType();
    $supported = $this->getActions($rule_type);
    $supported = array_fuse($supported);
    if (empty($supported[$action])) {
      throw new Exception(
        pht(
          'Adapter "%s" does not support action "%s" for rule type "%s".',
          get_class($this),
          $action,
          $rule_type));
    }

    switch ($action) {
      case self::ACTION_ADD_PROJECTS:
      case self::ACTION_REMOVE_PROJECTS:
        return $this->applyProjectsEffect($effect);
      case self::ACTION_FLAG:
        return $this->applyFlagEffect($effect);
      case self::ACTION_EMAIL:
        return $this->applyEmailEffect($effect);
      default:
        break;
    }

    $result = $this->handleCustomHeraldEffect($effect);

    if (!$result) {
      throw new Exception(
        pht(
          'No custom action exists to handle rule action "%s".',
          $action));
    }

    return $result;
  }


  /**
   * @task apply
   */
||||||||  protected function applyStandardEffect(HeraldEffect $effect) {
    $action = $effect->getAction();

    $rule_type = $effect->getRule()->getRuleType();
    $supported = $this->getActions($rule_type);
    $supported = array_fuse($supported);
    if (empty($supported[$action])) {
      return new HeraldApplyTranscript(
        $effect,
        false,
        pht(
          'Adapter "%s" does not support action "%s" for rule type "%s".',
          get_class($this),
          $action,
          $rule_type));
    }

    switch ($action) {
      case self::ACTION_ADD_PROJECTS:
      case self::ACTION_REMOVE_PROJECTS:
        return $this->applyProjectsEffect($effect);
      case self::ACTION_FLAG:
        return $this->applyFlagEffect($effect);
      case self::ACTION_EMAIL:
        return $this->applyEmailEffect($effect);
      default:
        break;
    }

    $result = $this->handleCustomHeraldEffect($effect);

    if (!$result) {
      return new HeraldApplyTranscript(
        $effect,
        false,
        pht(
          'No custom action exists to handle rule action "%s".',
          $action));
    }

    return $result;
  }


  /**
   * @task apply
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_BREAK
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_CONST)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_BREAK
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_NEW
                        (
                            (AST_VAR)
                            (AST_CONST)
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_VAR)))