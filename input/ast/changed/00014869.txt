	public function testGetCryptedPasswordWithMhash()
	{
		if (!function_exists('mhash')) {
			$this->markTestSkipped('The mhash function is not available');
		}

		$this->assertSame(
			'9hyEDbdjNSZv5bjLaODLzA4dtrc=',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'sha'),
			'Password is hashed to SHA without encryption prefix'
		);

		$this->assertSame(
			'{SHA}9hyEDbdjNSZv5bjLaODLzA4dtrc=',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'sha', true),
			'Password is hashed to SHA with encryption prefix'
		);

		$this->assertSame(
			'aTVgaG9NWR2N1eNABkQgYQ==',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'md5-base64'),
			'Password is hashed to MD5-BASE64 without encryption prefix'
		);

		$this->assertSame(
			'{MD5}aTVgaG9NWR2N1eNABkQgYQ==',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'md5-base64', true),
			'Password is hashed to MD5-BASE64 with encryption prefix'
		);

		$this->assertTrue(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'ssha')) === 32,
			'Password is hashed to SSHA without salt'
		);

		$this->assertSame(
			'CvjRrNi3CdI+JV7ovrXBVy/qg1djM056ZDI5eVpFaGhjMU5oYkhRPQ==',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '{SSHA}HoMCZZps34WkU6cM7J8r9OySD5xteVBhc3Nzd29yZEhhc1NhbHQ=', 'ssha'),
			'Password is hashed to SSHA with salt'
		);

		$this->assertSame(
			'{SSHA}CvjRrNi3CdI+JV7ovrXBVy/qg1djM056ZDI5eVpFaGhjMU5oYkhRPQ==',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '{SSHA}HoMCZZps34WkU6cM7J8r9OySD5xteVBhc3Nzd29yZEhhc1NhbHQ=', 'ssha', true),
			'Password is hashed to SSHA with salt with encryption prefix'
		);

		$this->assertTrue(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'smd5')) === 28,
			'Password is hashed to SMD5 without salt'
		);

		$this->assertSame(
			's3Joy5bK4AR6mqKmjkc4S2QyOXlaRWhoYzFOaGJIUT0=',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '{SMD5}oY4N5uFk6w54Ni3eKYQxIlBhc3Nzd29yZEhhc1NhbHQ=', 'smd5'),
			'Password is hashed to SMD5 with salt'
		);

		$this->assertSame(
			'{SMD5}s3Joy5bK4AR6mqKmjkc4S2QyOXlaRWhoYzFOaGJIUT0=',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '{SMD5}oY4N5uFk6w54Ni3eKYQxIlBhc3Nzd29yZEhhc1NhbHQ=', 'smd5', true),
			'Password is hashed to SMD5 with salt with encryption prefix'
		);
	}
}||||||||	public function testGetCryptedPasswordWithMhash()
	{
		if (!function_exists('mhash')) {
			$this->markTestSkipped('The mhash function is not available');
		}

		$this->assertSame(
			'9hyEDbdjNSZv5bjLaODLzA4dtrc=',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'sha'),
			'Password is hashed to SHA without encryption prefix'
		);

		$this->assertSame(
			'{SHA}9hyEDbdjNSZv5bjLaODLzA4dtrc=',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'sha', true),
			'Password is hashed to SHA with encryption prefix'
		);

		$this->assertSame(
			'aTVgaG9NWR2N1eNABkQgYQ==',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'md5-base64'),
			'Password is hashed to MD5-BASE64 without encryption prefix'
		);

		$this->assertSame(
			'{MD5}aTVgaG9NWR2N1eNABkQgYQ==',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'md5-base64', true),
			'Password is hashed to MD5-BASE64 with encryption prefix'
		);

		$this->assertSame(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'ssha')), 32, 'Password is hashed to SSHA without salt'
		);

		$this->assertSame(
			'CvjRrNi3CdI+JV7ovrXBVy/qg1djM056ZDI5eVpFaGhjMU5oYkhRPQ==',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '{SSHA}HoMCZZps34WkU6cM7J8r9OySD5xteVBhc3Nzd29yZEhhc1NhbHQ=', 'ssha'),
			'Password is hashed to SSHA with salt'
		);

		$this->assertSame(
			'{SSHA}CvjRrNi3CdI+JV7ovrXBVy/qg1djM056ZDI5eVpFaGhjMU5oYkhRPQ==',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '{SSHA}HoMCZZps34WkU6cM7J8r9OySD5xteVBhc3Nzd29yZEhhc1NhbHQ=', 'ssha', true),
			'Password is hashed to SSHA with salt with encryption prefix'
		);

		$this->assertSame(
			strlen(JUserHelper::getCryptedPassword('mySuperSecretPassword', '', 'smd5')), 28, 'Password is hashed to SMD5 without salt'
		);

		$this->assertSame(
			's3Joy5bK4AR6mqKmjkc4S2QyOXlaRWhoYzFOaGJIUT0=',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '{SMD5}oY4N5uFk6w54Ni3eKYQxIlBhc3Nzd29yZEhhc1NhbHQ=', 'smd5'),
			'Password is hashed to SMD5 with salt'
		);

		$this->assertSame(
			'{SMD5}s3Joy5bK4AR6mqKmjkc4S2QyOXlaRWhoYzFOaGJIUT0=',
			JUserHelper::getCryptedPassword('mySuperSecretPassword', '{SMD5}oY4N5uFk6w54Ni3eKYQxIlBhc3Nzd29yZEhhc1NhbHQ=', 'smd5', true),
			'Password is hashed to SMD5 with salt with encryption prefix'
		);
	}
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))))
                (SCALAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (SCALAR)))))
                (SCALAR))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (AST_CONST)))
            (SCALAR))))