    public function dump(array $options = array())
    {
        $options = array_merge(array(
            'class'      => 'ProjectUrlGenerator',
            'base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
        ), $options);

        $declaredRouteNames = "array(\n";
        foreach ($this->getRoutes()->all() as $name => $route) {
            $declaredRouteNames .= "        '$name' => true,\n";
        }
        $declaredRouteNames .= '    );';

        return <<<EOF
<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * {$options['class']}
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class {$options['class']} extends {$options['base_class']}
{
    static private \$declaredRouteNames = $declaredRouteNames

    /**
     * Constructor.
     */
    public function __construct(RequestContext \$context)
    {
        \$this->context = \$context;
    }

{$this->addGenerator()}
}

EOF;
    }

||||||||    public function dump(array $options = array())
    {
        $options = array_merge(array(
            'class'      => 'ProjectUrlGenerator',
            'base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
        ), $options);

        return <<<EOF
<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;

/**
 * {$options['class']}
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class {$options['class']} extends {$options['base_class']}
{
    static private \$declaredRoutes = {$this->generateDeclaredRoutes()};

    /**
     * Constructor.
     */
    public function __construct(RequestContext \$context)
    {
        \$this->context = \$context;
    }

{$this->generateGenerateMethod()}
}

EOF;
    }

    /**
     * Generates PHP code representing an array of defined routes
     * together with the routes properties (e.g. requirements).
     *
     * @return string PHP code
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_RETURN
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)
            (AST_VAR)
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR)))
                (AST_VAR))))
    (AST_RETURN
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))
            (SCALAR))))