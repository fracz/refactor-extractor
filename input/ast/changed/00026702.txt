  private function buildActionList(
    PhabricatorProject $project,
    array $milestones,
    array $subprojects) {
    $viewer = $this->getViewer();
    $id = $project->getID();

    $can_edit = PhabricatorPolicyFilter::hasCapability(
      $viewer,
      $project,
      PhabricatorPolicyCapability::CAN_EDIT);

    $allows_milestones = $project->supportsMilestones();
    $allows_subprojects = $project->supportsSubprojects();

    $view = id(new PhabricatorActionListView())
      ->setUser($viewer);

    if ($allows_milestones && $milestones) {
      $milestone_text = pht('Create Next Milestone');
    } else {
      $milestone_text = pht('Create Milestone');
    }

    $can_milestone = ($can_edit && $allows_milestones);
    $milestone_href = "/project/edit/?milestone={$id}";

    $view->addAction(
      id(new PhabricatorActionView())
        ->setName($milestone_text)
        ->setIcon('fa-plus')
        ->setHref($milestone_href)
        ->setDisabled(!$can_milestone)
        ->setWorkflow(!$can_milestone));

    $can_subproject = ($can_edit && $allows_subprojects);

    // If we're offering to create the first subproject, we're going to warn
    // the user about the effects before moving forward.
    if ($can_subproject && !$subprojects) {
      $subproject_href = "/project/warning/{$id}/";
      $subproject_disabled = false;
      $subproject_workflow = true;
    } else {
      $subproject_href = "/project/edit/?parent={$id}";
      $subproject_disabled = !$can_subproject;
      $subproject_workflow = !$can_subproject;
    }

    $view->addAction(
      id(new PhabricatorActionView())
        ->setName(pht('Create Subproject'))
        ->setIcon('fa-plus')
        ->setHref($subproject_href)
        ->setDisabled($subproject_disabled)
        ->setWorkflow($subproject_workflow));

    return $view;
  }

||||||||  private function buildActionList(
    PhabricatorProject $project,
    array $milestones,
    array $subprojects) {
    $viewer = $this->getViewer();
    $id = $project->getID();

    $can_create = $this->hasApplicationCapability(
      ProjectCreateProjectsCapability::CAPABILITY);

    $can_edit = PhabricatorPolicyFilter::hasCapability(
      $viewer,
      $project,
      PhabricatorPolicyCapability::CAN_EDIT);

    $allows_milestones = $project->supportsMilestones();
    $allows_subprojects = $project->supportsSubprojects();

    $view = id(new PhabricatorActionListView())
      ->setUser($viewer);

    if ($allows_milestones && $milestones) {
      $milestone_text = pht('Create Next Milestone');
    } else {
      $milestone_text = pht('Create Milestone');
    }

    $can_milestone = ($can_create && $can_edit && $allows_milestones);
    $milestone_href = "/project/edit/?milestone={$id}";

    $view->addAction(
      id(new PhabricatorActionView())
        ->setName($milestone_text)
        ->setIcon('fa-plus')
        ->setHref($milestone_href)
        ->setDisabled(!$can_milestone)
        ->setWorkflow(!$can_milestone));

    $can_subproject = ($can_create && $can_edit && $allows_subprojects);

    // If we're offering to create the first subproject, we're going to warn
    // the user about the effects before moving forward.
    if ($can_subproject && !$subprojects) {
      $subproject_href = "/project/warning/{$id}/";
      $subproject_disabled = false;
      $subproject_workflow = true;
    } else {
      $subproject_href = "/project/edit/?parent={$id}";
      $subproject_disabled = !$can_subproject;
      $subproject_workflow = !$can_subproject;
    }

    $view->addAction(
      id(new PhabricatorActionView())
        ->setName(pht('Create Subproject'))
        ->setIcon('fa-plus')
        ->setHref($subproject_href)
        ->setDisabled($subproject_disabled)
        ->setWorkflow($subproject_workflow));

    return $view;
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW)))
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_NEW)))
                                (
                                    (AST_VAR)))
                            (
                                (SCALAR)))
                        (
                            (AST_VAR)))
                    (
                        (AST_UNARY_OP
                            (AST_VAR))))
                (
                    (AST_UNARY_OP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_NEW)))
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)))))
                            (
                                (SCALAR)))
                        (
                            (AST_VAR)))
                    (
                        (AST_VAR)))
                (
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW)))
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_NEW)))
                                (
                                    (AST_VAR)))
                            (
                                (SCALAR)))
                        (
                            (AST_VAR)))
                    (
                        (AST_UNARY_OP
                            (AST_VAR))))
                (
                    (AST_UNARY_OP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_UNARY_OP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_NEW)))
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)))))
                            (
                                (SCALAR)))
                        (
                            (AST_VAR)))
                    (
                        (AST_VAR)))
                (
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))