    public function testCompositeParametersLoading()
    {
        $this->markTestSkipped('Parameters cannot be composite yet.');
        $res = $this->createLoader()->load(__DIR__ . '/Files/parameters/composite.yml');

        $this->assertCount(1, $res);

        $user = $res['user0'];
        $this->assertInstanceOf(self::USER, $user);
        $this->assertEquals('Nan Bat!', $user->username);
    }

||||||||    public function testCompositeParametersLoading()
    {
        $objects = $this->createLoader()->load(__DIR__ . '/Files/parameters/composite.yml');

        $this->assertCount(2, $objects);

        $user = $objects['user0'];
        $this->assertInstanceOf(self::USER, $user);
        //$this->assertEquals('NaN Bat!', $user->username); Not supported yet
        $this->assertEquals('<{key1}> <{key2}>!', $user->username);

        $user = $objects['user1'];
        $this->assertInstanceOf(self::USER, $user);
        //$this->assertEquals('NaN Bat!', $user->username); Not supported yet
        $this->assertEquals('NaN Bat!', $user->username);
    }

    /**
     * @expectedException \UnexpectedValueException
     * @expectedExceptionMessage Parameter "username_<current()>" was not found.
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_BINARY_OP
                    (AST_MAGIC_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_BINARY_OP
                    (AST_MAGIC_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR)))))