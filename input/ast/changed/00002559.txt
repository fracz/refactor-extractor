	protected function command() {

		if (!class_exists('\Faker\Generator')) {
			elgg_log('This is a developer tool currently intended for testing purposes only. Please refrain from using it.', 'ERROR');
			return 1;
		}

		elgg_set_config('debug', 'NOTICE');

		set_time_limit(0);

		if (elgg_is_logged_in()) {
			elgg_log("Seeds should not be run with a logged in user", 'ERROR');
			return 2;
		}

		_elgg_services()->setValue('mailer', new \Zend\Mail\Transport\InMemory());

		_elgg_services()->seeder->seed();
	}

}||||||||	protected function command() {


		if (!class_exists('\Faker\Generator')) {
			elgg_log('This is a developer tool currently intended for testing purposes only. Please refrain from using it.', 'ERROR');
			return 1;
		}

		set_time_limit(0);

		if (elgg_is_logged_in()) {
			elgg_log("Seeds should not be run with a logged in user", 'ERROR');
			return 2;
		}

		_elgg_services()->setValue('mailer', new \Zend\Mail\Transport\InMemory());

		_elgg_services()->seeder->seed();
	}

}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_CALL
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (SCALAR))))
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_CALL
        (
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_CALL)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_CALL))))