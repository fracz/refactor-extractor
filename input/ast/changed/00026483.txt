  final public function renderEffectDescription($type, $data) {
    $result = $this->renderActionEffectDescription($type, $data);
    if ($result !== null) {
      return $result;
    }

    switch ($type) {
      case self::DO_STANDARD_EMPTY:
        return pht(
          'This action specifies no targets.');
      case self::DO_STANDARD_NO_EFFECT:
        return pht(
          'This action has no effect on %s target(s): %s.',
          new PhutilNumber(count($data)),
          $this->renderHandleList($data));
      case self::DO_STANDARD_INVALID:
        return pht(
          '%s target(s) are invalid or of the wrong type: %s.',
          new PhutilNumber(count($data)),
          $this->renderHandleList($data));
      case self::DO_STANDARD_UNLOADABLE:
        return pht(
          '%s target(s) could not be loaded: %s.',
          new PhutilNumber(count($data)),
          $this->renderHandleList($data));
      case self::DO_STANDARD_PERMISSION:
        return pht(
          '%s target(s) do not have permission to see this object: %s.',
          new PhutilNumber(count($data)),
          $this->renderHandleList($data));
      case self::DO_STANDARD_INVALID_ACTION:
        return pht(
          'No implementation is available for rule "%s".',
          $data);
      case self::DO_STANDARD_WRONG_RULE_TYPE:
        return pht(
          'This action does not support rules of type "%s".',
          $data);
    }

    return null;
  }

}||||||||  final public function renderEffectDescription($type, $data) {
    $result = $this->renderActionEffectDescription($type, $data);
    if ($result !== null) {
      return $result;
    }

    switch ($type) {
      case self::DO_STANDARD_EMPTY:
        return pht(
          'This action specifies no targets.');
      case self::DO_STANDARD_NO_EFFECT:
        return pht(
          'This action has no effect on %s target(s): %s.',
          phutil_count($data),
          $this->renderHandleList($data));
      case self::DO_STANDARD_INVALID:
        return pht(
          '%s target(s) are invalid or of the wrong type: %s.',
          phutil_count($data),
          $this->renderHandleList($data));
      case self::DO_STANDARD_UNLOADABLE:
        return pht(
          '%s target(s) could not be loaded: %s.',
          phutil_count($data),
          $this->renderHandleList($data));
      case self::DO_STANDARD_PERMISSION:
        return pht(
          '%s target(s) do not have permission to see this object: %s.',
          phutil_count($data),
          $this->renderHandleList($data));
      case self::DO_STANDARD_INVALID_ACTION:
        return pht(
          'No implementation is available for rule "%s".',
          $data);
      case self::DO_STANDARD_WRONG_RULE_TYPE:
        return pht(
          'This action does not support rules of type "%s".',
          $data);
    }

    return null;
  }

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (AST_VAR)))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (AST_VAR)))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (AST_VAR)))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (AST_VAR)))))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CONST)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CONST)))