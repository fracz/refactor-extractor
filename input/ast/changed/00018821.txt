    public function registerBindings()
    {
        $this->app->bind(
            \App\Repositories\Frontend\Access\User\UserRepositoryContract::class,
            \App\Repositories\Frontend\Access\User\EloquentUserRepository::class
        );

        $this->app->bind(
            \App\Repositories\Backend\Access\User\UserRepositoryContract::class,
            \App\Repositories\Backend\Access\User\EloquentUserRepository::class
        );

        $this->app->bind(
            \App\Repositories\Backend\Access\Role\RoleRepositoryContract::class,
            \App\Repositories\Backend\Access\Role\EloquentRoleRepository::class
        );

        $this->app->bind(
            \App\Repositories\Backend\Access\Permission\PermissionRepositoryContract::class,
            \App\Repositories\Backend\Access\Permission\EloquentPermissionRepository::class
        );

        $this->app->bind(
            \App\Repositories\Backend\Access\Permission\Group\PermissionGroupRepositoryContract::class,
            \App\Repositories\Backend\Access\Permission\Group\EloquentPermissionGroupRepository::class
        );

        $this->app->bind(
            \App\Repositories\Backend\Access\Permission\Dependency\PermissionDependencyRepositoryContract::class,
            \App\Repositories\Backend\Access\Permission\Dependency\EloquentPermissionDependencyRepository::class
        );
    }

    /**
     * Register the blade extender to use new blade sections
     */
||||||||    public function registerBindings()
    {
        $this->app->bind(
            \App\Repositories\Frontend\Access\User\UserRepositoryContract::class,
            \App\Repositories\Frontend\Access\User\EloquentUserRepository::class
        );

        $this->app->bind(
            \App\Repositories\Backend\Access\User\UserRepositoryContract::class,
            \App\Repositories\Backend\Access\User\EloquentUserRepository::class
        );

        $this->app->bind(
            \App\Repositories\Backend\Access\Role\RoleRepositoryContract::class,
            \App\Repositories\Backend\Access\Role\EloquentRoleRepository::class
        );

        $this->app->bind(
            \App\Repositories\Backend\Access\Permission\PermissionRepositoryContract::class,
            \App\Repositories\Backend\Access\Permission\EloquentPermissionRepository::class
        );
    }

    /**
     * Register the blade extender to use new blade sections
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR)))))