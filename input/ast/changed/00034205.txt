    public function getFormFieldClass(FieldDescription $fieldDescription)
    {

        $class = isset($this->formFieldClasses[$fieldDescription->getType()]) ? $this->formFieldClasses[$fieldDescription->getType()] : false;

        $class = $fieldDescription->getOption('form_field_widget', $class);

        if(!$class) {
            throw new \RuntimeException(sprintf('unknow type `%s`', $fieldDescription->getType()));
        }

        if(!class_exists($class)) {
            throw new \RuntimeException(sprintf('The class `%s` does not exist for field `%s`', $class, $fieldDescription->getType()));
        }

        return $class;
    }

    /**
     * Add a new instance to the related FieldDescription value
     *
     * @param  $object
     * @param FieldDescription $fieldDescription
     * @return void
     */
||||||||    public function getFormFieldClass(FieldDescription $fieldDescription)
    {
        /*

        UNUSED RIGHT NOW

        $class = isset($this->formFieldClasses[$fieldDescription->getType()]) ? $this->formFieldClasses[$fieldDescription->getType()] : false;

        $class = $fieldDescription->getOption('form_field_widget', $class);

        if(!$class) {
            throw new \RuntimeException(sprintf('unknow type `%s`', $fieldDescription->getType()));
        }

        if(!class_exists($class)) {
            throw new \RuntimeException(sprintf('The class `%s` does not exist for field `%s`', $class, $fieldDescription->getType()));
        }

        return $class;

        */
    }

    /**
     * Add a new instance to the related FieldDescription value
     *
     * @param  $object
     * @param FieldDescription $fieldDescription
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)