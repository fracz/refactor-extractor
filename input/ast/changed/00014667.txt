    private function getNextEmbedBlock($indentation = null, $inSequence = false)
    {
        $oldLineIndentation = $this->getCurrentLineIndentation();
        $blockScalarIndentations = array();

        if ($this->isBlockScalarHeader()) {
            $blockScalarIndentations[] = $this->getCurrentLineIndentation();
        }

        if (!$this->moveToNextLine()) {
            return;
        }

        if (null === $indentation) {
            $newIndent = $this->getCurrentLineIndentation();

            $unindentedEmbedBlock = $this->isStringUnIndentedCollectionItem();

            if (!$this->isCurrentLineEmpty() && 0 === $newIndent && !$unindentedEmbedBlock) {
                throw new ParseException('Indentation problem.', $this->getRealCurrentLineNb() + 1, $this->currentLine);
            }
        } else {
            $newIndent = $indentation;
        }

        $data = array();
        if ($this->getCurrentLineIndentation() >= $newIndent) {
            $data[] = substr($this->currentLine, $newIndent);
        } else {
            $this->moveToPreviousLine();

            return;
        }

        if ($inSequence && $oldLineIndentation === $newIndent && isset($data[0][0]) && '-' === $data[0][0]) {
            // the previous line contained a dash but no item content, this line is a sequence item with the same indentation
            // and therefore no nested list or mapping
            $this->moveToPreviousLine();

            return;
        }

        $isItUnindentedCollection = $this->isStringUnIndentedCollectionItem();

        if (empty($blockScalarIndentations) && $this->isBlockScalarHeader()) {
            $blockScalarIndentations[] = $this->getCurrentLineIndentation();
        }

        $previousLineIndentation = $this->getCurrentLineIndentation();

        while ($this->moveToNextLine()) {
            $indent = $this->getCurrentLineIndentation();

            // terminate all block scalars that are more indented than the current line
            if (!empty($blockScalarIndentations) && $indent < $previousLineIndentation && trim($this->currentLine) !== '') {
                foreach ($blockScalarIndentations as $key => $blockScalarIndentation) {
                    if ($blockScalarIndentation >= $this->getCurrentLineIndentation()) {
                        unset($blockScalarIndentations[$key]);
                    }
                }
            }

            if (empty($blockScalarIndentations) && !$this->isCurrentLineComment() && $this->isBlockScalarHeader()) {
                $blockScalarIndentations[] = $this->getCurrentLineIndentation();
            }

            $previousLineIndentation = $indent;

            if ($isItUnindentedCollection && !$this->isStringUnIndentedCollectionItem() && $newIndent === $indent) {
                $this->moveToPreviousLine();
                break;
            }

            if ($this->isCurrentLineBlank()) {
                $data[] = substr($this->currentLine, $newIndent);
                continue;
            }

            // we ignore "comment" lines only when we are not inside a scalar block
            if (empty($blockScalarIndentations) && $this->isCurrentLineComment()) {
                // remember ignored comment lines (they are used later in nested
                // parser calls to determine real line numbers)
                //
                // CAUTION: beware to not populate the global property here as it
                // will otherwise influence the getRealCurrentLineNb() call here
                // for consecutive comment lines and subsequent embedded blocks
                $this->locallySkippedLineNumbers[] = $this->getRealCurrentLineNb();

                continue;
            }

            if ($indent >= $newIndent) {
                $data[] = substr($this->currentLine, $newIndent);
            } elseif (0 == $indent) {
                $this->moveToPreviousLine();

                break;
            } else {
                throw new ParseException('Indentation problem.', $this->getRealCurrentLineNb() + 1, $this->currentLine);
            }
        }

        return implode("\n", $data);
    }

    /**
     * Moves the parser to the next line.
     *
     * @return bool
     */
||||||||    private function getNextEmbedBlock($indentation = null, $inSequence = false)
    {
        $oldLineIndentation = $this->getCurrentLineIndentation();
        $blockScalarIndentations = array();

        if ($this->isBlockScalarHeader()) {
            $blockScalarIndentations[] = $this->getCurrentLineIndentation();
        }

        if (!$this->moveToNextLine()) {
            return;
        }

        if (null === $indentation) {
            $newIndent = $this->getCurrentLineIndentation();

            $unindentedEmbedBlock = $this->isStringUnIndentedCollectionItem();

            if (!$this->isCurrentLineEmpty() && 0 === $newIndent && !$unindentedEmbedBlock) {
                throw new ParseException('Indentation problem.', $this->getRealCurrentLineNb() + 1, $this->currentLine);
            }
        } else {
            $newIndent = $indentation;
        }

        $data = array();
        if ($this->getCurrentLineIndentation() >= $newIndent) {
            $data[] = substr($this->currentLine, $newIndent);
        } else {
            $this->moveToPreviousLine();

            return;
        }

        if ($inSequence && $oldLineIndentation === $newIndent && isset($data[0][0]) && '-' === $data[0][0]) {
            // the previous line contained a dash but no item content, this line is a sequence item with the same indentation
            // and therefore no nested list or mapping
            $this->moveToPreviousLine();

            return;
        }

        $isItUnindentedCollection = $this->isStringUnIndentedCollectionItem();

        if (empty($blockScalarIndentations) && $this->isBlockScalarHeader()) {
            $blockScalarIndentations[] = $this->getCurrentLineIndentation();
        }

        $previousLineIndentation = $this->getCurrentLineIndentation();

        while ($this->moveToNextLine()) {
            $indent = $this->getCurrentLineIndentation();

            // terminate all block scalars that are more indented than the current line
            if (!empty($blockScalarIndentations) && $indent < $previousLineIndentation && trim($this->currentLine) !== '') {
                foreach ($blockScalarIndentations as $key => $blockScalarIndentation) {
                    if ($blockScalarIndentation >= $this->getCurrentLineIndentation()) {
                        unset($blockScalarIndentations[$key]);
                    }
                }
            }

            if (empty($blockScalarIndentations) && !$this->isCurrentLineComment() && $this->isBlockScalarHeader()) {
                $blockScalarIndentations[] = $this->getCurrentLineIndentation();
            }

            $previousLineIndentation = $indent;

            if ($isItUnindentedCollection && !$this->isStringUnIndentedCollectionItem() && $newIndent === $indent) {
                $this->moveToPreviousLine();
                break;
            }

            if ($this->isCurrentLineBlank()) {
                $data[] = substr($this->currentLine, $newIndent);
                continue;
            }

            // we ignore "comment" lines only when we are not inside a scalar block
            if (empty($blockScalarIndentations) && $this->isCurrentLineComment()) {
                continue;
            }

            if ($indent >= $newIndent) {
                $data[] = substr($this->currentLine, $newIndent);
            } elseif (0 == $indent) {
                $this->moveToPreviousLine();

                break;
            } else {
                throw new ParseException('Indentation problem.', $this->getRealCurrentLineNb() + 1, $this->currentLine);
            }
        }

        return implode("\n", $data);
    }

    /**
     * Moves the parser to the next line.
     *
     * @return bool
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR)))
                            (AST_UNARY_OP
                                (AST_VAR)))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)
                                        (AST_BINARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_PROP
                                            (AST_VAR))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_ISSET
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_EMPTY
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (SCALAR)))
                    (
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (
                                            (AST_UNSET
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (AST_VAR)))))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_EMPTY
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_BREAK
                            (NULL))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR)))
                            (AST_UNARY_OP
                                (AST_VAR)))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR)
                                        (AST_BINARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_PROP
                                            (AST_VAR))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_ISSET
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))))
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_EMPTY
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_UNARY_OP
                                (AST_EMPTY
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (SCALAR)))
                    (
                        (AST_FOREACH
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (
                                            (AST_UNSET
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (AST_VAR)))))))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_EMPTY
                                (AST_VAR))
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_UNARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_BREAK
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_VAR))))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_BREAK
                            (NULL))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))
                                    (AST_PROP
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)))))