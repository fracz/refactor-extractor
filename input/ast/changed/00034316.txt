    protected function compress()
    {
        $gzipPath = $this->originalFilePath.'.gz';

        $gzipOut = false;
        $gzipIn = false;

        try {
            $gzipOut = gzopen($gzipPath, 'w9');
            $gzipIn = fopen($this->originalFilePath, 'rb');

            while (! feof($gzipIn)) {
                gzwrite($gzipOut, fread($gzipIn, 1024 * 512));
            }

            fclose($gzipIn);
            gzclose($gzipOut);
        } catch (\Exception $exception) {
            if (is_resource($gzipOut)) {
                gzclose($gzipOut);
                unlink($gzipPath);
            }

            if (is_resource($gzipIn)) {
                fclose($gzipIn);
            }

            return $this->originalFilePath;
        }

        return $gzipPath;
    }

    /**
     * @return int
     */
||||||||    public static function compress(string $inputFile): string
    {
        if (! file_exists($inputFile)) {
            throw new \InvalidArgumentException("Inputfile `{$inputFile}` does not exist.");
        }

        $inputHandle = fopen($inputFile, 'rb');

        $outputFile = $inputFile . '.gz';
        $outputHandle = gzopen($outputFile, 'w9');

        while (!feof($inputHandle)) {
            gzwrite($outputHandle, fread($inputHandle, 1024 * 512));
        }

        fclose($inputHandle);
        gzclose($outputHandle);

        return $outputFile;
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_PROP
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (AST_WHILE
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (SCALAR))))))))
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (AST_VAR))))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_CALL
                                    (
                                        (AST_VAR))))))
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR))))))
        (NULL))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_WHILE
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_VAR))))
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))