    private function handleAccessDeniedException(GetResponseForExceptionEvent $event, AccessDeniedException $exception)
    {
        $event->setException(new AccessDeniedHttpException($exception->getMessage(), $exception));

        $token = $this->tokenStorage->getToken();
        if (!$this->authenticationTrustResolver->isFullFledged($token)) {
            if (null !== $this->logger) {
                $this->logger->debug(sprintf('Access is denied (user is not fully authenticated) by "%s" at line %s; redirecting to authentication entry point', $exception->getFile(), $exception->getLine()));
            }

            try {
                $insufficientAuthenticationException = new InsufficientAuthenticationException('Full authentication is required to access this resource.', 0, $exception);
                $insufficientAuthenticationException->setToken($token);

                $event->setResponse($this->startAuthentication($event->getRequest(), $insufficientAuthenticationException));
            } catch (\Exception $e) {
                $event->setException($e);
            }

            return;
        }

        if (null !== $this->logger) {
            $this->logger->debug(sprintf('Access is denied (and user is neither anonymous, nor remember-me) by "%s" at line %s', $exception->getFile(), $exception->getLine()));
        }

        try {
            if (null !== $this->accessDeniedHandler) {
                $response = $this->accessDeniedHandler->handle($event->getRequest(), $exception);

                if ($response instanceof Response) {
                    $event->setResponse($response);
                }
            } elseif (null !== $this->errorPage) {
                $subRequest = $this->httpUtils->createRequest($event->getRequest(), $this->errorPage);
                $subRequest->attributes->set(Security::ACCESS_DENIED_ERROR, $exception);

                $event->setResponse($event->getKernel()->handle($subRequest, HttpKernelInterface::SUB_REQUEST, true));
            }
        } catch (\Exception $e) {
            if (null !== $this->logger) {
                $this->logger->error(sprintf('Exception thrown when handling an exception (%s: %s)', get_class($e), $e->getMessage()));
            }

            $event->setException(new \RuntimeException('Exception thrown when handling an exception.', 0, $e));
        }
    }

||||||||    private function handleAccessDeniedException(GetResponseForExceptionEvent $event, AccessDeniedException $exception)
    {
        $event->setException(new AccessDeniedHttpException($exception->getMessage(), $exception));

        $token = $this->tokenStorage->getToken();
        if (!$this->authenticationTrustResolver->isFullFledged($token)) {
            if (null !== $this->logger) {
                $this->logger->debug('Access denied, the user is not fully authenticated; redirecting to authentication entry point.', array('exception' => $exception));
            }

            try {
                $insufficientAuthenticationException = new InsufficientAuthenticationException('Full authentication is required to access this resource.', 0, $exception);
                $insufficientAuthenticationException->setToken($token);

                $event->setResponse($this->startAuthentication($event->getRequest(), $insufficientAuthenticationException));
            } catch (\Exception $e) {
                $event->setException($e);
            }

            return;
        }

        if (null !== $this->logger) {
            $this->logger->debug('Access denied, the user is neither anonymous, nor remember-me.', array('exception' => $exception));
        }

        try {
            if (null !== $this->accessDeniedHandler) {
                $response = $this->accessDeniedHandler->handle($event->getRequest(), $exception);

                if ($response instanceof Response) {
                    $event->setResponse($response);
                }
            } elseif (null !== $this->errorPage) {
                $subRequest = $this->httpUtils->createRequest($event->getRequest(), $this->errorPage);
                $subRequest->attributes->set(Security::ACCESS_DENIED_ERROR, $exception);

                $event->setResponse($event->getKernel()->handle($subRequest, HttpKernelInterface::SUB_REQUEST, true));
            }
        } catch (\Exception $e) {
            if (null !== $this->logger) {
                $this->logger->error('An exception was thrown when handling an AccessDeniedException.', array('exception' => $e));
            }

            $event->setException(new \RuntimeException('Exception thrown when handling an exception.', 0, $e));
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))))))
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_VAR))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))
                    (NULL))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_INSTANCEOF
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_VAR)
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (AST_CONST)))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))))))
        (NULL)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_VAR)
                                            (SCALAR))))))))
                (AST_TRY
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_VAR))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_VAR))))))
                    (NULL))
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_INSTANCEOF
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))))))
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_VAR)))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR))
                                    (
                                        (AST_VAR)
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (AST_CONST)))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR))))))))
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)
                                    (AST_VAR))))))))
        (NULL)))