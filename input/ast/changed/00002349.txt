	function testStartsTimer() {
		unset($GLOBALS['START_MICROTIME']);
		new Application(_elgg_services());

		$this->assertTrue(is_float($GLOBALS['START_MICROTIME']));
	}

||||||||	function testStartsTimer() {
		$app = Application::$_instance;

		Application::$_instance = null;
		unset($GLOBALS['START_MICROTIME']);

		Application::factory([
			'handle_shutdown' => false,
			'handle_exceptions' => false,
			'overwrite_global_config' => false,
			'config' => new Config(TestCase::getTestingConfigArray()),
		]);
		Application::$_instance = $app;

		$this->assertTrue(is_float($GLOBALS['START_MICROTIME']));
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_NEW
        (
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_STATIC_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_CONST)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONST)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CONST)
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_NEW
                        (
                            (AST_STATIC_CALL)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))))))