    private static function filterAnalysisPlugins(array $plugin_set) : array
    {
        $closures_for_kind = new ClosuresForKind();
        foreach ($plugin_set as $plugin) {
            if ($plugin instanceof LegacyAnalyzeNodeCapability) {
                if ($plugin instanceof AnalyzeNodeCapability) {
                    throw new \TypeError(sprintf("plugin %s should implement only one of LegacyAnalyzeNodeCapability and AnalyzeNodeCapability, not both", get_class($plugin)));
                }
                $closure = (new \ReflectionMethod($plugin, 'analyzeNode'))->getClosure($plugin);
                $closures_for_kind->recordForAllKinds($closure);
            } else if ($plugin instanceof AnalyzeNodeCapability) {
                $plugin_analysis_class = $plugin->getAnalyzeNodeVisitorClassName();
                if (!is_subclass_of($plugin_analysis_class, PluginAwareAnalysisVisitor::class)) {
                    throw new \TypeError(sprintf("Result of %s::getAnalyzeNodeVisitorClassName must be the name of a subclass of '%s', but '%s' is not", get_class($plugin), PluginAwareAnalysisVisitor::class, $plugin_analysis_class));
                }
                $closure = (new \ReflectionMethod($plugin_analysis_class, 'staticInvoke'))->getClosure(null);
                $closures_for_kind->recordForKinds($plugin_analysis_class::get_handled_node_kinds(), $closure);
            }
        }
        return $closures_for_kind->getFlattenedClosures(static function(array $closure_list) : \Closure {
           return static function(CodeBase $code_base, Context $context, Node $node, Node $parent_node = null) use($closure_list) {
                foreach ($closure_list as $closure) {
                    $closure($code_base, $context, $node, $parent_node);
                }
           };
        });
    }

||||||||    private static function filterAnalysisPlugins(array $plugin_set) : array
    {
        $closures_for_kind = new ClosuresForKind();
        foreach ($plugin_set as $plugin) {
            if ($plugin instanceof LegacyAnalyzeNodeCapability) {
                if ($plugin instanceof AnalyzeNodeCapability) {
                    throw new \TypeError(sprintf("plugin %s should implement only one of LegacyAnalyzeNodeCapability and AnalyzeNodeCapability, not both", get_class($plugin)));
                }
                $closure = (new \ReflectionMethod($plugin, 'analyzeNode'))->getClosure($plugin);
                $closures_for_kind->recordForAllKinds($closure);
            } else if ($plugin instanceof AnalyzeNodeCapability) {
                $plugin_analysis_class = $plugin->getAnalyzeNodeVisitorClassName();
                if (!is_subclass_of($plugin_analysis_class, PluginAwareAnalysisVisitor::class)) {
                    throw new \TypeError(sprintf("Result of %s::getAnalyzeNodeVisitorClassName must be the name of a subclass of '%s', but '%s' is not", get_class($plugin), PluginAwareAnalysisVisitor::class, $plugin_analysis_class));
                }
                /**
                 * @suppress PhanParamTooMany
                 * @suppress PhanUndeclaredProperty
                 */
                $closure = (static function(CodeBase $code_base, Context $context, Node $node, Node $parent_node = null) {
                    $visitor = new static($code_base, $context);
                    $visitor->parent_node = $parent_node;
                    $visitor($node);
                })->bindTo(null, $plugin_analysis_class);
                $handled_node_kinds = $plugin_analysis_class::getHandledNodeKinds();
                if (\count($handled_node_kinds) === 0) {
                    fprintf(
                        STDERR,
                        "Plugin %s has an analyzeNode visitor %s (subclass of %s) which doesn't override any known visit<Suffix>() methods, but expected at least one method to be overridden\n",
                        get_class($plugin),
                        $plugin_analysis_class,
                        PluginAwareAnalysisVisitor::class
                    );
                }
                $closures_for_kind->recordForKinds($handled_node_kinds, $closure);
            }
        }
        return $closures_for_kind->getFlattenedClosures(static function(array $closure_list) : \Closure {
           return static function(CodeBase $code_base, Context $context, Node $node, Node $parent_node = null) use($closure_list) {
                foreach ($closure_list as $closure) {
                    $closure($code_base, $context, $node, $parent_node);
                }
           };
        });
    }

||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_INSTANCEOF
                                    (AST_VAR))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_CALL
                                                    (
                                                        (SCALAR)
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)))))))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (SCALAR)))
                                (
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_INSTANCEOF
                                    (AST_VAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_UNARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_CLASS_CONST
                                                            (SCALAR)))))
                                            (
                                                (AST_THROW
                                                    (AST_NEW
                                                        (
                                                            (AST_CALL
                                                                (
                                                                    (SCALAR)
                                                                    (AST_CALL
                                                                        (
                                                                            (AST_VAR)))
                                                                    (AST_CLASS_CONST
                                                                        (SCALAR))
                                                                    (AST_VAR)))))))))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_NEW
                                                (
                                                    (AST_VAR)
                                                    (SCALAR)))
                                            (
                                                (AST_CONST))))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_STATIC_CALL
                                                (AST_VAR))
                                            (AST_VAR)))))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_CLOSURE
                                (PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
                                (AST_CLOSURE_USES
                                    (AST_CLOSURE_VAR))
                                (
                                    (AST_FOREACH
                                        (AST_VAR)
                                        (AST_VAR)
                                        (NULL)
                                        (
                                            (AST_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (AST_VAR))))))))))))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_INSTANCEOF
                        (AST_VAR))
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_INSTANCEOF
                                    (AST_VAR))
                                (
                                    (AST_THROW
                                        (AST_NEW
                                            (
                                                (AST_CALL
                                                    (
                                                        (SCALAR)
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)))))))))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (SCALAR)))
                                (
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_INSTANCEOF
                                    (AST_VAR))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR)))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_UNARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)
                                                        (AST_CLASS_CONST
                                                            (SCALAR)))))
                                            (
                                                (AST_THROW
                                                    (AST_NEW
                                                        (
                                                            (AST_CALL
                                                                (
                                                                    (SCALAR)
                                                                    (AST_CALL
                                                                        (
                                                                            (AST_VAR)))
                                                                    (AST_CLASS_CONST
                                                                        (SCALAR))
                                                                    (AST_VAR)))))))))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_CLOSURE
                                                (PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
                                                (NULL)
                                                (
                                                    (AST_ASSIGN
                                                        (AST_VAR)
                                                        (AST_NEW
                                                            (
                                                                (AST_VAR)
                                                                (AST_VAR))))
                                                    (AST_ASSIGN
                                                        (AST_PROP
                                                            (AST_VAR))
                                                        (AST_VAR))
                                                    (AST_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_VAR)))))
                                            (
                                                (AST_CONST)
                                                (AST_VAR))))
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_STATIC_CALL
                                            (AST_VAR)))
                                    (AST_IF
                                        (AST_IF_ELEM
                                            (AST_BINARY_OP
                                                (AST_CALL
                                                    (
                                                        (AST_VAR)))
                                                (SCALAR))
                                            (
                                                (AST_CALL
                                                    (
                                                        (AST_CONST)
                                                        (SCALAR)
                                                        (AST_CALL
                                                            (
                                                                (AST_VAR)))
                                                        (AST_VAR)
                                                        (AST_CLASS_CONST
                                                            (SCALAR)))))))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (AST_VAR)))))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_CLOSURE
                                (PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
                                (AST_CLOSURE_USES
                                    (AST_CLOSURE_VAR))
                                (
                                    (AST_FOREACH
                                        (AST_VAR)
                                        (AST_VAR)
                                        (NULL)
                                        (
                                            (AST_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (AST_VAR)
                                                    (AST_VAR))))))))))))))