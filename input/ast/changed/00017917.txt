	public static function uri()
	{
		if ( ! is_null(static::$uri))
		{
			return static::$uri;
		}

		if (isset($_SERVER['PATH_INFO']))
		{
			return static::$uri = static::tidy($_SERVER['PATH_INFO']);
		}

		if ( ! isset($_SERVER['REQUEST_URI']))
		{
			throw new \Exception('Unable to determine the request URI.');
		}

		$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);

		// --------------------------------------------------------------
		// Slice the application URL off of the URI.
		// --------------------------------------------------------------
		if (strpos($uri, $base_url = parse_url(Config::get('application.url'), PHP_URL_PATH)) === 0)
		{
			$uri = substr($uri, strlen($base_url));
		}

		return static::$uri = static::tidy($uri);
	}

	/**
	 * Tidy up a URI for use by Laravel. For empty URIs, a forward
	 * slash will be returned.
	 *
	 * @param  string  $uri
	 * @return string
	 */
||||||||	public static function uri()
	{
		// -------------------------------------------------------
		// If we have already determined the URI, return it.
		// -------------------------------------------------------
		if ( ! is_null(static::$uri))
		{
			return static::$uri;
		}

		// -------------------------------------------------------
		// If the PATH_INFO is available, use it.
		// -------------------------------------------------------
		if (isset($_SERVER['PATH_INFO']))
		{
			$uri = $_SERVER['PATH_INFO'];
		}
		// -------------------------------------------------------
		// No PATH_INFO? Let's try REQUEST_URI.
		// -------------------------------------------------------
		elseif (isset($_SERVER['REQUEST_URI']))
		{
			$uri = str_replace('/index.php', '', $_SERVER['REQUEST_URI']);
		}
		// -------------------------------------------------------
		// Neither PATH_INFO or REQUEST_URI are available.
		// -------------------------------------------------------
		else
		{
			throw new \Exception('Unable to determine the request URI.');
		}

		$uri = trim($uri, '/');

		// -------------------------------------------------------
		// If the requests is to the root of the application, we
		// always return a single forward slash.
		// -------------------------------------------------------
		return static::$uri = ($uri == '') ? '/' : Str::lower($uri);
	}

	/**
	 * Get the request method.
	 *
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_PROP))))
            (
                (AST_RETURN
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_RETURN
                    (AST_ASSIGN
                        (AST_STATIC_PROP)
                        (AST_STATIC_CALL
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_CONST))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (SCALAR)))
                                    (AST_CONST))))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_STATIC_PROP)
            (AST_STATIC_CALL
                (
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_STATIC_PROP))))
            (
                (AST_RETURN
                    (AST_STATIC_PROP)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))))
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (SCALAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_STATIC_PROP)
            (AST_CONDITIONAL
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))
                (SCALAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))))))