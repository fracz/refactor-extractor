    protected function getClientMock()
    {
        return $this->getMockBuilder('Github\Client')
            ->disableOriginalConstructor()
            ->getMock();
    }
}

class AbstractApiTestInstance extends AbstractApi
{
    /**
     * {@inheritDoc}
     */
    public function get($path, array $parameters = array(), $requestOptions = array())
    {
        return parent::get($path, $parameters, $requestOptions);
    }

    /**
     * {@inheritDoc}
     */
    public function post($path, array $parameters = array(), $requestOptions = array())
    {
        return parent::post($path, $parameters, $requestOptions);
    }

    /**
     * {@inheritDoc}
     */
    public function patch($path, array $parameters = array(), $requestOptions = array())
    {
        return parent::patch($path, $parameters, $requestOptions);
    }

    /**
     * {@inheritDoc}
     */
    public function put($path, array $parameters = array(), $requestOptions = array())
    {
        return parent::put($path, $parameters, $requestOptions);
    }

    /**
     * {@inheritDoc}
     */
    public function delete($path, array $parameters = array(), $requestOptions = array())
    {
        return parent::delete($path, $parameters, $requestOptions);
    }
}||||||||    protected function getClientMock()
    {
        return new \Github\Client($this->getHttpClientMock());
    }

    /**
     * @return \Github\HttpClient\HttpClientInterface
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR))))))