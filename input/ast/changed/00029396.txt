	public function getRescheduledTime()
	{
		$currentTime = $this->getTime();

		// Adds one month
		$rescheduledTime = mktime ( date('H', $currentTime),
									date('i', $currentTime),
									date('s', $currentTime),
									date('n', $currentTime) + 1,
									1,
									date('Y', $currentTime)
									);

		$nextMonthLength = date('t', $rescheduledTime);

		// Sets scheduled day
		if ( $this->day !== null )
		{
			$scheduledDay = $this->day;
		}
		else
		{
			$scheduledDay = date('j', $currentTime);
		}

		// Caps scheduled day
		if ( $scheduledDay > $nextMonthLength )
		{
			$scheduledDay = $nextMonthLength;
		}

		// Adjusts the scheduled day
		$rescheduledTime += ($scheduledDay - 1) * 86400;

		// Adjusts the scheduled hour
		$rescheduledTime = $this->adjustHour($rescheduledTime);

		return $rescheduledTime;
	}

	/*
	 * @param  _day the day to set, has to be >= 1 and < 32
	 * @throws Exception if parameter _day is invalid
	 */
||||||||    public function getRescheduledTime()
	{
		$currentTime = $this->getTime();

		// Adds one month
		$rescheduledTime = mktime ( date('H', $currentTime),
									date('i', $currentTime),
									date('s', $currentTime),
									date('n', $currentTime) + 1,
									1,
									date('Y', $currentTime)
									);

		$nextMonthLength = date('t', $rescheduledTime);

		// Sets scheduled day
        $scheduledDay = date('j', $currentTime);

		if ( $this->day !== null )
		{
			$scheduledDay = $this->day;
		}

		// Caps scheduled day
		if ( $scheduledDay > $nextMonthLength )
		{
			$scheduledDay = $nextMonthLength;
		}

		// Adjusts the scheduled day
		$rescheduledTime += ($scheduledDay - 1) * 86400;

		// Adjusts the scheduled hour
		$rescheduledTime = $this->adjustHour($rescheduledTime);

		return $rescheduledTime;
	}

	/**
	 * @param int $_day the day to set, has to be >= 1 and < 32
	 * @throws Exception if parameter _day is invalid
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))
                    (SCALAR))
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR)))
                    (SCALAR))
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))