    public function ui() {
        global $OUTPUT, $PAGE;

        $m = optional_param('m', null, PARAM_INT);  // status message code
        $msg = new stdClass();
        if ($m == self::MSG_SUCCESS) {
            $msg = (object)array('text' => get_string('randomallocationdone', 'workshopallocation_random'), 'sty' => 'ok');
        }

        $out = '';
        $out .= $OUTPUT->container_start('random-allocator');
        $wsoutput = $PAGE->theme->get_renderer('mod_workshop', $PAGE);
        $out .= $wsoutput->status_message($msg);
        // the nasty hack follows to bypass the sad fact that moodle quickforms do not allow to actually
        // return the HTML content, just to display it
        ob_start();
        $this->mform->display();
        $out .= ob_get_contents();
        ob_end_clean();
        $out .= $OUTPUT->container_end();

        return $out;
    }

    /**
     * Allocates submissions to their authors for review
     *
     * If the submission has already been allocated, it is skipped. If the author is not found among
     * reviewers, the submission is not assigned.
     *
     * @param array $authors as returned by {@see workshop::get_peer_authors_by_group()}
     * @param array $reviewers as returned by {@see workshop::get_peer_reviewers_by_group()}
     * @param array $assessments as returned by {@see workshop::get_assessments()}
     * @return array of new allocations to be created, array of array(reviewerid => authorid)
     */
||||||||    public function ui() {
        global $OUTPUT, $PAGE;

        $m = optional_param('m', null, PARAM_INT);  // status message code
        $msg = new stdClass();
        if ($m == self::MSG_SUCCESS) {
            $msg = (object)array('text' => get_string('randomallocationdone', 'workshopallocation_random'), 'sty' => 'ok');
        }

        $out = '';
        $out .= $OUTPUT->container_start('random-allocator');
        $wsoutput = $PAGE->theme->get_renderer('mod_workshop', $PAGE);
        $out .= $wsoutput->status_message($msg);
        // the nasty hack follows to bypass the sad fact that moodle quickforms do not allow to actually
        // return the HTML content, just to display it
        ob_start();
        $this->mform->display();
        $out .= ob_get_contents();
        ob_end_clean();
        $out .= $OUTPUT->container_end();

        $out .= $OUTPUT->heading(get_string('stats', 'workshopallocation_random'));
        // TODO
        return $out;
    }

    /**
     * Allocates submissions to their authors for review
     *
     * If the submission has already been allocated, it is skipped. If the author is not found among
     * reviewers, the submission is not assigned.
     *
     * @param array $authors grouped of {@see workshop::get_potential_authors()}
     * @param array $reviewers grouped by {@see workshop::get_potential_reviewers()}
     * @param array $assessments as returned by {@see workshop::get_all_assessments()}
     * @return array of new allocations to be created, array of array(reviewerid => authorid)
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_CALL)
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CALL))
    (AST_CALL)
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (SCALAR)))
                                (SCALAR))
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_CALL)
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CALL))
    (AST_CALL)
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR))))))
    (AST_RETURN
        (AST_VAR)))