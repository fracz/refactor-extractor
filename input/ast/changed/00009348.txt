	public function __construct($postdata) {
		$this->batchSize  = $postdata["gdBatchSize"];
		$this->batchNum   = $postdata["gdCurrentBatchNum"];
		$this->numResults = $postdata["gdNumRowsToGenerate"];
		$this->exportType = $postdata["gdExportType"];
		$this->countries  = $postdata["gdCountries"];
		$this->dataTypes = DataTypePluginHelper::getDataTypeHash(Core::$dataTypePlugins);

		// figure out what we're going to need to generate
		$this->createDataSetTemplate($postdata);

		// now we farm out the work of generating the actual results to the selected Export Type
		$exportTypes = Core::$exportTypePlugins;
		$selectedExportType = null;
		foreach ($exportTypes as $currExportType) {
			if ($currExportType->getFolder() != $postdata["gdExportType"]) {
				continue;
			}
			$selectedExportType = $currExportType;
			break;
		}

		// TODO error handling
		if (!$selectedExportType == null) {
			$selectedExportType->generate($this);
		}
	}


	/**
	 * This function creates a "template" of the data set to be generated by passing off work to the
	 * various Data Types. The "template" that's returned is an ordered array of hashes, each hash being
	 * of the following structure:
	 *
	 *   array(
	 *      "title" => "", // whatever string is being used for the column title / node name / etc.
	 *      "type"  => "", // the namespace (folder name) of the Data Type
	 *      "options" => "" // whatever custom options have been specified for this Data Type
	 *      "has_dependencies" => ""  // boolean true / false. This is for Data Types whose generated content
	 *                                // (may) depend on values in other fields in the row, e.g. "Region",
	 *                                // which would need to know the randomly generated country to generate
	 *                                // an appropriate value
	 *   )
	 *
	 * The first two values are found right in the $_POST values, but the third and fourth are determined by
	 * the Data Type itself.
	 *
	 * @param array $hash
	 * @param integer $numCols
	 * @return array
	 */
||||||||	public function __construct($postdata) {
		$this->batchSize  = $postdata["gdBatchSize"];
		$this->batchNum   = $postdata["gdCurrentBatchNum"];
		$this->numResults = $postdata["gdNumRowsToGenerate"];
		$this->countries  = $postdata["gdCountries"];
		$this->dataTypes  = DataTypePluginHelper::getDataTypeHash(Core::$dataTypePlugins);

		// figure out what we're going to need to generate
		$this->createDataSetTemplate($postdata);

		// now we farm out the work of data generation to the selected Export Type
		$exportTypes = Core::$exportTypePlugins;
		$selectedExportType = null;
		foreach ($exportTypes as $currExportType) {
			if ($currExportType->getFolder() != $postdata["gdExportType"]) {
				continue;
			}
			$this->exportType = $currExportType;
			break;
		}

		// TODO should have error checking here to confirm the export type was found
	}


||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_STATIC_PROP))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_BREAK
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_STATIC_PROP))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_PROP))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_CONTINUE
                            (NULL)))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (AST_BREAK
                (NULL)))))