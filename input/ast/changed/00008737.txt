	public static function init() {

	        /* Get Global Preferences */
	        $sql = "SELECT `preference`.`name`,`user_preference`.`value` FROM `preference`,`user_preference` " .
			"WHERE `user_preference`.`user`='-1' " .
	                "AND `user_preference`.`preference` = `preference`.`id` AND `preference`.`catagory` = 'system'";
	        $db_results = Dba::query($sql);

	        while ($r = Dba::fetch_assoc($db_results)) {
	                $name = $r['name'];
	                $results[$name] = $r['value'];
	        } // end while sys prefs

	        /* Now we need to allow the user to override some stuff that's been set by the above */
	        $user_id = '-1';
	        if ($GLOBALS['user']->username) {
	                $user_id = Dba::escape($GLOBALS['user']->id);
	        }

	        $sql = "SELECT preference.name,user_preference.value FROM preference,user_preference WHERE user_preference.user='$user_id' " .
	                "AND user_preference.preference = preference.id AND preference.catagory != 'system'";
	        $db_results = Dba::query($sql);

	        while ($r = Dba::fetch_assoc($db_results)) {
	                $name = $r['name'];
	                $results[$name] = $r['value'];
	        } // end while

	        /* Set the Theme mojo */
	        if (strlen($results['theme_name']) > 0) {
	                $results['theme_path'] = '/themes/' . $results['theme_name'];
	        }
	        // Default to the classic theme if we don't get anything from their
	        // preferenecs because we're going to want at least something otherwise
	        // the page is going to be really ugly
	        else {
	                $results['theme_path'] = '/themes/classic';
	        }

	        Config::set_by_array($results,1);

	} // init


} // end Preference class||||||||	public static function init() {

		$user_id = $GLOBALS['user']->id ? Dba::escape($GLBOALS['user']->id) : '-1';

	        /* Get Global Preferences */
		$sql = "SELECT `preference`.`name`,`user_preference`.`value`,`syspref`.`value` AS `system_value` FROM `preference`" .
			"LEFT JOIN `user_preference` `syspref` ON `syspref`.`preference`=`preference`.`id` AND `syspref`.`user`='-1' AND  `preference`.`catagory`='system'" .
			"LEFT JOIN `user_preference` ON `user_preference`.`preference`=`preference`.`id` AND `user_preference`.`user`='$user_id' AND `preference`.`catagory`!='system'";
	        $db_results = Dba::query($sql);

	        while ($row = Dba::fetch_assoc($db_results)) {
			$value = $row['system_value'] ? $row['system_value'] : $row['value'];
	                $name = $row['name'];
	                $results[$name] = $value;
	        } // end while sys prefs

	        /* Set the Theme mojo */
	        if (strlen($results['theme_name']) > 0) {
	                $results['theme_path'] = '/themes/' . $results['theme_name'];
	        }
	        // Default to the classic theme if we don't get anything from their
	        // preferenecs because we're going to want at least something otherwise
	        // the page is going to be really ugly
	        else {
	                $results['theme_path'] = '/themes/classic';
	        }

	        Config::set_by_array($results,1);

	} // init


} // end Preference class||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR))))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_PROP
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR))))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_PROP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR))
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_WHILE
        (AST_ASSIGN
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_VAR))))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR))))