    protected function setUp()
    {
        $this->walker = $this->getMock('Symfony\Component\Validator\GraphWalker', array(), array(), '', false);
        $this->metadataFactory = $this->getMock('Symfony\Component\Validator\Mapping\ClassMetadataFactoryInterface');
        $this->globalContext = new GlobalExecutionContext('Root', $this->walker, $this->metadataFactory);
        $this->context = new ExecutionContext($this->globalContext, 'currentValue', 'foo.bar', 'Group', 'ClassName', 'propertyName');
    }

||||||||    protected function setUp()
    {
        $this->visitor = $this->getMockBuilder('Symfony\Component\Validator\ValidationVisitor')
            ->disableOriginalConstructor()
            ->getMock();
        $this->violations = new ConstraintViolationList();
        $this->metadata = $this->getMock('Symfony\Component\Validator\MetadataInterface');
        $this->metadataFactory = $this->getMock('Symfony\Component\Validator\MetadataFactoryInterface');
        $this->globalContext = $this->getMock('Symfony\Component\Validator\GlobalExecutionContextInterface');
        $this->globalContext->expects($this->any())
            ->method('getRoot')
            ->will($this->returnValue('Root'));
        $this->globalContext->expects($this->any())
            ->method('getViolations')
            ->will($this->returnValue($this->violations));
        $this->globalContext->expects($this->any())
            ->method('getVisitor')
            ->will($this->returnValue($this->visitor));
        $this->globalContext->expects($this->any())
            ->method('getMetadataFactory')
            ->will($this->returnValue($this->metadataFactory));
        $this->context = new ExecutionContext($this->globalContext, $this->metadata, 'currentValue', 'Group', 'foo.bar');
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY)
                (AST_ARRAY)
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (SCALAR)
                (SCALAR)))))