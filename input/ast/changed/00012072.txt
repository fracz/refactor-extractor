    public function visitMethod(Node $node) : Context {
        // Bomb out if we're not in a class context
        $clazz = $this->getContextClass();

        $method_name = $node->name;

        $method_fqsen = FQSEN::fromContext(
            $this->context
        )->withMethodName($method_name);

        // Hunt for an available alternate ID if necessary
        $alternate_id = 0;
        while($clazz->hasMethodWithFQSEN($method_fqsen)) {
            $method_fqsen = $method_fqsen->withAlternateId(
                ++$alternate_id
            );
        }

        $method =
            Method::fromNode($this->context, $node);

        // Override the FQSEN with the found alternate ID
        $method->setFQSEN($method_fqsen);

        $clazz->addMethod($method);
        $this->context->getCodeBase()->incrementMethods();

        if ('__construct' === $method_name) {
            $clazz->setIsParentConstructorCalled(false);
        }

        if ('__invoke' === $method_name) {
            $clazz->getType()->addTypeName('callable');
        }

        // Send the context into the method
        $context = $this->context->withMethodFQSEN(
            $method->getFQSEN()
        );

        return $context;
    }

    /**
     * Visit a node with kind `\ast\AST_PROP_DECL`
     *
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||    public function visitMethod(Node $node) : Context {
        // Bomb out if we're not in a class context
        $clazz = $this->getContextClass();

        $method_name = $node->name;

        $method_fqsen = FQSEN::fromContext(
            $this->context
        )->withMethodName($this->context, $method_name);

        // Hunt for an available alternate ID if necessary
        $alternate_id = 0;
        while($clazz->hasMethodWithFQSEN($method_fqsen)) {
            $method_fqsen = $method_fqsen->withAlternateId(
                ++$alternate_id
            );
        }

        $method =
            Method::fromNode($this->context, $node);

        // Override the FQSEN with the found alternate ID
        $method->setFQSEN($method_fqsen);

        $clazz->addMethod($method);
        $this->context->getCodeBase()->incrementMethods();

        if ('__construct' === $method_name) {
            $clazz->setIsParentConstructorCalled(false);
        }

        if ('__invoke' === $method_name) {
            $clazz->getType()->addTypeName('callable');
        }

        // Send the context into the method
        $context = $this->context->withMethodFQSEN(
            $method->getFQSEN()
        );

        return $context;
    }

    /**
     * Visit a node with kind `\ast\AST_PROP_DECL`
     *
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PRE_INC
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_WHILE
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PRE_INC
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))