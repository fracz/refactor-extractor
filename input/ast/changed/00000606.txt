    public function configure(Command $command)
    {
        $command
            ->addOption('--format', '-f', InputOption::VALUE_REQUIRED,
                'How to format features. <comment>pretty</comment> is default. Available formats are ' .
                implode(', ',
                    array_map(function($name) {
                        return "<comment>$name</comment>";
                    }, array_keys($this->defaultFormatters))
                )
            )
            ->addOption('--out', null, InputOption::VALUE_REQUIRED,
                'Write formatter output to a file/directory instead of STDOUT ' .
                '(<comment>output_path</comment>).'
            )
            ->addOption('--colors', null, InputOption::VALUE_NONE,
                'Force Behat to use ANSI color in the output.'
            )
            ->addOption('--no-colors', null, InputOption::VALUE_NONE,
                'Do not use ANSI color in the output.'
            )
            ->addOption('--no-time', null, InputOption::VALUE_NONE,
                'Hide time in output.'
            )
            ->addOption('--lang', null, InputOption::VALUE_REQUIRED,
                'Print formatter output in particular language.'
            )
            ->addOption('--no-paths', null, InputOption::VALUE_NONE,
                'Do not print the definition path with the steps.'
            )
            ->addOption('--no-snippets', null, InputOption::VALUE_NONE,
                'Do not print snippets for undefined steps.'
            )
            ->addOption('--no-multiline', null, InputOption::VALUE_NONE,
                "No multiline arguments in output."
            )
            ->addOption('--expand', null, InputOption::VALUE_NONE,
                'Expand Scenario Outline Tables in output.'."\n"
            )
        ;
    }

    /**
     * @see     Behat\Behat\Console\Configuration\ProcessorInterface::process()
     */
||||||||    public function configure(Command $command)
    {
        $defaultFormatters = $this->defaultFormatters;

        $command
            ->addOption('--format', '-f', InputOption::VALUE_REQUIRED,
                "How to format features. <comment>pretty</comment> is default.\n" .
                "Available formats are:\n" .
                implode("\n",
                    array_map(function($name) use($defaultFormatters) {
                        $class = $defaultFormatters[$name];
                        return "- <comment>$name</comment>: " . $class::getDescription();
                    }, array_keys($defaultFormatters))
                )
            )
            ->addOption('--out', null, InputOption::VALUE_REQUIRED,
                "Write formatter output to a file/directory\n" .
                "instead of STDOUT (<comment>output_path</comment>)."
            )
            ->addOption('--colors', null, InputOption::VALUE_NONE,
                'Force Behat to use ANSI color in the output.'
            )
            ->addOption('--no-colors', null, InputOption::VALUE_NONE,
                'Do not use ANSI color in the output.'
            )
            ->addOption('--no-time', null, InputOption::VALUE_NONE,
                'Hide time in output.'
            )
            ->addOption('--lang', null, InputOption::VALUE_REQUIRED,
                'Print formatter output in particular language.'
            )
            ->addOption('--no-paths', null, InputOption::VALUE_NONE,
                'Do not print the definition path with the steps.'
            )
            ->addOption('--no-snippets', null, InputOption::VALUE_NONE,
                'Do not print snippets for undefined steps.'
            )
            ->addOption('--no-multiline', null, InputOption::VALUE_NONE,
                "No multiline arguments in output."
            )
            ->addOption('--expand', null, InputOption::VALUE_NONE,
                "Expand Scenario Outline Tables in output.\n"
            )
        ;
    }

    /**
     * @see     Behat\Behat\Console\Configuration\ProcessorInterface::process()
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)
                                                (SCALAR)
                                                (AST_CLASS_CONST
                                                    (SCALAR))
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (SCALAR)
                                                            (AST_CALL
                                                                (
                                                                    (AST_CLOSURE
                                                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                                                        (NULL)
                                                                        (
                                                                            (AST_RETURN
                                                                                (AST_ENCAPS_LIST
                                                                                    (SCALAR)
                                                                                    (AST_VAR)
                                                                                    (SCALAR)))))
                                                                    (AST_CALL
                                                                        (
                                                                            (AST_PROP
                                                                                (AST_VAR)))))))))))
                                        (
                                            (SCALAR)
                                            (AST_CONST)
                                            (AST_CLASS_CONST
                                                (SCALAR))
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (SCALAR))))
                                    (
                                        (SCALAR)
                                        (AST_CONST)
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (SCALAR)))
                                (
                                    (SCALAR)
                                    (AST_CONST)
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (SCALAR)))
                            (
                                (SCALAR)
                                (AST_CONST)
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (SCALAR)))
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (SCALAR)))
                    (
                        (SCALAR)
                        (AST_CONST)
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR)))
                (
                    (SCALAR)
                    (AST_CONST)
                    (AST_CLASS_CONST
                        (SCALAR))
                    (SCALAR)))
            (
                (SCALAR)
                (AST_CONST)
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR)))
        (
            (SCALAR)
            (AST_CONST)
            (AST_CLASS_CONST
                (SCALAR))
            (AST_BINARY_OP
                (SCALAR)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)
                                                (SCALAR)
                                                (AST_CLASS_CONST
                                                    (SCALAR))
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (SCALAR))
                                                    (AST_CALL
                                                        (
                                                            (SCALAR)
                                                            (AST_CALL
                                                                (
                                                                    (AST_CLOSURE
                                                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                                                        (AST_CLOSURE_USES
                                                                            (AST_CLOSURE_VAR))
                                                                        (
                                                                            (AST_ASSIGN
                                                                                (AST_VAR)
                                                                                (AST_DIM
                                                                                    (AST_VAR)
                                                                                    (AST_VAR)))
                                                                            (AST_RETURN
                                                                                (AST_BINARY_OP
                                                                                    (AST_ENCAPS_LIST
                                                                                        (SCALAR)
                                                                                        (AST_VAR)
                                                                                        (SCALAR))
                                                                                    (AST_STATIC_CALL
                                                                                        (AST_VAR))))))
                                                                    (AST_CALL
                                                                        (
                                                                            (AST_VAR))))))))))
                                        (
                                            (SCALAR)
                                            (AST_CONST)
                                            (AST_CLASS_CONST
                                                (SCALAR))
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (SCALAR))))
                                    (
                                        (SCALAR)
                                        (AST_CONST)
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (SCALAR)))
                                (
                                    (SCALAR)
                                    (AST_CONST)
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (SCALAR)))
                            (
                                (SCALAR)
                                (AST_CONST)
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (SCALAR)))
                        (
                            (SCALAR)
                            (AST_CONST)
                            (AST_CLASS_CONST
                                (SCALAR))
                            (SCALAR)))
                    (
                        (SCALAR)
                        (AST_CONST)
                        (AST_CLASS_CONST
                            (SCALAR))
                        (SCALAR)))
                (
                    (SCALAR)
                    (AST_CONST)
                    (AST_CLASS_CONST
                        (SCALAR))
                    (SCALAR)))
            (
                (SCALAR)
                (AST_CONST)
                (AST_CLASS_CONST
                    (SCALAR))
                (SCALAR)))
        (
            (SCALAR)
            (AST_CONST)
            (AST_CLASS_CONST
                (SCALAR))
            (SCALAR))))