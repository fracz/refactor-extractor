    public function process($progresstrace = null, $depth = 0) {
        $this->convert_question();
        parent::process($progresstrace, $depth);//outputs progress message
    }
||||||||    public function process($progresstrace = null, $depth = 0) {
        qtype_ddmarker_convert_image_target_question($this->record, $this->imagetargetrecord->qimage, $this->answers);
        parent::process($progresstrace, $depth);//outputs progress message
    }
}

$categoryid = optional_param('categoryid', 0, PARAM_INT);
$qcontextid = optional_param('contextid', 0, PARAM_INT);
$questionid = optional_param('questionid', 0, PARAM_INT);
$confirm = optional_param('confirm', 0, PARAM_INT);
// Check the user is logged in.
require_login();
$context = get_context_instance(CONTEXT_SYSTEM);
require_capability('moodle/question:config', $context);

admin_externalpage_setup('qtypeddmarkerfromimagetarget');

// Header.
echo $OUTPUT->header();
echo $OUTPUT->heading_with_help(get_string('imagetargetconverter', 'qtype_ddmarker'), '', 'qtype_ddmarker');


$params = array();
$from = 'FROM {question_categories} cat, {question} q';
$where = ' WHERE q.qtype = \'imagetarget\' AND q.category =  cat.id ';

if ($qcontextid) {
    $qcontext = get_context_instance_by_id($qcontextid, MUST_EXIST);
    $from  .= ', {context} context';
    $where .= 'AND cat.contextid = context.id AND (context.path LIKE :path OR context.id = :id) ';
    $params['path'] = $qcontext->path.'/%';
    $params['id'] = $qcontext->id;
} else if ($categoryid) {
    //fetch all questions from this cats context
    $from  .= ', {question_categories} cat2';
    $where .= 'AND cat.contextid = cat2.contextid AND cat2.id = :categoryid ';
    $params['categoryid'] = $categoryid;
} else if ($questionid) {
    //fetch all questions from this cats context
    $where .= 'AND q.id = :questionid ';
    $params['questionid'] = $questionid;
}
$sql = 'SELECT q.*, cat.contextid '.$from.$where.'ORDER BY cat.id, q.name';

$questions = $DB->get_records_sql($sql, $params);

if (!count($questions)) {
    echo html_writer::tag('div', get_string('noquestionsfound', 'qtype_ddmarker'));
} else {
    $contextids = array();
    foreach ($questions as $question) {
        $contextids[] = $question->contextid;
    }

    $contextlist = new qtype_ddmarker_context_list(array_unique($contextids));
    $categorylist = new qtype_ddmarker_category_list($contextids, $contextlist);
    $questionlist = new qtype_ddmarker_question_converter_list($questions, $categorylist);

    foreach ($questions as $question) {
        $questionlist->leaf_node($question->id, 1);
    }
    $questionsselected = (bool) ($categoryid || $qcontextid || $questionid);
    if ($questionid) {
        $top = $questionlist->get_instance($questionid);
    } else if ($categoryid) {
        $top = $categorylist->get_instance($categoryid);
    } else if ($qcontextid) {
        $top = $contextlist->get_instance($qcontextid);
    } else {
        $top = $contextlist->root_node();
    }
    if (!$confirm) {
        if ($questionsselected) {
            echo $contextlist->render('listitemaction', false, $top);
            $cofirmedurl = new moodle_url($PAGE->url, compact('categoryid', 'contextid', 'questionid') + array('confirm'=>1));
            $cancelurl = new moodle_url($PAGE->url);
            echo $OUTPUT->confirm(get_string('confirmimagetargetconversion', 'qtype_ddmarker'), $cofirmedurl, $cancelurl);
        } else {
            echo $contextlist->render('listitemlist', true, $top);
        }
    } else if (confirm_sesskey()) {
        require_once(dirname(__FILE__).'/lib.php');
        $questionlist->prepare_for_processing($top);
        echo '<ul>';
        $top->process();
        echo '</ul>';
    }
}
// Footer.
echo $OUTPUT->footer();||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (AST_PROP
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR))))