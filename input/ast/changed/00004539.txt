	function _convertRange3d($token)
	{
		$class = 0; // formulas like Sheet1!$A$1:$A$2 in list type data validation need this class (0x3B)

		// Split the ref at the ! symbol
		list($ext_ref, $range) = explode('!', $token);

		// Convert the external reference part (different for BIFF8)
		if ($this->_BIFF_version == 0x0500) {
			$ext_ref = $this->_packExtRef($ext_ref);
		} elseif ($this->_BIFF_version == 0x0600) {
			 $ext_ref = $this->_getRefIndex($ext_ref);
		}

		// Split the range into 2 cell refs
		list($cell1, $cell2) = explode(':', $range);

		// Convert the cell references
		if (preg_match("/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?(\d+)$/", $cell1)) {
			$cell_array1 = $this->_cellToPackedRowcol($cell1);
			list($row1, $col1) = $cell_array1;
			$cell_array2 = $this->_cellToPackedRowcol($cell2);
			list($row2, $col2) = $cell_array2;
		} else { // It's a rows range (like 26:27)
			 $cells_array = $this->_rangeToPackedRange($cell1.':'.$cell2);
			 list($row1, $col1, $row2, $col2) = $cells_array;
		}

		// The ptg value depends on the class of the ptg.
		if ($class == 0) {
			$ptgArea = pack("C", $this->ptg['ptgArea3d']);
		} elseif ($class == 1) {
			$ptgArea = pack("C", $this->ptg['ptgArea3dV']);
		} elseif ($class == 2) {
			$ptgArea = pack("C", $this->ptg['ptgArea3dA']);
		} else {
			throw new Exception("Unknown class $class");
		}

		return $ptgArea . $ext_ref . $row1 . $row2 . $col1. $col2;
	}

	/**
	 * Convert an Excel reference such as A1, $B2, C$3 or $D$4 to a ptgRefV.
	 *
	 * @access private
	 * @param string $cell An Excel cell reference
	 * @return string The cell in packed() format with the corresponding ptg
	 */
||||||||	function _convertRange3d($token)
	{
		$class = 0; // formulas like Sheet1!$A$1:$A$2 in list type data validation need this class (0x3B)

		// Split the ref at the ! symbol
		list($ext_ref, $range) = explode('!', $token);

		// Convert the external reference part (different for BIFF8)
		$ext_ref = $this->_getRefIndex($ext_ref);

		// Split the range into 2 cell refs
		list($cell1, $cell2) = explode(':', $range);

		// Convert the cell references
		if (preg_match("/^(\\$)?[A-Ia-i]?[A-Za-z](\\$)?(\d+)$/", $cell1)) {
			$cell_array1 = $this->_cellToPackedRowcol($cell1);
			list($row1, $col1) = $cell_array1;
			$cell_array2 = $this->_cellToPackedRowcol($cell2);
			list($row2, $col2) = $cell_array2;
		} else { // It's a rows range (like 26:27)
			 $cells_array = $this->_rangeToPackedRange($cell1.':'.$cell2);
			 list($row1, $col1, $row2, $col2) = $cells_array;
		}

		// The ptg value depends on the class of the ptg.
		if ($class == 0) {
			$ptgArea = pack("C", $this->ptg['ptgArea3d']);
		} elseif ($class == 1) {
			$ptgArea = pack("C", $this->ptg['ptgArea3dV']);
		} elseif ($class == 2) {
			$ptgArea = pack("C", $this->ptg['ptgArea3dA']);
		} else {
			throw new Exception("Unknown class $class");
		}

		return $ptgArea . $ext_ref . $row1 . $row2 . $col1. $col2;
	}

	/**
	 * Convert an Excel reference such as A1, $B2, C$3 or $D$4 to a ptgRefV.
	 *
	 * @access private
	 * @param string $cell An Excel cell reference
	 * @return string The cell in packed() format with the corresponding ptg
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR))
                (AST_VAR))
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_VAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_VAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_VAR)))))
                (AST_ASSIGN
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_ENCAPS_LIST
                                (SCALAR)
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (AST_VAR))
                    (AST_VAR))
                (AST_VAR))
            (AST_VAR))))