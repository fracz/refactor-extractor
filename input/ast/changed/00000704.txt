    public function runScenarioSteps(Background $scenario, array $values = array(),
                                     $inOutline = false)
    {
        $scenarioStats = new ScenarioStats;
        $skip = false;

        foreach ($scenario->getSteps() as $step) {
            $scenarioStats->addStepStatus($this->runStep($step, $values, $skip));
            if ('failed' === $scenarioStats->getLastStepStatus()) {
                $skip = true;
            }
        }
        if ($inOutline) {
            $this->printer->logIntermediateOutlineScenario($scenario);
        }

        return $scenarioStats;
    }

    /**
     * Calls step printer with specific step
     *
     * @param   string      $code   step status code
     * @param   Step        $step   step instance
     * @param   Exception   $e      throwed exception
     *
     * @return  string              step status code
     */
||||||||    public function runScenarioSteps(Background $scenario, array $values = array(),
                                     $inOutline = false, StepsContainer $steps)
    {
        $scenarioStats = new ScenarioStats;
        $skip = false;

        foreach ($scenario->getSteps() as $step) {
            $scenarioStats->addStepStatus($this->runStep($step, $values, $skip, $steps));
            if ('failed' === $scenarioStats->getLastStepStatus()) {
                $skip = true;
            }
        }
        if ($inOutline) {
            $this->printer->logIntermediateOutlineScenario($scenario);
        }

        return $scenarioStats;
    }

    /**
     * Runs Step test
     *
     * @param   Step            $step       step instance to test
     * @param   array           $values     example tokens
     * @param   boolean         $skip       do we need to mark this step as skipped
     * @param   StepsContainer  $steps      steps definitions
     *
     * @return  string                      status code
     *
     * @throws  \Everzet\Behat\Exceptions\Pending       if step throws Pending exception
     * @throws  \Everzet\Behat\Exceptions\Ambiguous     if step matches multiple definitions
     * @throws  \Everzet\Behat\Exceptions\Undefined     if step definition not found
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))