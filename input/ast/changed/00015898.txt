	public function testCheckExtensionInFilesystem()
	{
		$mockInstaller = $this->getMock('JInstaller', array('getPath', 'isOverwrite', 'isUpgrade', 'setOverwrite', 'setUpgrade'));
		$mockInstaller->expects($this->once())
			->method('getPath')
			->with('extension_root')
			->willReturn(JPATH_MANIFESTS . '/files/joomla.xml');

		$mockInstaller->expects($this->once())
			->method('isOverwrite')
			->willReturn(true);

		$mockInstaller->expects($this->any())
			->method('isUpgrade')
			->willReturn(true);

		$mockInstaller->expects($this->once())
			->method('setOverwrite')
			->willReturnCallback(array($this, 'installerOverwrite'));

		$mockInstaller->expects($this->once())
			->method('setUpgrade')
			->willReturnCallback(array($this, 'installerUpgrade'));

		$mockDatabase = $this->getMockDatabase();
		$object = $this->getMockForAbstractClass('JInstallerAdapter', array($mockInstaller, $mockDatabase));
		$manifestObject = simplexml_load_string($this->sampleManifest);

		TestReflection::setValue($object, 'manifest', $manifestObject);

		// Invoke the method
		TestReflection::invoke($object, 'checkExtensionInFilesystem');

		$this->assertAttributeEquals(
			'install',
			'route',
			$object,
			'JInstallerAdapter::checkExtensionInFilesystem() should not update the route unless an extension ID has been set'
		);

		$this->assertTrue(
			self::$installerOverwrite,
			'JInstallerAdapter::checkExtensionInFilesystem() should call JInstaller::setOverwrite with the parameter true'
		);

		$this->assertTrue(
			self::$installerUpgrade,
			'JInstallerAdapter::checkExtensionInFilesystem() should call JInstaller::setUpgrade with the parameter true'
		);
	}

	/**
	 * @testdox JInstallerAdapter::checkExtensionInFilesystem sets the route to update when upgrade is set to true, a file exists and an extension ID is set
	 *
	 * @covers  JInstallerAdapter::checkExtensionInFilesystem
	 */
||||||||	public function testCheckExtensionInFilesystem()
	{
		$mockInstaller = $this->getMockBuilder('JInstaller')
						->setMethods(array('getPath', 'isOverwrite', 'isUpgrade', 'setOverwrite', 'setUpgrade'))
						->getMock();

		$mockInstaller->expects($this->once())
			->method('getPath')
			->with('extension_root')
			->willReturn(JPATH_MANIFESTS . '/files/joomla.xml');

		$mockInstaller->expects($this->once())
			->method('isOverwrite')
			->willReturn(true);

		$mockInstaller->expects($this->any())
			->method('isUpgrade')
			->willReturn(true);

		$mockInstaller->expects($this->once())
			->method('setOverwrite')
			->willReturnCallback(array($this, 'installerOverwrite'));

		$mockInstaller->expects($this->once())
			->method('setUpgrade')
			->willReturnCallback(array($this, 'installerUpgrade'));

		$mockDatabase = $this->getMockDatabase();
		$object = $this->getMockForAbstractClass('JInstallerAdapter', array($mockInstaller, $mockDatabase));
		$manifestObject = simplexml_load_string($this->sampleManifest);

		TestReflection::setValue($object, 'manifest', $manifestObject);

		// Invoke the method
		TestReflection::invoke($object, 'checkExtensionInFilesystem');

		$this->assertAttributeEquals(
			'install',
			'route',
			$object,
			'JInstallerAdapter::checkExtensionInFilesystem() should not update the route unless an extension ID has been set'
		);

		$this->assertTrue(
			self::$installerOverwrite,
			'JInstallerAdapter::checkExtensionInFilesystem() should call JInstaller::setOverwrite with the parameter true'
		);

		$this->assertTrue(
			self::$installerUpgrade,
			'JInstallerAdapter::checkExtensionInFilesystem() should call JInstaller::setUpgrade with the parameter true'
		);
	}

	/**
	 * @testdox JInstallerAdapter::checkExtensionInFilesystem sets the route to update when upgrade is set to true, a file exists and an extension ID is set
	 *
	 * @covers  JInstallerAdapter::checkExtensionInFilesystem
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (SCALAR)))
            (
                (SCALAR)))
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)))
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))))
                (
                    (SCALAR)))
            (
                (SCALAR)))
        (
            (AST_BINARY_OP
                (AST_CONST)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_STATIC_PROP)
            (SCALAR))))