    public function getNext()
    {
        if ($this->idx < $this->count) {
            return $this->tokens[$this->idx++];
        }
        return null;
    }

    /**
     * Gets the next token.
     *
     * @param int $type The type.
     *
     * @return Token
     */
||||||||    public function getNext()
    {
        for (; $this->idx < $this->count; ++$this->idx) {
            if (($this->tokens[$this->idx]->type !== Token::TYPE_WHITESPACE)
                && ($this->tokens[$this->idx]->type !== Token::TYPE_COMMENT)) {
                return $this->tokens[$this->idx++];
            }
        }
        return null;
    }

    /**
     * Gets the next token.
     *
     * @param int $type The type.
     *
     * @return Token
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_POST_INC
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_FOR
        (NULL)
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR))))
        (AST_EXPR_LIST
            (AST_PRE_INC
                (AST_PROP
                    (AST_VAR))))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_DIM
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_PROP
                                        (AST_VAR))))
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (
                        (AST_RETURN
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (AST_POST_INC
                                    (AST_PROP
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CONST)))