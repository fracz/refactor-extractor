	function edit( &$row, &$images, &$lists, &$params, $option, &$menus ) {
		global $database;

		mosMakeHtmlSafe( $row );

		$nullDate 		= $database->getNullDate();
		$create_date 	= null;
		if ( $row->created != $nullDate ) {
			$create_date 	= mosFormatDate( $row->created, '%A, %d %B %Y %H:%M', '0' );
		}
		$mod_date = null;
		if ( $row->modified != $nullDate ) {
			$mod_date 		= mosFormatDate( $row->modified, '%A, %d %B %Y %H:%M', '0' );
		}

		$tabs = new mosTabs(0);

		// used to hide "Reset Hits" when hits = 0
		if ( !$row->hits ) {
			$visibility = "style='display: none; visbility: hidden;'";
		} else {
			$visibility = "";
		}

		mosCommonHTML::loadOverlib();
		mosCommonHTML::loadCalendar();
		?>
		<script language="javascript" type="text/javascript">
		var folderimages = new Array;
		<?php
		$i = 0;
		foreach ($images as $k=>$items) {
			foreach ($items as $v) {
				echo "\n	folderimages[".$i++."] = new Array( '$k','".addslashes( $v->value )."','".addslashes( $v->text )."' );";
			}
		}
		?>
		function submitbutton(pressbutton) {
			var form = document.adminForm;
			if (pressbutton == 'cancel') {
				submitform( pressbutton );
				return;
			}

			if ( pressbutton == 'resethits' ) {
				if (confirm('<?php echo JText::_( 'WARNWANTRESETHITSTOZERO', true ); ?>')){
					submitform( pressbutton );
					return;
				} else {
					return;
				}
			}

			if ( pressbutton == 'menulink' ) {
				if ( form.menuselect.value == "" ) {
					alert( "<?php echo JText::_( 'Please select a Menu', true ); ?>" );
					return;
				} else if ( form.link_name.value == "" ) {
					alert( "<?php echo JText::_( 'Please enter a Name for this menu item', true ); ?>" );
					return;
				}
			}

			var temp = new Array;
			for (var i=0, n=form.imagelist.options.length; i < n; i++) {
				temp[i] = form.imagelist.options[i].value;
			}
			form.images.value = temp.join( '\n' );

			try {
				document.adminForm.onsubmit();
			}
			catch(e){}
			if (trim(form.title.value) == ""){
				alert( "<?php echo JText::_( 'Content item must have a title', true ); ?>" );
			} else if (trim(form.name.value) == ""){
				alert( "<?php echo JText::_( 'Content item must have a name', true ); ?>" );
			} else {
				if ( form.reset_hits.checked ) {
					form.hits.value = 0;
				} else {
				}
				<?php
				$editor =& JEditor::getInstance();
				echo $editor->getEditorContents( 'editor1', 'introtext' ) ; ?>
				submitform( pressbutton );
			}
		}
		</script>

		<form action="index2.php" method="post" name="adminForm">

		<div id="editcell">
			<table cellspacing="0" cellpadding="0" border="0" width="100%">
			<tr>
				<td width="60%" valign="top">
					<table class="adminform">
					<tr>
						<td>
							<?php
							// parameters : areaname, content, hidden field, width, height, rows, cols
							$editor =& JEditor::getInstance();
							echo $editor->getEditor( 'editor1',  $row->introtext, 'introtext', '100%;', '500', '75', '50' );
							?>
						</td>
					</tr>
					</table>
				</td>
				<td width="40%" valign="top">
					<?php
	    	   		$title = JText::_( 'Details' );
					$tabs->startPane("content-pane");
					$tabs->startTab( $title, "detail-page" );
					?>

						<table class="adminform">
						<tr>
							<td width="130">
								<label for="title">
									<?php echo JText::_( 'Title' ); ?>:
								</label>
							</td>
							<td valign="top" align="right">
								<input class="inputbox" type="text" name="title" id="title" size="40" maxlength="255" value="<?php echo $row->title; ?>" />
							</td>
						</tr>
						<tr>
							<td>
								<label for="title_alias">
									<?php echo JText::_( 'Title Alias' ); ?>:
								</label>
							</td>
							<td valign="top" align="right">
								<input class="inputbox" type="text" name="title_alias" id="title_alias" size="40" maxlength="255" value="<?php echo $row->title_alias; ?>" />
							</td>
						</tr>
						</table>

						<br />

						<table class="adminform">
						<tr>
							<td valign="top" align="right" width="130">
								<?php echo JText::_( 'Published' ); ?>:
							</td>
							<td>
								<?php echo $lists['state']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<?php echo JText::_( 'Frontpage' ); ?>:
							</td>
							<td>
								<?php echo $lists['frontpage']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<label for="access">
									<?php echo JText::_( 'Access Level' ); ?>:
								</label>
							</td>
							<td>
								<?php echo $lists['access']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<label for="created_by_alias">
									<?php echo JText::_( 'Author Alias' ); ?>:
								</label>
							</td>
							<td>
								<input type="text" name="created_by_alias" id="created_by_alias" size="30" maxlength="100" value="<?php echo $row->created_by_alias; ?>" class="inputbox" />
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<label for="created_by">
									<?php echo JText::_( 'Change Creator' ); ?>:
								</label>
							</td>
							<td>
								<?php echo $lists['created_by']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<label for="created">
									<?php echo JText::_( 'Override Created Date' ); ?>
								</label>
							</td>
							<td>
								<input class="inputbox" type="text" name="created" id="created" size="25" maxlength="19" value="<?php echo $row->created; ?>" />
								<input name="reset" type="reset" class="button" onclick="return showCalendar('created', 'y-mm-dd');" value="..." />
							</td>
						</tr>
						<tr>
							<td align="right">
								<label for="publish_up">
									<?php echo JText::_( 'Start Publishing' ); ?>:
								</label>
							</td>
							<td>
								<input class="inputbox" type="text" name="publish_up" id="publish_up" size="25" maxlength="19" value="<?php echo $row->publish_up; ?>" />
								<input type="reset" class="button" value="..." onclick="return showCalendar('publish_up', 'y-mm-dd');" />
							</td>
						</tr>
						<tr>
							<td align="right">
								<label for="publish_down">
									<?php echo JText::_( 'Finish Publishing' ); ?>:
								</label>
							</td>
							<td>
								<input class="inputbox" type="text" name="publish_down" id="publish_down" size="25" maxlength="19" value="<?php echo $row->publish_down; ?>" />
								<input type="reset" class="button" value="..." onclick="return showCalendar('publish_down', 'y-mm-dd');" />
							</td>
						</tr>
						</table>

						<br />

						<table class="adminform" width="100%">
						<?php
						if ( $row->id ) {
							?>
							<tr>
								<td>
									<strong><?php echo JText::_( 'Content ID' ); ?>:</strong>
								</td>
								<td>
									<?php echo $row->id; ?>
								</td>
							</tr>
							<?php
						}
						?>
						<tr>
							<td valign="top" align="right" width="130">
								<strong><?php echo JText::_( 'Hits' ); ?></strong>
							</td>
							<td>
								<?php echo $row->hits;?>
								<div <?php echo $visibility; ?>>
									<input name="reset_hits" type="button" class="button" value="<?php echo JText::_( 'Reset Hit Count' ); ?>" onclick="submitbutton('resethits');" />
								</div>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<strong><?php echo JText::_( 'Version' ); ?></strong>
							</td>
							<td>
								<?php echo "$row->version";?> <?php echo JText::_( 'times' ); ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<strong><?php echo JText::_( 'Created' ); ?></strong>
							</td>
							<td>
								<?php
								if ( !$create_date ) {
									echo JText::_( 'New document' );
								} else {
									echo $create_date;
								}
								?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<strong><?php echo JText::_( 'Last Modified' ); ?></strong>
							</td>
							<td>
								<?php
								if ( !$mod_date ) {
									echo JText::_( 'Not modified' );
								} else {
									echo $mod_date;
									?>
									<br />
									<?php
									echo $row->modifier;
								}
								?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<strong><?php echo JText::_( 'Expires' ); ?></strong>
							</td>
							<td>
								<?php echo "$row->publish_down";?>
							</td>
						</tr>
						</table>

					<?php
	       	   		$title = JText::_( 'Images' );
					$tabs->endTab();
					$tabs->startTab( $title, "images-page" );
					?>

						<table class="adminform">
						<tr>
							<td colspan="2">
								<table width="100%">
								<tr>
									<td width="48%">
										<div align="center">
											<label for="imagefiles">
												<?php echo JText::_( 'Gallery Images' ); ?>:
											</label>
											<br />
											<?php echo $lists['imagefiles'];?>
											<br />
											<label for="folders">
												<?php echo JText::_( 'Sub-folder' ); ?>:
											</label>
											<?php echo $lists['folders'];?>
										</div>
									</td>
									<td width="2%">
										<input class="button" type="button" value=">>" onclick="addSelectedToList('adminForm','imagefiles','imagelist')" title="<?php echo JText::_( 'Add' ); ?>" />
										<br />
										<input class="button" type="button" value="<<" onclick="delSelectedFromList('adminForm','imagelist')" title="<?php echo JText::_( 'Remove' ); ?>" />
									</td>
									<td width="48%">
										<div align="center">
											<label for="imagelist">
												<?php echo JText::_( 'Content Images' ); ?>:
											</label>
											<br />
											<?php echo $lists['imagelist'];?>
											<br />
											<input class="button" type="button" value="<?php echo JText::_( 'Up' ); ?>" onclick="moveInList('adminForm','imagelist',adminForm.imagelist.selectedIndex,-1)" />
											<input class="button" type="button" value="<?php echo JText::_( 'Down' ); ?>" onclick="moveInList('adminForm','imagelist',adminForm.imagelist.selectedIndex,+1)" />
										</div>
									</td>
								</tr>
								</table>
							</td>
						</tr>
						<tr valign="top">
							<td>
								<div align="center" style="border: 1px solid #d5d5d5;">
									<?php echo JText::_( 'Sample Image' ); ?>:
									<br />
									<img name="view_imagefiles" src="../images/M_images/blank.png" width="100" />
								</div>
							</td>
							<td valign="top">
								<div align="center" style="border: 1px solid #d5d5d5;">
									<?php echo JText::_( 'Active Image' ); ?>:
									<br />
									<img name="view_imagelist" src="../images/M_images/blank.png" width="100" />
								</div>
							</td>
						</tr>
						</table>

						<br />

						<table class="adminform">
						<tr>
							<td>
							<?php echo JText::_( 'Edit the image selected' ); ?>:
								<table>
								<tr>
									<td align="right">
										<label for="Isource">
											<?php echo JText::_( 'Source' ); ?>
										</label>
									</td>
									<td>
										<input type="text" name= "_source" id= "Isource" value="" />
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Ialign">
											<?php echo JText::_( 'Align' ); ?>
										</label>
									</td>
									<td>
										<?php echo $lists['_align']; ?>
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Ialt">
											<?php echo JText::_( 'Alt Text' ); ?>
										</label>
									</td>
									<td>
										<input type="text" name="_alt" id="Ialt" value="" />
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Iborder">
											<?php echo JText::_( 'Border' ); ?>
										</label>
									</td>
									<td>
										<input type="text" name="_border" id="Iborder" value="" size="3" maxlength="1" />
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Icaption">
											<?php echo JText::_( 'Caption' ); ?>:
										</label>
									</td>
									<td>
										<input class="text_area" type="text" name="_caption" id="Icaption" value="" size="30" />
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Icaption_position">
											<?php echo JText::_( 'Caption Position' ); ?>:
										</label>
									</td>
									<td>
										<?php echo $lists['_caption_position']; ?>
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Icaption_align">
											<?php echo JText::_( 'Caption Align' ); ?>:
										</label>
									</td>
									<td>
										<?php echo $lists['_caption_align']; ?>
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Iwidth">
											<?php echo JText::_( 'Width' ); ?>:
										</label>
									</td>
									<td>
										<input class="text_area" type="text" name="_width" id="Iwidth" value="" size="5" maxlength="5" />
									</td>
								</tr>
								<tr>
									<td colspan="2">
										<input class="button" type="button" value="<?php echo JText::_( 'Apply' ); ?>" onclick="applyImageProps()" />
									</td>
								</tr>
								</table>
							</td>
						</tr>
						</table>

					<?php
	       	   		$title = JText::_( 'Parameters' );
					$tabs->endTab();
					$tabs->startTab( $title, "params-page" );
					?>

						<table class="adminform">
						<tr>
							<td>
								<?php echo $params->render();?>
							</td>
						</tr>
						</table>

					<?php
	       	   		$title = JText::_( 'Meta Info' );
					$tabs->endTab();
					$tabs->startTab( $title, "metadata-page" );
					?>

						<table class="adminform">
						<tr>
							<td >
								<label for="metadesc">
									<?php echo JText::_( 'Description' ); ?>:
								</label>
								<br />
								<textarea class="inputbox" cols="40" rows="5" name="metadesc" id="metadesc" style="width:300"><?php echo str_replace('&','&amp;',$row->metadesc); ?></textarea>
							</td>
						</tr>
						<tr>
							<td >
								<label for="metakey">
									<?php echo JText::_( 'Keywords' ); ?>:
								</label>
								<br />
								<textarea class="inputbox" cols="40" rows="5" name="metakey" id="metakey" style="width:300"><?php echo str_replace('&','&amp;',$row->metakey); ?></textarea>
							</td>
						</tr>
						</table>

					<?php
	       	   		$title = JText::_( 'Link to Menu' );
					$tabs->endTab();
					$tabs->startTab( $title, "link-page" );
					?>

						<table class="adminform">
						<tr>
							<td colspan="2">
								<?php echo JText::_( 'DESCLINKSTATIC' ); ?>
								<br /><br />
							</td>
						</tr>
						<tr>
							<td valign="top" width="90">
								<label for="menuselect">
									<?php echo JText::_( 'Select a Menu' ); ?>
								</label>
							</td>
							<td>
								<?php echo $lists['menuselect']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" width="90">
								<label for="link_name">
									<?php echo JText::_( 'Menu Item Name' ); ?>
								</label>
							</td>
							<td>
								<input type="text" name="link_name" id="link_name" class="inputbox" value="" size="30" />
							</td>
						</tr>
						<tr>
							<td>
							</td>
							<td>
								<input name="menu_link" type="button" class="button" value="<?php echo JText::_( 'Link to Menu' ); ?>" onclick="submitbutton('menulink');" />
							</td>
						</tr>
						</table>

						<?php
						if ( $menus != NULL ) {
							?>
							<br />

							<table class="adminform">
							<?php mosCommonHTML::menuLinksContent( $menus ); ?>
							</table>
							<?php
						}
						?>

					<?php
					$tabs->endTab();
					$tabs->endPane();
					?>
				</td>
			</tr>
			</table>
		</div>

		<input type="hidden" name="images" value="" />
		<input type="hidden" name="option" value="<?php echo $option; ?>" />
		<input type="hidden" name="id" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="cid[]" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="hits" value="<?php echo $row->hits; ?>" />
		<input type="hidden" name="task" value="" />
		</form>
		<?php
	}

	/**
	* Form to select Section/Category to move item(s) to
	* @param array An array of selected objects
	* @param int The current section we are looking at
	* @param array The list of sections and categories to move to
	*/
||||||||	function edit( &$row, &$images, &$lists, &$params, $option, &$menus )
	{
		global $database;

		jimport( 'joomla.presentation.editor' );
		$editor =& JEditor::getInstance();

		mosMakeHtmlSafe( $row );

		$nullDate 		= $database->getNullDate();
		$create_date 	= null;
		if ( $row->created != $nullDate ) {
			$create_date 	= mosFormatDate( $row->created, '%A, %d %B %Y %H:%M', '0' );
		}
		$mod_date = null;
		if ( $row->modified != $nullDate ) {
			$mod_date 		= mosFormatDate( $row->modified, '%A, %d %B %Y %H:%M', '0' );
		}

		$tabs = new mosTabs(0);

		// used to hide "Reset Hits" when hits = 0
		if ( !$row->hits ) {
			$visibility = "style='display: none; visbility: hidden;'";
		} else {
			$visibility = "";
		}

		mosCommonHTML::loadOverlib();
		mosCommonHTML::loadCalendar();
		?>
		<script language="javascript" type="text/javascript">
		var folderimages = new Array;
		<?php
		$i = 0;
		foreach ($images as $k=>$items) {
			foreach ($items as $v) {
				echo "\n	folderimages[".$i++."] = new Array( '$k','".addslashes( $v->value )."','".addslashes( $v->text )."' );";
			}
		}
		?>
		function submitbutton(pressbutton) {
			var form = document.adminForm;
			if (pressbutton == 'cancel') {
				submitform( pressbutton );
				return;
			}

			if ( pressbutton == 'resethits' ) {
				if (confirm('<?php echo JText::_( 'WARNWANTRESETHITSTOZERO', true ); ?>')){
					submitform( pressbutton );
					return;
				} else {
					return;
				}
			}

			if ( pressbutton == 'menulink' ) {
				if ( form.menuselect.value == "" ) {
					alert( "<?php echo JText::_( 'Please select a Menu', true ); ?>" );
					return;
				} else if ( form.link_name.value == "" ) {
					alert( "<?php echo JText::_( 'Please enter a Name for this menu item', true ); ?>" );
					return;
				}
			}

			var temp = new Array;
			for (var i=0, n=form.imagelist.options.length; i < n; i++) {
				temp[i] = form.imagelist.options[i].value;
			}
			form.images.value = temp.join( '\n' );

			try {
				document.adminForm.onsubmit();
			}
			catch(e){}
			if (trim(form.title.value) == ""){
				alert( "<?php echo JText::_( 'Content item must have a title', true ); ?>" );
			} else if (trim(form.name.value) == ""){
				alert( "<?php echo JText::_( 'Content item must have a name', true ); ?>" );
			} else {
				if ( form.reset_hits.checked ) {
					form.hits.value = 0;
				} else {
				}
				<?php
				echo $editor->getEditorContents( 'editor1', 'introtext' ) ; ?>
				submitform( pressbutton );
			}
		}
		</script>

		<form action="index2.php" method="post" name="adminForm">

		<div id="editcell">
			<table cellspacing="0" cellpadding="0" border="0" width="100%">
			<tr>
				<td width="60%" valign="top">
					<table class="adminform">
					<tr>
						<td>
							<?php
							// parameters : areaname, content, hidden field, width, height, rows, cols
							echo $editor->getEditor( 'editor1',  $row->introtext, 'introtext', '100%;', '500', '75', '50' );
							?>
						</td>
					</tr>
					</table>
				</td>
				<td width="40%" valign="top">
					<?php
	    	   		$title = JText::_( 'Details' );
					$tabs->startPane("content-pane");
					$tabs->startTab( $title, "detail-page" );
					?>

						<table class="adminform">
						<tr>
							<td width="130">
								<label for="title">
									<?php echo JText::_( 'Title' ); ?>:
								</label>
							</td>
							<td valign="top" align="right">
								<input class="inputbox" type="text" name="title" id="title" size="40" maxlength="255" value="<?php echo $row->title; ?>" />
							</td>
						</tr>
						<tr>
							<td>
								<label for="title_alias">
									<?php echo JText::_( 'Title Alias' ); ?>:
								</label>
							</td>
							<td valign="top" align="right">
								<input class="inputbox" type="text" name="title_alias" id="title_alias" size="40" maxlength="255" value="<?php echo $row->title_alias; ?>" />
							</td>
						</tr>
						</table>

						<br />

						<table class="adminform">
						<tr>
							<td valign="top" align="right" width="130">
								<?php echo JText::_( 'Published' ); ?>:
							</td>
							<td>
								<?php echo $lists['state']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<?php echo JText::_( 'Frontpage' ); ?>:
							</td>
							<td>
								<?php echo $lists['frontpage']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<label for="access">
									<?php echo JText::_( 'Access Level' ); ?>:
								</label>
							</td>
							<td>
								<?php echo $lists['access']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<label for="created_by_alias">
									<?php echo JText::_( 'Author Alias' ); ?>:
								</label>
							</td>
							<td>
								<input type="text" name="created_by_alias" id="created_by_alias" size="30" maxlength="100" value="<?php echo $row->created_by_alias; ?>" class="inputbox" />
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<label for="created_by">
									<?php echo JText::_( 'Change Creator' ); ?>:
								</label>
							</td>
							<td>
								<?php echo $lists['created_by']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<label for="created">
									<?php echo JText::_( 'Override Created Date' ); ?>
								</label>
							</td>
							<td>
								<input class="inputbox" type="text" name="created" id="created" size="25" maxlength="19" value="<?php echo $row->created; ?>" />
								<input name="reset" type="reset" class="button" onclick="return showCalendar('created', 'y-mm-dd');" value="..." />
							</td>
						</tr>
						<tr>
							<td align="right">
								<label for="publish_up">
									<?php echo JText::_( 'Start Publishing' ); ?>:
								</label>
							</td>
							<td>
								<input class="inputbox" type="text" name="publish_up" id="publish_up" size="25" maxlength="19" value="<?php echo $row->publish_up; ?>" />
								<input type="reset" class="button" value="..." onclick="return showCalendar('publish_up', 'y-mm-dd');" />
							</td>
						</tr>
						<tr>
							<td align="right">
								<label for="publish_down">
									<?php echo JText::_( 'Finish Publishing' ); ?>:
								</label>
							</td>
							<td>
								<input class="inputbox" type="text" name="publish_down" id="publish_down" size="25" maxlength="19" value="<?php echo $row->publish_down; ?>" />
								<input type="reset" class="button" value="..." onclick="return showCalendar('publish_down', 'y-mm-dd');" />
							</td>
						</tr>
						</table>

						<br />

						<table class="adminform" width="100%">
						<?php
						if ( $row->id ) {
							?>
							<tr>
								<td>
									<strong><?php echo JText::_( 'Content ID' ); ?>:</strong>
								</td>
								<td>
									<?php echo $row->id; ?>
								</td>
							</tr>
							<?php
						}
						?>
						<tr>
							<td valign="top" align="right" width="130">
								<strong><?php echo JText::_( 'Hits' ); ?></strong>
							</td>
							<td>
								<?php echo $row->hits;?>
								<div <?php echo $visibility; ?>>
									<input name="reset_hits" type="button" class="button" value="<?php echo JText::_( 'Reset Hit Count' ); ?>" onclick="submitbutton('resethits');" />
								</div>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<strong><?php echo JText::_( 'Version' ); ?></strong>
							</td>
							<td>
								<?php echo "$row->version";?> <?php echo JText::_( 'times' ); ?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<strong><?php echo JText::_( 'Created' ); ?></strong>
							</td>
							<td>
								<?php
								if ( !$create_date ) {
									echo JText::_( 'New document' );
								} else {
									echo $create_date;
								}
								?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<strong><?php echo JText::_( 'Last Modified' ); ?></strong>
							</td>
							<td>
								<?php
								if ( !$mod_date ) {
									echo JText::_( 'Not modified' );
								} else {
									echo $mod_date;
									?>
									<br />
									<?php
									echo $row->modifier;
								}
								?>
							</td>
						</tr>
						<tr>
							<td valign="top" align="right">
								<strong><?php echo JText::_( 'Expires' ); ?></strong>
							</td>
							<td>
								<?php echo "$row->publish_down";?>
							</td>
						</tr>
						</table>

					<?php
	       	   		$title = JText::_( 'Images' );
					$tabs->endTab();
					$tabs->startTab( $title, "images-page" );
					?>

						<table class="adminform">
						<tr>
							<td colspan="2">
								<table width="100%">
								<tr>
									<td width="48%">
										<div align="center">
											<label for="imagefiles">
												<?php echo JText::_( 'Gallery Images' ); ?>:
											</label>
											<br />
											<?php echo $lists['imagefiles'];?>
											<br />
											<label for="folders">
												<?php echo JText::_( 'Sub-folder' ); ?>:
											</label>
											<?php echo $lists['folders'];?>
										</div>
									</td>
									<td width="2%">
										<input class="button" type="button" value=">>" onclick="addSelectedToList('adminForm','imagefiles','imagelist')" title="<?php echo JText::_( 'Add' ); ?>" />
										<br />
										<input class="button" type="button" value="<<" onclick="delSelectedFromList('adminForm','imagelist')" title="<?php echo JText::_( 'Remove' ); ?>" />
									</td>
									<td width="48%">
										<div align="center">
											<label for="imagelist">
												<?php echo JText::_( 'Content Images' ); ?>:
											</label>
											<br />
											<?php echo $lists['imagelist'];?>
											<br />
											<input class="button" type="button" value="<?php echo JText::_( 'Up' ); ?>" onclick="moveInList('adminForm','imagelist',adminForm.imagelist.selectedIndex,-1)" />
											<input class="button" type="button" value="<?php echo JText::_( 'Down' ); ?>" onclick="moveInList('adminForm','imagelist',adminForm.imagelist.selectedIndex,+1)" />
										</div>
									</td>
								</tr>
								</table>
							</td>
						</tr>
						<tr valign="top">
							<td>
								<div align="center" style="border: 1px solid #d5d5d5;">
									<?php echo JText::_( 'Sample Image' ); ?>:
									<br />
									<img name="view_imagefiles" src="../images/M_images/blank.png" width="100" />
								</div>
							</td>
							<td valign="top">
								<div align="center" style="border: 1px solid #d5d5d5;">
									<?php echo JText::_( 'Active Image' ); ?>:
									<br />
									<img name="view_imagelist" src="../images/M_images/blank.png" width="100" />
								</div>
							</td>
						</tr>
						</table>

						<br />

						<table class="adminform">
						<tr>
							<td>
							<?php echo JText::_( 'Edit the image selected' ); ?>:
								<table>
								<tr>
									<td align="right">
										<label for="Isource">
											<?php echo JText::_( 'Source' ); ?>
										</label>
									</td>
									<td>
										<input type="text" name= "_source" id= "Isource" value="" />
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Ialign">
											<?php echo JText::_( 'Align' ); ?>
										</label>
									</td>
									<td>
										<?php echo $lists['_align']; ?>
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Ialt">
											<?php echo JText::_( 'Alt Text' ); ?>
										</label>
									</td>
									<td>
										<input type="text" name="_alt" id="Ialt" value="" />
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Iborder">
											<?php echo JText::_( 'Border' ); ?>
										</label>
									</td>
									<td>
										<input type="text" name="_border" id="Iborder" value="" size="3" maxlength="1" />
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Icaption">
											<?php echo JText::_( 'Caption' ); ?>:
										</label>
									</td>
									<td>
										<input class="text_area" type="text" name="_caption" id="Icaption" value="" size="30" />
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Icaption_position">
											<?php echo JText::_( 'Caption Position' ); ?>:
										</label>
									</td>
									<td>
										<?php echo $lists['_caption_position']; ?>
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Icaption_align">
											<?php echo JText::_( 'Caption Align' ); ?>:
										</label>
									</td>
									<td>
										<?php echo $lists['_caption_align']; ?>
									</td>
								</tr>
								<tr>
									<td align="right">
										<label for="Iwidth">
											<?php echo JText::_( 'Width' ); ?>:
										</label>
									</td>
									<td>
										<input class="text_area" type="text" name="_width" id="Iwidth" value="" size="5" maxlength="5" />
									</td>
								</tr>
								<tr>
									<td colspan="2">
										<input class="button" type="button" value="<?php echo JText::_( 'Apply' ); ?>" onclick="applyImageProps()" />
									</td>
								</tr>
								</table>
							</td>
						</tr>
						</table>

					<?php
	       	   		$title = JText::_( 'Parameters' );
					$tabs->endTab();
					$tabs->startTab( $title, "params-page" );
					?>

						<table class="adminform">
						<tr>
							<td>
								<?php echo $params->render();?>
							</td>
						</tr>
						</table>

					<?php
	       	   		$title = JText::_( 'Meta Info' );
					$tabs->endTab();
					$tabs->startTab( $title, "metadata-page" );
					?>

						<table class="adminform">
						<tr>
							<td >
								<label for="metadesc">
									<?php echo JText::_( 'Description' ); ?>:
								</label>
								<br />
								<textarea class="inputbox" cols="40" rows="5" name="metadesc" id="metadesc" style="width:300"><?php echo str_replace('&','&amp;',$row->metadesc); ?></textarea>
							</td>
						</tr>
						<tr>
							<td >
								<label for="metakey">
									<?php echo JText::_( 'Keywords' ); ?>:
								</label>
								<br />
								<textarea class="inputbox" cols="40" rows="5" name="metakey" id="metakey" style="width:300"><?php echo str_replace('&','&amp;',$row->metakey); ?></textarea>
							</td>
						</tr>
						</table>

					<?php
	       	   		$title = JText::_( 'Link to Menu' );
					$tabs->endTab();
					$tabs->startTab( $title, "link-page" );
					?>

						<table class="adminform">
						<tr>
							<td colspan="2">
								<?php echo JText::_( 'DESCLINKSTATIC' ); ?>
								<br /><br />
							</td>
						</tr>
						<tr>
							<td valign="top" width="90">
								<label for="menuselect">
									<?php echo JText::_( 'Select a Menu' ); ?>
								</label>
							</td>
							<td>
								<?php echo $lists['menuselect']; ?>
							</td>
						</tr>
						<tr>
							<td valign="top" width="90">
								<label for="link_name">
									<?php echo JText::_( 'Menu Item Name' ); ?>
								</label>
							</td>
							<td>
								<input type="text" name="link_name" id="link_name" class="inputbox" value="" size="30" />
							</td>
						</tr>
						<tr>
							<td>
							</td>
							<td>
								<input name="menu_link" type="button" class="button" value="<?php echo JText::_( 'Link to Menu' ); ?>" onclick="submitbutton('menulink');" />
							</td>
						</tr>
						</table>

						<?php
						if ( $menus != NULL ) {
							?>
							<br />

							<table class="adminform">
							<?php mosCommonHTML::menuLinksContent( $menus ); ?>
							</table>
							<?php
						}
						?>

					<?php
					$tabs->endTab();
					$tabs->endPane();
					?>
				</td>
			</tr>
			</table>
		</div>

		<input type="hidden" name="images" value="" />
		<input type="hidden" name="option" value="<?php echo $option; ?>" />
		<input type="hidden" name="id" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="cid[]" value="<?php echo $row->id; ?>" />
		<input type="hidden" name="hits" value="<?php echo $row->hits; ?>" />
		<input type="hidden" name="task" value="" />
		</form>
		<?php
	}

	/**
	* Form to select Section/Category to move item(s) to
	* @param array An array of selected objects
	* @param int The current section we are looking at
	* @param array The list of sections and categories to move to
	*/
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_POST_INC
                                                    (AST_VAR)))
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))
                            (SCALAR)))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_PROP
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_ENCAPS_LIST
            (AST_PROP
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (AST_VAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_ENCAPS_LIST
            (AST_PROP
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_CALL
        (
            (SCALAR)))
    (AST_ASSIGN_REF
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_VAR))
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL)
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_ECHO
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (SCALAR)
                                                (AST_POST_INC
                                                    (AST_VAR)))
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_VAR)
                                                (SCALAR)))
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR)))))
                            (SCALAR)))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_PROP
                    (AST_VAR))
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR)
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_PROP
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_ENCAPS_LIST
            (AST_PROP
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_ECHO
                    (AST_STATIC_CALL
                        (
                            (SCALAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ECHO
                    (AST_VAR))
                (AST_ECHO
                    (SCALAR))
                (AST_ECHO
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_ENCAPS_LIST
            (AST_PROP
                (AST_VAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ECHO
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ECHO
                    (SCALAR))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))
                (AST_ECHO
                    (SCALAR)))))
    (AST_ECHO
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_VAR))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR))
    (AST_ECHO
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (SCALAR)))