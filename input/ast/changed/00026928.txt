    public function parse(ProjectDescriptorBuilder $builder, Collection $files)
    {
        if ($this->stopwatch) {
            $this->stopwatch->start('parser.parse');
        }

        $paths = $this->getFilenames($files);

        $this->log('  Project root is:  ' . $files->getProjectRoot());
        $this->log('  Ignore paths are: ' . implode(', ', $files->getIgnorePatterns()->getArrayCopy()));

        if ($builder->getProjectDescriptor()->getSettings()->isModified()) {
            $this->setForced(true);
            $this->log('One of the project\'s settings have changed, forcing a complete rebuild');
        }

        $memory = 0;
        foreach ($paths as $filename) {
            $this->parseFileIntoDescriptor($builder, $filename);

            $lap       = $this->stopwatch->lap('parser.parse');
            $oldMemory = $memory;
            $periods   = $lap->getPeriods();
            $memory    = end($periods)->getMemory();

            $this->log(
                '>> Memory after processing of file: ' . number_format($memory / 1024 / 1024, 2)
                . ' megabytes (' . (($memory - $oldMemory >= 0)
                    ? '+'
                    : '-') . number_format(($memory - $oldMemory) / 1024)
                . ' kilobytes)',
                LogLevel::DEBUG
            );
        }

        if ($this->stopwatch) {
            $event = $this->stopwatch->stop('parser.parse');

            $this->log('Elapsed time to parse all files: ' . round($event->getDuration(), 2) . 's');
            $this->log('Peak memory usage: '. round($event->getMemory() / 1024 / 1024, 2) . 'M');
        }

        return $builder->getProjectDescriptor();
    }

    /**
     * Extract all filenames from the given collection and output the amount of files.
     *
     * @param Collection $files
     *
     * @throws FilesNotFoundException if no files were found.
     *
     * @return string[]
     */
||||||||    public function parse(ProjectDescriptorBuilder $builder, Collection $files)
    {
        $this->startTimingTheParsePhase();

        $this->forceRebuildIfSettingsHaveModified($builder);

        $paths = $this->getFilenames($files);

        $this->log('  Project root is:  ' . $files->getProjectRoot());
        $this->log('  Ignore paths are: ' . implode(', ', $files->getIgnorePatterns()->getArrayCopy()));

        $memory = 0;
        foreach ($paths as $filename) {
            $this->parseFileIntoDescriptor($builder, $filename);
            $memory = $this->logAfterParsingAFile($memory);
        }

        $this->logAfterParsingAllFiles();

        return $builder->getProjectDescriptor();
    }

    /**
     * Extract all filenames from the given collection and output the amount of files.
     *
     * @param Collection $files
     *
     * @throws FilesNotFoundException if no files were found.
     *
     * @return string[]
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (SCALAR))
                                                (SCALAR))))
                                    (SCALAR))
                                (AST_CONDITIONAL
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (SCALAR)
                                    (SCALAR)))
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR))
                                        (SCALAR)))))
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (SCALAR))))
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_CALL
                                    (
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (SCALAR))
                                            (SCALAR))
                                        (SCALAR))))
                            (SCALAR)))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))