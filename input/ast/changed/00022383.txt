	public static function mkdir($newFolder) {
		$newFolder = preg_replace('|/$|', '', $newFolder);
		$result = @mkdir($newFolder, octdec($GLOBALS['TYPO3_CONF_VARS']['BE']['folderCreateMask']));
		if ($result) {
			self::fixPermissions($newFolder);
		}
		return $result;
	}

	/**
	 * Creates a directory - including parent directories if necessary - in the file system
	 *
	 * @param	string		Base folder. This must exist! Must have trailing slash! Example "/root/typo3site/"
	 * @param	string		Deep directory to create, eg. "xx/yy/" which creates "/root/typo3site/xx/yy/" if $destination is "/root/typo3site/"
	 * @return	string		If error, returns error string.
	 */
||||||||	public static function mkdir($newFolder) {
		$result = @mkdir($newFolder, octdec($GLOBALS['TYPO3_CONF_VARS']['BE']['folderCreateMask']));
		if ($result) {
			self::fixPermissions($newFolder);
		}
		return $result;
	}

	/**
	 * Creates a directory - including parent directories if necessary and
	 * sets permissions on newly created directories.
	 *
	 * @param string $directory Target directory to create. Must a have trailing slash
	 * 		if second parameter is given!
	 * 		Example: "/root/typo3site/typo3temp/foo/"
	 * @param string $deepDirectory Directory to create. This second parameter
	 * 		is kept for backwards compatibility since 4.6 where this method
	 * 		was split into a base directory and a deep directory to be created.
	 * 		Example: "xx/yy/" which creates "/root/typo3site/xx/yy/" if $directory is "/root/typo3site/"
	 * @return void
	 * @throws \InvalidArgumentException If $directory or $deepDirectory are not strings
	 * @throws \RuntimeException If directory could not be created
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_UNARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_DIM
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))