  protected function processGenericInformation(DocBlox_Token_Iterator $tokens)
  {
    $this->setName($tokens->gotoNextByType(T_STRING, 5, array('='))->getContent());
    $this->setValue($this->findDefault($tokens));

    parent::processGenericInformation($tokens);
  }

  /**
   * Stores the value contained in this constant.
   *
   * @param string $value
   *
   * @return void
   */
||||||||  protected function processGenericInformation(DocBlox_Token_Iterator $tokens)
  {
    if ($tokens->current()->getContent() == 'define')
    {
      // find the first encapsed string and strip the opening and closing apostrophe
      $this->setName(substr($tokens->gotoNextByType(T_CONSTANT_ENCAPSED_STRING, 5, array(','))->getContent(), 1, -1));
    }
    else
    {
      $this->setName($tokens->gotoNextByType(T_STRING, 5, array('='))->getContent());
    }

    $this->setValue($this->findDefault($tokens));
    parent::processGenericInformation($tokens);
  }

  /**
   * Stores the value contained in this constant.
   *
   * @param string $value
   *
   * @return void
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST)
                        (SCALAR)
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (SCALAR)
                                (NULL))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CALL
                            (
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CONST)
                                            (SCALAR)
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (NULL))))))
                                (SCALAR)
                                (AST_UNARY_OP
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)
                                    (SCALAR)
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (SCALAR)
                                            (NULL)))))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (AST_VAR))))