	static function displayPage($template, $pageVars)
	{
	  global $g_success, $g_message;

	  // common variables. These are sent to EVERY templates
	  Core::$smarty->template_dir = realpath(dirname(__FILE__) . "/../templates");
	  Core::$smarty->compile_dir  = realpath(dirname(__FILE__) . "/../cache");

	  // check the compile directory has the write permissions
	  if (!is_writable(Core::$smarty->compile_dir))
	  {
	    Utils::displaySeriousError("The <b>/cache</b> folder isn't writable. This folder is used by Smarty to generate temporary files for speedy page loads. You'll need to update that folder's permissions to allow read and write permissions (777 on unix/mac).");
	    exit;
	  }

	  // check that the user is running PHP 5 - TODO
	  Core::$smarty->assign("L", Core::$L);
	  //Core::$smarty->assign("SESSION", $_SESSION["gd"]);
	  Core::$smarty->assign("version", Core::$version);
	  Core::$smarty->assign("samePage", Utils::getCleanPhpSelf());
	  Core::$smarty->assign("dbTablePrefix", Core::$dbTablePrefix);
	  Core::$smarty->assign("query_string", $_SERVER["QUERY_STRING"]);
	  Core::$smarty->assign("g_success", $g_success);
	  Core::$smarty->assign("g_message", $g_message);

	  // now add the custom variables for this template, as defined in $page_vars
	  foreach ($pageVars as $key=>$value)
	    Core::$smarty->assign($key, $value);

	  Core::$smarty->display(realpath(dirname(__FILE__) . "/../$template"));

	  //gd_db_disconnect($g_link);
	}


	/**
	 * This is used for serious errors: when no database connection can be made or the Smarty cache folder isn't writable.
	 * All it does is output the error string with no other dependencies - not even language strings. The paths assume
	 * that we're in the application root (otherwise they won't work).
	 *
	 * This function only handles English. For problems of this severity, I think that's okay.
	 *
	 * @param string $error
	 */
||||||||	static function displayPage($template, $pageVars)
	{
	  global $g_success, $g_message;

	  // common variables. These are sent to EVERY templates
	  Core::$smarty->template_dir = realpath(dirname(__FILE__) . "/../templates");
	  Core::$smarty->compile_dir  = realpath(dirname(__FILE__) . "/../cache");

	  // check the compile directory has the write permissions
	  if (!is_writable(Core::$smarty->compile_dir))
	  {
	    Utils::displaySeriousError("The <b>/cache</b> folder isn't writable. This folder is used by Smarty to generate temporary files for speedy page loads. You'll need to update that folder's permissions to allow read and write permissions (777 on unix/mac).");
	    exit;
	  }

	  // check that the user is running PHP 5 - TODO
	  Core::$smarty->assign("L", Core::getCurrentLanguageStrings());
	  //Core::$smarty->assign("SESSION", $_SESSION["gd"]);
	  Core::$smarty->assign("version", Core::getVersion());
	  Core::$smarty->assign("samePage", Utils::getCleanPhpSelf());
	  Core::$smarty->assign("dbTablePrefix", Core::getDbTablePrefix());
	  Core::$smarty->assign("query_string", $_SERVER["QUERY_STRING"]);

	  //Core::$smarty->assign("g_success", $g_success);
	  //Core::$smarty->assign("g_message", $g_message);

	  // now add the custom variables for this template, as defined in $page_vars
	  foreach ($pageVars as $key=>$value)
	    Core::$smarty->assign($key, $value);

	  Core::$smarty->display(realpath(dirname(__FILE__) . "/../$template"));

	  //gd_db_disconnect($g_link);
	}


	/**
	 * This is used for serious errors: when no database connection can be made or the Smarty cache folder isn't writable.
	 * All it does is output the error string with no other dependencies - not even language strings. The paths assume
	 * that we're in the application root (otherwise they won't work).
	 *
	 * This function only handles English. For problems of this severity, I think that's okay.
	 *
	 * @param string $error
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_STATIC_PROP))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_STATIC_PROP))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_STATIC_PROP)))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_STATIC_PROP)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_STATIC_PROP)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_STATIC_PROP))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_STATIC_PROP))
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_MAGIC_CONST)))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_STATIC_PROP)))))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_EXIT
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_STATIC_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_STATIC_PROP)
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_MAGIC_CONST)))
                        (AST_ENCAPS_LIST
                            (SCALAR)
                            (AST_VAR))))))))