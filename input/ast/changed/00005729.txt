    public function enable($name)
    {
        if (!$this->employee->can('edit', 'AdminModules')
            || !$this->moduleProvider->can('configure', $name)) {
            throw new Exception('You are not allowed to enable this module');
        }

        $module = $this->moduleRepository->getModule($name);
        try {
            return $module->onEnable();
        } catch (Exception $e) {
            throw new Exception('Error when enabling module. '. $e->getMessage(), 0, $e);
        }
    }

    /**
     * Actions to perform to restaure default settings
     *
     * @param  string $name The theme name to reset
     * @return bool         True for success
     */
||||||||    public function enable($name)
    {
        if (!$this->employee->can('edit', 'AdminModules')
            || !$this->moduleProvider->can('configure', $name)) {
            throw new Exception('You are not allowed to enable this module.');
        }

        $module = $this->moduleRepository->getModule($name);
        try {
            return $module->onEnable();
        } catch (Exception $e) {
            throw new Exception('Error when enabling module. '. $e->getMessage(), 0, $e);
        }

        return true;
    }

    /**
     * Actions to perform to restaure default settings
     *
     * @param  string $name The theme name to reset
     * @return bool         True for success
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_TRY
        (
            (AST_RETURN
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (SCALAR)
                                (AST_VAR)))))))
        (NULL)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (SCALAR))))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (SCALAR)
                            (AST_VAR)))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_TRY
        (
            (AST_RETURN
                (AST_METHOD_CALL
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (SCALAR)
                                (AST_VAR)))))))
        (NULL))
    (AST_RETURN
        (AST_CONST)))