    public function runBare()
    {
        $this->numAssertions = 0;

        // Backup the $GLOBALS array and static attributes.
        if ($this->runTestInSeparateProcess !== true &&
            $this->inIsolation !== true) {
            if ($this->backupGlobals === null ||
                $this->backupGlobals === true) {
                PHPUnit_Util_GlobalState::backupGlobals(
                    $this->backupGlobalsBlacklist
                );
            }

            if ($this->backupStaticAttributes === true) {
                PHPUnit_Util_GlobalState::backupStaticAttributes(
                    $this->backupStaticAttributesBlacklist
                );
            }
        }

        $this->startOutputBuffering();

        // Clean up stat cache.
        clearstatcache();

        // Backup the cwd
        $currentWorkingDirectory = getcwd();

        $hookMethods = PHPUnit_Util_Test::getHookMethods(get_class($this));

        try {
            $hasMetRequirements = false;
            $this->checkRequirements();
            $hasMetRequirements = true;

            if ($this->inIsolation) {
                foreach ($hookMethods['beforeClass'] as $method) {
                    $this->$method();
                }
            }

            $this->setExpectedExceptionFromAnnotation();

            foreach ($hookMethods['before'] as $method) {
                $this->$method();
            }

            $this->assertPreConditions();
            $this->testResult = $this->runTest();
            $this->verifyMockObjects();
            $this->assertPostConditions();

            $this->status = PHPUnit_Runner_BaseTestRunner::STATUS_PASSED;
        } catch (PHPUnit_Framework_IncompleteTest $e) {
            $this->status        = PHPUnit_Runner_BaseTestRunner::STATUS_INCOMPLETE;
            $this->statusMessage = $e->getMessage();
        } catch (PHPUnit_Framework_SkippedTest $e) {
            $this->status        = PHPUnit_Runner_BaseTestRunner::STATUS_SKIPPED;
            $this->statusMessage = $e->getMessage();
        } catch (PHPUnit_Framework_AssertionFailedError $e) {
            $this->status        = PHPUnit_Runner_BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (Exception $e) {
            $this->status        = PHPUnit_Runner_BaseTestRunner::STATUS_ERROR;
            $this->statusMessage = $e->getMessage();
        }

        // Clean up the mock objects.
        $this->mockObjects = array();

        // Tear down the fixture. An exception raised in tearDown() will be
        // caught and passed on when no exception was raised before.
        try {
            if ($hasMetRequirements) {
                foreach ($hookMethods['after'] as $method) {
                    $this->$method();
                }

                if ($this->inIsolation) {
                    foreach ($hookMethods['afterClass'] as $method) {
                        $this->$method();
                    }
                }
            }
        } catch (Exception $_e) {
            if (!isset($e)) {
                $e = $_e;
            }
        }

        $this->stopOutputBuffering();

        // Clean up stat cache.
        clearstatcache();

        // Restore the cwd if it was changed by the test
        if ($currentWorkingDirectory != getcwd()) {
            chdir($currentWorkingDirectory);
        }

        // Restore the $GLOBALS array and static attributes.
        if ($this->runTestInSeparateProcess !== true &&
            $this->inIsolation !== true) {
            if ($this->backupGlobals === null ||
                $this->backupGlobals === true) {
                PHPUnit_Util_GlobalState::restoreGlobals(
                    $this->backupGlobalsBlacklist
                );
            }

            if ($this->backupStaticAttributes === true) {
                PHPUnit_Util_GlobalState::restoreStaticAttributes();
            }
        }

        // Clean up INI settings.
        foreach ($this->iniSettings as $varName => $oldValue) {
            ini_set($varName, $oldValue);
        }

        $this->iniSettings = array();

        // Clean up locale settings.
        foreach ($this->locale as $category => $locale) {
            setlocale($category, $locale);
        }

        // Perform assertion on output.
        if (!isset($e)) {
            try {
                if ($this->outputExpectedRegex !== null) {
                    $this->hasPerformedExpectationsOnOutput = true;
                    $this->assertRegExp($this->outputExpectedRegex, $this->output);
                    $this->outputExpectedRegex = null;
                } elseif ($this->outputExpectedString !== null) {
                    $this->hasPerformedExpectationsOnOutput = true;
                    $this->assertEquals($this->outputExpectedString, $this->output);
                    $this->outputExpectedString = null;
                }
            } catch (Exception $_e) {
                $e = $_e;
            }
        }

        // Workaround for missing "finally".
        if (isset($e)) {
            $this->onNotSuccessfulTest($e);
        }
    }

    /**
     * Override to run the test and assert its state.
     *
     * @return mixed
     * @throws Exception|PHPUnit_Framework_Exception
     * @throws PHPUnit_Framework_Exception
     */
||||||||    public function runBare()
    {
        $this->numAssertions = 0;

        $this->snapshotGlobalState();
        $this->startOutputBuffering();
        clearstatcache();
        $currentWorkingDirectory = getcwd();

        $hookMethods = PHPUnit_Util_Test::getHookMethods(get_class($this));

        try {
            $hasMetRequirements = false;
            $this->checkRequirements();
            $hasMetRequirements = true;

            if ($this->inIsolation) {
                foreach ($hookMethods['beforeClass'] as $method) {
                    $this->$method();
                }
            }

            $this->setExpectedExceptionFromAnnotation();

            foreach ($hookMethods['before'] as $method) {
                $this->$method();
            }

            $this->assertPreConditions();
            $this->testResult = $this->runTest();
            $this->verifyMockObjects();
            $this->assertPostConditions();

            $this->status = PHPUnit_Runner_BaseTestRunner::STATUS_PASSED;
        } catch (PHPUnit_Framework_IncompleteTest $e) {
            $this->status        = PHPUnit_Runner_BaseTestRunner::STATUS_INCOMPLETE;
            $this->statusMessage = $e->getMessage();
        } catch (PHPUnit_Framework_SkippedTest $e) {
            $this->status        = PHPUnit_Runner_BaseTestRunner::STATUS_SKIPPED;
            $this->statusMessage = $e->getMessage();
        } catch (PHPUnit_Framework_AssertionFailedError $e) {
            $this->status        = PHPUnit_Runner_BaseTestRunner::STATUS_FAILURE;
            $this->statusMessage = $e->getMessage();
        } catch (Exception $e) {
            $this->status        = PHPUnit_Runner_BaseTestRunner::STATUS_ERROR;
            $this->statusMessage = $e->getMessage();
        }

        // Clean up the mock objects.
        $this->mockObjects = array();

        // Tear down the fixture. An exception raised in tearDown() will be
        // caught and passed on when no exception was raised before.
        try {
            if ($hasMetRequirements) {
                foreach ($hookMethods['after'] as $method) {
                    $this->$method();
                }

                if ($this->inIsolation) {
                    foreach ($hookMethods['afterClass'] as $method) {
                        $this->$method();
                    }
                }
            }
        } catch (Exception $_e) {
            if (!isset($e)) {
                $e = $_e;
            }
        }

        $this->stopOutputBuffering();

        clearstatcache();

        if ($currentWorkingDirectory != getcwd()) {
            chdir($currentWorkingDirectory);
        }

        $this->restoreGlobalState();

        // Clean up INI settings.
        foreach ($this->iniSettings as $varName => $oldValue) {
            ini_set($varName, $oldValue);
        }

        $this->iniSettings = array();

        // Clean up locale settings.
        foreach ($this->locale as $category => $locale) {
            setlocale($category, $locale);
        }

        // Perform assertion on output.
        if (!isset($e)) {
            try {
                if ($this->outputExpectedRegex !== null) {
                    $this->hasPerformedExpectationsOnOutput = true;
                    $this->assertRegExp($this->outputExpectedRegex, $this->output);
                    $this->outputExpectedRegex = null;
                } elseif ($this->outputExpectedString !== null) {
                    $this->hasPerformedExpectationsOnOutput = true;
                    $this->assertEquals($this->outputExpectedString, $this->output);
                    $this->outputExpectedString = null;
                }
            } catch (Exception $_e) {
                $e = $_e;
            }
        }

        // Workaround for missing "finally".
        if (isset($e)) {
            $this->onNotSuccessfulTest($e);
        }
    }

    /**
     * Override to run the test and assert its state.
     *
     * @return mixed
     * @throws Exception|PHPUnit_Framework_Exception
     * @throws PHPUnit_Framework_Exception
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST)))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_FOREACH
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_FOREACH
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_FOREACH
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_FOREACH
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_VAR)
                                        (NULL)
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_ISSET
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_CONST)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST))
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_CONST)))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST))
                        (
                            (AST_STATIC_CALL)))))))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_VAR)))
            (
                (AST_TRY
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))))
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_CALL)
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_FOREACH
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR)))))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_FOREACH
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_PROP
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))))))
        (NULL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_FOREACH
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)
                            (NULL)
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_FOREACH
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_VAR)
                                        (NULL)
                                        (
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_ISSET
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_VAR))))))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_ARRAY))
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_VAR)))
            (
                (AST_TRY
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))))
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_PROP
                                        (AST_VAR))
                                    (AST_CONST))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))))