	public function validate()
	{
		$this->_claimedId = isset($this->data['openid_claimed_id']) ? $this->data['openid_claimed_id'] : $this->data['openid_identity'];
		$params = [
			'openid.assoc_handle' => $this->data['openid_assoc_handle'],
			'openid.signed' => $this->data['openid_signed'],
			'openid.sig' => $this->data['openid_sig'],
		];

		if (isset($this->data['openid_ns'])) {
			/* We're dealing with an OpenID 2.0 server, so let's set an ns
			Even though we should know location of the endpoint,
			we still need to verify it by discovery, so $server is not set here*/
			$params['openid.ns'] = 'http://specs.openid.net/auth/2.0';
		} elseif (isset($this->data['openid_claimed_id']) && $this->data['openid_claimed_id'] != $this->data['openid_identity']) {
			// If it's an OpenID 1 provider, and we've got claimed_id,
			// we have to append it to the returnUrl, like authUrl_v1 does.
			$this->returnUrl .= (strpos($this->returnUrl, '?') ? '&' : '?') . 'openid.claimed_id=' . $this->_claimedId;
		}

		if ($this->data['openid_return_to'] != $this->returnUrl) {
			// The return_to url must match the url of current request.
			// I'm assuing that noone will set the returnUrl to something that doesn't make sense.
			return false;
		}

		$serverInfo = $this->discover($this->_claimedId);

		foreach (explode(',', $this->data['openid_signed']) as $item) {
			/* Checking whether magic_quotes_gpc is turned on, because
			the function may fail if it is. For example, when fetching
			AX namePerson, it might containg an apostrophe, which will be escaped.
			In such case, validation would fail, since we'd send different data than OP
			wants to verify. stripslashes() should solve that problem, but we can't
			use it when magic_quotes is off.*/
			$value = $this->data['openid_' . str_replace('.', '_', $item)];
			$params['openid.' . $item] = get_magic_quotes_gpc() ? stripslashes($value) : $value;
		}

		$params['openid.mode'] = 'check_authentication';

		$response = $this->sendRequest($serverInfo['url'], 'POST', $params);

		return preg_match('/is_valid\s*:\s*true/i', $response);
	}

	/**
	 * Gets AX attributes provided by OP.
	 * @return array array of attributes.
	 */
||||||||	public function validate()
	{
		$claimedId = $this->getClaimedId();
		if (empty($claimedId)) {
			return false;
		}
		$params = [
			'openid.assoc_handle' => $this->data['openid_assoc_handle'],
			'openid.signed' => $this->data['openid_signed'],
			'openid.sig' => $this->data['openid_sig'],
		];

		if (isset($this->data['openid_ns'])) {
			/* We're dealing with an OpenID 2.0 server, so let's set an ns
			Even though we should know location of the endpoint,
			we still need to verify it by discovery, so $server is not set here*/
			$params['openid.ns'] = 'http://specs.openid.net/auth/2.0';
		} elseif (isset($this->data['openid_claimed_id']) && $this->data['openid_claimed_id'] != $this->data['openid_identity']) {
			// If it's an OpenID 1 provider, and we've got claimed_id,
			// we have to append it to the returnUrl, like authUrlV1 does.
			$this->returnUrl .= (strpos($this->returnUrl, '?') ? '&' : '?') . 'openid.claimed_id=' . $claimedId;
		}

		if ($this->data['openid_return_to'] != $this->returnUrl) {
			// The return_to url must match the url of current request.
			return false;
		}

		$serverInfo = $this->discover($claimedId);

		foreach (explode(',', $this->data['openid_signed']) as $item) {
			$value = $this->data['openid_' . str_replace('.', '_', $item)];
			$params['openid.' . $item] = $value;
		}

		$params['openid.mode'] = 'check_authentication';

		$response = $this->sendRequest($serverInfo['url'], 'POST', $params);

		return preg_match('/is_valid\s*:\s*true/i', $response);
	}

	/**
	 * Gets AX attributes provided by OP.
	 * @return array array of attributes.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONDITIONAL
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)))
                                (SCALAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR)))
                (AST_CONDITIONAL
                    (AST_CALL)
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))
            (
                (AST_ASSIGN_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_CONDITIONAL
                                (AST_CALL
                                    (
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR)))
                                (SCALAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_CALL
            (
                (SCALAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (SCALAR)
                                (AST_VAR))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR)))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR)))))