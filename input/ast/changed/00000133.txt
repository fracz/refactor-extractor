	public function getOwnConstantReflection($name)
	{
		if ($this->ownConstants === NULL) {
			$this->getOwnConstants();
		}

		if (isset($this->ownConstants[$name])) {
			return $this->ownConstants[$name];
		}

		throw new InvalidArgumentException(sprintf(
			'Constant %s does not exist in class %s', $name, $this->reflection->getName()
		));
	}


	/**
	 * @param string $name
	 * @return ReflectionConstant
	 */
||||||||	public function getOwnConstantReflection($name)
	{
		if (isset($this->getOwnConstants()[$name])) {
			return $this->getOwnConstants()[$name];
		}

		throw new InvalidArgumentException(sprintf(
			'Constant %s does not exist in class %s', $name, $this->reflection->getName()
		));
	}


	/**
	 * @param string $name
	 * @return ReflectionConstant
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR)))))))))