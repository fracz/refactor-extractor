  public function login($name = '1', $path = '', $options = ['browser' => '', 'redirect-port' => '']) {

    // Redispatch if called against a remote-host so a browser is started on the
    // the *local* machine.
    $alias = drush_get_context('DRUSH_TARGET_SITE_ALIAS');
    if (drush_sitealias_is_remote_site($alias)) {
      $return = drush_invoke_process($alias, 'user-login', $name, drush_redispatch_get_options(), array('integrate' => FALSE));
      if ($return['error_status']) {
        throw new \Exception('Unable to execute user login.');
      }
      else {
        $link = is_string($return['object']) ?: current($return['object']);
      }
    }
    else {
      if (!drush_bootstrap(DRUSH_BOOTSTRAP_DRUPAL_FULL)) {
        // Fail gracefully if unable to bootstrap Drupal.
        // drush_bootstrap() has already logged an error.
        return FALSE;
      }

      if ($name == 1) {
        $account = User::load(1);
      }
      elseif (!$account = user_load_by_name($name)) {
        throw new \Exception(dt('Unable to load user: !user', array('!user' => $name)));
      }
      $link = user_pass_reset_url($account);
      if ($path) {
        $link .= '?destination=' . $path;
      }
    }
    $port = drush_get_option('redirect-port', FALSE);
    drush_start_browser($link, FALSE, $port);
    // Use an array for backwards compat.
    drush_backend_set_result([$account->id() => $link]);
    return $link;
  }

  /**
   * A completion callback.
   *
   * @return array
   *   An array of available roles.
   */
||||||||  public function login($path = '', $options = ['name' => '1', 'browser' => '', 'redirect-port' => '']) {

    // Redispatch if called against a remote-host so a browser is started on the
    // the *local* machine.
    $alias = drush_get_context('DRUSH_TARGET_SITE_ALIAS');
    if (drush_sitealias_is_remote_site($alias)) {
      $return = drush_invoke_process($alias, 'user-login', $name, drush_redispatch_get_options(), array('integrate' => FALSE));
      if ($return['error_status']) {
        throw new \Exception('Unable to execute user login.');
      }
      else {
        $link = is_string($return['object']) ?: current($return['object']);
      }
    }
    else {
      if (!drush_bootstrap(DRUSH_BOOTSTRAP_DRUPAL_FULL)) {
        // Fail gracefully if unable to bootstrap Drupal.
        // drush_bootstrap() has already logged an error.
        return FALSE;
      }

      if ($options['name'] == 1) {
        $account = User::load(1);
      }
      elseif (!$account = user_load_by_name($options['name'])) {
        throw new \Exception(dt('Unable to load user: !user', array('!user' => $options['name'])));
      }
      $link = user_pass_reset_url($account). '/login';
      if ($path) {
        $link .= '?destination=' . $path;
      }
    }
    $port = drush_get_option('redirect-port', FALSE);
    drush_start_browser($link, FALSE, $port);
    // Use an array for backwards compat.
    drush_backend_set_result([$account->id() => $link]);
    return $link;
  }

  /**
   * A completion callback.
   *
   * @return array
   *   An array of available roles.
   */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (AST_CALL)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONDITIONAL
                                    (AST_CALL
                                        (
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))
                                    (NULL)
                                    (AST_CALL
                                        (
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_CONST))))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_VAR)
                                                        (SCALAR)))))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)))
    (AST_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (AST_CALL)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (SCALAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CONDITIONAL
                                    (AST_CALL
                                        (
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR))))
                                    (NULL)
                                    (AST_CALL
                                        (
                                            (AST_DIM
                                                (AST_VAR)
                                                (SCALAR)))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_CONST))))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR))))))
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))))))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_ARRAY
                                                    (AST_ARRAY_ELEM
                                                        (AST_DIM
                                                            (AST_VAR)
                                                            (SCALAR))
                                                        (SCALAR)))))))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN_OP
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CONST))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)))
    (AST_CALL
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))