  public function getHeraldField($field) {
    $data = $this->commitData;
    switch ($field) {
      case self::FIELD_BODY:
        return $data->getCommitMessage();
      case self::FIELD_AUTHOR:
        return $data->getCommitDetail('authorPHID');
      case self::FIELD_COMMITTER:
        return $data->getCommitDetail('committerPHID');
      case self::FIELD_REVIEWER:
        return $data->getCommitDetail('reviewerPHID');
      case self::FIELD_DIFF_FILE:
        return $this->loadAffectedPaths();
      case self::FIELD_REPOSITORY:
        return $this->repository->getPHID();
      case self::FIELD_DIFF_CONTENT:
        try {
          $diff = $this->loadCommitDiff();
        } catch (Exception $ex) {
          return array(
            '<<< Failed to load diff, this may mean the change was '.
            'unimaginably enormous. >>>');
        }
        $dict = array();
        $lines = array();
        $changes = $diff->getChangesets();
        foreach ($changes as $change) {
          $lines = array();
          foreach ($change->getHunks() as $hunk) {
            $lines[] = $hunk->makeChanges();
          }
          $dict[$change->getFilename()] = implode("\n", $lines);
        }
        return $dict;
      case self::FIELD_AFFECTED_PACKAGE:
        $packages = $this->loadAffectedPackages();
        return mpull($packages, 'getPHID');
      case self::FIELD_AFFECTED_PACKAGE_OWNER:
        $packages = $this->loadAffectedPackages();
        $owners = PhabricatorOwnersOwner::loadAllForPackages($packages);
        return mpull($owners, 'getUserPHID');
      case self::FIELD_NEED_AUDIT_FOR_PACKAGE:
        return $this->loadAuditNeededPackage();
      case self::FIELD_DIFFERENTIAL_REVISION:
        $revision = $this->loadDifferentialRevision();
        if (!$revision) {
          return null;
        }
        return $revision->getID();
      case self::FIELD_DIFFERENTIAL_REVIEWERS:
        $revision = $this->loadDifferentialRevision();
        if (!$revision) {
          return array();
        }
        return $revision->getReviewers();
      case self::FIELD_DIFFERENTIAL_CCS:
        $revision = $this->loadDifferentialRevision();
        if (!$revision) {
          return array();
        }
        return $revision->getCCPHIDs();
      case self::FIELD_REPOSITORY_AUTOCLOSE_BRANCH:
        return $this->repository->shouldAutocloseCommit(
          $this->commit,
          $this->commitData);
    }

    return parent::getHeraldField($field);
  }

||||||||  public function getHeraldField($field) {
    $data = $this->commitData;
    switch ($field) {
      case self::FIELD_BODY:
        return $data->getCommitMessage();
      case self::FIELD_AUTHOR:
        return $data->getCommitDetail('authorPHID');
      case self::FIELD_COMMITTER:
        return $data->getCommitDetail('committerPHID');
      case self::FIELD_REVIEWER:
        return $data->getCommitDetail('reviewerPHID');
      case self::FIELD_DIFF_FILE:
        return $this->loadAffectedPaths();
      case self::FIELD_REPOSITORY:
        return $this->repository->getPHID();
      case self::FIELD_DIFF_CONTENT:
        $dict = array();
        $lines = array();
        $changes = $this->loadChangesets();
        foreach ($changes as $change) {
          $lines = array();
          foreach ($change->getHunks() as $hunk) {
            $lines[] = $hunk->makeChanges();
          }
          $dict[$change->getFilename()] = implode("\n", $lines);
        }
        return $dict;
      case self::FIELD_DIFF_ADDED_CONTENT:
        $dict = array();
        $lines = array();
        $changes = $this->loadChangesets();
        foreach ($changes as $change) {
          $lines = array();
          foreach ($change->getHunks() as $hunk) {
            $lines[] = implode('', $hunk->getAddedLines());
          }
          $dict[$change->getFilename()] = implode("\n", $lines);
        }
        return $dict;
      case self::FIELD_DIFF_REMOVED_CONTENT:
        $dict = array();
        $lines = array();
        $changes = $this->loadChangesets();
        foreach ($changes as $change) {
          $lines = array();
          foreach ($change->getHunks() as $hunk) {
            $lines[] = implode('', $hunk->getRemovedLines());
          }
          $dict[$change->getFilename()] = implode("\n", $lines);
        }
        return $dict;
      case self::FIELD_AFFECTED_PACKAGE:
        $packages = $this->loadAffectedPackages();
        return mpull($packages, 'getPHID');
      case self::FIELD_AFFECTED_PACKAGE_OWNER:
        $packages = $this->loadAffectedPackages();
        $owners = PhabricatorOwnersOwner::loadAllForPackages($packages);
        return mpull($owners, 'getUserPHID');
      case self::FIELD_NEED_AUDIT_FOR_PACKAGE:
        return $this->loadAuditNeededPackage();
      case self::FIELD_DIFFERENTIAL_REVISION:
        $revision = $this->loadDifferentialRevision();
        if (!$revision) {
          return null;
        }
        return $revision->getID();
      case self::FIELD_DIFFERENTIAL_REVIEWERS:
        $revision = $this->loadDifferentialRevision();
        if (!$revision) {
          return array();
        }
        return $revision->getReviewers();
      case self::FIELD_DIFFERENTIAL_CCS:
        $revision = $this->loadDifferentialRevision();
        if (!$revision) {
          return array();
        }
        return $revision->getCCPHIDs();
      case self::FIELD_REPOSITORY_AUTOCLOSE_BRANCH:
        return $this->repository->shouldAutocloseCommit(
          $this->commit,
          $this->commitData);
    }

    return parent::getHeraldField($field);
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_TRY
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR))))
                        (AST_CATCH_LIST
                            (AST_CATCH
                                (AST_NAME_LIST)
                                (AST_VAR)
                                (
                                    (AST_RETURN
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (SCALAR))
                                                (NULL)))))))
                        (NULL))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY))
                            (AST_FOREACH
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR))))))
                    (AST_RETURN
                        (AST_VAR))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_CONST)))))
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_ARRAY)))))
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_ARRAY)))))
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY))
                            (AST_FOREACH
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_METHOD_CALL
                                            (AST_VAR)))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR))))))
                    (AST_RETURN
                        (AST_VAR))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY))
                            (AST_FOREACH
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR))))))
                    (AST_RETURN
                        (AST_VAR))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_ARRAY))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_FOREACH
                        (AST_VAR)
                        (AST_VAR)
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY))
                            (AST_FOREACH
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)
                                (NULL)
                                (
                                    (AST_ASSIGN
                                        (AST_DIM
                                            (AST_VAR)
                                            (NULL))
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))))
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_VAR)))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR))))))
                    (AST_RETURN
                        (AST_VAR))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_VAR))))
                    (AST_RETURN
                        (AST_CALL
                            (
                                (AST_VAR)
                                (SCALAR))))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_CONST)))))
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_ARRAY)))))
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_ARRAY)))))
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_SWITCH_CASE
                (AST_CLASS_CONST
                    (SCALAR))
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_PROP
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_VAR)))))