	private function migrate_to($version, $type)
	{
		$result = $this->migrations->version($version, $type);

		if ($result !== FALSE && strlen($this->migrations->error) == 0)
		{
			if ($result === 0)
			{
				Template::set_message('<h4 class="alert-heading">Successfully uninstalled module\'s migrations.</h4>', 'success');

				// Log the activity
				log_activity($this->auth->user_id(), 'Migrate Type: '. $type .' Uninstalled Version: ' . $version . ' from: ' . $this->input->ip_address(), 'migrations');
			}
			else
			{
				Template::set_message('<h4 class="alert-heading">Successfully migrated database to version '. $result.'</h4>', 'success');

				// Log the activity
				log_activity($this->auth->user_id(), 'Migrate Type: '. $type .' to Version: ' . $version . ' from: ' . $this->input->ip_address(), 'migrations');
			}
		}
		else
		{
			$msg = 'There was an error migrating the database.';
			logit($msg . "\n" . $this->migrations->error, 'error');
			$msg = '<h4 class="alert-heading">' . $msg . '</h4><br /><strong>' . $this->migrations->error . '</strong>';
			Template::set_message($msg, 'error');
		}//end if

	}//end migrate_to()

	//--------------------------------------------------------------------

	/**
	 * Migrate a module to a particular version
	 *
	 * @access public
	 *
	 * @return void
	 */
||||||||	private function migrate_to($version, $type)
	{
		$result = $this->migrations->version($version, $type);
		if ($result !== false && strlen($this->migrations->error) == 0) {
			if ($result === 0) {
				Template::set_message(lang('migrations_uninstall_success'), 'success');
				log_activity(
                    $this->auth->user_id(),
                    sprintf(lang('migrations_act_uninstall_success'), $type, $version, $this->input->ip_address()),
                    'migrations'
                );
			} else {
				Template::set_message(sprintf(lang('migrations_migrate_success'), $result), 'success');
				log_activity(
                    $this->auth->user_id(),
                    sprintf(lang('migrations_act_migrate_success'), $type, $version, $this->input->ip_address()),
                    'migrations'
                );
			}
		} else {
			log_message(lang('migrations_migrate_error') . "\n" . $this->migrations->error, 'error');
			Template::set_message(lang('migrations_migrate_error') . '<br />' . $this->migrations->error, 'error');
		}
	}

	/**
	 * Migrate a module to a particular version
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))))
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))
                                    (SCALAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))
                                    (SCALAR)))
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (SCALAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))))
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (SCALAR)))
                                    (SCALAR)))
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)))
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (SCALAR)))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)))
                                            (AST_VAR)))
                                    (SCALAR)))
                            (AST_CALL
                                (
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_CALL
                                        (
                                            (AST_CALL
                                                (
                                                    (SCALAR)))
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_METHOD_CALL
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (SCALAR))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (SCALAR))
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR)))
                (AST_STATIC_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (SCALAR)))
                                (SCALAR))
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR)))))))