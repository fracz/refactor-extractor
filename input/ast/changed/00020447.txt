    public static function make_button($url, array $params=null, $label=null, $method='post') {
        if ($label === null) {
            $label = get_string('ok');
        }
        $form = new html_form();
        $form->url = new moodle_url($url, $params);
        $form->button->text = $label;
        $form->method = $method;
        return $form;
    }
}


/**
 * Component representing a list.
 *
 * The advantage of using this object instead of a flat array is that you can load it
 * with metadata (CSS classes, event handlers etc.) which can be used by the renderers.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class html_list extends html_component {

    /**
     * @var array $items An array of html_list_item or html_list objects
     */
    public $items = array();

    /**
     * @var string $type The type of list (ordered|unordered), definition type not yet supported
     */
    public $type = 'unordered';

    /**
     * @var string $text An optional descriptive text for the list. Will be output as a list item before opening the new list
     */
    public $text = false;

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        parent::prepare($output, $page, $target);
    }

    /**
     * This function takes a nested array of data and maps it into this list's $items array
     * as proper html_list_item and html_list objects, with appropriate metadata.
     *
     * @param array $tree A nested array (array keys are ignored);
     * @param int $row Used in identifying the iteration level and in ul classes
     * @return void
     */
    public function load_data($tree, $level=0) {

        $this->add_class("list-$level");

        $i = 1;
        foreach ($tree as $key => $element) {
            if (is_array($element)) {
                $newhtmllist = new html_list();
                $newhtmllist->type = $this->type;
                $newhtmllist->load_data($element, $level + 1);
                $newhtmllist->text = $key;
                $this->items[] = $newhtmllist;
            } else {
                $listitem = new html_list_item();
                $listitem->value = $element;
                $listitem->add_class("list-item-$level-$i");
                $this->items[] = $listitem;
            }
            $i++;
        }
    }

    /**
     * Adds a html_list_item or html_list to this list.
     * If the param is a string, a html_list_item will be added.
     * @param mixed $item String, html_list or html_list_item object
     * @return void
     */
    public function add_item($item) {
        if ($item instanceof html_list_item || $item instanceof html_list) {
            $this->items[] = $item;
        } else {
            $listitem = new html_list_item();
            $listitem->value = $item;
            $this->items[] = $item;
        }
    }
}


/**
 * Component representing a list item.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class html_list_item extends html_component {
    /**
     * @var string $value The value of the list item
     */
    public $value;

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        parent::prepare($output, $page, $target);
    }
}


/**
 * Component representing a span element. It has no special attributes, so
 * it is very low-level and can be used for styling and JS actions.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class html_span extends html_component {
    /**
     * @var string $text The contents of the span
     */
    public $contents;
    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        parent::prepare($output, $page, $target);
    }
}

/// Complex components aggregating simpler components


/**
 * Component representing a paging bar.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class moodle_paging_bar extends html_component {
    /**
     * @var int $maxdisplay The maximum number of pagelinks to display
     */
    public $maxdisplay = 18;
    /**
     * @var int $totalcount post or get
     */
    public $totalcount;
    /**
     * @var int $page The page you are currently viewing
     */
    public $page = 0;
    /**
     * @var int $perpage The number of entries that should be shown per page
     */
    public $perpage;
    /**
     * @var string $baseurl If this  is a string then it is the url which will be appended with $pagevar, an equals sign and the page number.
     *      If this is a moodle_url object then the pagevar param will be replaced by the page no, for each page.
     */
    public $baseurl;
    /**
     * @var string $pagevar This is the variable name that you use for the page number in your code (ie. 'tablepage', 'blogpage', etc)
     */
    public $pagevar = 'page';
    /**
     * @var html_link $previouslink A HTML link representing the "previous" page
     */
    public $previouslink = null;
    /**
     * @var html_link $nextlink A HTML link representing the "next" page
     */
    public $nextlink = null;
    /**
     * @var html_link $firstlink A HTML link representing the first page
     */
    public $firstlink = null;
    /**
     * @var html_link $lastlink A HTML link representing the last page
     */
    public $lastlink = null;
    /**
     * @var array $pagelinks An array of html_links. One of them is just a string: the current page
     */
    public $pagelinks = array();

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        if (!isset($this->totalcount) || is_null($this->totalcount)) {
            throw new coding_exception('moodle_paging_bar requires a totalcount value.');
        }
        if (!isset($this->page) || is_null($this->page)) {
            throw new coding_exception('moodle_paging_bar requires a page value.');
        }
        if (empty($this->perpage)) {
            throw new coding_exception('moodle_paging_bar requires a perpage value.');
        }
        if (empty($this->baseurl)) {
            throw new coding_exception('moodle_paging_bar requires a baseurl value.');
        }
        if (!($this->baseurl instanceof moodle_url)) {
            $this->baseurl = new moodle_url($this->baseurl);
        }

        if ($this->totalcount > $this->perpage) {
            $pagenum = $this->page - 1;

            if ($this->page > 0) {
                $this->previouslink = new html_link();
                $this->previouslink->add_class('previous');
                $this->previouslink->url = clone($this->baseurl);
                $this->previouslink->url->param($this->pagevar, $pagenum);
                $this->previouslink->text = get_string('previous');
            }

            if ($this->perpage > 0) {
                $lastpage = ceil($this->totalcount / $this->perpage);
            } else {
                $lastpage = 1;
            }

            if ($this->page > 15) {
                $startpage = $this->page - 10;

                $this->firstlink = new html_link();
                $this->firstlink->url = clone($this->baseurl);
                $this->firstlink->url->param($this->pagevar, 0);
                $this->firstlink->text = 1;
                $this->firstlink->add_class('first');
            } else {
                $startpage = 0;
            }

            $currpage = $startpage;
            $displaycount = $displaypage = 0;

            while ($displaycount < $this->maxdisplay and $currpage < $lastpage) {
                $displaypage = $currpage + 1;

                if ($this->page == $currpage) {
                    $this->pagelinks[] = $displaypage;
                } else {
                    $pagelink = new html_link();
                    $pagelink->url = clone($this->baseurl);
                    $pagelink->url->param($this->pagevar, $currpage);
                    $pagelink->text = $displaypage;
                    $this->pagelinks[] = $pagelink;
                }

                $displaycount++;
                $currpage++;
            }

            if ($currpage < $lastpage) {
                $lastpageactual = $lastpage - 1;
                $this->lastlink = new html_link();
                $this->lastlink->url = clone($this->baseurl);
                $this->lastlink->url->param($this->pagevar, $lastpageactual);
                $this->lastlink->text = $lastpage;
                $this->lastlink->add_class('last');
            }

            $pagenum = $this->page + 1;

            if ($pagenum != $displaypage) {
                $this->nextlink = new html_link();
                $this->nextlink->url = clone($this->baseurl);
                $this->nextlink->url->param($this->pagevar, $pagenum);
                $this->nextlink->text = get_string('next');
                $this->nextlink->add_class('next');
            }
        }
    }

    /**
     * Shortcut for initialising a moodle_paging_bar with only the required params.
     *
     * @param int $totalcount Thetotal number of entries available to be paged through
     * @param int $page The page you are currently viewing
     * @param int $perpage The number of entries that should be shown per page
     * @param mixed $baseurl If this  is a string then it is the url which will be appended with $pagevar, an equals sign and the page number.
     *                          If this is a moodle_url object then the pagevar param will be replaced by the page no, for each page.
     */
    public static function make($totalcount, $page, $perpage, $baseurl) {
        $pagingbar = new moodle_paging_bar();
        $pagingbar->totalcount = $totalcount;
        $pagingbar->page = $page;
        $pagingbar->perpage = $perpage;
        $pagingbar->baseurl = $baseurl;
        return $pagingbar;
    }
}


/**
 * Component representing a user picture.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class user_picture extends html_image {
    /**
     * @var mixed $user A user object with at least fields id, picture, imagealt, firstname and lastname set.
     */
    public $user;
    /**
     * @var int $courseid The course id. Used when constructing the link to the user's profile,
     * page course id used if not specified.
     */
    public $courseid;
    /**
     * @var bool $link add course profile link to image
     */
    public $link = true;
    /**
     * @var int $size Size in pixels. Special values are (true/1 = 100px) and (false/0 = 35px) for backward compatibility
     */
    public $size = 35;
    /**
     * @var boolean $alttext add non-blank alt-text to the image.
     * Default true, set to false when image alt just duplicates text in screenreaders.
     */
    public $alttext = true;
    /**
     * @var boolean $popup Whether or not to open the link in a popup window.
     */
    public $popup = false;

    /**
     * @var link to profile if link requested
     */
    public $url;

    /**
     * User picture constructor.
     *
     * @param object $user user record with at least id, picture, imagealt, firstname and lastname set.
     * @param array $options such as link, size, link, ...
     */
    public function __construct(stdClass $user = null, array $options = null) {
        parent::__construct(null, $options);

        if ($user) {
            $this->user = $user;
        }
    }

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        global $CFG, $DB;

        if (empty($this->user)) {
            throw new coding_exception('A user_picture object must have a $user object before being rendered.');
        }

        if (empty($this->user->id)) {
            throw new coding_exception('User id missing in $user object.');
        }

        if (empty($this->courseid)) {
            $courseid = $page->course->id;
        } else {
            $courseid = $this->courseid;
        }

        // only touch the DB if we are missing data and complain loudly...
        $needrec = false;

        if (!array_key_exists('picture', $this->user)) {
            $needrec = true;
            debugging('Missing picture property in $user object, this is a performance problem that needs to be fixed by a developer.', DEBUG_DEVELOPER);
        }
        if ($this->alttext) {
            if (!array_key_exists('firstname', $this->user) || !array_key_exists('lastname', $this->user) || !array_key_exists('imagealt', $this->user)) {
                $needrec = true;
                debugging('Missing firstname, lastname or imagealt property in $user object, this is a performance problem that needs to be fixed by a developer.', DEBUG_DEVELOPER);
            }
        }

        if ($needrec) {
            $this->user = $DB->get_record('user', array('id'=>$this->user->id), 'id, firstname, lastname, imagealt');
        }

        if ($this->alttext) {
            if (!empty($user->imagealt)) {
                $this->alt = $user->imagealt;
            } else {
                $this->alt = get_string('pictureof', '', fullname($this->user));
            }
        } else {
            $this->alt = HTML_ATTR_EMPTY;
        }

        if ($this->link) {
            $this->url = new moodle_url('/user/view.php', array('id' => $this->user->id, 'course' => $courseid));
        } else {
            $this->url = null;
            $this->popup = false;
        }

        if (empty($this->size)) {
            $file = 'f2';
            $this->size = 35;
        } else if ($this->size === true or $this->size == 1) {
            $file = 'f1';
            $this->size = 100;
        } else if ($this->size >= 50) {
            $file = 'f1';
        } else {
            $file = 'f2';
        }

        if (!empty($this->size)) {
            $this->width = $this->size;
            $this->height = $this->size;
        }

        $this->add_class('userpicture');

        if (!empty($this->user->picture)) {
            require_once($CFG->libdir.'/filelib.php');
            $this->src = new moodle_url(get_file_url($this->user->id.'/'.$file.'.jpg', null, 'user'));
        } else { // Print default user pictures (use theme version if available)
            $this->add_class('defaultuserpic');
            $this->src = $output->pix_url('u/' . $file);
        }

        parent::prepare($output, $page, $target);
    }
}


/**
 * Component representing a help icon.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class help_icon extends html_image {
    public $page;
    /**
     * @var string $module Which module is the page defined in
     */
    /**
     * @var string $text A descriptive text
     */
    public $text;
    /**
     * @var string $page  The keyword that defines a help page
     */
    public $component = 'moodle';
    /**
     * @var boolean $linktext Whether or not to show text next to the icon
     */
    public $linktext = false;

    /**
     * @var html_link $link A html_link object that will hold the URL info
     */
    public $link;

    /**
     * Constructor: sets up the other components in case they are needed
     * @param string $page  The keyword that defines a help page
     * @param string $text A descriptive text
     * @param string $component
     * @param bool $linktext add extra text to icon
     * @return void
     */
    public function __construct($helppage, $text, $component='moodle', $linktext=false) {
        global $CFG;

        if (empty($helppage)) {
            throw new coding_exception('A help_icon object requires a $helppage parameter');
        }

        if (empty($text)) {
            throw new coding_exception('A help_icon object requires a $text parameter');
        }

        parent::__construct(null, array('class'=>'iconhelp'));

        $this->helppage  = $helppage;
        $this->text      = $text;
        $this->component = $component;
        $this->linktext  = $linktext;

        $this->link = new html_link();
        $this->link->url = new moodle_url($CFG->wwwroot.'/help.php', array('module' => $this->component, 'file' => $this->helppage .'.html'));
        // Warn users about new window for Accessibility
    }

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        global $CFG;

        if (empty($this->link->title)) {
            $this->link->title = get_string('helpprefix2', '', trim($this->text, ". \t")) .' ('.get_string('newwindow').')';
        }

        if (empty($this->src)) {
            $this->src = $output->pix_url('help');
        }

        if ($this->linktext) {
            $this->image->alt = get_string('helpwiththis');
        } else {
            $this->image->alt = $this->text;
        }

        $popup = new popup_action('click', $this->link->url);
        $this->link->add_action($popup);

        parent::prepare($output, $page, $target);
    }
}


/**
 * This class represents how a block appears on a page.
 *
 * During output, each block instance is asked to return a block_contents object,
 * those are then passed to the $OUTPUT->block function for display.
 *
 * {@link $contents} should probably be generated using a moodle_block_..._renderer.
 *
 * Other block-like things that need to appear on the page, for example the
 * add new block UI, are also represented as block_contents objects.
 *
 * @copyright 2009 Tim Hunt
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class block_contents extends html_component {
    /** @var int used to set $skipid. */
    protected static $idcounter = 1;

    const NOT_HIDEABLE = 0;
    const VISIBLE = 1;
    const HIDDEN = 2;

    /**
     * @param integer $skipid All the blocks (or things that look like blocks)
     * printed on a page are given a unique number that can be used to construct
     * id="" attributes. This is set automatically be the {@link prepare()} method.
     * Do not try to set it manually.
     */
    public $skipid;

    /**
     * @var integer If this is the contents of a real block, this should be set to
     * the block_instance.id. Otherwise this should be set to 0.
     */
    public $blockinstanceid = 0;

    /**
     * @var integer if this is a real block instance, and there is a corresponding
     * block_position.id for the block on this page, this should be set to that id.
     * Otherwise it should be 0.
     */
    public $blockpositionid = 0;

    /**
     * @param array $attributes an array of attribute => value pairs that are put on the
     * outer div of this block. {@link $id} and {@link $classes} attributes should be set separately.
     */
    public $attributes = array();

    /**
     * @param string $title The title of this block. If this came from user input,
     * it should already have had format_string() processing done on it. This will
     * be output inside <h2> tags. Please do not cause invalid XHTML.
     */
    public $title = '';

    /**
     * @param string $content HTML for the content
     */
    public $content = '';

    /**
     * @param array $list an alternative to $content, it you want a list of things with optional icons.
     */
    public $footer = '';

    /**
     * Any small print that should appear under the block to explain to the
     * teacher about the block, for example 'This is a sticky block that was
     * added in the system context.'
     * @var string
     */
    public $annotation = '';

    /**
     * @var integer one of the constants NOT_HIDEABLE, VISIBLE, HIDDEN. Whether
     * the user can toggle whether this block is visible.
     */
    public $collapsible = self::NOT_HIDEABLE;

    /**
     * A (possibly empty) array of editing controls. Each element of this array
     * should be an array('url' => $url, 'icon' => $icon, 'caption' => $caption).
     * $icon is the icon name. Fed to $OUTPUT->pix_url.
     * @var array
     */
    public $controls = array();

    /**
     * @see html_component::prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        $this->skipid = self::$idcounter;
        self::$idcounter += 1;
        $this->add_class('sideblock');
        if (empty($this->blockinstanceid) || !strip_tags($this->title)) {
            $this->collapsible = self::NOT_HIDEABLE;
        }
        if ($this->collapsible == self::HIDDEN) {
            $this->add_class('hidden');
        }
        if (!empty($this->controls)) {
            $this->add_class('block_with_controls');
        }
        parent::prepare($output, $page, $target);
    }
}


/**
 * This class represents a target for where a block can go when it is being moved.
 *
 * This needs to be rendered as a form with the given hidden from fields, and
 * clicking anywhere in the form should submit it. The form action should be
 * $PAGE->url.
 *
 * @copyright 2009 Tim Hunt
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class block_move_target extends html_component {
    /**
     * List of hidden form fields.
     * @var array
     */
    public $url = array();
    /**
     * List of hidden form fields.
     * @var array
     */
    public $text = '';
}||||||||    public static function make_button($url, array $params=null, $label=null, $method='post', array $formoptions=null) {
        $form = new html_form($formoptions);
        $form->url = new moodle_url($url, $params);
        if ($label !== null) {
            $form->button->text = $label;
        }
        $form->method = $method;

        return $form;
    }
}


/**
 * Component representing a list.
 *
 * The advantage of using this object instead of a flat array is that you can load it
 * with metadata (CSS classes, event handlers etc.) which can be used by the renderers.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class html_list extends html_component {

    /**
     * @var array $items An array of html_list_item or html_list objects
     */
    public $items = array();

    /**
     * @var string $type The type of list (ordered|unordered), definition type not yet supported
     */
    public $type = 'unordered';

    /**
     * @var string $text An optional descriptive text for the list. Will be output as a list item before opening the new list
     */
    public $text = false;

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        parent::prepare($output, $page, $target);
    }

    /**
     * This function takes a nested array of data and maps it into this list's $items array
     * as proper html_list_item and html_list objects, with appropriate metadata.
     *
     * @param array $tree A nested array (array keys are ignored);
     * @param int $row Used in identifying the iteration level and in ul classes
     * @return void
     */
    public function load_data($tree, $level=0) {

        $this->add_class("list-$level");

        $i = 1;
        foreach ($tree as $key => $element) {
            if (is_array($element)) {
                $newhtmllist = new html_list();
                $newhtmllist->type = $this->type;
                $newhtmllist->load_data($element, $level + 1);
                $newhtmllist->text = $key;
                $this->items[] = $newhtmllist;
            } else {
                $listitem = new html_list_item();
                $listitem->value = $element;
                $listitem->add_class("list-item-$level-$i");
                $this->items[] = $listitem;
            }
            $i++;
        }
    }

    /**
     * Adds a html_list_item or html_list to this list.
     * If the param is a string, a html_list_item will be added.
     * @param mixed $item String, html_list or html_list_item object
     * @return void
     */
    public function add_item($item) {
        if ($item instanceof html_list_item || $item instanceof html_list) {
            $this->items[] = $item;
        } else {
            $listitem = new html_list_item();
            $listitem->value = $item;
            $this->items[] = $item;
        }
    }
}


/**
 * Component representing a list item.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class html_list_item extends html_component {
    /**
     * @var string $value The value of the list item
     */
    public $value;

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        parent::prepare($output, $page, $target);
    }
}


/**
 * Component representing a span element. It has no special attributes, so
 * it is very low-level and can be used for styling and JS actions.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class html_span extends html_component {
    /**
     * @var string $text The contents of the span
     */
    public $contents;
    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        parent::prepare($output, $page, $target);
    }
}

/// Complex components aggregating simpler components


/**
 * Component representing a paging bar.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class moodle_paging_bar extends html_component {
    /**
     * @var int $maxdisplay The maximum number of pagelinks to display
     */
    public $maxdisplay = 18;
    /**
     * @var int $totalcount post or get
     */
    public $totalcount;
    /**
     * @var int $page The page you are currently viewing
     */
    public $page = 0;
    /**
     * @var int $perpage The number of entries that should be shown per page
     */
    public $perpage;
    /**
     * @var string $baseurl If this  is a string then it is the url which will be appended with $pagevar, an equals sign and the page number.
     *      If this is a moodle_url object then the pagevar param will be replaced by the page no, for each page.
     */
    public $baseurl;
    /**
     * @var string $pagevar This is the variable name that you use for the page number in your code (ie. 'tablepage', 'blogpage', etc)
     */
    public $pagevar = 'page';
    /**
     * @var html_link $previouslink A HTML link representing the "previous" page
     */
    public $previouslink = null;
    /**
     * @var html_link $nextlink A HTML link representing the "next" page
     */
    public $nextlink = null;
    /**
     * @var html_link $firstlink A HTML link representing the first page
     */
    public $firstlink = null;
    /**
     * @var html_link $lastlink A HTML link representing the last page
     */
    public $lastlink = null;
    /**
     * @var array $pagelinks An array of html_links. One of them is just a string: the current page
     */
    public $pagelinks = array();

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        if (!isset($this->totalcount) || is_null($this->totalcount)) {
            throw new coding_exception('moodle_paging_bar requires a totalcount value.');
        }
        if (!isset($this->page) || is_null($this->page)) {
            throw new coding_exception('moodle_paging_bar requires a page value.');
        }
        if (empty($this->perpage)) {
            throw new coding_exception('moodle_paging_bar requires a perpage value.');
        }
        if (empty($this->baseurl)) {
            throw new coding_exception('moodle_paging_bar requires a baseurl value.');
        }
        if (!($this->baseurl instanceof moodle_url)) {
            $this->baseurl = new moodle_url($this->baseurl);
        }

        if ($this->totalcount > $this->perpage) {
            $pagenum = $this->page - 1;

            if ($this->page > 0) {
                $this->previouslink = new html_link();
                $this->previouslink->add_class('previous');
                $this->previouslink->url = clone($this->baseurl);
                $this->previouslink->url->param($this->pagevar, $pagenum);
                $this->previouslink->text = get_string('previous');
            }

            if ($this->perpage > 0) {
                $lastpage = ceil($this->totalcount / $this->perpage);
            } else {
                $lastpage = 1;
            }

            if ($this->page > 15) {
                $startpage = $this->page - 10;

                $this->firstlink = new html_link();
                $this->firstlink->url = clone($this->baseurl);
                $this->firstlink->url->param($this->pagevar, 0);
                $this->firstlink->text = 1;
                $this->firstlink->add_class('first');
            } else {
                $startpage = 0;
            }

            $currpage = $startpage;
            $displaycount = $displaypage = 0;

            while ($displaycount < $this->maxdisplay and $currpage < $lastpage) {
                $displaypage = $currpage + 1;

                if ($this->page == $currpage) {
                    $this->pagelinks[] = $displaypage;
                } else {
                    $pagelink = new html_link();
                    $pagelink->url = clone($this->baseurl);
                    $pagelink->url->param($this->pagevar, $currpage);
                    $pagelink->text = $displaypage;
                    $this->pagelinks[] = $pagelink;
                }

                $displaycount++;
                $currpage++;
            }

            if ($currpage < $lastpage) {
                $lastpageactual = $lastpage - 1;
                $this->lastlink = new html_link();
                $this->lastlink->url = clone($this->baseurl);
                $this->lastlink->url->param($this->pagevar, $lastpageactual);
                $this->lastlink->text = $lastpage;
                $this->lastlink->add_class('last');
            }

            $pagenum = $this->page + 1;

            if ($pagenum != $displaypage) {
                $this->nextlink = new html_link();
                $this->nextlink->url = clone($this->baseurl);
                $this->nextlink->url->param($this->pagevar, $pagenum);
                $this->nextlink->text = get_string('next');
                $this->nextlink->add_class('next');
            }
        }
    }

    /**
     * Shortcut for initialising a moodle_paging_bar with only the required params.
     *
     * @param int $totalcount Thetotal number of entries available to be paged through
     * @param int $page The page you are currently viewing
     * @param int $perpage The number of entries that should be shown per page
     * @param mixed $baseurl If this  is a string then it is the url which will be appended with $pagevar, an equals sign and the page number.
     *                          If this is a moodle_url object then the pagevar param will be replaced by the page no, for each page.
     */
    public static function make($totalcount, $page, $perpage, $baseurl) {
        $pagingbar = new moodle_paging_bar();
        $pagingbar->totalcount = $totalcount;
        $pagingbar->page = $page;
        $pagingbar->perpage = $perpage;
        $pagingbar->baseurl = $baseurl;
        return $pagingbar;
    }
}


/**
 * Component representing a user picture.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class user_picture extends html_image {
    /**
     * @var mixed $user A user object with at least fields id, picture, imagealt, firstname and lastname set.
     */
    public $user;
    /**
     * @var int $courseid The course id. Used when constructing the link to the user's profile,
     * page course id used if not specified.
     */
    public $courseid;
    /**
     * @var bool $link add course profile link to image
     */
    public $link = true;
    /**
     * @var int $size Size in pixels. Special values are (true/1 = 100px) and (false/0 = 35px) for backward compatibility
     */
    public $size = 35;
    /**
     * @var boolean $alttext add non-blank alt-text to the image.
     * Default true, set to false when image alt just duplicates text in screenreaders.
     */
    public $alttext = true;
    /**
     * @var boolean $popup Whether or not to open the link in a popup window.
     */
    public $popup = false;

    /**
     * @var link to profile if link requested
     */
    public $url;

    /**
     * User picture constructor.
     *
     * @param object $user user record with at least id, picture, imagealt, firstname and lastname set.
     * @param array $options such as link, size, link, ...
     */
    public function __construct(stdClass $user = null, array $options = null) {
        parent::__construct(null, $options);

        if ($user) {
            $this->user = $user;
        }
    }

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        global $CFG, $DB;

        if (empty($this->user)) {
            throw new coding_exception('A user_picture object must have a $user object before being rendered.');
        }

        if (empty($this->user->id)) {
            throw new coding_exception('User id missing in $user object.');
        }

        if (empty($this->courseid)) {
            $courseid = $page->course->id;
        } else {
            $courseid = $this->courseid;
        }

        // only touch the DB if we are missing data and complain loudly...
        $needrec = false;

        if (!array_key_exists('picture', $this->user)) {
            $needrec = true;
            debugging('Missing picture property in $user object, this is a performance problem that needs to be fixed by a developer.', DEBUG_DEVELOPER);
        }
        if ($this->alttext) {
            if (!array_key_exists('firstname', $this->user) || !array_key_exists('lastname', $this->user) || !array_key_exists('imagealt', $this->user)) {
                $needrec = true;
                debugging('Missing firstname, lastname or imagealt property in $user object, this is a performance problem that needs to be fixed by a developer.', DEBUG_DEVELOPER);
            }
        }

        if ($needrec) {
            $this->user = $DB->get_record('user', array('id'=>$this->user->id), 'id, firstname, lastname, imagealt');
        }

        if ($this->alttext) {
            if (!empty($user->imagealt)) {
                $this->alt = $user->imagealt;
            } else {
                $this->alt = get_string('pictureof', '', fullname($this->user));
            }
        } else {
            $this->alt = HTML_ATTR_EMPTY;
        }

        if ($this->link) {
            $this->url = new moodle_url('/user/view.php', array('id' => $this->user->id, 'course' => $courseid));
        } else {
            $this->url = null;
            $this->popup = false;
        }

        if (empty($this->size)) {
            $file = 'f2';
            $this->size = 35;
        } else if ($this->size === true or $this->size == 1) {
            $file = 'f1';
            $this->size = 100;
        } else if ($this->size >= 50) {
            $file = 'f1';
        } else {
            $file = 'f2';
        }

        if (!empty($this->size)) {
            $this->width = $this->size;
            $this->height = $this->size;
        }

        $this->add_class('userpicture');

        if (!empty($this->user->picture)) {
            require_once($CFG->libdir.'/filelib.php');
            $this->src = new moodle_url(get_file_url($this->user->id.'/'.$file.'.jpg', null, 'user'));
        } else { // Print default user pictures (use theme version if available)
            $this->add_class('defaultuserpic');
            $this->src = $output->pix_url('u/' . $file);
        }

        parent::prepare($output, $page, $target);
    }
}


/**
 * Component representing a help icon.
 *
 * @copyright 2009 Nicolas Connault
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class help_icon extends html_image {
    public $page;
    /**
     * @var string $module Which module is the page defined in
     */
    /**
     * @var string $text A descriptive text
     */
    public $text;
    /**
     * @var string $page  The keyword that defines a help page
     */
    public $component = 'moodle';
    /**
     * @var boolean $linktext Whether or not to show text next to the icon
     */
    public $linktext = false;

    /**
     * @var html_link $link A html_link object that will hold the URL info
     */
    public $link;

    /**
     * Constructor: sets up the other components in case they are needed
     * @param string $page  The keyword that defines a help page
     * @param string $text A descriptive text
     * @param string $component
     * @param bool $linktext add extra text to icon
     * @return void
     */
    public function __construct($helppage, $text, $component='moodle', $linktext=false) {
        global $CFG;

        if (empty($helppage)) {
            throw new coding_exception('A help_icon object requires a $helppage parameter');
        }

        if (empty($text)) {
            throw new coding_exception('A help_icon object requires a $text parameter');
        }

        parent::__construct(null, array('class'=>'iconhelp'));

        $this->helppage  = $helppage;
        $this->text      = $text;
        $this->component = $component;
        $this->linktext  = $linktext;

        $this->link = new html_link();
        $this->link->url = new moodle_url($CFG->wwwroot.'/help.php', array('module' => $this->component, 'file' => $this->helppage .'.html'));
        // Warn users about new window for Accessibility
    }

    /**
     * @see lib/html_component#prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        global $CFG;

        if (empty($this->link->title)) {
            $this->link->title = get_string('helpprefix2', '', trim($this->text, ". \t")) .' ('.get_string('newwindow').')';
        }

        if (empty($this->src)) {
            $this->src = $output->pix_url('help');
        }

        if ($this->linktext) {
            $this->image->alt = get_string('helpwiththis');
        } else {
            $this->image->alt = $this->text;
        }

        $popup = new popup_action('click', $this->link->url);
        $this->link->add_action($popup);

        parent::prepare($output, $page, $target);
    }
}


/**
 * This class represents how a block appears on a page.
 *
 * During output, each block instance is asked to return a block_contents object,
 * those are then passed to the $OUTPUT->block function for display.
 *
 * {@link $contents} should probably be generated using a moodle_block_..._renderer.
 *
 * Other block-like things that need to appear on the page, for example the
 * add new block UI, are also represented as block_contents objects.
 *
 * @copyright 2009 Tim Hunt
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class block_contents extends html_component {
    /** @var int used to set $skipid. */
    protected static $idcounter = 1;

    const NOT_HIDEABLE = 0;
    const VISIBLE = 1;
    const HIDDEN = 2;

    /**
     * @param integer $skipid All the blocks (or things that look like blocks)
     * printed on a page are given a unique number that can be used to construct
     * id="" attributes. This is set automatically be the {@link prepare()} method.
     * Do not try to set it manually.
     */
    public $skipid;

    /**
     * @var integer If this is the contents of a real block, this should be set to
     * the block_instance.id. Otherwise this should be set to 0.
     */
    public $blockinstanceid = 0;

    /**
     * @var integer if this is a real block instance, and there is a corresponding
     * block_position.id for the block on this page, this should be set to that id.
     * Otherwise it should be 0.
     */
    public $blockpositionid = 0;

    /**
     * @param array $attributes an array of attribute => value pairs that are put on the
     * outer div of this block. {@link $id} and {@link $classes} attributes should be set separately.
     */
    public $attributes = array();

    /**
     * @param string $title The title of this block. If this came from user input,
     * it should already have had format_string() processing done on it. This will
     * be output inside <h2> tags. Please do not cause invalid XHTML.
     */
    public $title = '';

    /**
     * @param string $content HTML for the content
     */
    public $content = '';

    /**
     * @param array $list an alternative to $content, it you want a list of things with optional icons.
     */
    public $footer = '';

    /**
     * Any small print that should appear under the block to explain to the
     * teacher about the block, for example 'This is a sticky block that was
     * added in the system context.'
     * @var string
     */
    public $annotation = '';

    /**
     * @var integer one of the constants NOT_HIDEABLE, VISIBLE, HIDDEN. Whether
     * the user can toggle whether this block is visible.
     */
    public $collapsible = self::NOT_HIDEABLE;

    /**
     * A (possibly empty) array of editing controls. Each element of this array
     * should be an array('url' => $url, 'icon' => $icon, 'caption' => $caption).
     * $icon is the icon name. Fed to $OUTPUT->pix_url.
     * @var array
     */
    public $controls = array();

    /**
     * @see html_component::prepare()
     * @return void
     */
    public function prepare(renderer_base $output, moodle_page $page, $target) {
        $this->skipid = self::$idcounter;
        self::$idcounter += 1;
        $this->add_class('sideblock');
        if (empty($this->blockinstanceid) || !strip_tags($this->title)) {
            $this->collapsible = self::NOT_HIDEABLE;
        }
        if ($this->collapsible == self::HIDDEN) {
            $this->add_class('hidden');
        }
        if (!empty($this->controls)) {
            $this->add_class('block_with_controls');
        }
        parent::prepare($output, $page, $target);
    }
}


/**
 * This class represents a target for where a block can go when it is being moved.
 *
 * This needs to be rendered as a form with the given hidden from fields, and
 * clicking anywhere in the form should submit it. The form action should be
 * $PAGE->url.
 *
 * @copyright 2009 Tim Hunt
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @since     Moodle 2.0
 */
class block_move_target extends html_component {
    /**
     * List of hidden form fields.
     * @var array
     */
    public $url = array();
    /**
     * List of hidden form fields.
     * @var array
     */
    public $text = '';
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_PROP
                            (AST_VAR)))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))