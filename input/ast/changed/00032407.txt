	public function testDeleteIdsIdxObjectTypeObject() {
		$client = new Elastica_Client();
		$data = array('username' => 'hans');
		$userSearch = 'username:hans';

		$index = $client->getIndex('test1');

		// Create the index, deleting it first if it already exists
		$index->create(array(), true);
		$type = $index->getType('user');

		// Adds 1 document to the index
		$doc = new Elastica_Document(null, $data);
		$result = $type->addDocument($doc);

		// Refresh index
		$index->refresh();

		$resultData = $result->getData();
		$ids = array($resultData['_id']);

		// Check to make sure the document is in the index
		$resultSet = $type->search($userSearch);
		$totalHits = $resultSet->getTotalHits();
		$this->assertEquals(1, $totalHits);

		// And verify that the variables we are doing to send to
		// deleteIds are the type we are testing for
		$this->assertEquals(true, ($index instanceof Elastica_Index));
		$this->assertEquals(true, ($type instanceof Elastica_Type));

		// Using the existing $index and $type variables which
		// are Elastica_Index and Elastica_Type objects respectively
		$resp = $client->deleteIds($ids, $index, $type);

		// Refresh the index to clear out deleted ID information
		$index->refresh();

		// Research the index to verify that the items have been deleted
		$resultSet = $type->search($userSearch);
		$totalHits = $resultSet->getTotalHits();
		$this->assertEquals(0, $totalHits);
	}
}||||||||	public function testDeleteIdsIdxObjectTypeObject() {
		$data = array('username' => 'hans');
		$userSearch = 'username:hans';

		$index = $this->_createIndex();

		// Create the index, deleting it first if it already exists
		$index->create(array(), true);
		$type = $index->getType('user');

		// Adds 1 document to the index
		$doc = new Elastica_Document(null, $data);
		$result = $type->addDocument($doc);

		// Refresh index
		$index->refresh();

		$resultData = $result->getData();
		$ids = array($resultData['_id']);

		// Check to make sure the document is in the index
		$resultSet = $type->search($userSearch);
		$totalHits = $resultSet->getTotalHits();
		$this->assertEquals(1, $totalHits);

		// And verify that the variables we are doing to send to
		// deleteIds are the type we are testing for
		$this->assertEquals(true, ($index instanceof Elastica_Index));
		$this->assertEquals(true, ($type instanceof Elastica_Type));

		// Using the existing $index and $type variables which
		// are Elastica_Index and Elastica_Type objects respectively
		$resp = $index->getClient()->deleteIds($ids, $index, $type);

		// Refresh the index to clear out deleted ID information
		$index->refresh();

		// Research the index to verify that the items have been deleted
		$resultSet = $type->search($userSearch);
		$totalHits = $resultSet->getTotalHits();
		$this->assertEquals(0, $totalHits);
	}
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONST)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_INSTANCEOF
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_INSTANCEOF
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY)
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONST)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_INSTANCEOF
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_INSTANCEOF
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))