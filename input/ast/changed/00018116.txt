	public static function load($class)
	{
		// First, we will check to see if the class has been aliased. If it has,
		// we will register the alias, which may cause the auto-loader to be
		// called again for the "real" class name.
		if (isset(static::$aliases[$class]))
		{
			class_alias(static::$aliases[$class], $class);
		}

		// All classes in Laravel are staticly mapped. There is no crazy search
		// routine that digs through directories. It's just a simple array of
		// class to file path maps for ultra-fast file loading.
		elseif (isset(static::$mappings[$class]))
		{
			require static::$mappings[$class];
		}

		elseif (($slash = strpos($class, '\\')) !== false)
		{
			$namespace = substr($class, 0, $slash);

			// If the class namespace is mapped to a directory, we will load the class
			// using the PSR-0 standards from that directory; however, we will trim
			// off the beginning of the namespace to account for files in the root
			// of the mapped directory.
			if ( ! is_null($directory = static::directory($class)))
			{
				return static::load_psr(substr($class, $slash + 1), $directory);
			}

			// If the class is namespaced to an existing bundle and the bundle has
			// not been started, we will start the bundle and attempt to load the
			// class file again. If that fails, an error will be thrown by PHP.
			//
			// This allows bundle classes to be loaded by the auto-loader before
			// their class mappings have actually been registered; however, it
			// is up to the bundle developer to namespace their classes to
			// match the name of their bundle.
			if (Bundle::exists($namespace) and ! Bundle::started($namespace))
			{
				Bundle::start(strtolower($namespace));

				static::load($class);
			}
		}

		// If the class is not maped and is not part of a bundle or a mapped
		// namespace, we'll make a last ditch effort to load the class via
		// the PSR-0 from one of the registered directories.
		static::load_psr($class);
	}

	/**
	 * Get the directory associated with a given namespaced class.
	 *
	 * @param  string  $class
	 * @return string
	 */
||||||||	public static function load($class)
	{
		// First, we will check to see if the class has been aliased. If it has,
		// we will register the alias, which may cause the auto-loader to be
		// called again for the "real" class name.
		if (isset(static::$aliases[$class]))
		{
			class_alias(static::$aliases[$class], $class);
		}

		// All classes in Laravel are staticly mapped. There is no crazy search
		// routine that digs through directories. It's just a simple array of
		// class to file path maps for ultra-fast file loading.
		elseif (isset(static::$mappings[$class]))
		{
			require static::$mappings[$class];
		}

		// If the class namespace is mapped to a directory, we will load the
		// class using the PSR-0 standards from that directory; however, we
		// will trim off the beginning of the namespace to account for
		// the root of the mapped directory.
		if ( ! is_null($info = static::namespaced($class)))
		{
			$class = substr($class, strlen($info['namespace']));

			return static::load_psr($class, $info['directory']);
		}

		elseif (($slash = strpos($class, '\\')) !== false)
		{
			$namespace = substr($class, 0, $slash);

			// If the class is namespaced to an existing bundle and the bundle has
			// not been started, we will start the bundle and attempt to load the
			// class file again. If that fails, an error will be thrown by PHP.
			//
			// This allows bundle classes to be loaded by the auto-loader before
			// their class mappings have actually been registered; however, it
			// is up to the bundle developer to namespace their classes to
			// match the name of their bundle.
			if (Bundle::exists($namespace) and ! Bundle::started($namespace))
			{
				Bundle::start(strtolower($namespace));

				static::load($class);
			}
		}

		// If the class is not maped and is not part of a bundle or a mapped
		// namespace, we'll make a last ditch effort to load the class via
		// the PSR-0 from one of the registered directories.
		static::load_psr($class);
	}

	/**
	 * Attempt to resolve a class using the PSR-0 standard.
	 *
	 * @param  string  $class
	 * @param  string  $directory
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (AST_VAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR)))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)))))))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_BINARY_OP
                                                    (AST_VAR)
                                                    (SCALAR))))
                                        (AST_VAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_UNARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_CALL
                    (
                        (AST_DIM
                            (AST_STATIC_PROP)
                            (AST_VAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_RETURN
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))
                            (AST_UNARY_OP
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)))))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_STATIC_CALL
        (
            (AST_VAR))))