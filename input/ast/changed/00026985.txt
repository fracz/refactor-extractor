    public function testBuildDeprecationsListCanCorrectCount()
    {
        $count = 99;

        $parser = $this->getMock(
            'phpDocumentor_Parser',
            array('getIgnoredTags'),
            array()
        );

        $parser->expects($this->any())
               ->method('getIgnoredTags')
               ->will($this->returnValue(array()));

        $exporter = $this->getMock(
            'phpDocumentor_Parser_Exporter_Xml',
            array('getNodeListForTagBasedQuery', 'buildNamespaceTree', 'buildMarkerList', 'filterVisibility'),
            array($parser)
        );

        $nodeList = new stdClass();
        $nodeList->length = $count;

        $exporter->expects($this->once())
                 ->method('getNodeListForTagBasedQuery')
                 ->will($this->returnValue($nodeList));

        $exporter->initialize();
        $exporter->finalize();

        $expected = new DOMDocument('1.0', 'utf-8');
        $expected->loadXML('<project version="2.0.0a1" title=""><deprecated count="'.$count.'"/></project>');
        $expected->formatOutput = true;

        $actual = $exporter->getDomDocument();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that buildMarkerList correctly counts and adds to xml
     *
     * @return type
     */
||||||||    public function testBuildDeprecationsListCanCorrectCount()
    {
        $count = 99;

        $parser = $this->getMock(
            'phpDocumentor_Parser',
            array('getIgnoredTags'),
            array()
        );

        $parser->expects($this->any())
               ->method('getIgnoredTags')
               ->will($this->returnValue(array()));

        $exporter = $this->getMock(
            'phpDocumentor_Parser_Exporter_Xml',
            array('getNodeListForTagBasedQuery', 'buildNamespaceTree', 'buildMarkerList', 'filterVisibility'),
            array($parser)
        );

        $nodeList = new stdClass();
        $nodeList->length = $count;

        $exporter->expects($this->once())
                 ->method('getNodeListForTagBasedQuery')
                 ->will($this->returnValue($nodeList));

        $exporter->initialize();
        $exporter->finalize();

        $expected = new DOMDocument('1.0', 'utf-8');
        $expected->loadXML(
            '<project version="'.phpDocumentor_Core_Abstract::VERSION
            .'" title=""><deprecated count="'.$count.'"/></project>'
        );
        $expected->formatOutput = true;

        $actual = $exporter->getDomDocument();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that buildMarkerList correctly counts and adds to xml
     *
     * @return type
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))