    protected function parse_branch_to_html($navarray, $firstnode=true, $moreafterthis=false) {
        global $CFG;
        $separator = get_separator();
        $output = '';
        if ($firstnode===true) {
            // If this is the first node add the class first and display the
            // navbar properties (normally sitename)
            $output .= '<li class="first">'.parent::content(true).'</li>';
        }
        $count = 0;
        if (!is_array($navarray)) return $output;
        // Iterate the navarray and display each node
        while (count($navarray)>0) {
            // Sanity check make sure we don't display WAY too much information
            // on the navbar. If we get to 20 items just stop!
            $count++;
            if ($count>20) {
                // Maximum number of nodes in the navigation branch
                return $output;
            }
            $child = false;
            // Iterate the nodes in navarray and find the active node
            foreach ($navarray as $tempchild) {
                if ($tempchild->isactive || $tempchild->contains_active_node()) {
                    $child = $tempchild;
                    // We've got the first child we can break out of this foreach
                    break;
                }
            }
            // Check if we found the child
            if ($child===false || $child->mainnavonly) {
                // Set navarray to an empty array so that we complete the while
                $navarray = array();
            } else {
                // We found an/the active node, set navarray to it's children so that
                // we come back through this while with the children of the active node
                $navarray = $child->children;
                // If there are not more arrays being processed after this AND this is the last element
                // then we want to set the action to null so that it is not used
                if (!$moreafterthis && (!$child->contains_active_node() || ($child->find_active_node()==false || $child->find_active_node()->mainnavonly))) {
                    $oldaction = $child->action;
                    $child->action = null;
                }
                if ($child->type !== navigation_node::TYPE_CATEGORY || !isset($CFG->navshowcategories) || !empty($CFG->navshowcategories)) {
                    // Now display the node
                    $output .= '<li>'.$separator.' '.$child->content(true).'</li>';
                }
                if (isset($oldaction)) {
                    $child->action = $oldaction;
                }
            }
        }
        // XHTML
        return $output;
    }
    /**
     * Add a new node to the navbar, overrides parent::add
     *
     * This function overrides {@link navigation_node::add()} so that we can change
     * the way nodes get added to allow us to simply call add and have the node added to the
     * end of the navbar
     *
     * @param string $text
     * @param string|moodle_url $action
     * @param int $type
     * @param string|int $key
     * @param string $shorttext
     * @param string $icon
     * @return string|int Identifier for this particular node
     */
||||||||    protected function parse_branch_to_html($navarray, $firstnode=true) {
        global $CFG;
        $separator = get_separator();
        $output = '';
        if ($firstnode===true) {
            // If this is the first node add the class first and display the
            // navbar properties (normally sitename)
            $output .= html_writer::tag('li', array('class'=>'first'), parent::content(true));
        }
        $count = 0;
        if (!is_array($navarray)) {
            return $output;
        }
        // Iterate the navarray and display each node
        while (count($navarray)>0) {
            // Sanity check make sure we don't display WAY too much information
            // on the navbar. If we get to 20 items just stop!
            $count++;
            if ($count>20) {
                // Maximum number of nodes in the navigation branch
                return $output;
            }
            $child = false;
            // Iterate the nodes in navarray and find the active node
            foreach ($navarray as $tempchild) {
                if ($tempchild->isactive || $tempchild->contains_active_node()) {
                    $child = $tempchild;
                    // We've got the first child we can break out of this foreach
                    break;
                }
            }
            // Check if we found the child
            if ($child===false || $child->mainnavonly) {
                // Set navarray to an empty array so that we complete the while
                $navarray = array();
            } else {
                // We found an/the active node, set navarray to it's children so that
                // we come back through this while with the children of the active node
                $navarray = $child->children;
                // If there are not more arrays being processed after this AND this is the last element
                // then we want to set the action to null so that it is not used
                if (empty($this->children) && (!$child->contains_active_node() || ($child->find_active_node()==false || $child->find_active_node()->mainnavonly))) {
                    $oldaction = $child->action;
                    $child->action = null;
                }
                if ($child->type !== navigation_node::TYPE_CATEGORY || !isset($CFG->navshowcategories) || !empty($CFG->navshowcategories)) {
                    // Now display the node
                    $output .= html_writer::tag('li', null, $separator.' '.$child->content(true));
                }
                if (isset($oldaction)) {
                    $child->action = $oldaction;
                }
            }
        }

        if (!empty($this->children)) {
            // Add the custom children
            $output .= $this->parse_branch_to_html($this->children, false, false);
        }

        // XHTML
        return $output;
    }
    /**
     * Add a new node to the navbar, overrides parent::add
     *
     * This function overrides {@link navigation_node::add()} so that we can change
     * the way nodes get added to allow us to simply call add and have the node added to the
     * end of the navbar
     *
     * @param string $text
     * @param string|moodle_url $action
     * @param int $type
     * @param string|int $key
     * @param string $shorttext
     * @param string $icon
     * @return string|int Identifier for this particular node
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_CONST))))
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR))
        (
            (AST_POST_INC
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_RETURN
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_VAR))
                                (AST_BREAK
                                    (NULL)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_VAR))
                                    (AST_BINARY_OP
                                        (AST_UNARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_CONST))
                                            (AST_PROP
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (AST_UNARY_OP
                                            (AST_ISSET
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (AST_UNARY_OP
                                        (AST_EMPTY
                                            (AST_PROP
                                                (AST_VAR)))))
                                (
                                    (AST_ASSIGN_OP
                                        (AST_VAR)
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_METHOD_CALL
                                                    (AST_VAR)
                                                    (
                                                        (AST_CONST))))
                                            (SCALAR))))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_ISSET
                                    (AST_VAR))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (SCALAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (SCALAR)
                                    (SCALAR)))
                            (AST_STATIC_CALL
                                (
                                    (AST_CONST)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR))
        (
            (AST_POST_INC
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_RETURN
                            (AST_VAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_VAR))
                                (AST_BREAK
                                    (NULL)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_ARRAY))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_PROP
                                (AST_VAR)))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_EMPTY
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_BINARY_OP
                                        (AST_UNARY_OP
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_METHOD_CALL
                                                    (AST_VAR))
                                                (AST_CONST))
                                            (AST_PROP
                                                (AST_METHOD_CALL
                                                    (AST_VAR))))))
                                (
                                    (AST_ASSIGN
                                        (AST_VAR)
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_CONST)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (AST_UNARY_OP
                                            (AST_ISSET
                                                (AST_PROP
                                                    (AST_VAR)))))
                                    (AST_UNARY_OP
                                        (AST_EMPTY
                                            (AST_PROP
                                                (AST_VAR)))))
                                (
                                    (AST_ASSIGN_OP
                                        (AST_VAR)
                                        (AST_STATIC_CALL
                                            (
                                                (SCALAR)
                                                (AST_CONST)
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (AST_VAR)
                                                        (SCALAR))
                                                    (AST_METHOD_CALL
                                                        (AST_VAR)
                                                        (
                                                            (AST_CONST))))))))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_ISSET
                                    (AST_VAR))
                                (
                                    (AST_ASSIGN
                                        (AST_PROP
                                            (AST_VAR))
                                        (AST_VAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_EMPTY
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))
                            (AST_CONST)
                            (AST_CONST)))))))
    (AST_RETURN
        (AST_VAR)))