  public function prepare() {
    $revision = $this->revision;

    $fields = array();
    if ($revision->getSummary()) {
      $fields[] =
        new DifferentialCommitMessageField('Summary', $revision->getSummary());
    }

    $fields[] =
      new DifferentialCommitMessageField('Test Plan', $revision->getTestPlan());

    $reviewer = null;
    $commenters = array();
    $revision->loadRelationships();

    if ($this->mode == self::MODE_AMEND) {
      $reviewer = $this->getReviewer();
      $commenters = $this->getCommenters();
    }

    $reviewers = $revision->getReviewers();
    $ccphids = $revision->getCCPHIDs();

    $phids = array_merge($ccphids, $commenters, $reviewers);
    if ($reviewer) {
      $phids[] = $reviewer;
    }

    $handles = id(new PhabricatorObjectHandleData($phids))
      ->loadHandles();

    if ($this->mode == self::MODE_AMEND) {
      if ($reviewer) {
        $fields[] =
          new DifferentialCommitMessageField('Reviewed By',
                                             $handles[$reviewer]->getName());
      }
    }

    if ($reviewers) {
      $reviewer_names = array();
      foreach ($reviewers as $uid) {
        $reviewer_names[] = $handles[$uid]->getName();
      }
      $reviewer_names = implode(', ', $reviewer_names);
      $fields[] = new DifferentialCommitMessageField('Reviewers',
                                                     $reviewer_names);
    }

    $user_handles = array_select_keys($handles, $commenters);
    if ($user_handles) {
      $commenters = implode(', ', mpull($user_handles, 'getName'));
      $fields[] = new DifferentialCommitMessageField('Commenters', $commenters);
    }

    $cc_handles = array_select_keys($handles, $ccphids);
    if ($cc_handles) {
      $cc = implode(', ', mpull($cc_handles, 'getName'));
      $fields[] = new DifferentialCommitMessageField('CC', $cc);
    }

    if ($revision->getRevertPlan()) {
      $fields[] =
        new DifferentialCommitMessageField('Revert Plan',
                                           $revision->getRevertPlan());
    }

    if ($revision->getBlameRevision()) {
      $fields[] =
        new DifferentialCommitMessageField('Blame Revision',
                                           $revision->getBlameRevision());
    }

    if ($this->mode == self::MODE_EDIT) {
      // In edit mode, include blank fields.
      $fields += array(
        new DifferentialCommitMessageField('Summary', ''),
        new DifferentialCommitMessageField('Reviewers', ''),
        new DifferentialCommitMessageField('CC', ''),
        new DifferentialCommitMessageField('Revert Plan', ''),
        new DifferentialCommitMessageField('Blame Revision', ''),
      );
    }

    $fields[] =
      new DifferentialCommitMessageField('Title', $revision->getTitle());

    $fields[] = new DifferentialCommitMessageField('Differential Revision',
                                                   $revision->getID());

    // append custom commit message fields
    $modify_class = PhabricatorEnv::getEnvConfig(
      'differential.modify-commit-message-class');

    if ($modify_class) {
      $modifier = newv($modify_class, array($revision));
      $fields = $modifier->modifyFields($fields);
    }

    $this->fields = $fields;
  }

||||||||  public function prepare() {
    $revision = $this->revision;

    if ($revision->getSummary()) {
      $this->setField('Summary', $revision->getSummary());
    }

    $this->setField('Test Plan', $revision->getTestPlan());

    $reviewer = null;
    $commenters = array();
    $revision->loadRelationships();

    if ($this->mode == self::MODE_AMEND) {
      $reviewer = $this->getReviewer();
      $commenters = $this->getCommenters();
    }

    $reviewers = $revision->getReviewers();
    $ccphids = $revision->getCCPHIDs();

    $phids = array_merge($ccphids, $commenters, $reviewers);
    if ($reviewer) {
      $phids[] = $reviewer;
    }

    $handles = id(new PhabricatorObjectHandleData($phids))
      ->loadHandles();

    if ($this->mode == self::MODE_AMEND) {
      if ($reviewer) {
        $this->setField('Reviewed By', $handles[$reviewer]->getName());
      }
    }

    if ($reviewers) {
      $reviewer_names = array();
      foreach ($reviewers as $uid) {
        $reviewer_names[] = $handles[$uid]->getName();
      }
      $reviewer_names = implode(', ', $reviewer_names);
      $this->setField('Reviewers', $reviewer_names);
    }

    $user_handles = array_select_keys($handles, $commenters);
    if ($user_handles) {
      $commenters = implode(', ', mpull($user_handles, 'getName'));
      $this->setField('Commenters', $commenters);
    }

    $cc_handles = array_select_keys($handles, $ccphids);
    if ($cc_handles) {
      $cc = implode(', ', mpull($cc_handles, 'getName'));
      $this->setField('CC', $cc);
    }

    if ($revision->getRevertPlan()) {
      $this->setField('Revert Plan', $revision->getRevertPlan());
    }

    if ($revision->getBlameRevision()) {
      $this->setField('Blame Revision', $revision->getBlameRevision());
    }

    if ($this->mode == self::MODE_EDIT) {
      // In edit mode, include blank fields.
      $blank_fields = array('Summary', 'Reviewers', 'CC', 'Revert Plan',
                            'Blame Revision');
      foreach ($blank_fields as $blank_field) {
        if (!$this->getField($blank_field)) {
          $this->setField($blank_field, '');
        }
      }
    }

    $this->setField('Title', $revision->getTitle());
    $this->setField('Differential Revision', $revision->getID());

    // append custom commit message fields
    $modify_class = PhabricatorEnv::getEnvConfig(
      'differential.modify-commit-message-class');

    if ($modify_class) {
      $modifier = newv($modify_class, array($revision));
      $fields = $modifier->modifyFields($fields);
    }
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_NEW
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_VAR)
                                    (NULL))
                                (AST_NEW
                                    (
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_DIM
                                                (AST_VAR)
                                                (AST_VAR))))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_NEW
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (SCALAR)))
                            (NULL)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_NEW
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_NEW
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_DIM
                        (AST_VAR)
                        (NULL))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW
                        (
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)
                                    (AST_METHOD_CALL
                                        (AST_DIM
                                            (AST_VAR)
                                            (AST_VAR)))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_VAR)
                                (NULL))
                            (AST_METHOD_CALL
                                (AST_DIM
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))))
                (AST_FOREACH
                    (AST_VAR)
                    (AST_VAR)
                    (NULL)
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_VAR)
                                            (SCALAR)))))))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_VAR)
                                    (NULL))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))))