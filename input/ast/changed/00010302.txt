	protected function _getSchema() {
		$source = ConnectionManager::get($this->params['connection']);
		if (!method_exists($source, 'schemaCollection')) {
			$msg = sprintf('The "%s" connection is not compatible with orm caching, ' .
				'as it does not implement a "schemaCollection()" method.',
				$this->params['connection']);
			$this->error($msg);
			return false;
		}
		return $source->schemaCollection();
	}

/**
 * Get the option parser for this shell.
 *
 * @return \Cake\Console\ConsoleOptionParser
 */
||||||||	protected function _getSchema() {
		$source = ConnectionManager::get($this->params['connection']);
		if (!method_exists($source, 'schemaCollection')) {
			$msg = sprintf('The "%s" connection is not compatible with orm caching, ' .
				'as it does not implement a "schemaCollection()" method.',
				$this->params['connection']);
			$this->error($msg);
			return false;
		}
		$config = $source->config();
		if (empty($config['cacheMetadata'])) {
			$this->_io->verbose('Metadata cache was disabled in config. Enabling to clear cache.');
			$source->cacheMetadata(true);
		}
		return $source->schemaCollection();
	}

/**
 * Get the option parser for this shell.
 *
 * @return \Cake\Console\ConsoleOptionParser
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_CONST))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))