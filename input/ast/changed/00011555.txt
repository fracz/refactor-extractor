    public static function incrementCounter($ctr, $inc, &$config)
    {
        static $ivsize = null;
        if ($ivsize === null) {
            $ivsize = \openssl_cipher_iv_length($config['CIPHER_METHOD']);
        }

        // XXX: check the range and type of $ctr, $inc

        /**
         * We start at the rightmost byte (big-endian)
         * So, too, does OpenSSL: http://stackoverflow.com/a/3146214/2224584
         */
        for ($i = $ivsize - 1; $i >= 0; --$i) {
            $sum = \ord($ctr[$i]) + $inc;
            $ctr[$i] = \chr($sum & 0xFF);
            $inc = $sum >> 8;
        }
        return $ctr;
    }

    /**
     * Returns a random binary string of length $octets bytes.
     *
     * @param int $octets
     * @return string (raw binary)
     * @throws Ex\CannotPerformOperationException
     */
||||||||    public static function incrementCounter($ctr, $inc, &$config)
    {
        static $ivsize = null;
        if ($ivsize === null) {
            $ivsize = \openssl_cipher_iv_length($config['CIPHER_METHOD']);
            if ($ivsize === false) {
                throw new Ex\CannotPerformOperationException(
                    "Problem obtaining the correct nonce length."
                );
            }
        }

        if (strlen($ctr) !== $ivsize) {
            throw new Ex\CannotPerformOperationException(
                "Trying to increment a nonce of the wrong size."
            );
        }

        if (!is_int($inc)) {
            throw new Ex\CannotPerformOperationException(
                "Trying to increment nonce by a non-integer."
            );
        }

        if ($inc < 0) {
            throw new Ex\CannotPerformOperationException(
                "Trying to increment nonce by a negative amount."
            );
        }

        /**
         * We start at the rightmost byte (big-endian)
         * So, too, does OpenSSL: http://stackoverflow.com/a/3146214/2224584
         */
        for ($i = $ivsize - 1; $i >= 0; --$i) {
            $sum = \ord($ctr[$i]) + $inc;

            /* Detect integer overflow and fail. */
            if (!is_int($sum)) {
                throw new Ex\CannotPerformOperationException(
                    "Integer overflow in CTR mode nonce increment."
                );
            }

            $ctr[$i] = \chr($sum & 0xFF);
            $inc = $sum >> 8;
        }
        return $ctr;
    }

    /**
     * Returns a random binary string of length $octets bytes.
     *
     * @param int $octets
     * @return string (raw binary)
     * @throws Ex\CannotPerformOperationException
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_DEC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_STATIC
        (AST_VAR)
        (AST_CONST))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CONST))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (SCALAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_VAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_PRE_DEC
                (AST_VAR)))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_DIM
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_RETURN
        (AST_VAR)))