    public static function purgeInvalidatedArchives()
    {
        $archiveTables = ArchiveTableCreator::getTablesArchivesInstalled();

        foreach ($archiveTables as $archiveTable) {
            /**
             * Select the archives that have already been invalidated and have been since re-processed.
             * It purges records for each distinct { archive name (includes segment hash) , idsite, date, period } tuple.
             */
            $query = '
                SELECT t1.idarchive FROM `' . $archiveTable . '` t1
                INNER JOIN `' . $archiveTable . '` t2
                    ON t1.name = t2.name AND t1.idsite=t2.idsite
                    AND t1.date1=t2.date1 AND t1.date2=t2.date2 AND t1.period=t2.period
                WHERE t1.value = ' . ArchiveWriter::DONE_INVALIDATED . '
                AND t2.value IN(' . ArchiveWriter::DONE_OK . ', ' . ArchiveWriter::DONE_OK_TEMPORARY . ')
                AND t1.ts_archived < t2.ts_archived AND t1.name LIKE \'done%\'';

            $result = Db::fetchAll($query);

            if (count($result) > 0) {
                $archiveIds = array_map(
                    function ($elm) {
                        return $elm['idarchive'];
                    },
                    $result
                );

                $date = ArchiveTableCreator::getDateFromTableName($archiveTable);
                $date = Date::factory(str_replace('_', '-', $date) . '-01');

                self::deleteArchiveIds($date, $archiveIds);
            }

        }
    }


||||||||    public static function purgeInvalidatedArchives()
    {
        $archiveTables = ArchiveTableCreator::getTablesArchivesInstalled();

        foreach ($archiveTables as $archiveTable) {
            /**
             * Select the archives that have already been invalidated and have been since re-processed.
             * It purges records for each distinct { archive name (includes segment hash) , idsite, date, period } tuple.
             */
            $result = self::getModel()->purgeInvalidatedArchiveTable($archiveTable);

            if (count($result) > 0) {
                $archiveIds = array_map(
                    function ($elm) {
                        return $elm['idarchive'];
                    },
                    $result
                );

                $date = ArchiveTableCreator::getDateFromTableName($archiveTable);
                $date = Date::factory(str_replace('_', '-', $date) . '-01');

                self::deleteArchiveIds($date, $archiveIds);
            }

        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (AST_BINARY_OP
                                                        (SCALAR)
                                                        (AST_VAR))
                                                    (SCALAR))
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (SCALAR))
                        (AST_CLASS_CONST
                            (SCALAR)))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_CLOSURE
                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                        (NULL)
                                        (
                                            (AST_RETURN
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR)))))
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (SCALAR)
                                                (AST_VAR)))
                                        (SCALAR)))))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_STATIC_CALL)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_CLOSURE
                                        (NO_PARAM_TYPENO_PARAM_DEFAULT)
                                        (NULL)
                                        (
                                            (AST_RETURN
                                                (AST_DIM
                                                    (AST_VAR)
                                                    (SCALAR)))))
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_CALL
                                            (
                                                (SCALAR)
                                                (SCALAR)
                                                (AST_VAR)))
                                        (SCALAR)))))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))))))))