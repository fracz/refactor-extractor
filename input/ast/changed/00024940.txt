    public function __construct()
    {
        parent::__construct();

        BackendMenu::setContext('October.Cms', 'cms', 'pages');

        try {
            if (!($theme = Theme::getEditTheme()))
                throw new ApplicationException(Lang::get('cms::lang.theme.edit.not_found'));

            $this->theme = $theme;

            new TemplateList($this, 'pageList', function() use ($theme) {
                return Page::listInTheme($theme, true);
            });

            new TemplateList($this, 'partialList', function() use ($theme) {
                return Partial::listInTheme($theme, true);
            });

            new TemplateList($this, 'layoutList', function() use ($theme) {
                return Layout::listInTheme($theme, true);
            });

            new TemplateList($this, 'contentList', function() use ($theme) {
                return Content::listInTheme($theme, true);
            });

            new ComponentList($this, 'componentList');

            new AssetList($this, 'assetList');
        }
        catch (Exception $ex) {
            $this->handleError($ex);
        }

        $this->addJs('/modules/cms/assets/js/october.cmspage.js', 'core');
        $this->addJs('/modules/cms/assets/js/october.dragcomponents.js', 'core');
        $this->addCss('/modules/cms/assets/css/october.components.css', 'core');

        // Preload Ace editor modes explicitly, because they could be changed dynamically
        // depending on a content block type
        $this->addJs('/modules/backend/formwidgets/codeeditor/assets/vendor/ace/ace.js', 'core');

        $aceModes = ['markdown', 'plain_text', 'html', 'less', 'css', 'scss', 'sass', 'javascript'];
        foreach ($aceModes as $mode)
            $this->addJs('/modules/backend/formwidgets/codeeditor/assets/vendor/ace/mode-'.$mode.'.js', 'core');

        $this->bodyClass = 'compact-container side-panel-not-fixed';
        $this->pageTitle = Lang::get('cms::lang.cms.menu_label');
        $this->pageTitleTemplate = '%s CMS | October';
    }

    //
    // Pages
    //

||||||||    public function __construct()
    {
        parent::__construct();

        BackendMenu::setContext('October.Cms', 'cms', 'pages');

        try {
            if (!($theme = Theme::getEditTheme()))
                throw new ApplicationException(Lang::get('cms::lang.theme.edit.not_found'));

            $this->theme = $theme;

            new TemplateList($this, 'pageList', function() use ($theme) {
                return Page::listInTheme($theme, true);
            });

            new TemplateList($this, 'partialList', function() use ($theme) {
                return Partial::listInTheme($theme, true);
            });

            new TemplateList($this, 'layoutList', function() use ($theme) {
                return Layout::listInTheme($theme, true);
            });

            new TemplateList($this, 'contentList', function() use ($theme) {
                return Content::listInTheme($theme, true);
            });

            new ComponentList($this, 'componentList');

            new AssetList($this, 'assetList');
        }
        catch (Exception $ex) {
            $this->handleError($ex);
        }
    }

    //
    // Pages
    //

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (SCALAR)))))))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_STATIC_CALL)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (AST_STATIC_CALL
                                        (
                                            (SCALAR)))))))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR)
                                        (AST_CONST))))))))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR)))
            (AST_NEW
                (
                    (AST_VAR)
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (NULL)))