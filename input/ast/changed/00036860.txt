    final public function autoLogin(Request $request)
    {
        if (null === $cookie = $request->cookies->get($this->options['name'])) {
            return;
        }

        if (null !== $this->logger) {
            $this->logger->debug('Remember-me cookie detected.');
        }

        $cookieParts = $this->decodeCookie($cookie);

        try {
            $user = $this->processAutoLoginCookie($cookieParts, $request);

            if (!$user instanceof UserInterface) {
                throw new \RuntimeException('processAutoLoginCookie() must return a UserInterface implementation.');
            }

            if (null !== $this->logger) {
                $this->logger->info('Remember-me cookie accepted.');
            }

            return new RememberMeToken($user, $this->providerKey, $this->key);
        } catch (CookieTheftException $theft) {
            $this->cancelCookie($request);

            throw $theft;
        } catch (UsernameNotFoundException $notFound) {
            if (null !== $this->logger) {
                $this->logger->info('User for remember-me cookie not found.');
            }
        } catch (UnsupportedUserException $unSupported) {
            if (null !== $this->logger) {
                $this->logger->warning('User class for remember-me cookie not supported.');
            }
        } catch (AuthenticationException $invalid) {
            if (null !== $this->logger) {
                $this->logger->debug('Remember-Me authentication failed: '.$invalid->getMessage());
            }
        }

        $this->cancelCookie($request);
    }

    /**
     * Implementation for LogoutHandlerInterface. Deletes the cookie.
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token
     */
||||||||    final public function autoLogin(Request $request)
    {
        if (null === $cookie = $request->cookies->get($this->options['name'])) {
            return;
        }

        if (null !== $this->logger) {
            $this->logger->debug('Remember-me cookie detected.');
        }

        $cookieParts = $this->decodeCookie($cookie);

        try {
            $user = $this->processAutoLoginCookie($cookieParts, $request);

            if (!$user instanceof UserInterface) {
                throw new \RuntimeException('processAutoLoginCookie() must return a UserInterface implementation.');
            }

            if (null !== $this->logger) {
                $this->logger->info('Remember-me cookie accepted.');
            }

            return new RememberMeToken($user, $this->providerKey, $this->key);
        } catch (CookieTheftException $theft) {
            $this->cancelCookie($request);

            throw $theft;
        } catch (UsernameNotFoundException $notFound) {
            if (null !== $this->logger) {
                $this->logger->info('User for remember-me cookie not found.');
            }
        } catch (UnsupportedUserException $unSupported) {
            if (null !== $this->logger) {
                $this->logger->warning('User class for remember-me cookie not supported.');
            }
        } catch (AuthenticationException $invalid) {
            if (null !== $this->logger) {
                $this->logger->debug('Remember-Me authentication failed.', array('exception' => $invalid));
            }
        }

        $this->cancelCookie($request);
    }

    /**
     * Implementation for LogoutHandlerInterface. Deletes the cookie.
     *
     * @param Request        $request
     * @param Response       $response
     * @param TokenInterface $token
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_INSTANCEOF
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR))))))
            (AST_RETURN
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR))))))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR))))))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))))))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CONST)
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_INSTANCEOF
                            (AST_VAR)))
                    (
                        (AST_THROW
                            (AST_NEW
                                (
                                    (SCALAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CONST)
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR))))))
            (AST_RETURN
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (AST_THROW
                        (AST_VAR))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR))))))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR))))))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_CONST)
                                (AST_PROP
                                    (AST_VAR)))
                            (
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_VAR))
                                    (
                                        (SCALAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (SCALAR)))))))))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))