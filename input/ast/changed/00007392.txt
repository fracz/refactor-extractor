	public function testValidatesEmailIsValid() {
		$post = MockPostForValidates::create(array(
			'title' => 'new post', 'email' => 'something@test.com'
		));

		$result = $post->validates();
		$this->assertTrue($result === true);
		$this->assertTrue(empty($post->errors));
	}
	/*
	* @todo create proper mock objects for the following test
	*
	public function testFindAll() {
	    $tags = MockTag::find('all', array('conditions' => array('id' => 2)));

		$this->assertTrue($tags instanceof \lithium\data\model\RecordSet);
		$this->assertEqual(1, $tags->count());
		$tag = $tags->rewind();
		$this->assertTrue($tag instanceof \lithium\data\model\Record);

		$tags2 = MockTag::find('all', array('conditions' => array('id' => 3)));

		$this->assertEqual(0, $tags2->count());
	}

	public function testFindFirst() {
	    $tag = MockTag::find('first', array('conditions' => array('id' => 2)));

		$this->assertTrue($tag instanceof \lithium\data\model\Record);
		$this->assertEqual('2', $tag->id);

		$tag2 = MockTag::find('first', array('conditions' => array('id' => 3)));

		$this->assertNull($tag2);

		$tag = MockTag::find(2);

		$this->assertTrue($tag instanceof \lithium\data\model\Record);
		$this->assertEqual('2', $tag->id);

		$tag2 = MockTag::find(3);

		$this->assertNull($tag2);
	}
	*/
}

?>||||||||	public function testValidatesEmailIsValid() {
		$post = MockPostForValidates::create(array(
			'title' => 'new post', 'email' => 'something@test.com'
		));

		$result = $post->validates();
		$this->assertTrue($result === true);
		$result = $post->errors();
		$this->assertTrue(empty($result));
	}
	/*
	* @todo create proper mock objects for the following test
	*
	public function testFindAll() {
	    $tags = MockTag::find('all', array('conditions' => array('id' => 2)));

		$this->assertTrue($tags instanceof \lithium\data\model\RecordSet);
		$this->assertEqual(1, $tags->count());
		$tag = $tags->rewind();
		$this->assertTrue($tag instanceof \lithium\data\model\Record);

		$tags2 = MockTag::find('all', array('conditions' => array('id' => 3)));

		$this->assertEqual(0, $tags2->count());
	}

	public function testFindFirst() {
	    $tag = MockTag::find('first', array('conditions' => array('id' => 2)));

		$this->assertTrue($tag instanceof \lithium\data\model\Record);
		$this->assertEqual('2', $tag->id);

		$tag2 = MockTag::find('first', array('conditions' => array('id' => 3)));

		$this->assertNull($tag2);

		$tag = MockTag::find(2);

		$this->assertTrue($tag instanceof \lithium\data\model\Record);
		$this->assertEqual('2', $tag->id);

		$tag2 = MockTag::find(3);

		$this->assertNull($tag2);
	}
	*/
}

?>||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_EMPTY
                (AST_PROP
                    (AST_VAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_EMPTY
                (AST_VAR)))))