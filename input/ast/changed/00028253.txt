    public function double($class = 'stdClass', $stubs = array(),
                           $arguments = array())
    {
        if (is_dir(__DIR__ . '/../Mocks')) {
            $double = new \PHPSpec\Mocks\Mock();
            $double = $double->create($class, array(), $arguments);
            if (!empty($stubs)) {
                foreach ($stubs as $stub => $value) {
                    $double->stub($stub)->andReturn($value);
                }
            }
            return $double;
        }
        throw new \PHPSpec\Exception('PHPSpec_Mocks is not installed');
    }

    /**
     * Wrapper for {@link \PHPSpec\Mocks\Mock} factory
     *
     * @param string $class
     * @param array  $stubs
     * @param array  $arguments
     * @return object
     */
||||||||    public function double($class = 'stdClass')
    {
        if (class_exists('Mockery')) {
            $double = \Mockery::mock($class);
            return $double;
        }
        throw new \PHPSpec\Exception('Mockery is not installed');
    }

    /**
     * Wrapper for {@link \PHPSpec\Mocks\Mock} factory
     *
     * @param string $class
     * @param array  $stubs
     * @param array  $arguments
     * @return object
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_BINARY_OP
                        (AST_MAGIC_CONST)
                        (SCALAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)
                            (AST_ARRAY)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_EMPTY
                                (AST_VAR)))
                        (
                            (AST_FOREACH
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)
                                (
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)))
                                        (
                                            (AST_VAR))))))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL
                        (
                            (AST_VAR))))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (SCALAR)))))