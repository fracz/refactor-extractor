    public static function asort_objects_by_method(array &$objects, $method) {
        $comparison = new collatorlib_method_comparison($method);
        return uasort($objects, array($comparison, 'compare'));
    }
}

/**
 * Object comparison using collator
 *
 * Abstract class to aid the sorting of objects with respect to proper language
 * comparison using collator
 *
 * @package   core
 * @copyright 2011 Sam Hemelryk
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
abstract class collatorlib_comparison {
    /**
     * This function will perform the actual comparison of values
     * It must be overridden by the deriving class.
     *
     * Returns:
     *   1 if str1 is greater than str2
     *   0 if str1 is equal to str2
     *  -1 if str1 is less than str2
     *
     * @param mixed $a The first something to compare
     * @param mixed $b The second something to compare
     * @return int
     */
    public abstract function compare($a, $b);
}

/**
 * Compare properties of two objects
 *
 * A comparison helper for comparing properties of two objects
 *
 * @package   core
 * @category  string
 * @copyright 2011 Sam Hemelryk
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class collatorlib_property_comparison extends collatorlib_comparison {

    /** @var string The property to sort by **/
    protected $property;

    /**
     * Constructor
     *
     * @param string $property
     */
    public function __construct($property) {
        $this->property = $property;
    }

    /**
     * Returns:
     *   1 if str1 is greater than str2
     *   0 if str1 is equal to str2
     *  -1 if str1 is less than str2
     *
     * @param mixed $obja The first object to compare
     * @param mixed $objb The second object to compare
     * @return int
     */
    public function compare($obja, $objb) {
        $resulta = $obja->{$this->property};
        $resultb = $objb->{$this->property};
        return collatorlib::compare($resulta, $resultb);
    }
}

/**
 * Compare method of two objects
 *
 * A comparison helper for comparing the result of a method on two objects
 *
 * @package   core
 * @copyright 2011 Sam Hemelryk
 * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */
class collatorlib_method_comparison extends collatorlib_comparison {

    /** @var string The method to use for comparison **/
    protected $method;

    /**
     * Constructor
     *
     * @param string $method The method to call against each object
     */
    public function __construct($method) {
        $this->method = $method;
    }

    /**
     * Returns:
     *   1 if str1 is greater than str2
     *   0 if str1 is equal to str2
     *  -1 if str1 is less than str2
     *
     * @param mixed $obja The first object to compare
     * @param mixed $objb The second object to compare
     * @return int
     */
    public function compare($obja, $objb) {
        $resulta = $obja->{$this->method}();
        $resultb = $objb->{$this->method}();
        return collatorlib::compare($resulta, $resultb);
    }
}||||||||    public static function asort_objects_by_method(array &$objects, $method, $sortflag = collatorlib::SORT_STRING) {
        $original = $objects;
        foreach ($objects as $key => $object) {
            $objects[$key] = $object->{$method}();
        }
        $result = self::asort($objects, $sortflag);
        self::restore_array($objects, $original);
        return $result;
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (NULL)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))