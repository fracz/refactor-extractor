    public static function fromContextAndString(
        Context $context,
        string $fqsen_string
    ) : FQSEN {
        $elements =
            explode('::', $fqsen_string);

        $fq_class_name = $elements[0] ?? '';

        $method_elements = $elements[1] ?? '';

        $matches = [];
        preg_match('/^([^{]*)({(.*)})?$/', $method_elements, $matches);

        $method_name = $matches[1] ?? '';
        $closure_name = $matches[3] ?? '';

        $fq_class_name_elements =
            array_filter(explode('\\', $fq_class_name));

        $class_name =
            array_pop($fq_class_name_elements);

        $namespace =
            '\\' . implode('\\', $fq_class_name_elements);

        // If we're not fully qualified, check to see if its mapped
        if (0 !== strpos($fqsen_string, '\\')) {
            // Check for a class name map
            if ($class_name
                && $context->hasNamespaceMapFor(T_CLASS, $class_name)
            ) {
                $namespace =
                    (string)$context->getNamespaceMapFor(
                        T_CLASS,
                        $class_name
                    );
            }

            // Check for a method map
            if ($method_name
                && $context->hasNamespaceMapFor(T_FUNCTION, $method_name)
            ) {
                $namespace =
                    (string)$context->getNamespaceMapFor(T_FUNCTION, $method_name);
            }
        }

        // Clean it on up
        $namespace = self::cleanNamespace($namespace);

        return new FQSEN(
            $namespace ?: '\\',
            $class_name ?: '',
            $method_name ?: '',
            $closure_name ?: ''
        );
    }

    /**
     * @param $fqsen_string
     * An FQSEN string like '\Namespace\Class::method' or
     * 'Class' or 'Class::method'.
     *
     * @return FQSEN
     */
||||||||    public static function fromContextAndString(
        Context $context,
        string $fqsen_string
    ) : FQSEN {

        $parts =
            explode('\'', $fqsen_string);

        $fqsen_string = $parts[0];
        $alternate_id = $parts[1] ?? null;

        $elements =
            explode('::', $fqsen_string);

        $fq_class_name = $elements[0] ?? '';

        $method_elements = $elements[1] ?? '';

        $matches = [];
        preg_match('/^([^{]*)({(.*)})?$/', $method_elements, $matches);

        $method_name = $matches[1] ?? '';
        $closure_name = $matches[3] ?? '';

        $fq_class_name_elements =
            array_filter(explode('\\', $fq_class_name));

        $class_name =
            array_pop($fq_class_name_elements);

        $namespace =
            '\\' . implode('\\', $fq_class_name_elements);

        // If we're not fully qualified, check to see if its mapped
        if (0 !== strpos($fqsen_string, '\\')) {
            // Check for a class name map
            if ($class_name
                && $context->hasNamespaceMapFor(T_CLASS, $class_name)
            ) {
                $namespace =
                    (string)$context->getNamespaceMapFor(
                        T_CLASS,
                        $class_name
                    );
            }

            // Check for a method map
            if ($method_name
                && $context->hasNamespaceMapFor(T_FUNCTION, $method_name)
            ) {
                $namespace =
                    (string)$context->getNamespaceMapFor(T_FUNCTION, $method_name);
            }
        }

        // Clean it on up
        $namespace = self::cleanNamespace($namespace);

        $fqsen = new FQSEN(
            $namespace ?: '\\',
            $class_name ?: '',
            $method_name ?: '',
            $closure_name ?: ''
        );

        if ($alternate_id) {
            return $fqsen->withAlternateId((int)$alternate_id);
        }

        return $fqsen;
    }

    /**
     * @param $fqsen_string
     * An FQSEN string like '\Namespace\Class::method' or
     * 'Class' or 'Class::method'.
     *
     * @return FQSEN
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_CALL
        (
            (SCALAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CONST)
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CONST)
                                            (AST_VAR)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_NEW
            (
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (SCALAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (SCALAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (SCALAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (SCALAR))))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_CALL
        (
            (SCALAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CONST)
                                            (AST_VAR))))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_CONST)
                                    (AST_VAR))))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CAST
                                    (AST_METHOD_CALL
                                        (AST_VAR)
                                        (
                                            (AST_CONST)
                                            (AST_VAR)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (SCALAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (SCALAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (SCALAR))
                (AST_CONDITIONAL
                    (AST_VAR)
                    (NULL)
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_CAST
                                (AST_VAR))))))))
    (AST_RETURN
        (AST_VAR)))