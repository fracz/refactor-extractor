	public function index()
	{
		if (isset($_POST['migrate']))
		{
			$core = $this->input->post('core_only') ? '' : 'app_';

			if ($version = $this->input->post('migration'))
			{
				$this->migrate_to($version, $core);
			}
		}

		Template::set('installed_version', $this->migrations->get_schema_version('app_'));
		Template::set('latest_version', $this->migrations->get_latest_version('app_'));

		Template::set('core_installed_version', $this->migrations->get_schema_version('core'));
		Template::set('core_latest_version', $this->migrations->get_latest_version());

		Template::set('core_migrations', $this->migrations->get_available_versions());
		Template::set('app_migrations', $this->migrations->get_available_versions('app_'));

		Template::set('mod_migrations', $this->get_module_versions());

		Template::set('toolbar_title', 'Database Migrations');
		Template::render();

	}//end index()

	//--------------------------------------------------------------------

	/**
	 * Migrate the selected migration type to a specific migration number
	 *
	 * @access private
	 *
	 * @param int    $version The version number to migrate to
	 * @param string $type    The migration type (core, app_, MODULE_)
	 *
	 * @return void
	 */
||||||||	public function index()
	{
		if (isset($_POST['migrate'])) {
			$core = $this->input->post('core_only') ? '' : 'app_';

			if ($version = $this->input->post('migration')) {
				$this->migrate_to($version, $core);
			}
		}

		Template::set('installed_version', $this->migrations->get_schema_version('app_'));
		Template::set('latest_version', $this->migrations->get_latest_version('app_'));

		Template::set('core_installed_version', $this->migrations->get_schema_version('core'));
		Template::set('core_latest_version', $this->migrations->get_latest_version());

		Template::set('core_migrations', $this->migrations->get_available_versions());
		Template::set('app_migrations', $this->migrations->get_available_versions('app_'));
		Template::set('mod_migrations', $this->get_module_versions());

		Template::set('toolbar_title', lang('migrations_title_index'));
		Template::render();
	}

	/**
	 * Migrate the selected migration type to a specific migration number
	 *
	 * @param int    $version The version number to migrate to
	 * @param string $type    The migration type (core, app_, MODULE_)
	 *
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR)))
                        (SCALAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (SCALAR))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (SCALAR)))
    (AST_STATIC_CALL))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (SCALAR)))
                        (SCALAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (SCALAR))))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CALL
                (
                    (SCALAR)))))
    (AST_STATIC_CALL))