    public static function modules($settings)
    {
        if (file_exists($guy = $settings['path'] . DIRECTORY_SEPARATOR . $settings['class_name'] . '.php')) {
            require_once $guy;
        }

        $modules = array();
        $namespace = isset($settings['namespace']) ? $settings['namespace'] : '';

        $moduleNames = $settings['modules']['enabled'];

        foreach ($moduleNames as $moduleName) {
            $moduleConfig = (isset($settings['modules']['config'][$moduleName])) ? $settings['modules']['config'][$moduleName] : array();
            $moduleConfig['class'] = $moduleName;
            $modules[$moduleName] = static::createModule($moduleConfig, $namespace);
        }

        return $modules;
    }

    /**
     * Creates new module and configures it. Module config should include valid "class" element
     * that represents module class. Module class is searched and resolves according following rules:
     *
     * 1. if "class" element is fully qualified class name, it will be taken to create module;
     * 2. module class will be searched under default namespace, according $namespace parameter:
     * $namespace.'\Codeception\Module\' . $class;
     * 3. module class will be searched under codeception module namespace, that is "\Codeception\Module".
     *
     * @param array $config module configuration
     * @param string $namespace default namespace for module.
     * @throws ConfigurationException if config contains wrong module configuration or module is not found.
     */
||||||||    public static function modules($settings)
    {
        $guyFile = $settings['path'] . DIRECTORY_SEPARATOR . $settings['class_name'] . '.php';
        if (file_exists($guyFile)) {
            require_once $guyFile;
        }

        $modules = array();
        $namespace = isset($settings['namespace']) ? $settings['namespace'] : '';

        $moduleNames = $settings['modules']['enabled'];

        foreach ($moduleNames as $moduleName) {
            $moduleConfig = (isset($settings['modules']['config'][$moduleName])) ? $settings['modules']['config'][$moduleName] : array();
            $modules[$moduleName] = static::createModule($moduleName, $moduleConfig, $namespace);
        }

        return $modules;
    }

    /**
     * Creates new module and configures it.
     * Module class is searched and resolves according following rules:
     *
     * 1. if "class" element is fully qualified class name, it will be taken to create module;
     * 2. module class will be searched under default namespace, according $namespace parameter:
     * $namespace.'\Codeception\Module\' . $class;
     * 3. module class will be searched under Codeception module namespace, that is "\Codeception\Module".
     *
     * @param $class
     * @param array $config module configuration
     * @param string $namespace default namespace for module.
     * @throws Exception\Configuration
     * @return \Codeception\Module
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_CONST))
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (SCALAR)))))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_VAR)))
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))
                    (AST_ARRAY)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (AST_VAR))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (AST_CONST))
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_INCLUDE_OR_EVAL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_DIM
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))
                                (SCALAR))
                            (AST_VAR)))
                    (AST_DIM
                        (AST_DIM
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR))
                        (AST_VAR))
                    (AST_ARRAY)))
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_STATIC_CALL
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))