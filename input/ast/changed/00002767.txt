    public function fortunesAction() {

        // since the resultset is immutable get an array instead
        // so we can add the new fortune
        $fortunes = Fortunes::find()->toArray();

        $fortunes[] = array(
            'id' => 0,
            'message' => 'Additional fortune added at request time.'
        );

        usort($fortunes, function($left, $right) {
            $l = $left['message'];
            $r = $right['message'];
            if ($l === $r) {
                return 0;
            } else {
                if ($l > $r) {
                    return 1;
                } else {
                    return -1;
                }
            }
        });

        $this->response->setHeader("Content-Type", "text/html; charset=utf-8");

        $this->view->fortunes = $fortunes;
    }

||||||||    public function fortunesAction()
    {

        $fortunes = $this->getFortunesArray();
        $fortunes[] = $this->buildFortune();

        $this->response->setHeader("Content-Type", "text/html; charset=utf-8");

        $this->view->fortunes = $this->sortFortunes($fortunes);
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_STATIC_CALL)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_VAR)
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (SCALAR))))
                        (AST_IF_ELEM
                            (NULL)
                            (
                                (AST_IF
                                    (AST_IF_ELEM
                                        (AST_BINARY_OP
                                            (AST_VAR)
                                            (AST_VAR))
                                        (
                                            (AST_RETURN
                                                (SCALAR))))
                                    (AST_IF_ELEM
                                        (NULL)
                                        (
                                            (AST_RETURN
                                                (AST_UNARY_OP
                                                    (SCALAR)))))))))))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))))