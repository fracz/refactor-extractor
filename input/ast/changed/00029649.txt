	public function filter($table)
	{
		$table = $table;
		$table->setRowsCountBeforeLimitFilter();

		$rowsCount = $table->getRowsCount();

		// we delete from 0 to offset
		if($this->offset > 0)
		{
			$table->deleteRowsOffset( 0, $this->offset );
		}
		// at this point the array has offset less elements. We delete from limit to the end
		if( $this->limit >= 0 )
		{
			$table->deleteRowsOffset( $this->limit );
		}
	}
}||||||||	public function filter($table)
	{
		$table->setRowsCountBeforeLimitFilter();

		$rowsCount = $table->getRowsCount();

		// we delete from 0 to offset
		if($this->offset > 0)
		{
			$table->deleteRowsOffset( 0, $this->offset );
		}
		// at this point the array has offset less elements. We delete from limit to the end
		if( $this->limit >= 0 )
		{
			$table->deleteRowsOffset( $this->limit );
		}
	}
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (SCALAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_PROP
                            (AST_VAR))))))))