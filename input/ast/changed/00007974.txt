  private function _createTableForRun($run, $tcpDumpView) {
    $fvMedian = $this->firstViewMedianRun;
    echo "<table id=\"table<?php echo $run; ?>\" class=\"pretty result\" align=\"center\" border=\"1\" cellpadding=\"20\" cellspacing=\"0\">\n";
    $table_columns = $this->_createTableHead();

    $this->_createRunResultRows($run, false, $tcpDumpView, $table_columns);
    if (!$this->testInfo->isFirstViewOnly() || $this->testResults->getRunResult($run, true)) {
      $this->_createRunResultRows($run, true, $tcpDumpView, $table_columns);
    }
    if ($this->testComplete && $run == $fvMedian) {
      $this->_createBreakdownRow($this->testResults->getRunResult($run, false)->getStepResult(1));
    }

    echo "</table>\n<br>\n";
  }

  /**
   * @param int $run Run number
   * @param bool $cached False for first view, true for repeat view
   * @param string|null $tcpDumpView From settings
   * @param int $tableColumns number of columns in the table
   */
||||||||  private function _createTableForRun($run, $tcpDumpView) {
    $fvMedian = $this->firstViewMedianRun;
    echo "<table id=\"table<?php echo $run; ?>\" class=\"pretty result\" align=\"center\" border=\"1\" cellpadding=\"20\" cellspacing=\"0\">\n";
    $table_columns = $this->_createTableHead();

    $firstViewResults = $this->testResults->getRunResult($run, false);
    $this->_createRunResultRows($run, false, $tcpDumpView, $table_columns);
    if (!$this->testInfo->isFirstViewOnly() || $this->testResults->getRunResult($run, true)) {
      $this->_createRunResultRows($run, true, $tcpDumpView, $table_columns);
    }
    if ($this->testComplete && $run == $fvMedian && $firstViewResults) {
      $this->_createBreakdownRow($firstViewResults->getStepResult(1), $table_columns);
    }

    echo "</table>\n<br>\n";
  }

  /**
   * @param int $run Run number
   * @param bool $cached False for first view, true for repeat view
   * @param string|null $tcpDumpView From settings
   * @param int $tableColumns number of columns in the table
   */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (AST_CONST))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)
                                    (AST_CONST)))
                            (
                                (SCALAR))))))))
    (AST_ECHO
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ECHO
        (AST_ENCAPS_LIST
            (SCALAR)
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CONST)
            (AST_VAR)
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR)
                        (AST_CONST))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_CONST)
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_VAR)))
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))
                        (AST_VAR))))))
    (AST_ECHO
        (SCALAR)))