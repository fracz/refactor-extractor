	public function testElggPluginManifestFromXMLEntity() {
		$manifest_file = file_get_contents(get_config('path') . 'engine/tests/test_files/plugin_18/manifest.xml');
		$xml = new \ElggXMLElement($manifest_file);
		$manifest = new \ElggPluginManifest($xml);

		$this->assertIsA($manifest, '\ElggPluginManifest');
	}

	// exact manifest values
	// 1.8 interface
||||||||	public function testElggPluginManifestFromXMLEntity() {
		$manifest_file = file_get_contents(get_config('path') . 'engine/tests/test_files/plugin_18/manifest.xml');
		$xml = new \ElggXMLElement($manifest_file);
		$manifest = new \ElggPluginManifest($xml);

		$this->assertIsA($manifest, \ElggPluginManifest::class);
	}

	// exact manifest values
	// 1.8 interface
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (SCALAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR)))))