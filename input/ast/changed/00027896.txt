    public function testGetColumnMetaForDefault()
    {
        $cmeta = array(
            'Default' => null,
            'Null' => 'YES',
            'DefaultType' => 'a',
            'DefaultValue' => 'b',
        );

        $result = PMA_getColumnMetaForDefault($cmeta, null);

        $this->assertEquals(
            'NULL',
            $result['DefaultType']
        );

        $this->assertEquals(
            '',
            $result['DefaultValue']
        );

        // case 2
        $cmeta = array(
            'Default' => null,
            'Null' => 'NO',
            'DefaultType' => 'a',
            'DefaultValue' => 'b',
        );

        $result = PMA_getColumnMetaForDefault($cmeta, true);

        $this->assertEquals(
            'USER_DEFINED',
            $result['DefaultType']
        );

        $this->assertEquals(
            null,
            $result['DefaultValue']
        );

        // case 3
        $cmeta = array(
            'Default' => null,
            'Null' => 'NO',
            'DefaultType' => 'a',
            'DefaultValue' => 'b',
        );

        $result = PMA_getColumnMetaForDefault($cmeta, false);

        $this->assertEquals(
            'NONE',
            $result['DefaultType']
        );

        $this->assertEquals(
            null,
            $result['DefaultValue']
        );

        // case 4
        $cmeta = array(
            'Default' => 'CURRENT_TIMESTAMP',
            'Null' => 'NO',
            'DefaultType' => 'a',
            'DefaultValue' => 'b',
        );

        $result = PMA_getColumnMetaForDefault($cmeta, false);

        $this->assertEquals(
            'CURRENT_TIMESTAMP',
            $result['DefaultType']
        );

        $this->assertEquals(
            null,
            $result['DefaultValue']
        );

        // case 5
        $cmeta = array(
            'Default' => 'SOMETHING_ELSE',
            'Null' => 'NO',
            'DefaultType' => 'a',
            'DefaultValue' => 'b',
        );

        $result = PMA_getColumnMetaForDefault($cmeta, false);

        $this->assertEquals(
            'USER_DEFINED',
            $result['DefaultType']
        );

        $this->assertEquals(
            'SOMETHING_ELSE',
            $result['DefaultValue']
        );
    }

    /**
     * Test for PMA_getHtmlForColumnName
     *
     * @return void
     */
||||||||    public function testGetColumnMetaForDefault()
    {
        // @todo Move test
//        $cmeta = array(
//            'Default' => null,
//            'Null' => 'YES',
//            'DefaultType' => 'a',
//            'DefaultValue' => 'b',
//        );
//
//        $result = PMA_getColumnMetaForDefault($cmeta, null);
//
//        $this->assertEquals(
//            'NULL',
//            $result['DefaultType']
//        );
//
//        $this->assertEquals(
//            '',
//            $result['DefaultValue']
//        );
//
//        // case 2
//        $cmeta = array(
//            'Default' => null,
//            'Null' => 'NO',
//            'DefaultType' => 'a',
//            'DefaultValue' => 'b',
//        );
//
//        $result = PMA_getColumnMetaForDefault($cmeta, true);
//
//        $this->assertEquals(
//            'USER_DEFINED',
//            $result['DefaultType']
//        );
//
//        $this->assertEquals(
//            null,
//            $result['DefaultValue']
//        );
//
//        // case 3
//        $cmeta = array(
//            'Default' => null,
//            'Null' => 'NO',
//            'DefaultType' => 'a',
//            'DefaultValue' => 'b',
//        );
//
//        $result = PMA_getColumnMetaForDefault($cmeta, false);
//
//        $this->assertEquals(
//            'NONE',
//            $result['DefaultType']
//        );
//
//        $this->assertEquals(
//            null,
//            $result['DefaultValue']
//        );
//
//        // case 4
//        $cmeta = array(
//            'Default' => 'CURRENT_TIMESTAMP',
//            'Null' => 'NO',
//            'DefaultType' => 'a',
//            'DefaultValue' => 'b',
//        );
//
//        $result = PMA_getColumnMetaForDefault($cmeta, false);
//
//        $this->assertEquals(
//            'CURRENT_TIMESTAMP',
//            $result['DefaultType']
//        );
//
//        $this->assertEquals(
//            null,
//            $result['DefaultValue']
//        );
//
//        // case 5
//        $cmeta = array(
//            'Default' => 'SOMETHING_ELSE',
//            'Null' => 'NO',
//            'DefaultType' => 'a',
//            'DefaultValue' => 'b',
//        );
//
//        $result = PMA_getColumnMetaForDefault($cmeta, false);
//
//        $this->assertEquals(
//            'USER_DEFINED',
//            $result['DefaultType']
//        );
//
//        $this->assertEquals(
//            'SOMETHING_ELSE',
//            $result['DefaultValue']
//        );
    }

    /**
     * Test for PMA_getHtmlForColumnName
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_CONST)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))
            (AST_ARRAY_ELEM
                (SCALAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_DIM
                (AST_VAR)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE