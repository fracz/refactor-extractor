    public static function checkUpdate()
    {
        if (self::getConfig('version') !== self::VERSION) {
            self::setConfig('version', self::VERSION);
            //self::deleteCache();
            self::closeCursors();
            self::$db->exec('DROP TABLE request_cache');
            self::createRequestCacheTable();
        }
        if (!self::getConfig('autoupdate', 1)) {
            return false;
        } elseif (!is_dir(__DIR__ . '/icons')) {
            return true;
        }
        $version = self::requestCache('http://gh01.de/alfred/github/current', 1440);
        return $version !== null && $version !== self::VERSION;
    }

||||||||    public static function checkUpdate()
    {
        if (self::getConfig('version') !== self::VERSION) {
            self::setConfig('version', self::VERSION);
            //self::deleteCache();
            self::closeCursors();
            self::$db->exec('DROP TABLE request_cache');
            self::createRequestCacheTable();
        }
        if (!self::getConfig('autoupdate', 1)) {
            return false;
        } elseif (!is_dir(__DIR__ . '/icons')) {
            return true;
        }
        $version = self::requestCache('http://gh01.de/alfred/github/current', null, null, 1440);
        return $version !== null && $version !== self::VERSION;
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_STATIC_CALL)
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (SCALAR)))
                (AST_STATIC_CALL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (SCALAR))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))
            (
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_STATIC_CALL)
                (AST_METHOD_CALL
                    (AST_STATIC_PROP)
                    (
                        (SCALAR)))
                (AST_STATIC_CALL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (SCALAR)
                        (SCALAR))))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR)
                (AST_CONST)
                (AST_CONST)
                (SCALAR))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CLASS_CONST
                    (SCALAR))))))