  public function parseCommit(
    PhabricatorRepository $repository,
    PhabricatorRepositoryCommit $commit) {

    $data = id(new PhabricatorRepositoryCommitData())->loadOneWhere(
      'commitID = %d',
      $commit->getID());

    if (!$data) {
      // TODO: Permanent failure.
      return;
    }

    $adapter = HeraldCommitAdapter::newLegacyAdapter(
      $repository,
      $commit,
      $data);

    $rules = id(new HeraldRuleQuery())
      ->setViewer(PhabricatorUser::getOmnipotentUser())
      ->withContentTypes(array($adapter->getAdapterContentType()))
      ->needConditionsAndActions(true)
      ->needAppliedToPHIDs(array($adapter->getPHID()))
      ->needValidateAuthors(true)
      ->execute();

    $engine = new HeraldEngine();

    $effects = $engine->applyRules($rules, $adapter);
    $engine->applyEffects($effects, $adapter, $rules);
    $xscript = $engine->getTranscript();

    $audit_phids = $adapter->getAuditMap();
    $cc_phids = $adapter->getAddCCMap();
    if ($audit_phids || $cc_phids) {
      $this->createAudits($commit, $audit_phids, $cc_phids, $rules);
    }

    $explicit_auditors = $this->createAuditsFromCommitMessage($commit, $data);

    if ($repository->getDetail('herald-disabled')) {
      // This just means "disable email"; audits are (mostly) idempotent.
      return;
    }

    $this->publishFeedStory($repository, $commit, $data);

    $herald_targets = $adapter->getEmailPHIDs();

    $email_phids = array_unique(
      array_merge(
        $explicit_auditors,
        array_keys($cc_phids),
        $herald_targets));
    if (!$email_phids) {
      return;
    }

    $revision = $adapter->loadDifferentialRevision();
    if ($revision) {
      $name = $revision->getTitle();
    } else {
      $name = $data->getSummary();
    }

    $author_phid = $data->getCommitDetail('authorPHID');
    $reviewer_phid = $data->getCommitDetail('reviewerPHID');

    $phids = array_filter(
      array(
        $author_phid,
        $reviewer_phid,
        $commit->getPHID(),
      ));

    $handles = id(new PhabricatorHandleQuery())
      ->setViewer(PhabricatorUser::getOmnipotentUser())
      ->withPHIDs($phids)
      ->execute();

    $commit_handle = $handles[$commit->getPHID()];
    $commit_name = $commit_handle->getName();

    if ($author_phid) {
      $author_name = $handles[$author_phid]->getName();
    } else {
      $author_name = $data->getAuthorName();
    }

    if ($reviewer_phid) {
      $reviewer_name = $handles[$reviewer_phid]->getName();
    } else {
      $reviewer_name = null;
    }

    $who = implode(', ', array_filter(array($author_name, $reviewer_name)));

    $description = $data->getCommitMessage();

    $commit_uri = PhabricatorEnv::getProductionURI($commit_handle->getURI());
    $differential = $revision
      ? PhabricatorEnv::getProductionURI('/D'.$revision->getID())
      : 'No revision.';

    $files = $adapter->loadAffectedPaths();
    sort($files);
    $files = implode("\n", $files);

    $xscript_id = $xscript->getID();

    $manage_uri = '/herald/view/commits/';
    $why_uri = '/herald/transcript/'.$xscript_id.'/';

    $reply_handler = PhabricatorAuditCommentEditor::newReplyHandlerForCommit(
      $commit);

    $template = new PhabricatorMetaMTAMail();

    $inline_patch_text = $this->buildPatch($template, $repository, $commit);

    $body = new PhabricatorMetaMTAMailBody();
    $body->addRawSection($description);
    $body->addTextSection(pht('DETAILS'), $commit_uri);
    $body->addTextSection(pht('DIFFERENTIAL REVISION'), $differential);
    $body->addTextSection(pht('AFFECTED FILES'), $files);
    $body->addReplySection($reply_handler->getReplyHandlerInstructions());
    $body->addHeraldSection($manage_uri, $why_uri);
    $body->addRawSection($inline_patch_text);
    $body = $body->render();

    $prefix = PhabricatorEnv::getEnvConfig('metamta.diffusion.subject-prefix');

    $threading = PhabricatorAuditCommentEditor::getMailThreading(
      $repository,
      $commit);
    list($thread_id, $thread_topic) = $threading;

    $template->setRelatedPHID($commit->getPHID());
    $template->setSubject("{$commit_name}: {$name}");
    $template->setSubjectPrefix($prefix);
    $template->setVarySubjectPrefix("[Commit]");
    $template->setBody($body);
    $template->setThreadID($thread_id, $is_new = true);
    $template->addHeader('Thread-Topic', $thread_topic);
    $template->setIsBulk(true);

    $template->addHeader('X-Herald-Rules', $xscript->getXHeraldRulesHeader());
    if ($author_phid) {
      $template->setFrom($author_phid);
    }

    // TODO: We should verify that each recipient can actually see the
    // commit before sending them email (T603).

    $mails = $reply_handler->multiplexMail(
      $template,
      id(new PhabricatorHandleQuery())
      ->setViewer(PhabricatorUser::getOmnipotentUser())
      ->withPHIDs($email_phids)
      ->execute(),
      array());

    foreach ($mails as $mail) {
      $mail->saveAndSend();
    }
  }

||||||||  public function parseCommit(
    PhabricatorRepository $repository,
    PhabricatorRepositoryCommit $commit) {

    $data = id(new PhabricatorRepositoryCommitData())->loadOneWhere(
      'commitID = %d',
      $commit->getID());

    if (!$data) {
      // TODO: Permanent failure.
      return;
    }

    $adapter = HeraldCommitAdapter::newLegacyAdapter(
      $repository,
      $commit,
      $data);

    $rules = id(new HeraldRuleQuery())
      ->setViewer(PhabricatorUser::getOmnipotentUser())
      ->withContentTypes(array($adapter->getAdapterContentType()))
      ->withDisabled(false)
      ->needConditionsAndActions(true)
      ->needAppliedToPHIDs(array($adapter->getPHID()))
      ->needValidateAuthors(true)
      ->execute();

    $engine = new HeraldEngine();

    $effects = $engine->applyRules($rules, $adapter);
    $engine->applyEffects($effects, $adapter, $rules);
    $xscript = $engine->getTranscript();

    $audit_phids = $adapter->getAuditMap();
    $cc_phids = $adapter->getAddCCMap();
    if ($audit_phids || $cc_phids) {
      $this->createAudits($commit, $audit_phids, $cc_phids, $rules);
    }

    $explicit_auditors = $this->createAuditsFromCommitMessage($commit, $data);

    if ($repository->getDetail('herald-disabled')) {
      // This just means "disable email"; audits are (mostly) idempotent.
      return;
    }

    $this->publishFeedStory($repository, $commit, $data);

    $herald_targets = $adapter->getEmailPHIDs();

    $email_phids = array_unique(
      array_merge(
        $explicit_auditors,
        array_keys($cc_phids),
        $herald_targets));
    if (!$email_phids) {
      return;
    }

    $revision = $adapter->loadDifferentialRevision();
    if ($revision) {
      $name = $revision->getTitle();
    } else {
      $name = $data->getSummary();
    }

    $author_phid = $data->getCommitDetail('authorPHID');
    $reviewer_phid = $data->getCommitDetail('reviewerPHID');

    $phids = array_filter(
      array(
        $author_phid,
        $reviewer_phid,
        $commit->getPHID(),
      ));

    $handles = id(new PhabricatorHandleQuery())
      ->setViewer(PhabricatorUser::getOmnipotentUser())
      ->withPHIDs($phids)
      ->execute();

    $commit_handle = $handles[$commit->getPHID()];
    $commit_name = $commit_handle->getName();

    if ($author_phid) {
      $author_name = $handles[$author_phid]->getName();
    } else {
      $author_name = $data->getAuthorName();
    }

    if ($reviewer_phid) {
      $reviewer_name = $handles[$reviewer_phid]->getName();
    } else {
      $reviewer_name = null;
    }

    $who = implode(', ', array_filter(array($author_name, $reviewer_name)));

    $description = $data->getCommitMessage();

    $commit_uri = PhabricatorEnv::getProductionURI($commit_handle->getURI());
    $differential = $revision
      ? PhabricatorEnv::getProductionURI('/D'.$revision->getID())
      : 'No revision.';

    $files = $adapter->loadAffectedPaths();
    sort($files);
    $files = implode("\n", $files);

    $xscript_id = $xscript->getID();

    $manage_uri = '/herald/view/commits/';
    $why_uri = '/herald/transcript/'.$xscript_id.'/';

    $reply_handler = PhabricatorAuditCommentEditor::newReplyHandlerForCommit(
      $commit);

    $template = new PhabricatorMetaMTAMail();

    $inline_patch_text = $this->buildPatch($template, $repository, $commit);

    $body = new PhabricatorMetaMTAMailBody();
    $body->addRawSection($description);
    $body->addTextSection(pht('DETAILS'), $commit_uri);
    $body->addTextSection(pht('DIFFERENTIAL REVISION'), $differential);
    $body->addTextSection(pht('AFFECTED FILES'), $files);
    $body->addReplySection($reply_handler->getReplyHandlerInstructions());
    $body->addHeraldSection($manage_uri, $why_uri);
    $body->addRawSection($inline_patch_text);
    $body = $body->render();

    $prefix = PhabricatorEnv::getEnvConfig('metamta.diffusion.subject-prefix');

    $threading = PhabricatorAuditCommentEditor::getMailThreading(
      $repository,
      $commit);
    list($thread_id, $thread_topic) = $threading;

    $template->setRelatedPHID($commit->getPHID());
    $template->setSubject("{$commit_name}: {$name}");
    $template->setSubjectPrefix($prefix);
    $template->setVarySubjectPrefix("[Commit]");
    $template->setBody($body);
    $template->setThreadID($thread_id, $is_new = true);
    $template->addHeader('Thread-Topic', $thread_topic);
    $template->setIsBulk(true);

    $template->addHeader('X-Herald-Rules', $xscript->getXHeraldRulesHeader());
    if ($author_phid) {
      $template->setFrom($author_phid);
    }

    // TODO: We should verify that each recipient can actually see the
    // commit before sending them email (T603).

    $mails = $reply_handler->multiplexMail(
      $template,
      id(new PhabricatorHandleQuery())
      ->setViewer(PhabricatorUser::getOmnipotentUser())
      ->withPHIDs($email_phids)
      ->execute(),
      array());

    foreach ($mails as $mail) {
      $mail->saveAndSend();
    }
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW)))
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_CALL
                                    (
                                        (AST_NEW)))
                                (
                                    (AST_STATIC_CALL)))
                            (
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (NULL)))))
                        (
                            (AST_CONST)))
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (NULL)))))
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_CALL
                        (
                            (AST_NEW)))
                    (
                        (AST_STATIC_CALL)))
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ENCAPS_LIST
                (AST_VAR)
                (SCALAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_STATIC_CALL)))
                        (
                            (AST_VAR))))
                (AST_ARRAY))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_CALL
                (
                    (AST_NEW)))
            (
                (SCALAR)
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_CALL
                                        (
                                            (AST_NEW)))
                                    (
                                        (AST_STATIC_CALL)))
                                (
                                    (AST_ARRAY
                                        (AST_ARRAY_ELEM
                                            (AST_METHOD_CALL
                                                (AST_VAR))
                                            (NULL)))))
                            (
                                (AST_CONST)))
                        (
                            (AST_CONST)))
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (NULL)))))
                (
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_CALL
                        (
                            (AST_NEW)))
                    (
                        (AST_STATIC_CALL)))
                (
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_VAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_CALL
                    (
                        (AST_ARRAY
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))
                            (AST_ARRAY_ELEM
                                (AST_VAR)
                                (NULL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_VAR)
            (AST_STATIC_CALL
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (SCALAR)))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ENCAPS_LIST
                (AST_VAR)
                (SCALAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_ASSIGN
                (AST_VAR)
                (AST_CONST))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CONST)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_CALL
                                (
                                    (AST_NEW)))
                            (
                                (AST_STATIC_CALL)))
                        (
                            (AST_VAR))))
                (AST_ARRAY))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)))))