    public function testAddUserExistingLogin()
    {
        try {
            API::getInstance()->addUser("test", "password", "email@email.com", "alias");
            API::getInstance()->addUser("test", "password2", "em2ail@email.com", "al2ias");
        } catch (Exception $expected) {
            $this->assertRegExp("(UsersManager_ExceptionLoginExists)", $expected->getMessage());
            return;
        }
        $this->fail("Exception not raised.");

    }

    /**
     * Dataprovider for wrong password tests
     */
||||||||    public function testAddUserExistingLogin()
    {
        $this->api->addUser("test", "password", "email@email.com", "alias");
        $this->api->addUser("test", "password2", "em2ail@email.com", "al2ias");
    }

    /**
     * Dataprovider for wrong password tests
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_STATIC_CALL)
                (
                    (SCALAR)
                    (SCALAR)
                    (SCALAR)
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_RETURN
                        (NULL)))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR))))