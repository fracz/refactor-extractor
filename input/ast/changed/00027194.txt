    public function applyBehaviours(\sfEvent $data)
    {
        if (!$data->getSubject() instanceof \phpDocumentor\Transformer\Transformer) {
            throw new Exception(
                'Unable to apply behaviours, the invoking object is not a '
                . '\phpDocumentor\Transformer\Transformer'
            );
        }

        $behaviours = new Transformer\Behaviour\Collection(
            $data->getSubject(),
            array(
                 new Transformer\Behaviour\GeneratePaths(),
                 new Transformer\Behaviour\Inherit(),
                 new Transformer\Behaviour\Tag\IgnoreTag(),
                 new Transformer\Behaviour\Tag\ReturnTag(),
                 new Transformer\Behaviour\Tag\ParamTag(),
                 new Transformer\Behaviour\Tag\VarTag(),
                 new Transformer\Behaviour\Tag\PropertyTag(),
                 new Transformer\Behaviour\Tag\MethodTag(),
                 new Transformer\Behaviour\Tag\UsesTag(),
                 new Transformer\Behaviour\Tag\CoversTag(),
                 new Transformer\Behaviour\Tag\AuthorTag(),
                 new Transformer\Behaviour\Tag\LicenseTag(),
                 new Transformer\Behaviour\Tag\InternalTag(),
                 new Transformer\Behaviour\AddLinkInformation(),
            )
        );

        $data['source'] = $behaviours->process($data['source']);
    }

    /**
     * Checks all phpDocumentor whether they match the given rules.
     *
     * @param \sfEvent $data Event object containing the parameters.
     *
     * @phpdoc-event reflection.docblock-extraction.post
     *
     * @return void
     */
||||||||    public function applyBehaviours($data)
    {
        if (!$data->getSubject() instanceof \phpDocumentor\Transformer\Transformer) {
            throw new Exception(
                'Unable to apply behaviours, the invoking object is not a '
                . '\phpDocumentor\Transformer\Transformer'
            );
        }

        $behaviours = new Transformer\Behaviour\Collection(
            $data->getSubject(),
            array(
                 new Transformer\Behaviour\GeneratePaths(),
                 new Transformer\Behaviour\Inherit(),
                 new Transformer\Behaviour\Tag\IgnoreTag(),
                 new Transformer\Behaviour\Tag\ReturnTag(),
                 new Transformer\Behaviour\Tag\ParamTag(),
                 new Transformer\Behaviour\Tag\VarTag(),
                 new Transformer\Behaviour\Tag\PropertyTag(),
                 new Transformer\Behaviour\Tag\MethodTag(),
                 new Transformer\Behaviour\Tag\UsesTag(),
                 new Transformer\Behaviour\Tag\CoversTag(),
                 new Transformer\Behaviour\Tag\AuthorTag(),
                 new Transformer\Behaviour\Tag\LicenseTag(),
                 new Transformer\Behaviour\Tag\InternalTag(),
                 new Transformer\Behaviour\AddLinkInformation(),
            )
        );

        $data->setSource($behaviours->process($data->getSource()));
    }

    /**
     * Checks all phpDocumentor whether they match the given rules.
     *
     * @param \phpDocumentor\Reflection\Events\PostDocBlockExtractionEvent $data
     *     Event object containing the parameters.
     *
     * @phpdoc-event reflection.docblock-extraction.post
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_INSTANCEOF
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)))))))