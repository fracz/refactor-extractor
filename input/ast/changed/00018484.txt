	public function load($uri)
	{
		$routes = (file_exists($path = $this->base.'routes'.EXT)) ? require $path : array();

		return array_merge($this->nested(Arr::without(explode('/', $uri), array(''))), $routes);
	}

	/**
	 * Get the appropriate routes from the routes directory for a given URI.
	 *
	 * @param  array  $segments
	 * @return array
	 */
||||||||	public function load($uri)
	{
		$routes = (file_exists($path = $this->base.'routes'.EXT)) ? require $path : array();

		$segments = Arr::without(explode('/', $uri), '');

		return array_merge($this->nested($segments), $routes);
	}

	/**
	 * Get the appropriate routes from the routes directory for a given URI.
	 *
	 * This method works backwards through the URI segments until we find the
	 * deepest possible matching route directory. Once the deepest directory
	 * is found, all of the applicable routes will be returend.
	 *
	 * @param  array  $segments
	 * @return array
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_CONST)))))
            (AST_INCLUDE_OR_EVAL
                (AST_VAR))
            (AST_ARRAY)))
    (AST_RETURN
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_VAR)))
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (SCALAR)
                                        (NULL)))))))
                (AST_VAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR))
                            (AST_CONST)))))
            (AST_INCLUDE_OR_EVAL
                (AST_VAR))
            (AST_ARRAY)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_VAR)))
                (SCALAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_VAR)))))