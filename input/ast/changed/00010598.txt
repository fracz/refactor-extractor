	public function get($primaryKey, $options = []) {
		$key = (array)$this->primaryKey();
		$alias = $this->alias();
		foreach ($key as $index => $keyname) {
			$key[$index] = $alias . '.' . $keyname;
		}
		$primaryKey = (array)$primaryKey;
		if (count($key) !== count($primaryKey)) {
			throw new \InvalidArgumentException(sprintf(
				"Incorrect number of primary key values. Expected %d got %d.",
				count($key),
				count($primaryKey)
			));
		}
		$conditions = array_combine($key, $primaryKey);

		if (isset($options['cache'])) {
			$cache = $options['cache'];
			unset($options['cache']);
		}

		$query = $this->find('all', $options);

		if (isset($cache)) {
			$query->cache($this->table() . '_' . json_encode($primaryKey), $cache);
		}

		$entity = $query->where($conditions)->first();

		if ($entity) {
			return $entity;
		}
		throw new RecordNotFoundException(sprintf(
			'Record "%s" not found in table "%s"',
			implode(',', (array)$primaryKey),
			$this->table()
		));
	}

/**
 * Finds an existing record or creates a new one.
 *
 * Using the attributes defined in $search a find() will be done to locate
 * an existing record. If that record exists it will be returned. If it does
 * not exist, a new entity will be created with the $search properties, and
 * the $defaults. When a new entity is created, it will be saved.
 *
 * @param array $search The criteria to find existing records by.
 * @param callable $callback A callback that will be invoked for newly
 *   created entities. This callback will be called *before* the entity
 *   is persisted.
 * @return \Cake\Datasource\EntityInterface An entity.
 */
||||||||	public function get($primaryKey, $options = []) {
		$key = (array)$this->primaryKey();
		$alias = $this->alias();
		foreach ($key as $index => $keyname) {
			$key[$index] = $alias . '.' . $keyname;
		}
		$primaryKey = (array)$primaryKey;
		if (count($key) !== count($primaryKey)) {
			throw new \InvalidArgumentException(sprintf(
				"Incorrect number of primary key values. Expected %d got %d.",
				count($key),
				count($primaryKey)
			));
		}
		$conditions = array_combine($key, $primaryKey);

		$cacheConfig = isset($options['cache']) ? $options['cache'] : false;
		$cacheKey = isset($options['key']) ? $options['key'] : false;
		unset($options['key'], $options['cache']);

		$query = $this->find('all', $options)->where($conditions);

		if ($cacheConfig) {
			if (!$cacheKey) {
				$cacheKey = sprintf(
					"get:%s.%s%s",
					$this->connection()->configName(), $this->table(), json_encode($primaryKey)
				);
			}
			$query->cache($cacheKey, $cacheConfig);
		}

		$entity = $query->first();

		if ($entity) {
			return $entity;
		}
		throw new RecordNotFoundException(sprintf(
			'Record "%s" not found in table "%s"',
			implode(',', (array)$primaryKey),
			$this->table()
		));
	}

/**
 * Finds an existing record or creates a new one.
 *
 * Using the attributes defined in $search a find() will be done to locate
 * an existing record. If that record exists it will be returned. If it does
 * not exist, a new entity will be created with the $search properties, and
 * the $defaults. When a new entity is created, it will be saved.
 *
 * @param array $search The criteria to find existing records by.
 * @param callable $callback A callback that will be invoked for newly
 *   created entities. This callback will be called *before* the entity
 *   is persisted.
 * @return \Cake\Datasource\EntityInterface An entity.
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (SCALAR))
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CAST
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_DIM
                    (AST_VAR)
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CAST
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_CALL
                                        (
                                            (AST_VAR)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (AST_CONST)))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_UNSET
        (AST_DIM
            (AST_VAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_VAR)))
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_VAR)))
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_CALL
                                            (
                                                (AST_VAR)))))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_VAR)))))
    (AST_THROW
        (AST_NEW
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CAST
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR))))))))