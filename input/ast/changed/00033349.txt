    public function compileTemplate($template)
    {
        /* here is where the compiling takes place. Smarty
       tags in the templates are replaces with PHP code,
       then written to compiled files. */
        if (!is_object($template->cacher_object)) {
            $this->smarty->loadPlugin($template->cacher_class);
            $template->cacher_object = new $template->cacher_class($this->smarty);
        }
        // flag for nochache sections
        $this->nocache = false;
        $this->tag_nocache = false;
        // assume successfull compiling
        $this->compile_error = false;
        // save template object in compiler class
        $this->template = $template;
        // template header code
        $template_header = '';
        if (!$template->suppressHeader) {
            $template_header = "<?php /* Smarty version " . Smarty::$_version . ", created on " . strftime("%Y-%m-%d %H:%M:%S") . "\n";
            $template_header .= "         compiled from \"" . $this->template->getTemplateFilepath() . "\" */ ?>\n";
        }

        do {
            // flag for aborting current and start recompile
            $this->abort_and_recompile = false;
            // get template source
            $_content = $template->getTemplateSource();
            // run prefilter if required
            if (isset($this->smarty->autoload_filters['pre']) || isset($this->smarty->registered_filters['pre'])) {
                $_content = $this->smarty->filter_handler->execute('pre', $_content);
            }
            // on empty template just return header
            if ($_content == '') {
                $template->compiled_template = $template_header;
                return true;
            }
            // init cacher plugin
            $template->cacher_object->initCacher($this);
            // call compiler
            $_compiled_code = $this->doCompile($_content);
        } while ($this->abort_and_recompile);

        if (!$this->compile_error) {
            // close cacher and return compiled template
            $template->compiled_template = $template_header . $template->cacher_object->closeCacher($this, $_compiled_code);
            // run postfilter if required
            if (isset($this->smarty->autoload_filters['post']) || isset($this->smarty->registered_filters['post'])) {
                $template->compiled_template = $this->smarty->filter_handler->execute('post', $template->compiled_template);
            }
            return true;
        } else {
            // compilation error
            return false;
        }
    }

    /**
    * Compile Tag
    *
    *                                               This is a call back from the lexer/parser
    *                                               It executes the required compile plugin for the Smarty tag
    *
    * @param string $tag tag name
    * @param array $args array with tag attributes
    * @return string compiled code
    */
||||||||    public function compileTemplate($template)
    {
        /* here is where the compiling takes place. Smarty
       tags in the templates are replaces with PHP code,
       then written to compiled files. */
        if (!is_object($template->cacher_object)) {
            $this->smarty->loadPlugin($template->cacher_class);
            $template->cacher_object = new $template->cacher_class($this->smarty);
        }
        // flag for nochache sections
        $this->nocache = false;
        $this->tag_nocache = false;
        // assume successfull compiling
        $this->compile_error = false;
        // save template object in compiler class
        $this->template = $template;
        // template header code
        $template_header = '';
        if (!$template->suppressHeader) {
            $template_header .= "<?php /* Smarty version " . Smarty::$_version . ", created on " . strftime("%Y-%m-%d %H:%M:%S") . "\n";
            $template_header .= "         compiled from \"" . $this->template->getTemplateFilepath() . "\" */ ?>\n";
        }

        do {
            // flag for aborting current and start recompile
            $this->abort_and_recompile = false;
            // get template source
            $_content = $template->getTemplateSource();
            // run prefilter if required
            if (isset($this->smarty->autoload_filters['pre']) || isset($this->smarty->registered_filters['pre'])) {
                $_content = $this->smarty->filter_handler->execute('pre', $_content);
            }
            // on empty template just return header
            if ($_content == '') {
                $template->compiled_template = $template->createPropertyHeader() . $template_header;
                return true;
            }
            // init cacher plugin
            $template->cacher_object->initCacher($this);
            // call compiler
            $_compiled_code = $this->doCompile($_content);
        } while ($this->abort_and_recompile);

        if (!$this->compile_error) {
            // close cacher and return compiled template
            $template->compiled_template = $template->createPropertyHeader() . $template_header . $template->cacher_object->closeCacher($this, $_compiled_code);
            // run postfilter if required
            if (isset($this->smarty->autoload_filters['post']) || isset($this->smarty->registered_filters['post'])) {
                $template->compiled_template = $this->smarty->filter_handler->execute('post', $template->compiled_template);
            }
            return true;
        } else {
            // compilation error
            return false;
        }
    }

    /**
    * Compile Tag
    *
    *                                               This is a call back from the lexer/parser
    *                                               It executes the required compile plugin for the Smarty tag
    *
    * @param string $tag tag name
    * @param array $args array with tag attributes
    * @return string compiled code
    */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_PROP
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_NEW
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_STATIC_PROP))
                                (SCALAR))
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (SCALAR)))
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR))))))
    (AST_DO_WHILE
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_ISSET
                                (AST_DIM
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (SCALAR)))
                            (AST_ISSET
                                (AST_DIM
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR))))))))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR)))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_PROP
                            (AST_VAR))))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_NEW
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_PROP
                                (AST_VAR))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_STATIC_PROP))
                                (SCALAR))
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (SCALAR)))
                (AST_ASSIGN_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))))
                        (SCALAR))))))
    (AST_DO_WHILE
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CONST))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR)))
                        (AST_ISSET
                            (AST_DIM
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (SCALAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))
        (AST_PROP
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_ISSET
                                (AST_DIM
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (SCALAR)))
                            (AST_ISSET
                                (AST_DIM
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (SCALAR))))
                        (
                            (AST_ASSIGN
                                (AST_PROP
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR))))))))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))