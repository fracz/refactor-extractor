    public function testUpdaterChecksCoreAndPluginCheckThatCoreIsRanFirst()
    {
        $updater = new Updater();
        $updater->pathUpdateFilePlugins = PIWIK_INCLUDE_PATH . '/tests/resources/Updater/%s/';
        $updater->pathUpdateFileCore = PIWIK_INCLUDE_PATH . '/tests/resources/Updater/core/';

        $updater->recordComponentSuccessfullyUpdated('testpluginUpdates', '0.1beta');
        $updater->addComponentToCheck('testpluginUpdates', '0.1');

        $updater->recordComponentSuccessfullyUpdated('core', '0.1');
        $updater->addComponentToCheck('core', '0.3');

        $componentsWithUpdateFile = $updater->getComponentsWithUpdateFile();
        $this->assertEquals(2, count($componentsWithUpdateFile));
        reset($componentsWithUpdateFile);
        $this->assertEquals('core', key($componentsWithUpdateFile));
    }

||||||||    public function testUpdaterChecksCoreAndPluginCheckThatCoreIsRanFirst()
    {
        $updater = new Updater(
            PIWIK_INCLUDE_PATH . '/tests/resources/Updater/core/',
            PIWIK_INCLUDE_PATH . '/tests/resources/Updater/%s/'
        );

        $updater->recordComponentSuccessfullyUpdated('testpluginUpdates', '0.1beta');
        $updater->recordComponentSuccessfullyUpdated('core', '0.1');

        $componentsWithUpdateFile = $updater->getComponentsWithUpdateFile(array(
            'testpluginUpdates' => '0.1',
            'core' => '0.3'
        ));
        $this->assertEquals(2, count($componentsWithUpdateFile));
        reset($componentsWithUpdateFile);
        $this->assertEquals('core', key($componentsWithUpdateFile));
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_CONST)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_CONST)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))
                    (AST_ARRAY_ELEM
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR))))))