  public function testSuccessfulRcptCommandWith250Response()
  {
    /* -- RFC 2821, 3.3.

     The second step in the procedure is the RCPT command.

      RCPT TO:<forward-path> [ SP <rcpt-parameters> ] <CRLF>

     The first or only argument to this command includes a forward-path
     (normally a mailbox and domain, always surrounded by "<" and ">"
     brackets) identifying one recipient.  If accepted, the SMTP server
     returns a 250 OK reply and stores the forward-path.  If the recipient
     is known not to be a deliverable address, the SMTP server returns a
     550 reply, typically with a string such as "no such user - " and the
     mailbox name (other circumstances and reply codes are possible).
     This step of the procedure can be repeated any number of times.

    -- RFC 2821, 4.1.1.3.

    This command is used to identify an individual recipient of the mail
    data; multiple recipients are specified by multiple use of this
    command.  The argument field contains a forward-path and may contain
    optional parameters.

    The forward-path normally consists of the required destination
    mailbox.  Sending systems SHOULD not generate the optional list of
    hosts known as a source route.

    .......

    "RCPT TO:" ("<Postmaster@" domain ">" / "<Postmaster>" / Forward-Path)
                    [SP Rcpt-parameters] CRLF

    -- RFC 2821, 4.2.2.

      250 Requested mail action okay, completed
      251 User not local; will forward to <forward-path>
         (See section 3.4)
      252 Cannot VRFY user, but will accept message and attempt
          delivery

    -- RFC 2821, 4.3.2.

    RCPT
      S: 250, 251 (but see section 3.4 for discussion of 251 and 551)
      E: 550, 551, 552, 553, 450, 451, 452, 503, 550
    */

    //We'll treat 252 as accepted since it isn't really a failure

    $this->_buffer->expectAt(2, 'write', array("RCPT TO: <foo@bar>\r\n"));
    $this->_buffer->setReturnValue('write', 3, array("RCPT TO: <foo@bar>\r\n"));
    $this->_buffer->setReturnValue('readLine', "250 OK\r\n", array(3));
    $this->_buffer->expectMinimumCallCount('write', 3);

    $this->_finishBuffer();

    $message = new Swift_Mime_MockMessage();
    $message->setReturnValue('getFrom', array('me@domain.com'=>'Me'));
    $message->setReturnValue('getTo', array('foo@bar'=>null));

    try
    {
      $this->_smtp->start();
      $this->_smtp->send($message);
      $this->pass();
    }
    catch (Exception $e)
    {
      $this->fail('RCPT TO should accept a 250 response');
    }
  }

||||||||  public function testSuccessfulRcptCommandWith250Response()
  {
    /* -- RFC 2821, 3.3.

     The second step in the procedure is the RCPT command.

      RCPT TO:<forward-path> [ SP <rcpt-parameters> ] <CRLF>

     The first or only argument to this command includes a forward-path
     (normally a mailbox and domain, always surrounded by "<" and ">"
     brackets) identifying one recipient.  If accepted, the SMTP server
     returns a 250 OK reply and stores the forward-path.  If the recipient
     is known not to be a deliverable address, the SMTP server returns a
     550 reply, typically with a string such as "no such user - " and the
     mailbox name (other circumstances and reply codes are possible).
     This step of the procedure can be repeated any number of times.

    -- RFC 2821, 4.1.1.3.

    This command is used to identify an individual recipient of the mail
    data; multiple recipients are specified by multiple use of this
    command.  The argument field contains a forward-path and may contain
    optional parameters.

    The forward-path normally consists of the required destination
    mailbox.  Sending systems SHOULD not generate the optional list of
    hosts known as a source route.

    .......

    "RCPT TO:" ("<Postmaster@" domain ">" / "<Postmaster>" / Forward-Path)
                    [SP Rcpt-parameters] CRLF

    -- RFC 2821, 4.2.2.

      250 Requested mail action okay, completed
      251 User not local; will forward to <forward-path>
         (See section 3.4)
      252 Cannot VRFY user, but will accept message and attempt
          delivery

    -- RFC 2821, 4.3.2.

    RCPT
      S: 250, 251 (but see section 3.4 for discussion of 251 and 551)
      E: 550, 551, 552, 553, 450, 451, 452, 503, 550
    */

    //We'll treat 252 as accepted since it isn't really a failure

    $context = new Mockery();
    $buf = $this->_getBuffer($context);
    $smtp = $this->_getTransport($buf);
    $message = $context->mock('Swift_Mime_Message');
    $s = $context->sequence('SMTP-envelope');
    $context->checking(Expectations::create()
      -> allowing($message)->getFrom() -> returns(array('me@domain.com'=>'Me'))
      -> allowing($message)->getTo() -> returns(array('foo@bar'=>null))
      -> allowing($message)

      -> one($buf)->write("MAIL FROM: <me@domain.com>\r\n") -> inSequence($s) -> returns(1)
      -> one($buf)->readLine(1) -> returns('250 OK' . "\r\n")
      -> one($buf)->write("RCPT TO: <foo@bar>\r\n") -> inSequence($s) -> returns(2)
      -> one($buf)->readLine(2) -> returns('250 OK' . "\r\n")
      );
    $this->_finishBuffer($context, $buf);
    try
    {
      $smtp->start();
      $smtp->send($message);
    }
    catch (Exception $e)
    {
      $this->fail('RCPT TO should accept a 250 response');
    }
    $context->assertIsSatisfied();
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_CONST)
                    (SCALAR)))))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (NULL)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_METHOD_CALL
                                                        (AST_METHOD_CALL
                                                            (AST_METHOD_CALL
                                                                (AST_METHOD_CALL
                                                                    (AST_METHOD_CALL
                                                                        (AST_METHOD_CALL
                                                                            (AST_METHOD_CALL
                                                                                (AST_METHOD_CALL
                                                                                    (AST_METHOD_CALL
                                                                                        (AST_METHOD_CALL
                                                                                            (AST_METHOD_CALL
                                                                                                (AST_STATIC_CALL)
                                                                                                (
                                                                                                    (AST_VAR))))
                                                                                        (
                                                                                            (AST_ARRAY
                                                                                                (AST_ARRAY_ELEM
                                                                                                    (SCALAR)
                                                                                                    (SCALAR)))))
                                                                                    (
                                                                                        (AST_VAR))))
                                                                            (
                                                                                (AST_ARRAY
                                                                                    (AST_ARRAY_ELEM
                                                                                        (AST_CONST)
                                                                                        (SCALAR)))))
                                                                        (
                                                                            (AST_VAR)))
                                                                    (
                                                                        (AST_VAR)))
                                                                (
                                                                    (SCALAR)))
                                                            (
                                                                (AST_VAR)))
                                                        (
                                                            (SCALAR)))
                                                    (
                                                        (AST_VAR)))
                                                (
                                                    (SCALAR)))
                                            (
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (SCALAR))))
                                        (
                                            (AST_VAR)))
                                    (
                                        (SCALAR)))
                                (
                                    (AST_VAR)))
                            (
                                (SCALAR)))
                        (
                            (AST_VAR)))
                    (
                        (SCALAR)))
                (
                    (AST_BINARY_OP
                        (SCALAR)
                        (SCALAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))))
        (NULL))
    (AST_METHOD_CALL
        (AST_VAR)))