    public function test_()
    {
		$string1 = "delete";
		$string2 = "delete's";
		$lang = new JLanguage('');

		// string1 is strtoupper with javascript safe false
		$this->assertEquals(
				"Delete",
				$lang->_($string1,false)
		);
		$this->assertNotEquals(
				"delete",
				$lang->_($string1,false)
		);
		// string1 is strtoupper with javascript safe true
		$this->assertEquals(
				"Delete",
				$lang->_($string1,true)
		);
		$this->assertNotEquals(
				"delete",
				$lang->_($string1,true)
		);
		// string2 is not strtoupper with javascript safe false
		$this->assertEquals(
				"delete's",
				$lang->_($string2,false)
		);
		$this->assertNotEquals(
				"Delete's",
				$lang->_($string2,false)
		);
		// string2 is no strtoupper with javascript safe true, but is addslashes (' => \')
		$this->assertEquals(
				"delete\'s",
				$lang->_($string2,true)
		);
		$this->assertNotEquals(
				"Delete\'s",
				$lang->_($string2,true)
		);
    }

    /**
     * @todo Implement testTransliterate().
     */
||||||||    public function test_()
    {
		$string1 = "delete";
		$string2 = "delete's";
		$lang = new JLanguage('');

		$this->assertEquals(
				"delete",
				$lang->_($string1,false),
				"exact case should match when javascript safe is false "
		);
		$this->assertNotEquals(
				"Delete",
				$lang->_($string1,false),
				"should be case sensitive when javascript safe is false"
		);

		$this->assertEquals(
				"delete",
				$lang->_($string1,true),
				"exact case match should work when javascript safe is true"
		);
		$this->assertNotEquals(
				"Delete",
				$lang->_($string1,true),
				"should be case sensitive when javascript safe is true"
		);

		$this->assertEquals(
				"delete's",
				$lang->_($string2,false),
				"exact case should match when javascript safe is false "
		);
		$this->assertNotEquals(
				"Delete's",
				$lang->_($string2,false),
				"should be case sensitive when javascript safe is false"
		);

		$this->assertEquals(
				"delete\'s",
				$lang->_($string2,true),
				"exact case should match when javascript safe is true, also it calls addslashes (' => \') "
		);
		$this->assertNotEquals(
				"Delete\'s",
				$lang->_($string2,true),
				"should be case sensitive when javascript safe is true,, also it calls addslashes (' => \') "
		);
    }

    /**
     * @todo Implement testTransliterate().
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR))))