    public function init(array $options = array())
    {
        $this->options = array_replace_recursive($this->getDefaultOptions(), $options);
        $this->initLibraryLoader();

        /** @var $container AspectContainer */
        $container = $this->container = new $this->options['containerClass'];
        $container->set('kernel', $this);

        $sourceLoaderFilter = new SourceTransformingLoader();
        $sourceLoaderFilter->register();

        foreach ($this->registerTransformers($sourceLoaderFilter) as $sourceTransformer) {
            $sourceLoaderFilter->addTransformer($sourceTransformer);
        }

        // Load application configurator
        $sourceLoaderFilter->load($this->options['appLoader']);

        // Register all services in the container
        $aspectLoader = new AspectLoader($container);
        $container->set('aspect.loader', $aspectLoader);

        // TODO: use cached annotation reader
        $container->set('aspect.annotation.reader', new AnnotationReader());
        $container->set('aspect.annotation.raw.reader', new RawAnnotationReader());

        // Pointcut services
        $container->set('aspect.pointcut.lexer', new PointcutLexer());
        // TODO: use production parse table for parser
        $container->set('aspect.pointcut.parser', new Parser(new PointcutGrammar()));

        // Register general aspect loader extension
        $aspectLoader->registerLoaderExtension(new GeneralAspectLoaderExtension());
        $aspectLoader->registerLoaderExtension(new IntroductionAspectExtension());

        // Register kernel resources in the container
        $this->addKernelResourcesToContainer($container);

        // Register all AOP configuration in the container
        $this->configureAop($container);
    }

    /**
     * Returns an aspect container
     *
     * @return null|AspectContainer
     */
||||||||    public function init(array $options = array())
    {
        $this->options = array_replace_recursive($this->getDefaultOptions(), $options);
        $this->initLibraryLoader();

        /** @var $container AspectContainer */
        $container = $this->container = new $this->options['containerClass'];
        $container->set('kernel', $this);

        $sourceLoaderFilter = new SourceTransformingLoader();
        $sourceLoaderFilter->register();

        foreach ($this->registerTransformers($sourceLoaderFilter) as $sourceTransformer) {
            $sourceLoaderFilter->addTransformer($sourceTransformer);
        }

        // Load application configurator
        $sourceLoaderFilter->load($this->options['appLoader']);

        // Register all services in the container
        $aspectLoader = new AspectLoader($container);
        $container->set('aspect.loader', $aspectLoader);

        // TODO: use cached annotation reader
        $container->set('aspect.annotation.reader', new AnnotationReader());
        $container->set('aspect.annotation.raw.reader', new RawAnnotationReader());

        // Pointcut services
        $container->set('aspect.pointcut.lexer', new PointcutLexer());
        $container->set('aspect.pointcut.parser', new Parser(
            new PointcutGrammar(),
            // Include production parse table for parser
            include __DIR__ . '/../Aop/Pointcut/PointcutParseTable.php'
        ));

        // Register general aspect loader extension
        $aspectLoader->registerLoaderExtension(new GeneralAspectLoaderExtension());
        $aspectLoader->registerLoaderExtension(new IntroductionAspectExtension());

        // Register kernel resources in the container
        $this->addKernelResourcesToContainer($container);

        // Register all AOP configuration in the container
        $this->configureAop($container);
    }

    /**
     * Returns an aspect container
     *
     * @return null|AspectContainer
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_PROP
                (AST_VAR))
            (AST_NEW
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW
                (
                    (AST_NEW)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ASSIGN
            (AST_PROP
                (AST_VAR))
            (AST_NEW
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_FOREACH
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)))
        (AST_VAR)
        (NULL)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_NEW
                (
                    (AST_NEW)
                    (AST_INCLUDE_OR_EVAL
                        (AST_BINARY_OP
                            (AST_MAGIC_CONST)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))