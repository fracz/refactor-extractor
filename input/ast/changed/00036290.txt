    public function testRetrieveByUrl()
    {
        self::$storage->write('simple_quote', '', 'data', '127.0.0.1', 'http://foo.bar/\'', time());
        self::$storage->write('double_quote', '', 'data', '127.0.0.1', 'http://foo.bar/"', time());
        self::$storage->write('backslash', '', 'data', '127.0.0.1', 'http://foo\\bar/', time());
        self::$storage->write('percent', '', 'data', '127.0.0.1', 'http://foo.bar/%', time());
        self::$storage->write('underscore', '', 'data', '127.0.0.1', 'http://foo.bar/_', time());

        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo.bar/\'', 10)), 1, '->find() accepts single quotes in URLs');
        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo.bar/"', 10)), 1, '->find() accepts double quotes in URLs');
        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo\\bar/', 10)), 1, '->find() accepts backslash in URLs');
        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo.bar/%', 10)), 1, '->find() does not interpret a "%" as a wildcard in the URL');
        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo.bar/_', 10)), 1, '->find() does not interpret a "_" as a wlidcard in the URL');
    }

}||||||||    public function testRetrieveByUrl()
    {
        $profile = new Profile('simple_quote');
        $profile->setIp('127.0.0.1');
        $profile->setUrl('http://foo.bar/\'');
        self::$storage->write($profile);

        $profile = new Profile('double_quote');
        $profile->setIp('127.0.0.1');
        $profile->setUrl('http://foo.bar/"');
        self::$storage->write($profile);

        $profile = new Profile('backslash');
        $profile->setIp('127.0.0.1');
        $profile->setUrl('http://foo\\bar/');
        self::$storage->write($profile);

        $profile = new Profile('percent');
        $profile->setIp('127.0.0.1');
        $profile->setUrl('http://foo.bar/%');
        self::$storage->write($profile);

        $profile = new Profile('underscore');
        $profile->setIp('127.0.0.1');
        $profile->setUrl('http://foo.bar/_');
        self::$storage->write($profile);

        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo.bar/\'', 10)), 1, '->find() accepts single quotes in URLs');
        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo.bar/"', 10)), 1, '->find() accepts double quotes in URLs');
        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo\\bar/', 10)), 1, '->find() accepts backslash in URLs');
        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo.bar/%', 10)), 1, '->find() does not interpret a "%" as a wildcard in the URL');
        $this->assertEquals(count(self::$storage->find('127.0.0.1', 'http://foo.bar/_', 10)), 1, '->find() does not interpret a "_" as a wlidcard in the URL');
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (SCALAR)
            (AST_CALL)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_STATIC_PROP)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_PROP)
                        (
                            (SCALAR)
                            (SCALAR)
                            (SCALAR)))))
            (SCALAR)
            (SCALAR))))