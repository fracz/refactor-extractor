    private function getModuleCache($file, $check_freshness = true)
    {
        $cacheFile = $this->kernel->getCacheDir().'/modules/'.$file;

        if (file_exists($cacheFile)) {
            if ($check_freshness && (filemtime($cacheFile) + self::_WATCH_DOG_) <= time()) {
                return false;
            }

            $fh = fopen($cacheFile, 'r');
            $cache = trim(fgets($fh));

            if ($cache) {
                return json_decode($cache);
            }
        }

        return false;
    }

||||||||    private function getModuleCache($file, $check_freshness = true)
    {
        $cacheFile = $this->kernel->getCacheDir().'/modules/'.$file;
        if (! file_exists($cacheFile)) {
            return false;
        }

        try {
            if ($check_freshness && (filemtime($cacheFile) + self::_WATCH_DOG_) <= time()) {
                return false;
            }

            $fh = fopen($cacheFile, 'r');
            $cache = trim(fgets($fh));

            if ($cache) {
                return json_decode($cache);
            }
        } catch (\Exception $e) {
            throw new \Exception('Cannot read from the cache file '. $file);
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_VAR)))
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (AST_CALL)))
                        (
                            (AST_RETURN
                                (AST_CONST)))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_CALL
                                (
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_RETURN
                                (AST_CALL
                                    (
                                        (AST_VAR))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_TRY
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_CALL
                                    (
                                        (AST_VAR)))
                                (AST_CLASS_CONST
                                    (SCALAR)))
                            (AST_CALL)))
                    (
                        (AST_RETURN
                            (AST_CONST)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_CALL
                            (
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_RETURN
                            (AST_CALL
                                (
                                    (AST_VAR))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))))))))
        (NULL)))