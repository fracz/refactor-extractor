  public function testIsolation() {
    $conn = $this->newIsolatedConnection();

    $test_phid = 'PHID-TEST-'.Filesystem::readRandomCharacters(20);

    queryfx(
      $conn,
      'INSERT INTO phabricator_phid.phid (phid) VALUES (%s)',
      $test_phid);

    try {
      $real_phid = id(new PhabricatorPHID())->loadOneWhere(
        'phid = %s',
        $test_phid);
      $this->assertEqual(
        null,
        $real_phid,
        'Expect fake PHID to exist only in isolation.');
    } catch (AphrontQueryConnectionException $ex) {
      // If we can't connect to the database, conclude that the isolated
      // connection actually is isolated. Philosophically, this perhaps allows
      // us to claim this test does not depend on the database?
    }
  }

||||||||  public function testIsolation() {
    $conn = $this->newIsolatedConnection();
    $test_phid = $this->generateTestPHID();

    queryfx(
      $conn,
      'INSERT INTO phabricator_phid.phid (phid) VALUES (%s)',
      $test_phid);

    $this->assertNoSuchPHID($test_phid);
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (SCALAR)
            (AST_STATIC_CALL
                (
                    (SCALAR)))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_CALL
                        (
                            (AST_NEW)))
                    (
                        (SCALAR)
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)
                    (AST_VAR)
                    (SCALAR))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR))))