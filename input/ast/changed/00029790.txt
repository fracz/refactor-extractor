    public static function errorHandler($errno, $errstr, $errfile, $errline)
    {
        // if the error has been suppressed by the @ we don't handle the error
        if (error_reporting() == 0) {
            return;
        }

        $error = new \ErrorException($errstr, 0, $errno, $errfile, $errline);
        Log::error($error);

        switch ($errno) {
            case E_ERROR:
            case E_PARSE:
            case E_CORE_ERROR:
            case E_CORE_WARNING:
            case E_COMPILE_ERROR:
            case E_COMPILE_WARNING:
            case E_USER_ERROR:
                exit;
                break;

            case E_WARNING:
            case E_NOTICE:
            case E_USER_WARNING:
            case E_USER_NOTICE:
            case E_STRICT:
            case E_RECOVERABLE_ERROR:
            case E_DEPRECATED:
            case E_USER_DEPRECATED:
            default:
                // do not exit
                break;
        }
    }
}||||||||    public static function errorHandler($errno, $errstr, $errfile, $errline)
    {
        // if the error has been suppressed by the @ we don't handle the error
        if (error_reporting() == 0) {
            return;
        }

        switch ($errno) {
            case E_ERROR:
            case E_PARSE:
            case E_CORE_ERROR:
            case E_CORE_WARNING:
            case E_COMPILE_ERROR:
            case E_COMPILE_WARNING:
            case E_USER_ERROR:
                // Convert the error to an exception with an HTML message
                $e = new \Exception();
                $message = self::getHtmlMessage($errno, $errstr, $errfile, $errline, $e->getTraceAsString());
                throw new ErrorException($message, 0, $errno, $errfile, $errline);
                break;

            case E_WARNING:
            case E_NOTICE:
            case E_USER_WARNING:
            case E_USER_NOTICE:
            case E_STRICT:
            case E_RECOVERABLE_ERROR:
            case E_DEPRECATED:
            case E_USER_DEPRECATED:
            default:
                Log::info(self::createLogMessage($errno, $errstr, $errfile, $errline));
                break;
        }
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL)
                (SCALAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_EXIT
                        (NULL))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_BREAK
                        (NULL)))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL)
                (SCALAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_SWITCH
        (AST_VAR)
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_NEW))
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))))
                    (AST_THROW
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (AST_CONST))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_STATIC_CALL
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)))))
                    (AST_BREAK
                        (NULL)))))))