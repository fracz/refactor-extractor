    protected function configure()
    {
        $this->container = new ContainerBuilder();

        $this->formatProcessor = new FormatProcessor();
        $this->gherkinProcessor = new GherkinProcessor();
        $this->contextProcessor = new ContextProcessor();
        $this->locatorProcessor = new LocatorProcessor();
        $this->initProcessor = new InitProcessor();
        $this->containerProcessor = new ContainerProcessor();
        $this->helpProcessor = new HelpProcessor();
        $this->rerunProcessor = new RerunProcessor();

        $this->setName('behat');
        $this->setDefinition(array_merge(
            array(
                new InputArgument('features',
                    InputArgument::OPTIONAL,
                    'Feature(s) to run. Could be a dir (<comment>features/</comment>), ' .
                    'a feature (<comment>*.feature</comment>) or a scenario at specific line ' .
                    '(<comment>*.feature:10</comment>).'
                ),
                new InputOption('--strict',         null,
                    InputOption::VALUE_NONE,
                    '       ' .
                    'Fail if there are any undefined or pending steps.'
                ),
            ),
            $this->initProcessor->getInputOptions(),
            $this->helpProcessor->getInputOptions(),
            $this->containerProcessor->getInputOptions(),
//            $this->locatorProcessor->getInputOptions(),
            $this->gherkinProcessor->getInputOptions(),
            $this->formatProcessor->getInputOptions(),
//            $this->contextProcessor->getInputOptions(),
            $this->rerunProcessor->getInputOptions()
        ));
    }

||||||||    protected function configure()
    {
        $this->container = new ContainerBuilder();

        $this->setProcessors(array(
            new ContainerProcessor(),
            new LocatorProcessor(),
            new InitProcessor(),
            new ContextProcessor(),
            new FormatProcessor(),
            new HelpProcessor(),
            new GherkinProcessor(),
            new RerunProcessor(),
        ));

        $this->setName('behat');
        $this->setDefinition(array_merge(
            array(
                new InputArgument('features',
                    InputArgument::OPTIONAL,
                    'Feature(s) to run. Could be a dir (<comment>features/</comment>), ' .
                    'a feature (<comment>*.feature</comment>) or a scenario at specific line ' .
                    '(<comment>*.feature:10</comment>).'
                )
            ),
            $this->getProcessorsInputOptions(),
            array(
                new InputOption('--strict',         null,
                    InputOption::VALUE_NONE,
                    '       ' .
                    'Fail if there are any undefined or pending steps.'
                )
            )
        ));
    }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (SCALAR))))
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_CONST)
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (SCALAR))))
                            (NULL)))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_NEW)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CALL
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (SCALAR))))
                            (NULL)))
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_NEW
                                (
                                    (SCALAR)
                                    (AST_CONST)
                                    (AST_CLASS_CONST
                                        (SCALAR))
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (SCALAR))))
                            (NULL))))))))