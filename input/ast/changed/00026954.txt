    public function next()
    {
        $key = ++$this->key;
        $current = ($key >= $this->count)
            ? false
            : $this[$key];
        $this->current = $current;

        return $current;
    }

    /**
     * Shifts the pointer to the previous item in the sequence and returns the newly selected item; returns
     * false when none found.
     *
     * @return bool|mixed|null
     */
||||||||    public function next()
    {
        $key = ++$this->key;
        $current = $this->offsetGet($key);
        $this->current = $current;

        return $current;
    }

    /**
     * Shifts the pointer to the previous item in the sequence and returns the newly selected item; returns
     * false when none found.
     *
     * @return bool|mixed|null
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PRE_INC
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_BINARY_OP
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))
            (AST_CONST)
            (AST_DIM
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PRE_INC
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))