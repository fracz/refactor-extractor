	public function run(PresenterRequest $request)
	{
		try {
			// PHASE 1: STARTUP
			$this->phase = self::PHASE_STARTUP;
			$this->request = $request;
			$this->payload = (object) NULL;
			$this->setParent($this->getParent(), $request->getPresenterName());

			$this->initGlobalParams();
			$this->startup();
			if (!$this->startupCheck) {
				$class = $this->reflection->getMethod('startup')->getDeclaringClass()->getName();
				trigger_error("Method $class::startup() or its descendant doesn't call parent::startup().", E_USER_WARNING);
			}
			// calls $this->action<Action>()
			$this->tryCall($this->formatActionMethod($this->getAction()), $this->params);

			if ($this->autoCanonicalize) {
				$this->canonicalize();
			}
			if ($this->getHttpRequest()->isMethod('head')) {
				$this->terminate();
			}

			// back compatibility
			if (method_exists($this, 'beforePrepare')) {
				$this->beforePrepare();
				trigger_error('beforePrepare() is deprecated; use createComponent{Name}() instead.', E_USER_WARNING);
			}
			if ($this->tryCall('prepare' . $this->getView(), $this->params)) {
				trigger_error('prepare' . ucfirst($this->getView()) . '() is deprecated; use createComponent{Name}() instead.', E_USER_WARNING);
			}

			// PHASE 2: SIGNAL HANDLING
			$this->phase = self::PHASE_SIGNAL;
			// calls $this->handle<Signal>()
			$this->processSignal();

			// PHASE 3: RENDERING VIEW
			$this->phase = self::PHASE_RENDER;

			$this->beforeRender();
			// calls $this->render<View>()
			$this->tryCall($this->formatRenderMethod($this->getView()), $this->params);
			$this->afterRender();

			// save component tree persistent state
			$this->saveGlobalState();
			if ($this->isAjax()) {
				$this->payload->state = $this->getGlobalState();
			}

			// finish template rendering
			$this->sendTemplate();

		} catch (AbortException $e) {
			// continue with shutting down
		} /* finally */ {

			// PHASE 4: SHUTDOWN
			$this->phase = self::PHASE_SHUTDOWN;

			// back compatibility for use terminate() instead of sendPayload()
			if ($this->isAjax() && !$this->response && (array) $this->payload) {
				try { $this->sendPayload(); }
				catch (AbortException $e) { }
			}

			if ($this->hasFlashSession()) {
				$this->getFlashSession()->setExpiration($this->response instanceof RedirectingResponse ? '+ 30 seconds': '+ 3 seconds');
			}

			$this->onShutdown($this, $this->response);
			$this->shutdown($this->response);

			return $this->response;
		}
	}



	/**
	 * Returns current presenter life cycle phase.
	 * @return int
	 */
||||||||	public function run(PresenterRequest $request)
	{
		try {
			// PHASE 1: STARTUP
			$this->phase = self::PHASE_STARTUP;
			$this->request = $request;
			$this->payload = (object) NULL;
			$this->setParent($this->getParent(), $request->getPresenterName());

			$this->initGlobalParams();
			$this->startup();
			if (!$this->startupCheck) {
				$class = $this->reflection->getMethod('startup')->getDeclaringClass()->getName();
				trigger_error("Method $class::startup() or its descendant doesn't call parent::startup().", E_USER_WARNING);
			}
			// calls $this->action<Action>()
			$this->tryCall($this->formatActionMethod($this->getAction()), $this->params);

			if ($this->autoCanonicalize) {
				$this->canonicalize();
			}
			if ($this->getHttpRequest()->isMethod('head')) {
				$this->terminate();
			}

			// back compatibility
			if (method_exists($this, 'beforePrepare')) {
				$this->beforePrepare();
				trigger_error('beforePrepare() is deprecated; use createComponent{Name}() instead.', E_USER_WARNING);
			}
			if ($this->tryCall('prepare' . $this->getView(), $this->params)) {
				trigger_error('prepare' . ucfirst($this->getView()) . '() is deprecated; use createComponent{Name}() instead.', E_USER_WARNING);
			}

			// PHASE 2: SIGNAL HANDLING
			$this->phase = self::PHASE_SIGNAL;
			// calls $this->handle<Signal>()
			$this->processSignal();

			// PHASE 3: RENDERING VIEW
			$this->phase = self::PHASE_RENDER;

			$this->beforeRender();
			// calls $this->render<View>()
			$this->tryCall($this->formatRenderMethod($this->getView()), $this->params);
			$this->afterRender();

			// save component tree persistent state
			$this->saveGlobalState();
			if ($this->isAjax()) {
				$this->payload->state = $this->getGlobalState();
			}

			// finish template rendering
			$this->sendTemplate();

		} catch (AbortException $e) {
			// continue with shutting down
		} /* finally */ {

			// PHASE 4: SHUTDOWN
			$this->phase = self::PHASE_SHUTDOWN;

			if ($this->isAjax()) try {
				if ($this->response instanceof RenderResponse) { // snippets - TODO
					/*Nette\Templates\*/SnippetHelper::$outputAllowed = FALSE;
					$this->response->send();
					$this->sendPayload();

				} elseif (!$this->response && (array) $this->payload) { // back compatibility for use terminate() instead of sendPayload()
					$this->sendPayload();
				}
			} catch (AbortException $e) { }

			if ($this->hasFlashSession()) {
				$this->getFlashSession()->setExpiration($this->response instanceof RedirectingResponse ? '+ 30 seconds': '+ 3 seconds');
			}

			$this->onShutdown($this, $this->response);
			$this->shutdown($this->response);

			return $this->response;
		}
	}



	/**
	 * Returns current presenter life cycle phase.
	 * @return int
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CAST
                    (AST_CONST)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (SCALAR))))))
                        (AST_CALL
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CONST))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_PROP
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CONST))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))
                                    (SCALAR))
                                (AST_CONST))))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_PROP
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR))))
                (AST_CAST
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_TRY
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)))
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_CONDITIONAL
                            (AST_INSTANCEOF
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CAST
                    (AST_CONST)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_PROP
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR))
                                        (
                                            (SCALAR))))))
                        (AST_CALL
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR))
                                (AST_CONST))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_PROP
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (
                            (SCALAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_CONST))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_METHOD_CALL
                                    (AST_VAR)))
                            (AST_PROP
                                (AST_VAR))))
                    (
                        (AST_CALL
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_METHOD_CALL
                                                    (AST_VAR)))))
                                    (SCALAR))
                                (AST_CONST))))))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_ASSIGN
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_PROP
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_PROP
                                    (AST_VAR)))
                            (AST_METHOD_CALL
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR)))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)))
        (NULL))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_TRY
                    (
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_INSTANCEOF
                                    (AST_PROP
                                        (AST_VAR)))
                                (
                                    (AST_ASSIGN
                                        (AST_STATIC_PROP)
                                        (AST_CONST))
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_PROP
                                            (AST_VAR)))
                                    (AST_CAST
                                        (AST_PROP
                                            (AST_VAR))))
                                (
                                    (AST_METHOD_CALL
                                        (AST_VAR))))))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)))
                    (NULL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (
                        (AST_CONDITIONAL
                            (AST_INSTANCEOF
                                (AST_PROP
                                    (AST_VAR)))
                            (SCALAR)
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))