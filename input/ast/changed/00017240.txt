    public function movePosition($project_id, $task_id, $column_id, $position, $swimlane_id = 0, $fire_events = true)
    {
        $original_task = $this->taskFinder->getById($task_id);

        $result = $this->calculateAndSave($project_id, $task_id, $column_id, $position, $swimlane_id);

        if ($result) {

            if ($original_task['swimlane_id'] != $swimlane_id) {
                $this->calculateAndSave($project_id, 0, $column_id, 1, $original_task['swimlane_id']);
            }

            if ($fire_events) {
                $this->fireEvents($original_task, $column_id, $position, $swimlane_id);
            }

            if ($original_task['recurrence_status'] == Task::RECURE_STATUS_PENDING
                && $original_task['column_id'] != $column_id
                && (
                ($original_task['column_id'] == $this->board->getFirstColumn($project_id)
                    && $original_task['recurrence_trigger'] == Task::RECURE_TRIGGER_FIRST)
                || ($column_id == $this->board->getLastColumn($project_id)
                    && $original_task['recurrence_trigger'] == Task::RECURE_TRIGGER_LAST)
                )
            )
            {
                $this->taskDuplication->createRecurrence($task_id);
            }
        }

        return $result;
    }

    /**
     * Calculate the new position of all tasks
     *
     * @access public
     * @param  integer    $project_id        Project id
     * @param  integer    $task_id           Task id
     * @param  integer    $column_id         Column id
     * @param  integer    $position          Position (must be >= 1)
     * @param  integer    $swimlane_id       Swimlane id
     * @return array|boolean
     */
||||||||    public function movePosition($project_id, $task_id, $column_id, $position, $swimlane_id = 0, $fire_events = true)
    {
        $original_task = $this->taskFinder->getById($task_id);

        $result = $this->calculateAndSave($project_id, $task_id, $column_id, $position, $swimlane_id);

        if ($result) {

            if ($original_task['swimlane_id'] != $swimlane_id) {
                $this->calculateAndSave($project_id, 0, $column_id, 1, $original_task['swimlane_id']);
            }

            if ($fire_events) {
                $this->fireEvents($original_task, $column_id, $position, $swimlane_id);
            }
        }

        return $result;
    }

    /**
     * Calculate the new position of all tasks
     *
     * @access public
     * @param  integer    $project_id        Project id
     * @param  integer    $task_id           Task id
     * @param  integer    $column_id         Column id
     * @param  integer    $position          Position (must be >= 1)
     * @param  integer    $swimlane_id       Swimlane id
     * @return array|boolean
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_CLASS_CONST
                                        (SCALAR)))
                                (AST_BINARY_OP
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_VAR)))
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (AST_VAR))))
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CLASS_CONST
                                            (SCALAR))))
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))
                                            (
                                                (AST_VAR))))
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CLASS_CONST
                                            (SCALAR))))))
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_DIM
                                        (AST_VAR)
                                        (SCALAR)))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)))))))))
    (AST_RETURN
        (AST_VAR)))