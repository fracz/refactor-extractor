	function unsetAllSettings($plugin_id = null) {
		if ($plugin_id) {
			$plugin = elgg_get_plugin_from_id($plugin_id);
		} else {
			elgg_deprecated_notice('elgg_unset_all_plugin_settings() requires plugin_id to be set', 1.9);
			$plugin = elgg_get_calling_plugin_entity();
		}

		if (!$plugin) {
			return false;
		}

		return $plugin->unsetAllSettings();
	}

	/**
	 * Returns entities based upon plugin user settings.
	 * Takes all the options for {@link elgg_get_entities_from_private_settings()}
	 * in addition to the ones below.
	 *
	 * @param array $options Array in the format:
	 *
	 * 	plugin_id => STR The plugin id. Required.
	 *
	 * 	plugin_user_setting_names => null|ARR private setting names
	 *
	 * 	plugin_user_setting_values => null|ARR metadata values
	 *
	 * 	plugin_user_setting_name_value_pairs => null|ARR (
	 *                                         name => 'name',
	 *                                         value => 'value',
	 *                                         'operand' => '=',
	 *                                        )
	 * 	                             Currently if multiple values are sent via
	 *                               an array (value => array('value1', 'value2')
	 *                               the pair's operand will be forced to "IN".
	 *
	 * 	plugin_user_setting_name_value_pairs_operator => null|STR The operator to use for combining
	 *                                        (name = value) OPERATOR (name = value); default AND
	 *
	 * @return mixed int If count, int. If not count, array. false on errors.
	 */
||||||||	function unsetAllSettings($plugin_id = null) {
		if ($plugin_id) {
			$plugin = $this->get($plugin_id);
		} else {
			elgg_deprecated_notice('elgg_unset_all_plugin_settings() requires plugin_id to be set', 1.9);
			$plugin = elgg_get_calling_plugin_entity();
		}

		if (!$plugin) {
			return false;
		}

		return $plugin->unsetAllSettings();
	}

	/**
	 * Returns entities based upon plugin user settings.
	 * Takes all the options for {@link elgg_get_entities_from_private_settings()}
	 * in addition to the ones below.
	 *
	 * @param array $options Array in the format:
	 *
	 * 	plugin_id => STR The plugin id. Required.
	 *
	 * 	plugin_user_setting_names => null|ARR private setting names
	 *
	 * 	plugin_user_setting_values => null|ARR metadata values
	 *
	 * 	plugin_user_setting_name_value_pairs => null|ARR (
	 *                                         name => 'name',
	 *                                         value => 'value',
	 *                                         'operand' => '=',
	 *                                        )
	 * 	                             Currently if multiple values are sent via
	 *                               an array (value => array('value1', 'value2')
	 *                               the pair's operand will be forced to "IN".
	 *
	 * 	plugin_user_setting_name_value_pairs_operator => null|STR The operator to use for combining
	 *                                        (name = value) OPERATOR (name = value); default AND
	 *
	 * @return mixed int If count, int. If not count, array. false on errors.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))