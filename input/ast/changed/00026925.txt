    public function testExecute()
    {
        $project = m::mock('phpDocumentor\Descriptor\ProjectDescriptor');

        $behaviourCollection = m::mock('phpDocumentor\Transformer\Behaviour\Collection');
        $behaviourCollection ->shouldReceive('process')->with($project);

        $transformation = m::mock('phpDocumentor\Transformer\Transformation')
            ->shouldReceive('execute')->with($project)
            ->shouldReceive('getQuery')->andReturn('')
            ->shouldReceive('getWriter')->andReturn(new \stdClass())
            ->shouldReceive('getArtifact')->andReturn('')
            ->getMock();

        $templateCollection = m::mock('phpDocumentor\Transformer\Template\Collection');
        $templateCollection->shouldReceive('getTransformations')->andReturn(
            array($transformation)
        );

        $fixture = new Transformer($templateCollection);
        $fixture->setBehaviours($behaviourCollection);

        $this->assertNull($fixture->execute($project));
    }

    /**
     * Tests whether the generateFilename method returns a file according to
     * the right format.
     *
     * @covers phpDocumentor\Transformer\Transformer::generateFilename
     *
     * @return void
     */
||||||||    public function testExecute()
    {
        // FIXME
        $this->markTestIncomplete();
        $project = m::mock('phpDocumentor\Descriptor\ProjectDescriptor');

        $behaviourCollection = m::mock('phpDocumentor\Transformer\Behaviour\Collection');
        $behaviourCollection ->shouldReceive('process')->with($project);
        $behaviourCollection ->shouldReceive('count')->andReturn(0);

        $transformation = m::mock('phpDocumentor\Transformer\Transformation')
            ->shouldReceive('execute')->with($project)
            ->shouldReceive('getQuery')->andReturn('')
            ->shouldReceive('getWriter')->andReturn(new \stdClass())
            ->shouldReceive('getArtifact')->andReturn('')
            ->getMock();

        $templateCollection = m::mock('phpDocumentor\Transformer\Template\Collection');
        $templateCollection->shouldReceive('getTransformations')->andReturn(
            array($transformation)
        );

        $writerCollectionMock = m::mock('phpDocumentor\Transformer\Writer\Collection');
        $writerCollectionMock->shouldIgnoreMissing();

        $fixture = new Transformer($templateCollection, $writerCollectionMock);
        $fixture->setBehaviours($behaviourCollection);

        $this->assertNull($fixture->execute($project));
    }

    /**
     * Tests whether the generateFilename method returns a file according to
     * the right format.
     *
     * @covers phpDocumentor\Transformer\Transformer::generateFilename
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_STATIC_CALL
                                                (
                                                    (SCALAR)))
                                            (
                                                (SCALAR)))
                                        (
                                            (AST_VAR)))
                                    (
                                        (SCALAR)))
                                (
                                    (SCALAR)))
                            (
                                (SCALAR)))
                        (
                            (AST_NEW)))
                    (
                        (SCALAR)))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_STATIC_CALL
                                                (
                                                    (SCALAR)))
                                            (
                                                (SCALAR)))
                                        (
                                            (AST_VAR)))
                                    (
                                        (SCALAR)))
                                (
                                    (SCALAR)))
                            (
                                (SCALAR)))
                        (
                            (AST_NEW)))
                    (
                        (SCALAR)))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR))))))