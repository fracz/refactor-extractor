	public function getPresenter($need = TRUE)
	{
		$presenter = $this->lookup('Nette::Application::Presenter');
		if ($need && $presenter === NULL) {
			throw new /*::*/InvalidStateException('Component is not attached to presenter.');
		}
		return $presenter;
	}



	/**
	 * Returns a fully-qualified name that uniquely identifies the component.
	 * within the presenter hierarchy.
	 * @return string
	 */
||||||||	public function getPresenter($need = TRUE)
	{
		return $this->lookup('Nette::Application::Presenter', $need);
	}



	/**
	 * Returns a fully-qualified name that uniquely identifies the component.
	 * within the presenter hierarchy.
	 * @return string
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_VAR)))))