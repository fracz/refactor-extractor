	function get_cached_images_hash($cachefile) {
		preg_match('/Cache: (.+?)\s/', file_get_contents($cachefile), $matches);
		return $matches[1];
	}

||||||||	function get_cached_images_hash() {
		preg_match('/Cache: (.+?)\s/', file_get_contents($this->cachefile), $matches);
		return $matches[1];
	}

}

class Page {

	var $page_name;
	var $content_file;
	var $template_file;
	var $public_file;

	var $page_name_unclean;
	var $projects_folder_unclean;
	var $unclean_page_names = array();

	function __construct($page_name) {
		$this->page = ($page_name) ? $page_name : "index";
		$this->store_unclean_page_names('../content/');
		$this->page_name_unclean = $this->unclean_page_name($this->page);
		$this->projects_folder_unclean = $this->unclean_page_name('projects');
		$this->template_file = $this->get_template_file();
		$this->content_file = $this->get_content_file();
		$this->public_file = $this->get_public_file();
	}

	function store_unclean_page_names($dir) {
		$this->unclean_page_names = $this->list_files($dir, '/./');
	}

	function list_files($dir, $regex) {
		if(!is_dir($dir)) return false;
		if(!$dh = opendir($dir)) return false;
		while (($file = readdir($dh)) !== false) if(!is_dir($file) && preg_match($regex, $file)) $files[] = $file;
		closedir($dh);
		return $files;
	}

	function clean_page_name($page_name) {
		return preg_replace("/^\d+?\./", "", $page_name);
	}

	function unclean_page_name($name) {
		foreach($this->unclean_page_names as $key => $file) {
			if(preg_match("/".$name."(\.txt)?$/", $file)) return $file;
		}
		return false;
	}

	function get_content_file() {
		if($this->page_name_unclean && file_exists("../content/$this->page_name_unclean/information.txt")) return "../content/$this->page_name_unclean/information.txt";
		elseif($this->page_name_unclean && file_exists("../content/".$this->page_name_unclean)) return "../content/".$this->page_name_unclean;
		else return false;
	}

	function get_template_file() {
		if(file_exists("./templates/$this->page.html")) return "./templates/$this->page.html";
		elseif(file_exists("./templates/content.html")) return "./templates/content.html";
		else return false;
	}

	function get_public_file() {
		if(file_exists("../public/$this->page.html")) return "../public/$this->page.html";
		else return false;
	}

}

class Project extends Page {

	function __construct($page_name) {
		$this->page = ($page_name) ? $page_name : "index";
		$this->store_unclean_page_names('../content/');
		$this->projects_folder_unclean = $this->unclean_page_name('projects');
		$this->store_unclean_page_names('../content/'.$this->projects_folder_unclean);
		$this->page_name_unclean = $this->unclean_page_name($this->page);

		$this->template_file = $this->get_template_file();
		$this->content_file = $this->get_content_file();
		$this->public_file = $this->get_public_file();
	}

	function get_content_file() {
		if($this->page_name_unclean && file_exists("../content/".$this->projects_folder_unclean."/$this->page_name_unclean/information.txt")) return "../content/".$this->projects_folder_unclean."/$this->page_name_unclean/information.txt";
		else return false;
	}

	function get_template_file() {
		if(file_exists("./templates/project.html")) return "./templates/project.html";
		else return false;
	}

}

class ContentParser {

	static function sort_by_length($a,$b){
		if($a == $b) return 0;
		return (strlen($a) > strlen($b) ? -1 : 1);
	}

	function preparse($text) {
		$patterns = array(
			# replace inline colons
			'/(?<=\n)([\w\d_-]+?):/',
			'/:/',
			'/\\\x01/',
			# replace inline dashes
			'/(?<=\n)-/',
			'/-/',
			'/\\\x02/',
			# convert lists
			'/\n?-(.+?)(?=\n)/',
			'/(<li>.*<\/li>)/',
			# wrap multi-line text in paragraphs
			'/([^\n]+?)(?=\n)/',
			'/<p>(.+):(.+)<\/p>/',
			'/: (.+)(?=\n<p>)/',
			# automatically link email addresses
			'/([A-Za-z0-9.-]+)@([A-Za-z0-9.-]+\.[A-Za-z]{2,4})/',
			# automatically link http:// websites
			'/http&#58;\/\/([A-Za-z0-9.-]+\.[A-Za-z]{2,4})/',
		);
		$replacements = array(
			# replace inline colons
			'$1\\x01',
			'&#58;',
			':',
			# replace inline dashes
			'\\x02',
			'&#45;',
			'-',
			# convert lists
			'<li>$1</li>',
			'<ul>$1</ul>',
			# wrap multi-line text in paragraphs
			'<p>$1</p>',
			'$1:$2',
			':<p>$1</p>',
			# automatically link email addresses
			'<a href="mailto&#58;$1&#64;$2">$1&#64;$2</a>',
			# automatically link http:// websites
			'<a href="http&#58;//$1">http&#58;//$1</a>',
		);
		$parsed_text = preg_replace($patterns, $replacements, $text);
		return $parsed_text;
	}

	function create_replacement_rules($text) {
		preg_match_all('/[\w\d_-]+?:[\S\s]+?\n\n/', $text, $matches);
		foreach($matches[0] as $match) {
			$colon_split = split(":", $match);
			$replacement_pairs[$colon_split[0]] = $colon_split[1];
		}
		// sort keys by length, to ensure replacements are made in the correct order
		uksort($replacement_pairs, array("ContentParser", "sort_by_length"));
		return $replacement_pairs;
	}

	function parse($content_file) {
		$text = file_get_contents($content_file);
		$parsed_text = $this->preparse("\n\n".$text."\n\n");
		return $this->create_replacement_rules($parsed_text);
	}
}

class TemplateParser {

	var $page;
	var $matches = array('/@Projects/', '/@Images/', '/@Navigation/', '/@Year/');
	var $replacements;

	function create_replacement_partials() {
		$p = new ProjectsPartial;
		$i = new ImagesPartial;
		$n = new NavigationPartial;
		$partials[] = $p->render($this->page);
		$partials[] = $i->render(preg_replace('/\/[^\/]+$/', '', $this->page->content_file));
		$partials[] = $n->render($this->page);
		$partials[] = date('Y');
		return $partials;
	}

	function add_replacement_rules($rules) {
		foreach($rules as $key => $value) {
			$this->matches[] = '/@'.$key.'/';
			$this->replacements[] = $value;
		}
	}

	function parse($page, $rules) {
		$this->page = $page;
		$this->replacements = $this->create_replacement_partials();
		$text = file_get_contents($this->page->template_file);
		$this->add_replacement_rules($rules);
		return preg_replace($this->matches, $this->replacements, $text);
	}
}

class Partial {

	function check_thumb($dir, $file) {
		$file_types = array("jpg", "gif", "png");
		foreach($file_types as $file_type) {
			if(file_exists($dir."/".$file."/thumb.".$file_type)) {
				return '<img src="'.$dir.'/'.$file.'/thumb.'.$file_type.'" alt="Project Thumbnail">';
			}
		}
		return "";
	}

	function parse($file) {
		$file = file_get_contents($file);
		preg_match('/([\S\s]*)foreach[\S\s]*{([\S\s]*)}([\S\s]*)/', $file, $matches);
		return array($matches[1], $matches[2], $matches[3]);
	}

}

class NavigationPartial extends Partial {

	var $dir = "../content/";
	var $partial_file = "./templates/partials/navigation.html";

	function render($page) {
		$wrappers = $this->parse($this->partial_file);

		if($dh = opendir($this->dir)) {
			while (($file = readdir($dh)) !== false) {
				if(!is_dir($file) && $file != ".DS_Store" && !preg_match('/index/', $file)) {
					$files[] = $file;
					$file_name_clean = preg_replace(array('/^\d+?\./', '/\.txt/'), '', $file);
					$file_vars[] = array(
						"/@url/" => $file_name_clean,
						"/@name/" => ucfirst(preg_replace('/-/', ' ', $file_name_clean)),
					);
				}
			}
		}

		asort($files, SORT_NUMERIC);
		$html .= $wrappers[0];
		$p = new ProjectsPartial;
		foreach($files as $key => $file) {
			$html .= preg_replace(array_keys($file_vars[$key]), array_values($file_vars[$key]), $wrappers[1]);
			if(preg_match('/projects$/', $file)) $html .= $p->render($page);
		}
		$html .= $wrappers[2];

		return $html;
	}

}

class ImagesPartial extends Partial {

	var $dir;
	var $partial_file = "./templates/partials/images.html";

	function render($dir) {

		$wrappers = $this->parse($this->partial_file);

		if(is_dir($dir)) {
		 	if($dh = opendir($dir)) {
		 		while (($file = readdir($dh)) !== false) {
		 			if(!is_dir($file) && preg_match("/\.[gif|jpg|png|jpeg]/i", $file) && !preg_match("/thumb\.[gif|jpg|png|jpeg]/i", $file)) {
						$files[] = $file;
						$file_vars[] = array(
							"/@url/" => preg_replace('/\.\.\//', '/', $dir)."/".$file,
						);
					}
				}
			}
			closedir($dh);
			if(count($files) > 0) {
				asort($files, SORT_NUMERIC);
				$html = $wrappers[0];
				foreach($files as $key => $file) $html .= preg_replace(array_keys($file_vars[$key]), array_values($file_vars[$key]), $wrappers[1]);
				$html .= $wrappers[2];
			}
		}
		return $html;
	}

}

class ProjectsPartial extends Partial {

	var $dir;
	var $partial_file = "./templates/partials/projects.html";

	function render($page) {
		$this->dir = "../content/".$page->projects_folder_unclean;
		$wrappers = $this->parse($this->partial_file);

		if(is_dir($this->dir)) {
		 	if($dh = opendir($this->dir)) {
		 		while (($file = readdir($dh)) !== false) {
		 			if(!is_dir($file) && file_exists($this->dir."/".$file."/information.txt")) {
						$files[] = $file;
						preg_match("/project_title:(.+)/", file_get_contents($this->dir."/".$file."/information.txt"), $matches);
						$file_vars[] = array(
							"/@project_title/" => $matches[1],
							"/@url/" => preg_replace('/^\d+?\./', '', $file),
							"/@thumb/" => $this->check_thumb($dir, $file),
						);
					}
				}
			}
			closedir($dh);
			asort($files, SORT_NUMERIC);
			$html = $wrappers[0];
			foreach($files as $key => $file) $html .= preg_replace(array_keys($file_vars[$key]), array_values($file_vars[$key]), $wrappers[1]);
			$html .= $wrappers[2];
		}

		return $html;
	}

}

?>||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_CALL
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_VAR)))
    (AST_RETURN
        (AST_DIM
            (AST_VAR)
            (SCALAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_CALL
        (
            (SCALAR)
            (AST_CALL
                (
                    (AST_PROP
                        (AST_VAR))))
            (AST_VAR)))
    (AST_RETURN
        (AST_DIM
            (AST_VAR)
            (SCALAR))))