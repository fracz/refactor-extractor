  protected function validateAction($object, PhabricatorUser $viewer) {
    if ($this->isViewerCommitAuthor($object, $viewer)) {
      throw new Exception(
        pht(
          'You can not raise a concern with this commit because you are '.
          'the commit author. You can only raise concerns with commits '.
          'you did not author.'));
    }

    if ($this->isViewerRejectingAuditor($object, $viewer)) {
      throw new Exception(
        pht(
          'You can not raise a concern with this commit because you have '.
          'already raised a concern with it.'));
    }
  }

||||||||  protected function validateAction($object, PhabricatorUser $viewer) {
    if ($this->isViewerCommitAuthor($object, $viewer)) {
      throw new Exception(
        pht(
          'You can not raise a concern with this commit because you are '.
          'the commit author. You can only raise concerns with commits '.
          'you did not author.'));
    }

    // Even if you've already raised a concern, you can raise again as long
    // as the author requsted you verify.
    $state_verify = PhabricatorAuditCommitStatusConstants::NEEDS_VERIFICATION;

    if ($this->isViewerFullyRejected($object, $viewer)) {
      if ($object->getAuditStatus() != $state_verify) {
        throw new Exception(
          pht(
            'You can not raise a concern with this commit because you have '.
            'already raised a concern with it.'));
      }
    }
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (SCALAR))))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (SCALAR)))))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (SCALAR))
                                        (SCALAR))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLASS_CONST
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (AST_VAR))
                        (
                            (AST_THROW
                                (AST_NEW
                                    (
                                        (AST_CALL
                                            (
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (SCALAR))))))))))))))