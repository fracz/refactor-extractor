	public static function matchBasename($baseName, $pattern, $hasWildcard, $flags)
	{
		if ($hasWildcard === false) {
			if ($pattern === $baseName) {
				return true;
			}
		} else if ($flags & self::EXC_FLAG_ENDSWITH) {
			/* "*literal" matching against "fooliteral" */
			$n = StringHelper::byteLength($pattern);
			if (StringHelper::byteSubstr($pattern, 1, $n) === StringHelper::byteSubstr($baseName, -$n, $n)) {
				return true;
			}
		}
		return fnmatch($pattern, $baseName, 0);
	}

||||||||	private static function matchBasename($baseName, $pattern, $firstWildcard, $flags)
	{
		if ($firstWildcard === false) {
			if ($pattern === $baseName) {
				return true;
			}
		} else if ($flags & self::EXC_FLAG_ENDSWITH) {
			/* "*literal" matching against "fooliteral" */
			$n = StringHelper::byteLength($pattern);
			if (StringHelper::byteSubstr($pattern, 1, $n) === StringHelper::byteSubstr($baseName, -$n, $n)) {
				return true;
			}
		}
		return fnmatch($pattern, $baseName, 0);
	}

	/**
	 * Compares a path part against a pattern with optional wildcards.
	 *
	 * Based on match_pathname() from dir.c of git 1.8.5.3 sources.
	 *
	 * @param string $path full path to compare
	 * @param string $basePath base of path that will not be compared
	 * @param string $pattern the pattern that path part will be compared against
	 * @param integer|boolean $firstWildcard location of first wildcard character in the $pattern
	 * @param integer $flags pattern flags
	 * @return boolean wheter the path part matches against pattern
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR)
                                                (AST_VAR)))
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)
                                                (AST_UNARY_OP
                                                    (AST_VAR))
                                                (AST_VAR))))
                                    (
                                        (AST_RETURN
                                            (AST_CONST)))))))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (SCALAR)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (AST_CONST)))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_CLASS_CONST
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_STATIC_CALL
                                    (
                                        (AST_VAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)
                                                (SCALAR)
                                                (AST_VAR)))
                                        (AST_STATIC_CALL
                                            (
                                                (AST_VAR)
                                                (AST_UNARY_OP
                                                    (AST_VAR))
                                                (AST_VAR))))
                                    (
                                        (AST_RETURN
                                            (AST_CONST)))))))))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (AST_VAR)
                (SCALAR)))))