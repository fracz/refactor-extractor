    public function process(ContainerBuilder $container)
    {
        $backendConfiguration = $container->getParameter('easyadmin.config');

        // The parameter returned by the container has its values resolved.
        // %value% -> is turned into the parameter value
        // %%value%% -> is turned into %value% (we use this for EasyAdmin translations)
        // Before further processing the configuration we need to escape again
        // the % character to prevent Symfony interpreting them as a container
        // parameter when setting the easyadmin.config value at the end of this method
        array_walk_recursive($backendConfiguration, function (&$value) {
            if (is_string($value)) {
                $value = str_replace('%', '%%', $value);
            }
        });

        $configPasses = array(
            new NormalizerConfigPass(),
            new MenuConfigPass(),
            new ActionConfigPass(),
            new MetadataConfigPass($container->get('doctrine')),
            new PropertyConfigPass(),
            new ViewConfigPass(),
            new TemplateConfigPass($container->getParameter('kernel.root_dir').'/Resources/views'),
            new DefaultConfigPass(),
        );

        foreach ($configPasses as $configPass) {
            $backendConfiguration = $configPass->process($backendConfiguration);
        }

        $container->setParameter('easyadmin.config', $backendConfiguration);
        $container->getDefinition('easyadmin.configurator')->replaceArgument(0, $backendConfiguration);
    }
}||||||||    public function process(ContainerBuilder $container)
    {
        $backendConfig = $this->getBackendConfig($container);

        $configPasses = array(
            new NormalizerConfigPass(),
            new MenuConfigPass(),
            new ActionConfigPass(),
            new MetadataConfigPass($container->get('doctrine')),
            new PropertyConfigPass(),
            new ViewConfigPass(),
            new TemplateConfigPass($container->getParameter('kernel.root_dir').'/Resources/views'),
            new DefaultConfigPass(),
        );

        foreach ($configPasses as $configPass) {
            $backendConfig = $configPass->process($backendConfig);
        }

        $container->setParameter('easyadmin.config', $backendConfig);
        $container->getDefinition('easyadmin.configurator')->replaceArgument(0, $backendConfig);
    }

    /**
     * Returns the current backend configuration defined in the given container.
     *
     * @param ContainerBuilder $container
     *
     * @return array
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CLOSURE
                (NO_PARAM_TYPENO_PARAM_DEFAULT)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)
                                            (SCALAR)
                                            (AST_VAR)))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (SCALAR))))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (SCALAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (SCALAR)))))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW
                    (
                        (AST_BINARY_OP
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (SCALAR)))
                            (SCALAR))))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_NEW)
                (NULL))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (SCALAR)
            (AST_VAR))))