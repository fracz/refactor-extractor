	public function add($key, $item)
	{
		// note: $item is nullable to be compatible with that of ICollection::add()
		if (!is_scalar($key)) {
			throw new /*\*/InvalidArgumentException('Key must be either a string or an integer.');
		}

		if (parent::offsetExists($key)) {
			throw new /*\*/InvalidStateException('An element with the same key already exists.');
		}

		$this->beforeAdd($item);
		parent::offsetSet($key, $item);
		return TRUE;
	}



	/**
	 * Append is not supported.
	 */
||||||||	public function add($key, $item)
	{
		// note: $item is nullable to be compatible with that of ICollection::add()
		if (!is_scalar($key)) {
			throw new /*\*/InvalidArgumentException("Key must be either a string or an integer, " . gettype($key) ." given.");
		}

		if (parent::offsetExists($key)) {
			throw new /*\*/InvalidStateException('An element with the same key already exists.');
		}

		$this->beforeAdd($item);
		parent::offsetSet($key, $item);
		return TRUE;
	}



	/**
	 * Append is not supported.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_CALL
                                        (
                                            (AST_VAR))))
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_CALL
                (
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_CONST)))