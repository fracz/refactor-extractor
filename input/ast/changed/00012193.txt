    public function visitNew(Node $node) : Context {
        try {
            $context_node = (new ContextNode(
                $this->code_base,
                $this->context,
                $node
            ));

            $method = $context_node->getMethod(
                '__construct', false
            );

            // Add a reference to each class this method
            // could be called on
            foreach ($context_node->getClassList() as $class) {
                $class->addReference($this->context);
            }

            $this->analyzeCallToMethod(
                $this->code_base,
                $method,
                $node
            );

            $class_list = $context_node->getClassList();
            foreach ($class_list as $class) {
                // Make sure we're not instantiating an abstract
                // class
                if ($class->isAbstract()
                    && (!$this->context->hasClassFQSEN()
                    || $class->getFQSEN() != $this->context->getClassFQSEN())
                ) {
                    Issue::emit(
                        Issue::TypeInstantiateAbstract,
                        $this->context->getFile(),
                        $node->lineno ?? 0,
                        (string)$class->getFQSEN()
                    );
                }

                // Make sure we're not instantiating an interface
                if ($class->isInterface()) {
                    Issue::emit(
                        Issue::TypeInstantiateInterface,
                        $this->context->getFile(),
                        $node->lineno ?? 0,
                        (string)$class->getFQSEN()
                    );
                }

            }


        } catch (IssueException $exception) {
            $exception->getIssueInstance()();
        } catch (\Exception $exception) {
            // If we can't figure out what kind of a call
            // this is, don't worry about it
            return $this->context;
        }

        return $this->context;
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||    public function visitNew(Node $node) : Context {
        try {
            $context_node = (new ContextNode(
                $this->code_base,
                $this->context,
                $node
            ));

            $method = $context_node->getMethod(
                '__construct', false
            );

            // Add a reference to each class this method
            // could be called on
            foreach ($context_node->getClassList() as $class) {
                $class->addReference($this->context);
            }

            $this->analyzeCallToMethod(
                $this->code_base,
                $method,
                $node
            );

            $class_list = $context_node->getClassList();
            foreach ($class_list as $class) {
                // Make sure we're not instantiating an abstract
                // class
                if ($class->isAbstract()
                    && (!$this->context->hasClassFQSEN()
                    || $class->getFQSEN() != $this->context->getClassFQSEN())
                ) {
                    Issue::emit(
                        Issue::TypeInstantiateAbstract,
                        $this->context->getFile(),
                        $node->lineno ?? 0,
                        (string)$class->getFQSEN()
                    );
                }

                // Make sure we're not instantiating an interface
                if ($class->isInterface()) {
                    Issue::emit(
                        Issue::TypeInstantiateInterface,
                        $this->context->getFile(),
                        $node->lineno ?? 0,
                        (string)$class->getFQSEN()
                    );
                }

            }


        } catch (IssueException $exception) {
            $exception->getIssueInstance()->collect();
        } catch (\Exception $exception) {
            // If we can't figure out what kind of a call
            // this is, don't worry about it
            return $this->context;
        }

        return $this->context;
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_CONST))))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_CAST
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_CAST
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR))))))
        (NULL))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_TRY
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_CONST))))
            (AST_FOREACH
                (AST_METHOD_CALL
                    (AST_VAR))
                (AST_VAR)
                (NULL)
                (
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_PROP
                                (AST_VAR))))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)
                    (AST_VAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)))
            (AST_FOREACH
                (AST_VAR)
                (AST_VAR)
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_BINARY_OP
                                    (AST_UNARY_OP
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR))))))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_CAST
                                            (AST_METHOD_CALL
                                                (AST_VAR))))))))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_METHOD_CALL
                                (AST_VAR))
                            (
                                (AST_STATIC_CALL
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))
                                        (AST_METHOD_CALL
                                            (AST_PROP
                                                (AST_VAR)))
                                        (AST_BINARY_OP
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR))
                                        (AST_CAST
                                            (AST_METHOD_CALL
                                                (AST_VAR)))))))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_VAR)))))
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_RETURN
                        (AST_PROP
                            (AST_VAR))))))
        (NULL))
    (AST_RETURN
        (AST_PROP
            (AST_VAR))))