	private function createAnalyser(
		array $analyseExcludes,
		array $ignoreErrors,
		string $bootstrapFile = null,
		bool $reportUnmatchedIgnoredErrors = true
	): \PHPStan\Analyser\Analyser
	{
		$registry = new Registry([
			new AlwaysFailRule(),
		]);

		$traverser = new \PhpParser\NodeTraverser();
		$traverser->addVisitor(new \PhpParser\NodeVisitor\NameResolver());

		$broker = $this->createBroker();
		$printer = new \PhpParser\PrettyPrinter\Standard();
		$fileHelper = $this->getContainer()->getByType(FileHelper::class);
		$fileExcluder = new FileExcluder($fileHelper, $analyseExcludes);
		$analyser = new Analyser(
			$broker,
			new DirectParser(new \PhpParser\Parser\Php7(new \PhpParser\Lexer()), $traverser),
			$registry,
			new NodeScopeResolver(
				$broker,
				$this->getParser(),
				$printer,
				new FileTypeMapper($this->getParser(), $this->createMock(\Nette\Caching\Cache::class), true),
				new TypeSpecifier($printer),
				$fileExcluder,
				new \PhpParser\BuilderFactory(),
				$fileHelper,
				false,
				false,
				false,
				[]
			),
			$printer,
			$fileExcluder,
			$ignoreErrors,
			$bootstrapFile,
			$reportUnmatchedIgnoredErrors
		);

		return $analyser;
	}

}||||||||	private function createAnalyser(
		array $analyseExcludes,
		array $ignoreErrors,
		string $bootstrapFile = null,
		bool $reportUnmatchedIgnoredErrors = true
	): \PHPStan\Analyser\Analyser
	{
		$registry = new Registry([
			new AlwaysFailRule(),
		]);

		$traverser = new \PhpParser\NodeTraverser();
		$traverser->addVisitor(new \PhpParser\NodeVisitor\NameResolver());

		$broker = $this->createBroker();
		$printer = new \PhpParser\PrettyPrinter\Standard();
		$fileHelper = $this->getContainer()->getByType(FileHelper::class);
		$fileExcluder = new FileExcluder($fileHelper, $analyseExcludes);
		$typeSpecifier = new TypeSpecifier($printer);
		$analyser = new Analyser(
			$broker,
			new DirectParser(new \PhpParser\Parser\Php7(new \PhpParser\Lexer()), $traverser),
			$registry,
			new NodeScopeResolver(
				$broker,
				$this->getParser(),
				$printer,
				new FileTypeMapper($this->getParser(), $this->createMock(\Nette\Caching\Cache::class)),
				$fileExcluder,
				new \PhpParser\BuilderFactory(),
				$fileHelper,
				false,
				false,
				false,
				[]
			),
			$printer,
			$typeSpecifier,
			$fileExcluder,
			$ignoreErrors,
			$bootstrapFile,
			$reportUnmatchedIgnoredErrors
		);

		return $analyser;
	}

}||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_NEW
                            (
                                (AST_NEW)))
                        (AST_VAR)))
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR)
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))))
                                (AST_CONST)))
                        (AST_NEW
                            (
                                (AST_VAR)))
                        (AST_VAR)
                        (AST_NEW)
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)
                        (AST_CONST)
                        (AST_ARRAY)))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_NEW)
                        (NULL))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_NEW
                            (
                                (AST_NEW)))
                        (AST_VAR)))
                (AST_VAR)
                (AST_NEW
                    (
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_VAR)
                        (AST_NEW
                            (
                                (AST_METHOD_CALL
                                    (AST_VAR))
                                (AST_METHOD_CALL
                                    (AST_VAR)
                                    (
                                        (AST_CLASS_CONST
                                            (SCALAR))))))
                        (AST_VAR)
                        (AST_NEW)
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST)
                        (AST_CONST)
                        (AST_ARRAY)))
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR)
                (AST_VAR))))
    (AST_RETURN
        (AST_VAR)))