    public function test_parameters_take_priority_over_container(ContainerBuilder $builder)
    {
        $ncInst = new NoConstructor();

        $builder->addDefinitions([
            'factory' => \DI\factory(function (NoConstructor $nc) {
                return $nc;
            })->parameter('nc', $ncInst),
        ]);

        $factory = $builder->build()->get('factory');

        $this->assertSame($ncInst, $factory);
    }

    /**
     * @dataProvider provideContainer
     */
||||||||    public function test_parameters_take_priority_over_container(ContainerBuilder $builder)
    {
        $builder->addDefinitions([
            'factory' => \DI\factory(function (NoConstructor $nc) {
                return $nc;
            })->parameter('nc', \DI\get('foo')),
            NoConstructor::class => \DI\autowire(),
            'foo' => \DI\autowire(NoConstructor::class),
        ]);
        $container = $builder->build();

        $parameterPassed = $container->get('factory');

        // Check that "foo" is injected, not the "NoConstructor" entry that could be autowired from the typehint
        $this->assertSame($container->get('foo'), $parameterPassed);
    }

    /**
     * @dataProvider provideContainer
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_CLOSURE
                                    (PARAM_TYPENO_PARAM_DEFAULT)
                                    (NULL)
                                    (
                                        (AST_RETURN
                                            (AST_VAR))))))
                        (
                            (SCALAR)
                            (AST_VAR)))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_METHOD_CALL
                        (AST_CALL
                            (
                                (AST_CLOSURE
                                    (PARAM_TYPENO_PARAM_DEFAULT)
                                    (NULL)
                                    (
                                        (AST_RETURN
                                            (AST_VAR))))))
                        (
                            (SCALAR)
                            (AST_CALL
                                (
                                    (SCALAR)))))
                    (SCALAR))
                (AST_ARRAY_ELEM
                    (AST_CALL)
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_ARRAY_ELEM
                    (AST_CALL
                        (
                            (AST_CLASS_CONST
                                (SCALAR))))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))
            (AST_VAR))))