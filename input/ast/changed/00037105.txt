    public function getRecords(): Iterator
    {
        return $this->getIterator();
    }

    /**
     * @inheritdoc
     */
||||||||    public function getRecords(): Iterator
    {
        if (!$this->supportsHeaderAsRecordKeys()) {
            throw new RuntimeException('The header record must be empty or a flat array with unique string values');
        }

        $normalized = function ($record): bool {
            return is_array($record) && $record != [null];
        };

        $bom = $this->getInputBOM();
        $this->document->setFlags(SplFileObject::READ_CSV | SplFileObject::READ_AHEAD | SplFileObject::SKIP_EMPTY);
        $this->document->setCsvControl($this->delimiter, $this->enclosure, $this->escape);

        return $this->combineHeader(
            $this->stripBOM(new CallbackFilterIterator($this->document, $normalized), $bom)
        );
    }

    /**
     * Returns wether the selected header can be combine to each record
     *
     * A valid header must be empty or contains unique string field names
     *
     * @return bool
     */
||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))||||||||HAS_DOC_COMMENTHAS_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_ARRAY
                                (AST_ARRAY_ELEM
                                    (AST_CONST)
                                    (NULL)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_CLASS_CONST
                        (SCALAR))
                    (AST_CLASS_CONST
                        (SCALAR)))
                (AST_CLASS_CONST
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_VAR)))))))