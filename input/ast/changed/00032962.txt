	public static function normalizePath($path, $stripTrailingSlash = true, $isAbsolutePath = false) {
		$cacheKey = $path.'-'.-$stripTrailingSlash.'-'.$isAbsolutePath;

		if(isset(self::$normalizedPathCache[$cacheKey])) {
			return self::$normalizedPathCache[$cacheKey];
		}

		if ($path == '') {
			return '/';
		}

		//no windows style slashes
		$path = str_replace('\\', '/', $path);

		// When normalizing an absolute path, we need to ensure that the drive-letter
		// is still at the beginning on windows
		$windows_drive_letter = '';
		if ($isAbsolutePath && \OC_Util::runningOnWindows() && preg_match('#^([a-zA-Z])$#', $path[0]) && $path[1] == ':' && $path[2] == '/') {
			$windows_drive_letter = substr($path, 0, 2);
			$path = substr($path, 2);
		}

		//add leading slash
		if ($path[0] !== '/') {
			$path = '/' . $path;
		}

		// remove '/./'
		// ugly, but str_replace() can't replace them all in one go
		// as the replacement itself is part of the search string
		// which will only be found during the next iteration
		while (strpos($path, '/./') !== false) {
			$path = str_replace('/./', '/', $path);
		}
		// remove sequences of slashes
		$path = preg_replace('#/{2,}#', '/', $path);

		//remove trailing slash
		if ($stripTrailingSlash and strlen($path) > 1 and substr($path, -1, 1) === '/') {
			$path = substr($path, 0, -1);
		}

		// remove trailing '/.'
		if (substr($path, -2) == '/.') {
			$path = substr($path, 0, -2);
		}

		//normalize unicode if possible
		$path = \OC_Util::normalizeUnicode($path);

		$normalizedPath = $windows_drive_letter . $path;
		self::$normalizedPathCache[$cacheKey] = $normalizedPath;

		return $normalizedPath;
	}

	/**
	 * get the filesystem info
	 *
	 * @param string $path
	 * @param boolean $includeMountPoints whether to add mountpoint sizes,
	 * defaults to true
	 * @return \OC\Files\FileInfo
	 */
||||||||	public static function normalizePath($path, $stripTrailingSlash = true, $isAbsolutePath = false) {
		$cacheKey = json_encode([$path, $stripTrailingSlash, $isAbsolutePath]);

		if(isset(self::$normalizedPathCache[$cacheKey])) {
			return self::$normalizedPathCache[$cacheKey];
		}

		if ($path == '') {
			return '/';
		}

		//no windows style slashes
		$path = str_replace('\\', '/', $path);

		// When normalizing an absolute path, we need to ensure that the drive-letter
		// is still at the beginning on windows
		$windows_drive_letter = '';
		if ($isAbsolutePath && \OC_Util::runningOnWindows() && preg_match('#^([a-zA-Z])$#', $path[0]) && $path[1] == ':' && $path[2] == '/') {
			$windows_drive_letter = substr($path, 0, 2);
			$path = substr($path, 2);
		}

		//add leading slash
		if ($path[0] !== '/') {
			$path = '/' . $path;
		}

		// remove '/./'
		// ugly, but str_replace() can't replace them all in one go
		// as the replacement itself is part of the search string
		// which will only be found during the next iteration
		while (strpos($path, '/./') !== false) {
			$path = str_replace('/./', '/', $path);
		}
		// remove sequences of slashes
		$path = preg_replace('#/{2,}#', '/', $path);

		//remove trailing slash
		if ($stripTrailingSlash and strlen($path) > 1 and substr($path, -1, 1) === '/') {
			$path = substr($path, 0, -1);
		}

		// remove trailing '/.'
		if (substr($path, -2) == '/.') {
			$path = substr($path, 0, -2);
		}

		//normalize unicode if possible
		$path = \OC_Util::normalizeUnicode($path);

		$normalizedPath = $windows_drive_letter . $path;
		self::$normalizedPathCache[$cacheKey] = $normalizedPath;

		return $normalizedPath;
	}

	/**
	 * get the filesystem info
	 *
	 * @param string $path
	 * @param boolean $includeMountPoints whether to add mountpoint sizes,
	 * defaults to true
	 * @return \OC\Files\FileInfo
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (AST_UNARY_OP
                        (AST_VAR)))
                (SCALAR))
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_STATIC_CALL))
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))
            (AST_CONST))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_UNARY_OP
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_UNARY_OP
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_ARRAY
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))
                    (AST_ARRAY_ELEM
                        (AST_VAR)
                        (NULL))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_STATIC_PROP)
                    (AST_VAR)))
            (
                (AST_RETURN
                    (AST_DIM
                        (AST_STATIC_PROP)
                        (AST_VAR))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (SCALAR))
            (
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_VAR)
                            (AST_STATIC_CALL))
                        (AST_CALL
                            (
                                (SCALAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))))
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (SCALAR))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (SCALAR)))
            (AST_CONST))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (SCALAR)
                        (SCALAR)
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR)))
                (AST_BINARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_UNARY_OP
                                (SCALAR))
                            (SCALAR)))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_UNARY_OP
                                (SCALAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_UNARY_OP
                            (SCALAR))))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_UNARY_OP
                                (SCALAR))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_DIM
            (AST_STATIC_PROP)
            (AST_VAR))
        (AST_VAR))
    (AST_RETURN
        (AST_VAR)))