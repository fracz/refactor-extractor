  public function testStopSendsQuitCommand()
  {
    /* -- RFC 2821, 4.1.1.10.

    This command specifies that the receiver MUST send an OK reply, and
    then close the transmission channel.

    The receiver MUST NOT intentionally close the transmission channel
    until it receives and replies to a QUIT command (even if there was an
    error).  The sender MUST NOT intentionally close the transmission
    channel until it sends a QUIT command and SHOULD wait until it
    receives the reply (even if there was an error response to a previous
    command).  If the connection is closed prematurely due to violations
    of the above or system or network failure, the server MUST cancel any
    pending transaction, but not undo any previously completed
    transaction, and generally MUST act as if the command or transaction
    in progress had received a temporary error (i.e., a 4yz response).

    The QUIT command may be issued at any time.

    Syntax:
      "QUIT" CRLF
    */

    $this->_buffer->expectOnce('initialize');
    $this->_buffer->expectOnce('terminate');
    $this->_buffer->expectAt(1, 'write', array("QUIT\r\n"));
    $this->_buffer->setReturnValue('write', 2, array("QUIT\r\n"));
    $this->_buffer->setReturnValue('readLine', "221 Bye\r\n", array(2));
    $this->_buffer->expectMinimumCallCount('write', 2);

    $this->_finishBuffer();

    $this->assertFalse($this->_smtp->isStarted());
    $this->_smtp->start();
    $this->assertTrue($this->_smtp->isStarted());
    $this->_smtp->stop();
    $this->assertFalse($this->_smtp->isStarted());
  }

||||||||  public function testStopSendsQuitCommand()
  {
    /* -- RFC 2821, 4.1.1.10.

    This command specifies that the receiver MUST send an OK reply, and
    then close the transmission channel.

    The receiver MUST NOT intentionally close the transmission channel
    until it receives and replies to a QUIT command (even if there was an
    error).  The sender MUST NOT intentionally close the transmission
    channel until it sends a QUIT command and SHOULD wait until it
    receives the reply (even if there was an error response to a previous
    command).  If the connection is closed prematurely due to violations
    of the above or system or network failure, the server MUST cancel any
    pending transaction, but not undo any previously completed
    transaction, and generally MUST act as if the command or transaction
    in progress had received a temporary error (i.e., a 4yz response).

    The QUIT command may be issued at any time.

    Syntax:
      "QUIT" CRLF
    */

    $context = new Mockery();
    $buf = $this->_getBuffer($context);
    $smtp = $this->_getTransport($buf);
    $message = $context->mock('Swift_Mime_Message');
    $context->checking(Expectations::create()
      -> one($buf)->initialize()
      -> one($buf)->write("QUIT\r\n") -> returns(1)
      -> one($buf)->readLine(1) -> returns("221 Bye\r\n")
      -> one($buf)->terminate()
      );
    $this->_finishBuffer($context, $buf);

    $this->assertFalse($smtp->isStarted());
    $smtp->start();
    $this->assertTrue($smtp->isStarted());
    $smtp->stop();
    $this->assertFalse($smtp->isStarted());

    $context->assertIsSatisfied();
  }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (NULL)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_METHOD_CALL
                            (AST_METHOD_CALL
                                (AST_METHOD_CALL
                                    (AST_METHOD_CALL
                                        (AST_METHOD_CALL
                                            (AST_METHOD_CALL
                                                (AST_METHOD_CALL
                                                    (AST_STATIC_CALL)
                                                    (
                                                        (AST_VAR))))
                                            (
                                                (AST_VAR)))
                                        (
                                            (SCALAR)))
                                    (
                                        (SCALAR)))
                                (
                                    (AST_VAR)))
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))
                    (
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)))