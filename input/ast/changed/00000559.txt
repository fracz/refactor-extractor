    protected function loadExtensionsConfiguration(array $config, ContainerBuilder $container)
    {
        foreach ($config as $id => $extensionConfig) {
            // create temporary container
            $tempContainer = new ContainerBuilder();
            $tempContainer->setParameter('behat.paths.base',
                $container->getParameter('behat.paths.base')
            );
            $tempContainer->setParameter('behat.extension.classes',
                $container->getParameter('behat.extension.classes')
            );

            // load extension into it
            $extension = $this->extensionManager->getExtension($id);
            $extension->load($extensionConfig, $tempContainer);

            // merge temporary container into normal one
            $container->merge($tempContainer);

            // add extension compiler passes
            array_map(array($container, 'addCompilerPass'), $extension->getCompilerPasses());
        }
    }

    /**
     * Resolves relative behat.paths.* parameters in container.
     *
     * @param ContainerBuilder $container
     */
||||||||    protected function loadExtensionsConfiguration(array $config, ContainerBuilder $container)
    {
        foreach ($config as $id => $extensionConfig) {
            // load extension from manager
            $extension = $this->extensionManager->getExtension($id);

            // create temporary container
            $tempContainer = new ContainerBuilder();
            $tempContainer->addObjectResource($extension);

            // set paths parameters
            $tempContainer->setParameter('behat.paths.base',
                $container->getParameter('behat.paths.base')
            );
            $tempContainer->setParameter('behat.extension.classes',
                $container->getParameter('behat.extension.classes')
            );

            // load extension into temporary container
            $extension->load($extensionConfig, $tempContainer);

            // merge temporary container into normal one
            $container->merge($tempContainer);

            // add extension compiler passes
            array_map(array($container, 'addCompilerPass'), $extension->getCompilerPasses());
        }
    }

    /**
     * Resolves relative behat.paths.* parameters in container.
     *
     * @param ContainerBuilder $container
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))
                    (AST_METHOD_CALL
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_NEW))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))
                    (AST_METHOD_CALL
                        (AST_VAR)))))))