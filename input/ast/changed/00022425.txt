    public function get_plugin_types($fullpaths = true) {
        return $this->reorder_plugin_types(core_component::get_plugin_types($fullpaths));
    }

    /**
     * Returns list of known plugins of the given type
     *
     * This method returns the subset of the tree returned by {@link self::get_plugins()}.
     * If the given type is not known, empty array is returned.
     *
     * @param string $type plugin type, e.g. 'mod' or 'workshopallocation'
     * @param bool $disablecache force reload, cache can be used otherwise
     * @return array (string)plugin name (e.g. 'workshop') => corresponding subclass of {@link plugininfo_base}
     */
||||||||    public function get_plugin_types() {
        if (func_num_args() > 0) {
            if (!func_get_arg(0)) {
                throw coding_exception('plugin_manager->get_plugin_types() does not support relative paths.');
            }
        }
        return $this->reorder_plugin_types(core_component::get_plugin_types());
    }

    /**
     * Load list of installed plugins,
     * always call before using $this->installedplugins.
     *
     * This method is caching results for all plugins.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL)
                (SCALAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_CALL
                                (
                                    (SCALAR))))
                        (
                            (AST_THROW
                                (AST_CALL
                                    (
                                        (SCALAR))))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_STATIC_CALL)))))