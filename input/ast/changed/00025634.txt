  public function buildRecipientList() {
    return $this->resolveRecipients(
      array_merge(
        $this->getRawToPHIDs(),
        $this->getRawCCPHIDs()));
  }


  /**
   * Filter out duplicate, invalid, or excluded recipients from a PHID list.
   *
   * @param   list<phid>  Unfiltered recipients.
   * @return  list<phid>  Filtered recipients.
   *
   * @task recipients
   */
||||||||  public function buildRecipientList() {
    $actors = $this->loadActors(
      array_merge(
        $this->getToPHIDs(),
        $this->getCcPHIDs()));
    $actors = $this->filterDeliverableActors($actors);
    return mpull($actors, 'getPHID');
  }

||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CALL
                    (
                        (AST_METHOD_CALL
                            (AST_VAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR)))))