    public function __construct()
    {
        parent::__construct('phpDocumentor', self::VERSION);

        $this->addAutoloader();
        $this->addLogging();
        $this->setTimezone();
        $this->addConfiguration();
        $this->addEventDispatcher();
        $this->loadPlugins();

        $this['console']->getHelperSet()->set(
            new Console\Helper\ProgressHelper()
        );

        $this['project.serializer.class'] = 'phpDocumentor\Descriptor\Serializer\Serialize';
        $this['project.serializer'] = function($container) {
            return new $container['project.serializer.class']();
        };

        $this['project.builder'] = $this->share(function ($container) {
            $builder = new Descriptor\Builder\Reflector();
            $builder->setSerializer($container['project.serializer']);
            return $builder;
        });

        $this['parser'] = function() {
            return new Parser\Parser();
        };
        $this['transformer'] = function($container) {
            return new Transformer\Transformer();
        };

        $this->addCommandsForProjectNamespace();
        $this->addCommandsForTemplateNamespace();
        $this->addCommandsForPluginNamespace();
    }

    /**
     * Run the application and if no command is provided, use project:run.
     *
     * @param bool $interactive Whether to run in interactive mode.
     *
     * @return void
     */
||||||||    public function __construct()
    {
        parent::__construct('phpDocumentor', self::VERSION);

        $this->addAutoloader();
        $this->addLogging();
        $this->setTimezone();
        $this->addConfiguration();
        $this->addEventDispatcher();
        $this->loadPlugins();

        $this['console']->getHelperSet()->set(
            new Console\Helper\ProgressHelper()
        );

        $this->addDescriptorServices();
        $this->addParserServices();
        $this->addTransformerServices();

        $this->addCommandsForProjectNamespace();
        $this->addCommandsForTemplateNamespace();
        $this->addCommandsForPluginNamespace();
    }

    /**
     * Adds the services to build the descriptors.
     *
     * This method injects the following services into the Dependency Injection Container:
     *
     * * descriptor.serializer, the serializer used to generate the cache
     * * descriptor.builder, the builder used to transform the Reflected information into a series of Descriptors.
     *
     * It is possible to override which serializer is used by overriding the parameter `descriptor.serializer.class`.
     *
     * @return void
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_DIM
                (AST_VAR)
                (SCALAR)))
        (
            (AST_NEW)))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_NEW
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_NEW))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))
                        (AST_RETURN
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CLOSURE
            (NULL)
            (
                (AST_RETURN
                    (AST_NEW)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (SCALAR))
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_NEW)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (SCALAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_DIM
                (AST_VAR)
                (SCALAR)))
        (
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)))