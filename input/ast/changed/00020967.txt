    public static function file_output($file) {
        $path = self::get_file_directory() . '/' . $file->get_filename();
        if (in_array($file->get_mimetype(), portfolio_format_image::mimetypes())) {
            return '<img src="' . $path . '" alt="' . $file->get_filename() . '" />';
        }
        return '<a href="' . $path . '">' . $file->get_filename() . '</a>';
    }
}

class portfolio_format_leap extends portfolio_format_rich { }


/**
* later.... a moodle plugin might support this.
* it's commented out in portfolio_supported_formats so cannot currently be used.
*/
class portfolio_format_mbkp extends portfolio_format_rich {}

/**
* 'PDF format', subtype of file.
*
* for portfolio plugins that support PDFs specifically
*/
class portfolio_format_pdf extends portfolio_format_file {
    public static function mimetypes() {
        return array('application/pdf');
    }
}

/**
* 'Document format', subtype of file.
*
* for portfolio plugins that support documents specifically
*/
class portfolio_format_document extends portfolio_format_file {
    public static function mimetypes() {
        return array_merge(
            array('text/plain', 'text/rtf'),
            mimeinfo_from_icon('type', 'word.gif', true),
            mimeinfo_from_icon('type', 'docx.gif', true),
            mimeinfo_from_icon('type', 'odt.gif', true)
        );
    }
}

/**
* 'Spreadsheet format', subtype of file.
*
* for portfolio plugins that support spreadsheets specifically
*/
class portfolio_format_spreadsheet extends portfolio_format_file {
    public static function mimetypes() {
        return array_merge(
            mimeinfo_from_icon('type', 'excel.gif', true),
            mimeinfo_from_icon('type', 'xlsm.gif', true),
            mimeinfo_from_icon('type', 'ods.gif', true)
        );
    }
}

/**
* 'Presentation format', subtype of file.
*
* for portfolio plugins that support presentation specifically
*/
class portfolio_format_presentation extends portfolio_format_file {
    public static function mimetypes() {
        return mimeinfo_from_icon('type', 'powerpoint.gif', true);
    }
}||||||||    public static function file_output($file, $entry=false) {
        $id = '';
        if ($entry) {
            $id = 'portfolio:file' . $file->get_id;
        } else {
            $id = self::get_file_directory() . '/' . $file->get_filename();
        }
        return '<a rel="enclosure" href="' . $id . '">' . $file->get_filename() . '</a>';
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_STATIC_CALL)
                (SCALAR))
            (AST_METHOD_CALL
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_STATIC_CALL)))
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))
                            (AST_METHOD_CALL
                                (AST_VAR)))
                        (SCALAR))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (SCALAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_STATIC_CALL)
                            (SCALAR))
                        (AST_METHOD_CALL
                            (AST_VAR)))))))
    (AST_RETURN
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_VAR))
                    (SCALAR))
                (AST_METHOD_CALL
                    (AST_VAR)))
            (SCALAR))))