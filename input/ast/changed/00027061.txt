    public function attachAssemblersToFactory(AssemblerFactory $factory)
    {
        // @codingStandardsIgnoreStart because we limit the verbosity by making all closures single-line
        $fileMatcher      = function ($criteria) { return $criteria instanceof FileReflector; };
        $constantMatcher  = function ($criteria) {
            return $criteria instanceof ConstantReflector || $criteria instanceof ClassConstant;
        };
        $traitMatcher     = function ($criteria) { return $criteria instanceof TraitReflector; };
        $classMatcher     = function ($criteria) { return $criteria instanceof ClassReflector; };
        $interfaceMatcher = function ($criteria) { return $criteria instanceof InterfaceReflector; };
        $propertyMatcher  = function ($criteria) { return $criteria instanceof ClassReflector\PropertyReflector; };
        $methodMatcher    = function ($criteria) { return $criteria instanceof ClassReflector\MethodReflector; };
        $argumentMatcher  = function ($criteria) { return $criteria instanceof FunctionReflector\ArgumentReflector; };
        $functionMatcher  = function ($criteria) { return $criteria instanceof FunctionReflector; };

        $authorMatcher      = function ($criteria) { return $criteria instanceof AuthorTag; };
        $deprecatedMatcher  = function ($criteria) { return $criteria instanceof DeprecatedTag; };
        $linkMatcher        = function ($criteria) { return $criteria instanceof LinkTag; };
        $methodTagMatcher   = function ($criteria) { return $criteria instanceof MethodTag; };
        $propertyTagMatcher = function ($criteria) { return $criteria instanceof PropertyTag; };
        $paramMatcher       = function ($criteria) { return $criteria instanceof ParamTag; };
        $throwsMatcher      = function ($criteria) { return $criteria instanceof ThrowsTag; };
        $returnMatcher      = function ($criteria) { return $criteria instanceof ReturnTag; };
        $usesMatcher        = function ($criteria) { return $criteria instanceof UsesTag; };
        $seeMatcher         = function ($criteria) { return $criteria instanceof SeeTag; };
        $sinceMatcher       = function ($criteria) { return $criteria instanceof SinceTag; };
        $varMatcher         = function ($criteria) { return $criteria instanceof VarTag; };
        $versionMatcher     = function ($criteria) { return $criteria instanceof Tag\VersionTag; };

        $tagFallbackMatcher = function ($criteria) { return $criteria instanceof Tag; };
        // @codingStandardsIgnoreEnd

        $factory->register($fileMatcher, new FileAssembler());
        $factory->register($constantMatcher, new ConstantAssembler());
        $factory->register($traitMatcher, new TraitAssembler());
        $factory->register($classMatcher, new ClassAssembler());
        $factory->register($interfaceMatcher, new InterfaceAssembler());
        $factory->register($propertyMatcher, new PropertyAssembler());
        $factory->register($methodMatcher, new MethodAssembler());
        $factory->register($argumentMatcher, new ArgumentAssembler());
        $factory->register($functionMatcher, new FunctionAssembler());

        $factory->register($authorMatcher, new AuthorAssembler());
        $factory->register($deprecatedMatcher, new DeprecatedAssembler());
        $factory->register($linkMatcher, new LinkAssembler());
        $factory->register($methodTagMatcher, new MethodTagAssembler());
        $factory->register($propertyTagMatcher, new PropertyTagAssembler());
        $factory->register($paramMatcher, new ParamAssembler());
        $factory->register($throwsMatcher, new ThrowsAssembler());
        $factory->register($returnMatcher, new ReturnAssembler());
        $factory->register($usesMatcher, new UsesAssembler());
        $factory->register($seeMatcher, new SeeAssembler());
        $factory->register($sinceMatcher, new SinceAssembler());
        $factory->register($varMatcher, new VarAssembler());
        $factory->register($versionMatcher, new VersionAssembler());

        $factory->registerFallback($tagFallbackMatcher, new GenericTagAssembler());

        return $factory;
    }

    /**
     * Attaches filters to the manager.
     *
     * @param Filter $filterManager
     * @param Application $app
     *
     * @return Filter
     */
||||||||    public function attachAssemblersToFactory(AssemblerFactory $factory)
    {
        // @codingStandardsIgnoreStart because we limit the verbosity by making all closures single-line
        $fileMatcher      = function ($criteria) { return $criteria instanceof FileReflector; };
        $constantMatcher  = function ($criteria) {
            return $criteria instanceof ConstantReflector || $criteria instanceof ClassConstant;
        };
        $traitMatcher     = function ($criteria) { return $criteria instanceof TraitReflector; };
        $classMatcher     = function ($criteria) { return $criteria instanceof ClassReflector; };
        $interfaceMatcher = function ($criteria) { return $criteria instanceof InterfaceReflector; };
        $propertyMatcher  = function ($criteria) { return $criteria instanceof ClassReflector\PropertyReflector; };
        $methodMatcher    = function ($criteria) { return $criteria instanceof ClassReflector\MethodReflector; };
        $argumentMatcher  = function ($criteria) { return $criteria instanceof FunctionReflector\ArgumentReflector; };
        $functionMatcher  = function ($criteria) { return $criteria instanceof FunctionReflector; };

        $authorMatcher      = function ($criteria) { return $criteria instanceof AuthorTag; };
        $deprecatedMatcher  = function ($criteria) { return $criteria instanceof DeprecatedTag; };
        $linkMatcher        = function ($criteria) { return $criteria instanceof LinkTag; };
        $methodTagMatcher   = function ($criteria) { return $criteria instanceof MethodTag; };
        $propertyTagMatcher = function ($criteria) { return $criteria instanceof PropertyTag; };
        $paramMatcher       = function ($criteria) { return $criteria instanceof ParamTag; };
        $throwsMatcher      = function ($criteria) { return $criteria instanceof ThrowsTag; };
        $returnMatcher      = function ($criteria) { return $criteria instanceof ReturnTag; };
        $usesMatcher        = function ($criteria) { return $criteria instanceof UsesTag; };
        $seeMatcher         = function ($criteria) { return $criteria instanceof SeeTag; };
        $sinceMatcher       = function ($criteria) { return $criteria instanceof SinceTag; };
        $varMatcher         = function ($criteria) { return $criteria instanceof VarTag; };
        $versionMatcher     = function ($criteria) { return $criteria instanceof Tag\VersionTag; };

        $typeCollectionMatcher = function ($criteria) { return $criteria instanceof Collection; };

        $tagFallbackMatcher = function ($criteria) { return $criteria instanceof Tag; };
        // @codingStandardsIgnoreEnd

        $factory->register($fileMatcher, new FileAssembler());
        $factory->register($constantMatcher, new ConstantAssembler());
        $factory->register($traitMatcher, new TraitAssembler());
        $factory->register($classMatcher, new ClassAssembler());
        $factory->register($interfaceMatcher, new InterfaceAssembler());
        $factory->register($propertyMatcher, new PropertyAssembler());
        $factory->register($methodMatcher, new MethodAssembler());
        $factory->register($argumentMatcher, new ArgumentAssembler());
        $factory->register($functionMatcher, new FunctionAssembler());

        $factory->register($authorMatcher, new AuthorAssembler());
        $factory->register($deprecatedMatcher, new DeprecatedAssembler());
        $factory->register($linkMatcher, new LinkAssembler());
        $factory->register($methodTagMatcher, new MethodTagAssembler());
        $factory->register($propertyTagMatcher, new PropertyTagAssembler());
        $factory->register($paramMatcher, new ParamAssembler());
        $factory->register($throwsMatcher, new ThrowsAssembler());
        $factory->register($returnMatcher, new ReturnAssembler());
        $factory->register($usesMatcher, new UsesAssembler());
        $factory->register($seeMatcher, new SeeAssembler());
        $factory->register($sinceMatcher, new SinceAssembler());
        $factory->register($varMatcher, new VarAssembler());
        $factory->register($versionMatcher, new VersionAssembler());

        $factory->register($typeCollectionMatcher, new TypeCollectionAssembler());

        $factory->registerFallback($tagFallbackMatcher, new GenericTagAssembler());

        return $factory;
    }

    /**
     * Attaches filters to the manager.
     *
     * @param Filter $filterManager
     * @param Application $app
     *
     * @return Filter
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (AST_INSTANCEOF
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_BINARY_OP
                        (AST_INSTANCEOF
                            (AST_VAR))
                        (AST_INSTANCEOF
                            (AST_VAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_RETURN
                    (AST_INSTANCEOF
                        (AST_VAR))))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)
            (AST_NEW)))
    (AST_RETURN
        (AST_VAR)))