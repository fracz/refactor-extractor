	public function insert_get_id($values)
	{
		$this->connection->query($this->compiler->insert($this, $values), array_values($values));

		return $this->connection->pdo->lastInsertId();
	}

	/**
	 * Execute the query as an UPDATE statement.
	 *
	 * @param  array  $values
	 * @return bool
	 */
||||||||	public function insert_get_id($values)
	{
		$this->connection->query($this->compiler->insert($this, $values), array_values($values));

		return (int) $this->connection->pdo->lastInsertId();
	}

	/**
	 * Update an array of values in the database table.
	 *
	 * <code>
	 *		// Update a user's e-mail address
	 *		$affected = DB::table('users')->where_id(1)->update(array('email' => 'new_email@example.com'));
	 * </code>
	 *
	 * @param  array  $values
	 * @return int
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_VAR))
                (
                    (AST_VAR)
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CAST
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))))))