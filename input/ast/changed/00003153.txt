	public function dnsNameToRawFormat($name, $type='domain') {
		$rawName = "";
		if ('hostname' == $type) $rawName = '|00|';
		// explode using the dot
		$explodedNames = explode('.', $name);
		// for each part
		foreach ($explodedNames as &$explodedName) {
			// count the lenght of the part, and add |length| before
			$length = strlen($explodedName);
			if ($length > 255) exit('ERROR: dns name is to long for RFC'); // LATER log correctly without dying
			$hexLength = dechex($length);
			if (1 == strlen($hexLength)) $hexLength = '0' . $hexLength;
			$rawName .= '|' . $hexLength . '|' . $explodedName;
		}
		// put all together
		$rawName .= '|00|';
		// and append |00| to terminate the name
		return $rawName;
	}

/**
 * Converts a DNS name to a MS DNS log format.
 * Practical usage is to use these strings to search in logfiles
 *   example: foobar.com becomes (6)foobar(3)com(0)
 * @param string $name dns name to be converted
 * @return string raw snort compatible format of the dns name
 */
||||||||	public function dnsNameToRawFormat($name, $type='domain') {
		$rawName = "";
		if ('hostname' == $type) $rawName = '|00|';
		// explode using the dot
		$explodedNames = explode('.', $name);
		// for each part
		foreach ($explodedNames as &$explodedName) {
			// count the lenght of the part, and add |length| before
			$length = strlen($explodedName);
			if ($length > 255) $this->log('WARNING: dns name is to long for RFC: '.$name);
			$hexLength = dechex($length);
			if (1 == strlen($hexLength)) $hexLength = '0' . $hexLength;
			$rawName .= '|' . $hexLength . '|' . $explodedName;
		}
		// put all together
		$rawName .= '|00|';
		// and append |00| to terminate the name
		return $rawName;
	}

/**
 * Converts a DNS name to a MS DNS log format.
 * Practical usage is to use these strings to search in logfiles
 *   example: foobar.com becomes (6)foobar(3)com(0)
 * @param string $name dns name to be converted
 * @return string raw snort compatible format of the dns name
 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_REF
            (AST_VAR))
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_EXIT
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_REF
            (AST_VAR))
        (NULL)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR)))))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (SCALAR)
                        (AST_CALL
                            (
                                (AST_VAR))))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_BINARY_OP
                                (SCALAR)
                                (AST_VAR))))))
            (AST_ASSIGN_OP
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (SCALAR))
    (AST_RETURN
        (AST_VAR)))