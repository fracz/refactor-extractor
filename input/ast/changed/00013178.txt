    public function draw($canvasBuffer, $left, $top)
    {
        //Corner pixel, to draw same size each time
        $this->canvas->set(0, 0);
        $this->canvas->set(159, 143);

        for ($i = 0; $i < count($canvasBuffer); $i = $i + 4) {
            // Sum of all colors, Ignore alpha
            $total = $canvasBuffer[$i] + $canvasBuffer[$i + 1] + $canvasBuffer[$i + 2];

            $x = ($i / 4) % 160;
            $y = ceil(($i / 4) / 160);

            // 350 is a good threshold for black and white
            if ($total > 350) {
                $this->canvas->set($x, $y);
            }
        }

        if ($this->currentSecond != time()) {
            $this->fps = $this->framesInSecond;
            $this->currentSecond = time();
            $this->framesInSecond = 1;
        } else {
            ++$this->framesInSecond;
        }

        $frame = $this->canvas->frame();
        $content = "\e[H\e[2J";

        if ($this->height > 0 && $this->width > 0) {
            $content = "\e[{$this->height}A\e[{$this->width}D";
        }

        $content .= sprintf('FPS: %d - Frame Skip: %s'.PHP_EOL, $this->fps, Settings::$settings[4]);
        $content .= $frame;

        echo $content;

        $this->canvas->clear();

        $this->height = substr_count($frame, PHP_EOL) + 1;
        $this->width = strpos($frame, PHP_EOL);
    }
}||||||||    public function draw($canvasBuffer, $left, $top)
    {
        //Corner pixel, to draw same size each time
        $this->canvas->set(0, 0);
        $this->canvas->set(159, 143);

        $y = 0;

        for ($i = 0; $i < count($canvasBuffer); $i = $i + 4) {
            // Sum of all colors, Ignore alpha
            $total = $canvasBuffer[$i] + $canvasBuffer[$i + 1] + $canvasBuffer[$i + 2];

            $x = ($i / 4) % 160;

            // 350 is a good threshold for black and white
            if ($total > 350) {
                $this->canvas->set($x, $y);
            }

            if ($x == 159) {
                ++$y;
            }
        }

        if ($this->currentSecond != time()) {
            $this->fps = $this->framesInSecond;
            $this->currentSecond = time();
            $this->framesInSecond = 1;
        } else {
            ++$this->framesInSecond;
        }

        $frame = $this->canvas->frame();
        $content = "\e[H\e[2J";

        if ($this->height > 0 && $this->width > 0) {
            $content = "\e[{$this->height}A\e[{$this->width}D";
        }

        $content .= sprintf('FPS: %d - Frame Skip: %s'.PHP_EOL, $this->fps, Settings::$settings[4]);
        $content .= $frame;

        echo $content;

        $this->canvas->clear();

        $this->height = substr_count($frame, PHP_EOL) + 1;
        $this->width = strpos($frame, PHP_EOL);
    }
}||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)))))
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_DIM
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))))
                    (AST_DIM
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (AST_ASSIGN
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (SCALAR)))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_VAR))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CALL))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_PRE_INC
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CONST))
                (AST_PROP
                    (AST_VAR))
                (AST_DIM
                    (AST_STATIC_PROP)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_VAR))
    (AST_ECHO
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_FOR
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (SCALAR)))
        (AST_EXPR_LIST
            (AST_BINARY_OP
                (AST_VAR)
                (AST_CALL
                    (
                        (AST_VAR)))))
        (AST_EXPR_LIST
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR))))
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR))
                        (AST_DIM
                            (AST_VAR)
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))))
                    (AST_DIM
                        (AST_VAR)
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (SCALAR)))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_VAR)
                                (AST_VAR))))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_VAR)
                        (SCALAR))
                    (
                        (AST_PRE_INC
                            (AST_VAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_PROP
                    (AST_VAR))
                (AST_CALL))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_CALL))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_PRE_INC
                    (AST_PROP
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_ENCAPS_LIST
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR)
                        (AST_PROP
                            (AST_VAR))
                        (SCALAR))))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_CALL
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_CONST))
                (AST_PROP
                    (AST_VAR))
                (AST_DIM
                    (AST_STATIC_PROP)
                    (SCALAR)))))
    (AST_ASSIGN_OP
        (AST_VAR)
        (AST_VAR))
    (AST_ECHO
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_CONST)))
            (SCALAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_VAR)
                (AST_CONST)))))