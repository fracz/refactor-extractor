    private function createProfileImages(Media $media, $originalFile, $originalPath)
    {
        $className = $media->content_type;

        $imageProfiles = $this->getMergedImageProfiles($className);

        foreach ($imageProfiles as $profileName => $conversionParameters) {
            $shouldBeQueued = $this->determineShouldBeQueued($conversionParameters);

            $conversionParameters = $this->unsetQueueKey($conversionParameters);

            if (! $shouldBeQueued) {
                $outputFile = $this->determineOutputFileName($media, $originalPath, $profileName, $conversionParameters);

                $this->convertImage($originalFile, $conversionParameters, $outputFile);
            } else {
                Queue::push(
                    GlideQueueHandler::class,
                    [
                        'sourceFile' => $originalFile,
                        'conversionParameters' => $conversionParameters,
                        'outputFile' => $this->determineOutputFileName($media, $originalPath, $profileName, $conversionParameters),
                    ],
                    'media_queue'
                );
            }
        }
    }

    /**
     * Force the .jpg extension for output files.
     *
     * @param $conversionParameters
     *
     * @return mixed
     */
||||||||    private function createProfileImages(Media $media, $originalFile, $originalPath)
    {
        $className = $media->content_type;

        $imageProfiles = $this->getMergedImageProfiles($className);

        foreach ($imageProfiles as $profileName => $conversionParameters) {
            $shouldBeQueued = $this->determineShouldBeQueued($conversionParameters);

            $imageConversionParameters = $this->unsetQueueKey($conversionParameters);

            $outputFile = $this->determineOutputFileName($media, $originalPath, $profileName, $imageConversionParameters);

            if ($shouldBeQueued) {

                Queue::push(
                    GlideQueueHandler::class,
                    [
                        'sourceFile' => $originalFile,
                        'conversionParameters' => $imageConversionParameters,
                        'outputFile' => $outputFile,
                    ],
                    'media_queue'
                );

                return;
            }

            $this->convertImage($originalFile, $imageConversionParameters, $outputFile);

        }
    }

    /**
     * Force the .jpg extension for output files.
     *
     * @param $conversionParameters
     *
     * @return mixed
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_UNARY_OP
                        (AST_VAR))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR)
                                    (AST_VAR))))
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_VAR)
                                                (AST_VAR)))
                                        (SCALAR)))
                                (SCALAR)))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR))))
            (AST_ASSIGN
                (AST_VAR)
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR)
                        (AST_VAR))))
            (AST_IF
                (AST_IF_ELEM
                    (AST_VAR)
                    (
                        (AST_STATIC_CALL
                            (
                                (AST_CLASS_CONST
                                    (SCALAR))
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR)))
                                (SCALAR)))
                        (AST_RETURN
                            (NULL)))))
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)
                    (AST_VAR)
                    (AST_VAR))))))