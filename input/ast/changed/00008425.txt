	private function is_prefixed( $name ) {

		foreach ( $this->validated_prefixes as $prefix ) {
			if ( strtolower( $name ) === $prefix ) {
				// Ok, prefix *is* the hook/constant name.
				return true;

			} else {
				$prefix_found = stripos( $name, $prefix . '_' );

				if ( 0 === $prefix_found ) {
					// Ok, prefix found as start of hook/constant name.
					return true;
				}
			}
		}

		return false;
	}

	/**
	 * Check if a variable name might need a prefix.
	 *
	 * Prefix is not needed for:
	 * - superglobals,
	 * - WP native globals,
	 * - variables which are already prefixed.
	 *
	 * @param string $name Variable name without the dollar sign.
	 * @return bool True if the variable name is whitelisted or already prefixed.
	 *              False otherwise.
	 */
||||||||	private function is_prefixed( $name ) {

		foreach ( $this->validated_prefixes as $prefix ) {
			if ( strtolower( $name ) === $prefix ) {
				// Ok, prefix *is* the hook/constant name.
				return true;

			} else {
				$prefix_found = stripos( $name, $prefix . '_' );

				if ( 0 === $prefix_found ) {
					// Ok, prefix found at start of hook/constant name.
					return true;
				}

				if ( preg_match( '`^' . preg_quote( $prefix, '`' ) . '\W`i', $name ) === 1 ) {
					// Ok, prefix with other non-word character found at start of hook/constant name.
					return true;
				}
			}
		}

		return false;
	}

	/**
	 * Check if a variable name might need a prefix.
	 *
	 * Prefix is not needed for:
	 * - superglobals,
	 * - WP native globals,
	 * - variables which are already prefixed.
	 *
	 * @param string $name Variable name without the dollar sign.
	 * @return bool True if the variable name is whitelisted or already prefixed.
	 *              False otherwise.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR))
                    (
                        (AST_RETURN
                            (AST_CONST))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (
                                    (AST_RETURN
                                        (AST_CONST))))))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (AST_VAR))
                    (
                        (AST_RETURN
                            (AST_CONST))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (SCALAR)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (
                                    (AST_RETURN
                                        (AST_CONST)))))
                        (AST_IF
                            (AST_IF_ELEM
                                (AST_BINARY_OP
                                    (AST_CALL
                                        (
                                            (AST_BINARY_OP
                                                (AST_BINARY_OP
                                                    (SCALAR)
                                                    (AST_CALL
                                                        (
                                                            (AST_VAR)
                                                            (SCALAR))))
                                                (SCALAR))
                                            (AST_VAR)))
                                    (SCALAR))
                                (
                                    (AST_RETURN
                                        (AST_CONST))))))))))
    (AST_RETURN
        (AST_CONST)))