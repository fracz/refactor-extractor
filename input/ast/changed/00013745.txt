    public function seek($offset, $whence = SEEK_SET)
    {
        return $this->isSeekable() ? fseek($this->stream, $offset, $whence) === 0 : false;
    }

    /**
     * Read data from the stream
     *
     * @param int $length Up to length number of bytes read.
     *
     * @return string|bool Returns the data read from the stream or FALSE on
     *      failure or EOF
     */
||||||||    public function seek($offset, $whence = SEEK_SET)
    {
        return $this->cache[self::SEEKABLE] ? fseek($this->stream, $offset, $whence) === 0 : false;
    }

    /**
     * Read data from the stream
     *
     * @param int $length Up to length number of bytes read.
     *
     * @return string|bool Returns the data read from the stream or FALSE on
     *      failure or EOF
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_METHOD_CALL
                (AST_VAR))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_CONST))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_CLASS_CONST
                    (SCALAR)))
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)
                        (AST_VAR)))
                (SCALAR))
            (AST_CONST))))