    public function createStreams()
    {
        list($read, $write) = stream_socket_pair(STREAM_PF_UNIX, STREAM_SOCK_STREAM, STREAM_IPPROTO_IP);
        fwrite($write, self::WRITE_STRING); // Make $read readable.

        $readable = $this->getMockBuilder('Icicle\Socket\ReadableStream')
                         ->disableOriginalConstructor()
                         ->getMock();

        stream_set_blocking($read, 0);

        $readable->method('getResource')
                 ->will($this->returnValue($read));

        $readable->method('isReadable')
                 ->will($this->returnValue(true));

        $readable->method('read')
                 ->will($this->returnCallback(function ($length = null) use ($read) {
                     if (null === $length) {
                         $length = 8192;
                     }
                     return Promise::resolve(fread($read, $length));
                 }));

        $readable->method('close')
                 ->will($this->returnCallback(function () use ($read) {
                     fclose($read);
                 }));

        $writable = new WritableStream($write);

        return [$readable, $writable];
    }

||||||||    public function createStreams()
    {
        list($read, $write) = stream_socket_pair(STREAM_PF_UNIX, STREAM_SOCK_STREAM, STREAM_IPPROTO_IP);

        $readable = $this->getMockBuilder('Icicle\Socket\ReadableStream')
                         ->disableOriginalConstructor()
                         ->getMock();

        stream_set_blocking($read, 0);

        $readable->method('getResource')
                 ->will($this->returnValue($read));

        $readable->method('isReadable')
                 ->will($this->returnValue(true));

        $readable->method('read')
                 ->will($this->returnCallback(function ($length = null) use ($read) {
                     if (null === $length) {
                         $length = 8192;
                     }
                     return Promise::resolve(fread($read, $length));
                 }));

        $readable->method('close')
                 ->will($this->returnCallback(function () use ($read) {
                     fclose($read);
                 }));

        $writable = new WritableStream($write);

        return [$readable, $writable];
    }

}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (AST_CONST)
                (AST_CONST)
                (AST_CONST))))
    (AST_CALL
        (
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (NO_PARAM_TYPEPARAM_DEFAULT)
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (AST_VAR))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (SCALAR)))))
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_VAR))))))))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_CALL
            (
                (AST_CONST)
                (AST_CONST)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))))
    (AST_CALL
        (
            (AST_VAR)
            (SCALAR)))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CONST)))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (NO_PARAM_TYPEPARAM_DEFAULT)
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_CONST)
                                        (AST_VAR))
                                    (
                                        (AST_ASSIGN
                                            (AST_VAR)
                                            (SCALAR)))))
                            (AST_RETURN
                                (AST_STATIC_CALL
                                    (
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_VAR))))))))))))
    (AST_METHOD_CALL
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR)))
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_CLOSURE
                        (AST_CLOSURE_USES
                            (AST_CLOSURE_VAR))
                        (
                            (AST_CALL
                                (
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))))