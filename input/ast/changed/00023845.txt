	public static function _errorHandler($severity, $message, $file, $line, $context)
	{
		if (self::$scream) {
			error_reporting(E_ALL | E_STRICT);
		}

		if ($severity === E_RECOVERABLE_ERROR || $severity === E_USER_ERROR) {
			throw new \FatalErrorException($message, 0, $severity, $file, $line, $context);

		} elseif (($severity & error_reporting()) !== $severity) {
			return FALSE; // calls normal error handler to fill-in error_get_last()

		} elseif (self::$strictMode && !self::$productionMode) {
			self::_exceptionHandler(new \FatalErrorException($message, 0, $severity, $file, $line, $context));
			exit;
		}

		static $types = array(
			E_WARNING => 'Warning',
			E_COMPILE_WARNING => 'Warning', // currently unable to handle
			E_USER_WARNING => 'Warning',
			E_NOTICE => 'Notice',
			E_USER_NOTICE => 'Notice',
			E_STRICT => 'Strict standards',
			E_DEPRECATED => 'Deprecated',
			E_USER_DEPRECATED => 'Deprecated',
		);

		$message = 'PHP ' . (isset($types[$severity]) ? $types[$severity] : 'Unknown error') . ": $message";

		if (self::$logDirectory) {
			self::log("$message in $file:$line", self::ERROR); // log manually, required on some stupid hostings
			return NULL;

		} elseif (!self::$productionMode) {
			if (self::$showBar) {
				self::$errors[] = "$message in $file:$line";
			}
			if (self::$firebugDetected && !headers_sent()) {
				self::fireLog(new \ErrorException($message, 0, $severity, $file, $line), self::WARNING);
			}
			return self::$consoleMode || (!self::$showBar && !self::$ajaxDetected) ? FALSE : NULL;
		}

		return FALSE; // call normal error handler
	}



	/** @deprecated */
||||||||	public static function _errorHandler($severity, $message, $file, $line, $context)
	{
		if (self::$scream) {
			error_reporting(E_ALL | E_STRICT);
		}

		if ($severity === E_RECOVERABLE_ERROR || $severity === E_USER_ERROR) {
			throw new \FatalErrorException($message, 0, $severity, $file, $line, $context);

		} elseif (($severity & error_reporting()) !== $severity) {
			return FALSE; // calls normal error handler to fill-in error_get_last()

		} elseif (self::$strictMode && !self::$productionMode) {
			self::_exceptionHandler(new \FatalErrorException($message, 0, $severity, $file, $line, $context));
			exit;
		}

		static $types = array(
			E_WARNING => 'Warning',
			E_COMPILE_WARNING => 'Warning', // currently unable to handle
			E_USER_WARNING => 'Warning',
			E_NOTICE => 'Notice',
			E_USER_NOTICE => 'Notice',
			E_STRICT => 'Strict standards',
			E_DEPRECATED => 'Deprecated',
			E_USER_DEPRECATED => 'Deprecated',
		);

		$message = 'PHP ' . (isset($types[$severity]) ? $types[$severity] : 'Unknown error') . ": $message";

		self::log("$message in $file:$line", self::ERROR); // log manually, required on some stupid hostings

		if (self::$productionMode) {
			return NULL;

		} else {
			if (self::$showBar) {
				self::$errors[] = "$message in $file:$line";
			}
			if (self::$firebugDetected && !headers_sent()) {
				self::fireLog(new \ErrorException($message, 0, $severity, $file, $line), self::WARNING);
			}
			return self::$consoleMode || (!self::$showBar && !self::$ajaxDetected) ? FALSE : NULL;
		}

		return FALSE; // call normal error handler
	}



	/** @deprecated */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CALL))
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_UNARY_OP
                    (AST_STATIC_PROP)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_EXIT
                    (NULL)))))
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_STATIC_CALL
                    (
                        (AST_ENCAPS_LIST
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR))
                        (AST_CLASS_CONST
                            (SCALAR))))
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_PROP))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (NULL))
                                (AST_ENCAPS_LIST
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_PROP)
                            (AST_UNARY_OP
                                (AST_CALL)))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_NEW
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (AST_CLASS_CONST
                                        (SCALAR)))))))
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_STATIC_PROP)
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_STATIC_PROP))
                                (AST_UNARY_OP
                                    (AST_STATIC_PROP))))
                        (AST_CONST)
                        (AST_CONST))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_CALL
                    (
                        (AST_BINARY_OP
                            (AST_CONST)
                            (AST_CONST)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CONST)))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_VAR)
                            (SCALAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR)
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_CALL))
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_PROP)
                (AST_UNARY_OP
                    (AST_STATIC_PROP)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)
                                (AST_VAR)))))
                (AST_EXIT
                    (NULL)))))
    (AST_STATIC
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))
            (AST_ARRAY_ELEM
                (SCALAR)
                (AST_CONST))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (SCALAR)
                (AST_CONDITIONAL
                    (AST_ISSET
                        (AST_DIM
                            (AST_VAR)
                            (AST_VAR)))
                    (AST_DIM
                        (AST_VAR)
                        (AST_VAR))
                    (SCALAR)))
            (AST_ENCAPS_LIST
                (SCALAR)
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_ENCAPS_LIST
                (AST_VAR)
                (SCALAR)
                (AST_VAR)
                (SCALAR)
                (AST_VAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_STATIC_PROP)
            (
                (AST_RETURN
                    (AST_CONST))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_PROP)
                        (
                            (AST_ASSIGN
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (NULL))
                                (AST_ENCAPS_LIST
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR)
                                    (SCALAR)
                                    (AST_VAR))))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_STATIC_PROP)
                            (AST_UNARY_OP
                                (AST_CALL)))
                        (
                            (AST_STATIC_CALL
                                (
                                    (AST_NEW
                                        (
                                            (AST_VAR)
                                            (SCALAR)
                                            (AST_VAR)
                                            (AST_VAR)
                                            (AST_VAR)))
                                    (AST_CLASS_CONST
                                        (SCALAR)))))))
                (AST_RETURN
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_STATIC_PROP)
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_STATIC_PROP))
                                (AST_UNARY_OP
                                    (AST_STATIC_PROP))))
                        (AST_CONST)
                        (AST_CONST))))))
    (AST_RETURN
        (AST_CONST)))