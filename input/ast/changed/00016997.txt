	public function look($n) {
		$this->bev->input->copyout($data, $n);
		return $data;
	}


	/* Searches first occurence of the string in input buffer
	 * @param string Needle
	 * @param [integer Offset start]
	 * @param [integer Offset end]
	 * @return integer Position
	 */
||||||||	public function look($n, $o = 0) {
		if (!isset($this->bev)) {
			return false;
		}
		return $this->bev->input->substr($o, $n);
	}

	/* Read from buffer without draining
	 * @param Offset
	 * @param [integer Number of bytes to read
	 * @return string|false
	 */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (
            (AST_VAR)
            (AST_VAR)))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (
                (AST_VAR)
                (AST_VAR)))))