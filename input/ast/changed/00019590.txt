    public function subunitFor(Currency $currency)
    {
        foreach ($this->currencies as $c) {
            try {
                return $c->subunitFor($currency);
            } catch (UnknownCurrencyException $e) {
            }
        }

        throw new UnknownCurrencyException('Cannot find currency '.$currency->getCode());
    }

    /**
     * {@inheritdoc}
     */
||||||||    public function subunitFor(Currency $currency)
    {
        foreach ($this->currencies as $c) {
            if ($c->contains($currency)) {
                return $c->subunitFor($currency);
            }
        }

        throw new UnknownCurrencyException('Cannot find currency '.$currency->getCode());
    }

    /**
     * {@inheritdoc}
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_TRY
                (
                    (AST_RETURN
                        (AST_METHOD_CALL
                            (AST_VAR)
                            (
                                (AST_VAR)))))
                (AST_CATCH_LIST
                    (AST_CATCH
                        (AST_NAME_LIST)
                        (AST_VAR)))
                (NULL))))
    (AST_THROW
        (AST_NEW
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_FOREACH
        (AST_PROP
            (AST_VAR))
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR)))
                    (
                        (AST_RETURN
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))))))
    (AST_THROW
        (AST_NEW
            (
                (AST_BINARY_OP
                    (SCALAR)
                    (AST_METHOD_CALL
                        (AST_VAR)))))))