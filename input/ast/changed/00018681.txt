	protected static function recall($cookie)
	{
		// The decrypted value of the remember cookie contains the ID and username.
		// We will extract them out and pass the ID to the "user" closure to attempt
		// to login the user. If a user is returned, their ID will be stored in
		// the session like normal and the user will be considered logged in.
		$cookie = explode('|', $cookie);

		if (count($cookie) < 2) return;

		list($id, $username) = array($cookie[0], $cookie[1]);

		if ( ! is_null($user = call_user_func(Config::get('auth.user'), $id)) and $user->{Config::get('auth.username')} === $username)
		{
			static::login($user);
		}

		return $user;
	}

	/**
	 * Attempt to log a user into the application.
	 *
	 * If the given credentials are valid, the user will be logged into the application
	 * and their user ID will be stored in the session data.
	 *
	 * The user may also be "remembered". When this option is set, the user will be
	 * automatically logged into the application for one year via an encrypted cookie
	 * containing their ID. Of course, if the user logs out of the application,
	 * they will no longer be remembered.
	 *
	 * @param  string  $username
	 * @param  string  $password
	 * @param  bool    $remember
	 * @return bool
	 */
||||||||	protected static function recall($cookie)
	{
		// The decrypted value of the remember cookie contains the ID and username.
		// We will extract them out and pass the ID to the "user" closure to attempt
		// to login the user. If a user is returned, their ID will be stored in
		// the session like normal and the user will be considered logged in.
		$cookie = explode('|', $cookie);

		if (count($cookie) < 2) return;

		list($id, $username, $config) = array($cookie[0], $cookie[1], Config::get('auth'));

		if ( ! is_null($user = call_user_func($config['user'], $id)) and $user->{$config['username']} === $username)
		{
			static::login($user);
		}

		return $user;
	}

	/**
	 * Attempt to log a user into the application.
	 *
	 * If the given credentials are valid, the user will be logged into the application
	 * and their user ID will be stored in the session data.
	 *
	 * The user may also be "remembered". When this option is set, the user will be
	 * automatically logged into the application for one year via an encrypted cookie
	 * containing their ID. Of course, if the user logs out of the application,
	 * they will no longer be remembered.
	 *
	 * @param  string  $username
	 * @param  string  $password
	 * @param  bool    $remember
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_STATIC_CALL
                                            (
                                                (SCALAR)))
                                        (AST_VAR)))))))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)))
                (SCALAR))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_VAR)
                (NULL)))
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_VAR)
                    (SCALAR))
                (NULL))
            (AST_ARRAY_ELEM
                (AST_STATIC_CALL
                    (
                        (SCALAR)))
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_VAR)))))))
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))))
    (AST_RETURN
        (AST_VAR)))