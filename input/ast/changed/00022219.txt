    function test_grade_category_set_as_parent() {
        global $CFG;
        $debuglevel = $CFG->debug;

        // There are 3 constraints which, if violated, should return false and trigger a debugging message. Test each of them
        $grade_category = new grade_category();
        $grade_category->fullname    = 'new topcategory';
        $grade_category->courseid    = $this->courseid;
        $grade_category->insert();

        // 1. mixed types of children
        $child1 = new grade_item();
        $child1->sortorder = 1;
        $child2 = new grade_category();
        $child2->grade_item = new grade_item();
        $child2->grade_item->sortorder = 2;
        $CFG->debug = 2;
        $this->assertFalse($grade_category->set_as_parent(array($child1, $child2)));
        $CFG->debug = $debuglevel;

        // 2. Child is a top category
        $child1 = new grade_category($this->grade_categories[0]);
        $CFG->debug = 2;
        $this->assertFalse($grade_category->set_as_parent(array($child1)));
        $CFG->debug = $debuglevel;

        // 3. Children belong to different courses
        $child1 = new grade_item($this->grade_items[0]);
        $child2 = new grade_item($this->grade_items[1]);
        $child2->courseid = 543;
        $CFG->debug = 2;
        $this->assertFalse($grade_category->set_as_parent(array($child1, $child2)));
        $CFG->debug = $debuglevel;

        // Now test setting parent correctly
        $child1 = new grade_item();
        $child2 = new grade_item();
        $child1->itemname = 'new grade_item';
        $child2->itemname = 'new grade_item';
        $child1->itemtype = 'something';
        $child2->itemtype = 'something';
        $child1->sortorder = 1;
        $child2->sortorder = 2;
        $child1->courseid = $grade_category->courseid;
        $child2->courseid = $grade_category->courseid;
        $child1->insert();
        $child2->insert();
        $this->assertTrue($grade_category->set_as_parent(array($child1, $child2)));
    }

||||||||    function test_grade_category_set_as_parent() {
        //TODO: rewrite this test - we need proper items stored in database!

/*        global $CFG;
        $debuglevel = $CFG->debug;

        // There are 3 constraints which, if violated, should return false and trigger a debugging message. Test each of them
        $grade_category = new grade_category();
        $grade_category->fullname    = 'new topcategory';
        $grade_category->courseid    = $this->courseid;
        $grade_category->insert();

        // 1. mixed types of children
        $child1 = new grade_item();
        $child1->sortorder = 1;
        $child2 = new grade_category();
        $child2->grade_item = new grade_item();
        $child2->grade_item->sortorder = 2;
        $CFG->debug = 2;
        $this->assertFalse($grade_category->set_as_parent(array($child1, $child2)));
        $CFG->debug = $debuglevel;

        // 2. Child is a top category
        $child1 = new grade_category($this->grade_categories[0]);
        $CFG->debug = 2;
        $this->assertFalse($grade_category->set_as_parent(array($child1)));
        $CFG->debug = $debuglevel;

        // 3. Children belong to different courses
        $child1 = new grade_item($this->grade_items[0]);
        $child2 = new grade_item($this->grade_items[1]);
        $child2->courseid = 543;
        $CFG->debug = 2;
        $this->assertFalse($grade_category->set_as_parent(array($child1, $child2)));
        $CFG->debug = $debuglevel;

        // Now test setting parent correctly
        $child1 = new grade_item();
        $child2 = new grade_item();
        $child1->itemname = 'new grade_item';
        $child2->itemname = 'new grade_item';
        $child1->itemtype = 'something';
        $child2->itemtype = 'something';
        $child1->sortorder = 1;
        $child2->sortorder = 2;
        $child1->courseid = $grade_category->courseid;
        $child2->courseid = $grade_category->courseid;
        $child1->insert();
        $child2->insert();
        $this->assertTrue($grade_category->set_as_parent(array($child1, $child2)));*/
    }
/*
    function test_grade_category_apply_limit_rules() {
        $category = new grade_category();
        $grades = array(5.374, 9.4743, 2.5474, 7.3754);

        $category->droplow = 2;
        $category->apply_limit_rules($grades);
        sort($grades, SORT_NUMERIC);
        $this->assertEqual(array(7.3754, 9.4743), $grades);

        $category = new grade_category();
        $grades = array(5.374, 9.4743, 2.5474, 7.3754);

        $category->keephigh = 1;
        $category->droplow = 0;
        $category->apply_limit_rules($grades);
        $this->assertEqual(array(9.4743), $grades);
    }*/
}
?>||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_GLOBAL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_PROP
                (AST_VAR)))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL)))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (SCALAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_PROP
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (AST_VAR)
                            (NULL))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE