    public function test_trackingWithLangParameter_ForwardsLangParameter_ToDefaultLocationProvider()
    {
        LocationProvider::setCurrentProvider(LocationProvider\DefaultProvider::ID);

        $urlToTest = "?idsite=1&rec=1&action_name=test&lang=fr-be";
        $response = $this->sendTrackingRequestByCurl($urlToTest);
        Fixture::checkResponse($response);

        $logVisitTable = Common::prefixTable('log_visit');

        $visitCount = Db::fetchOne("SELECT COUNT(*) FROM $logVisitTable");
        $this->assertEquals(1, $visitCount);

        $visitCountry = Db::fetchOne("SELECT location_country FROM $logVisitTable");
        $this->assertEquals('be', $visitCountry);
    }

||||||||    public function test_trackingWithLangParameter_ForwardsLangParameter_ToDefaultLocationProvider()
    {
        LocationProvider::$providers = null;
        LocationProvider::getAllProviders();
        LocationProvider::setCurrentProvider(LocationProvider\DefaultProvider::ID);

        $urlToTest = "?idsite=1&rec=1&action_name=test&lang=fr-be";
        $response = $this->sendTrackingRequestByCurl($urlToTest);
        Fixture::checkResponse($response);

        $logVisitTable = Common::prefixTable('log_visit');

        $visitCount = Db::fetchOne("SELECT COUNT(*) FROM $logVisitTable");
        $this->assertEquals(1, $visitCount);

        $visitCountry = Db::fetchOne("SELECT location_country FROM $logVisitTable");
        $this->assertEquals('be', $visitCountry);
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_STATIC_CALL
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_STATIC_CALL)
    (AST_STATIC_CALL
        (
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_ENCAPS_LIST
                    (SCALAR)
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR))))