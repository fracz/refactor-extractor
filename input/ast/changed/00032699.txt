	public function stream_write( $data ) {

		// Disable the file proxies so that encryption is not
		// automatically attempted when the file is written to disk -
		// we are handling that separately here and we don't want to
		// get into an infinite loop
		\OC_FileProxy::$enabled = false;

		// Get the length of the unencrypted data that we are handling
		$length = strlen( $data );

		// So far this round, no data has been written
		$written = 0;

		// Find out where we are up to in the writing of data to the
		// file
		$pointer = ftell( $this->handle );

		// Make sure the userId is set
		$this->setUserProperty();

		// Get / generate the keyfile for the file we're handling
		// If we're writing a new file (not overwriting an existing
		// one), save the newly generated keyfile
		if ( ! $this->getKey() ) {

			$this->plainKey = Crypt::generateKey();

		}

		// Fetch user's public key
		$this->publicKey = Keymanager::getPublicKey( $this->rootView, $this->userId );

		// Check if OC sharing api is enabled
		$sharingEnabled = \OCP\Share::isEnabled();

		$util = new Util( $this->rootView, $this->userId );

		// Get all users sharing the file
		$uniqueUserIds = $util->getSharingUsersArray( $sharingEnabled, $this->relPath );

		// Fetch public keys for all sharing users
		$publicKeys = Keymanager::getPublicKeys( $this->rootView, $uniqueUserIds );

		// Encrypt enc key for all sharing users
		$this->encKeyfiles = Crypt::multiKeyEncrypt( $this->plainKey, $publicKeys );

		$view = new \OC_FilesystemView( '/' );

		// Save the new encrypted file key
		Keymanager::setFileKey( $this->rootView, $this->relPath, $this->userId, $this->encKeyfiles['data'] );

		// Save the sharekeys
		Keymanager::setShareKeys( $view, $this->relPath, $this->encKeyfiles['keys'] );

// 		trigger_error( "\$this->encKeyfiles['data'] = ".$this->encKeyfiles['data'] );
// 		trigger_error( '$this->relPath = '.$this->relPath );
// 		trigger_error( '$this->userId = '.$this->userId);
// 		trigger_error( '$this->encKeyfile  = '.var_export($this->encKeyfiles, 1) );
// 		trigger_error( '$this->plainKey2 = '.var_export($this->plainKey, 1));

		// If extra data is left over from the last round, make sure it
		// is integrated into the next 6126 / 8192 block
		if ( $this->writeCache ) {

			// Concat writeCache to start of $data
			$data = $this->writeCache . $data;

			// Clear the write cache, ready for resuse - it has been
			// flushed and its old contents processed
			$this->writeCache = '';

		}
//
// 		// Make sure we always start on a block start
		if ( 0 != ( $pointer % 8192 ) ) {
		// if the current position of
		// file indicator is not aligned to a 8192 byte block, fix it
		// so that it is

// 			fseek( $this->handle, - ( $pointer % 8192 ), SEEK_CUR );
//
// 			$pointer = ftell( $this->handle );
//
// 			$unencryptedNewBlock = fread( $this->handle, 8192 );
//
// 			fseek( $this->handle, - ( $currentPos % 8192 ), SEEK_CUR );
//
// 			$block = Crypt::symmetricDecryptFileContent( $unencryptedNewBlock, $this->plainKey );
//
// 			$x =  substr( $block, 0, $currentPos % 8192 );
//
// 			$data = $x . $data;
//
// 			fseek( $this->handle, - ( $currentPos % 8192 ), SEEK_CUR );
//
		}

// 		$currentPos = ftell( $this->handle );

// 		// While there still remains somed data to be processed & written
		while( strlen( $data ) > 0 ) {

// 			// Remaining length for this iteration, not of the
//			// entire file (may be greater than 8192 bytes)
// 			$remainingLength = strlen( $data );
//
// 			// If data remaining to be written is less than the
//			// size of 1 6126 byte block
			if ( strlen( $data ) < 6126 ) {

				// Set writeCache to contents of $data
				// The writeCache will be carried over to the
				// next write round, and added to the start of
				// $data to ensure that written blocks are
				// always the correct length. If there is still
				// data in writeCache after the writing round
				// has finished, then the data will be written
				// to disk by $this->flush().
				$this->writeCache = $data;

				// Clear $data ready for next round
				$data = '';
//
			} else {

				// Read the chunk from the start of $data
				$chunk = substr( $data, 0, 6126 );

				$encrypted = $this->preWriteEncrypt( $chunk, $this->plainKey );

				trigger_error("\$encrypted = $encrypted");

				// Write the data chunk to disk. This will be
				// attended to the last data chunk if the file
				// being handled totals more than 6126 bytes
				fwrite( $this->handle, $encrypted );

				$writtenLen = strlen( $encrypted );
				//fseek( $this->handle, $writtenLen, SEEK_CUR );

				// Remove the chunk we just processed from
				// $data, leaving only unprocessed data in $data
				// var, for handling on the next round
				$data = substr( $data, 6126 );

			}

		}

		$this->size = max( $this->size, $pointer + $length );

		return $length;

	}


||||||||	public function stream_write( $data ) {

		// Disable the file proxies so that encryption is not
		// automatically attempted when the file is written to disk -
		// we are handling that separately here and we don't want to
		// get into an infinite loop
		\OC_FileProxy::$enabled = false;

		// Get the length of the unencrypted data that we are handling
		$length = strlen( $data );

		// So far this round, no data has been written
		$written = 0;

		// Find out where we are up to in the writing of data to the
		// file
		$pointer = ftell( $this->handle );

		// Make sure the userId is set
		$this->setUserProperty();

		// Get / generate the keyfile for the file we're handling
		// If we're writing a new file (not overwriting an existing
		// one), save the newly generated keyfile
		if ( ! $this->getKey() ) {

			$this->plainKey = Crypt::generateKey();

		}

		// Fetch user's public key
		$this->publicKey = Keymanager::getPublicKey( $this->rootView, $this->userId );

		// Check if OC sharing api is enabled
		$sharingEnabled = \OCP\Share::isEnabled();

		$util = new Util( $this->rootView, $this->userId );

		// Get all users sharing the file
		$uniqueUserIds = $util->getSharingUsersArray( $sharingEnabled, $this->relPath );

        // allways add current user
        $uniqueUserIds[] = $this->userId;
        array_unique( $uniqueUserIds );

		// Fetch public keys for all sharing users
		$publicKeys = Keymanager::getPublicKeys( $this->rootView, $uniqueUserIds );

        // Encrypt enc key for all sharing users
		$this->encKeyfiles = Crypt::multiKeyEncrypt( $this->plainKey, $publicKeys );

		$view = new \OC_FilesystemView( '/' );

		// Save the new encrypted file key
		Keymanager::setFileKey( $this->rootView, $this->relPath, $this->userId, $this->encKeyfiles['data'] );

		// Save the sharekeys
		Keymanager::setShareKeys( $view, $this->relPath, $this->encKeyfiles['keys'] );

// 		trigger_error( "\$this->encKeyfiles['data'] = ".$this->encKeyfiles['data'] );
// 		trigger_error( '$this->relPath = '.$this->relPath );
// 		trigger_error( '$this->userId = '.$this->userId);
// 		trigger_error( '$this->encKeyfile  = '.var_export($this->encKeyfiles, 1) );
// 		trigger_error( '$this->plainKey2 = '.var_export($this->plainKey, 1));

		// If extra data is left over from the last round, make sure it
		// is integrated into the next 6126 / 8192 block
		if ( $this->writeCache ) {

			// Concat writeCache to start of $data
			$data = $this->writeCache . $data;

			// Clear the write cache, ready for resuse - it has been
			// flushed and its old contents processed
			$this->writeCache = '';

		}
//
// 		// Make sure we always start on a block start
		if ( 0 != ( $pointer % 8192 ) ) {
		// if the current position of
		// file indicator is not aligned to a 8192 byte block, fix it
		// so that it is

// 			fseek( $this->handle, - ( $pointer % 8192 ), SEEK_CUR );
//
// 			$pointer = ftell( $this->handle );
//
// 			$unencryptedNewBlock = fread( $this->handle, 8192 );
//
// 			fseek( $this->handle, - ( $currentPos % 8192 ), SEEK_CUR );
//
// 			$block = Crypt::symmetricDecryptFileContent( $unencryptedNewBlock, $this->plainKey );
//
// 			$x =  substr( $block, 0, $currentPos % 8192 );
//
// 			$data = $x . $data;
//
// 			fseek( $this->handle, - ( $currentPos % 8192 ), SEEK_CUR );
//
		}

// 		$currentPos = ftell( $this->handle );

// 		// While there still remains somed data to be processed & written
		while( strlen( $data ) > 0 ) {

// 			// Remaining length for this iteration, not of the
//			// entire file (may be greater than 8192 bytes)
// 			$remainingLength = strlen( $data );
//
// 			// If data remaining to be written is less than the
//			// size of 1 6126 byte block
			if ( strlen( $data ) < 6126 ) {

				// Set writeCache to contents of $data
				// The writeCache will be carried over to the
				// next write round, and added to the start of
				// $data to ensure that written blocks are
				// always the correct length. If there is still
				// data in writeCache after the writing round
				// has finished, then the data will be written
				// to disk by $this->flush().
				$this->writeCache = $data;

				// Clear $data ready for next round
				$data = '';
//
			} else {

				// Read the chunk from the start of $data
				$chunk = substr( $data, 0, 6126 );

				$encrypted = $this->preWriteEncrypt( $chunk, $this->plainKey );

				//trigger_error("\$encrypted = $encrypted");

				// Write the data chunk to disk. This will be
				// attended to the last data chunk if the file
				// being handled totals more than 6126 bytes
				fwrite( $this->handle, $encrypted );

				$writtenLen = strlen( $encrypted );
				//fseek( $this->handle, $writtenLen, SEEK_CUR );

				// Remove the chunk we just processed from
				// $data, leaving only unprocessed data in $data
				// var, for handling on the next round
				$data = substr( $data, 6126 );

			}

		}

		$this->size = max( $this->size, $pointer + $length );

		return $length;

	}


||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (SCALAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_CALL
                            (
                                (AST_ENCAPS_LIST
                                    (SCALAR)
                                    (AST_VAR))))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (AST_STATIC_CALL)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_PROP
                    (AST_VAR))
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_PROP
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_DIM
            (AST_VAR)
            (NULL))
        (AST_PROP
            (AST_VAR)))
    (AST_CALL
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_STATIC_CALL
        (
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_PROP
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_BINARY_OP
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))
                (AST_ASSIGN
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (SCALAR)
                (AST_BINARY_OP
                    (AST_VAR)
                    (SCALAR)))))
    (AST_WHILE
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (SCALAR))
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_CALL
                            (
                                (AST_VAR)))
                        (SCALAR))
                    (
                        (AST_ASSIGN
                            (AST_PROP
                                (AST_VAR))
                            (AST_VAR))
                        (AST_ASSIGN
                            (AST_VAR)
                            (SCALAR))))
                (AST_IF_ELEM
                    (NULL)
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)
                                    (SCALAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)
                                    (AST_PROP
                                        (AST_VAR)))))
                        (AST_CALL
                            (
                                (AST_PROP
                                    (AST_VAR))
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR))))
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_RETURN
        (AST_VAR)))