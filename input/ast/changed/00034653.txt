    public function encode($utf8) {
        return self::unicode_safe(self::utf8_unicode($utf8));
    }

    /**
     *  decoding process
     *    - split the string into substrings at marker characters,
     *      discarding post_indicator character but keeping
     *      pre_indicator characters (along with their following
     *      base36 string)
     *    - check the first character of the substring
     *      - if its not a pre_indicator character, convert each
     *        character in the substring into its codepoint value
     *        and append to output (continue to next substring)
     *      - if it is a pre_indicator character, get its position in the
     *        pre_indicator string (order is important)
     *    - convert the remainder of the string from base36 to base10
     *      and then to an (int).
     *    - multiply the converted int by the number of pre_indicator
     *      characters and add the pre_indicator position
     *    - reverse the conversion adjustment for codepoint holes left by
     *      "plain" characters
     *    - append resulting codepoint value to output (continue to next
     *      substring)
     */
||||||||    public function encode($filename) {
        return self::unicode_to_safe(utf8_to_unicode($filename));
    }

    /**
     *  decoding process
     *    - split the string into substrings at any occurrence of pre or post indicator characters
     *    - check the first character of the substring
     *      - if its not a pre_indicator character
     *        - if previous character was converted, skip over post_indicator character
     *        - copy codepoint values of remaining characters to the output array
     *        - clear any converted flag
     *      (continue to next substring)
     *
     *     _ else (its a pre_indicator character)
     *       - if string length is 1, copy the post_indicator character to the output array
     *       (continue to next substring)
     *
     *       - else (string length > 1)
     *         - skip the pre-indicator character and convert remaining string from base36 to base10
     *         - increase codepoint value for non-printable ASCII characters (add 0x20)
     *         - append codepoint to output array
     *       (continue to next substring)
     *
     * @param    string    $filename     a 'safe' encoded ASCII string,
     * @return   string    decoded utf8 representation of $filename
     *
     * @author   Christopher Smith <chris@jalakai.co.uk>
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_STATIC_CALL
            (
                (AST_CALL
                    (
                        (AST_VAR)))))))