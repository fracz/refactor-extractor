	protected function attached($presenter)
	{
		if ($presenter instanceof Presenter) {
			$id = $this->lookupPath('Nette\Application\Presenter');
			$this->setAction(new Link(
				$presenter,
				'this!',
				array(Presenter::SIGNAL_KEY => "$id-submit")
			));
		}
	}



	/**
	 * Detects form submission and loads PresenterRequest values.
	 * @return void
	 */
||||||||	protected function attached($presenter)
	{
		if ($presenter instanceof Presenter) {
			$this->setAction(new Link(
				$presenter,
				$this->lookupPath('Nette\Application\Presenter') . self::NAME_SEPARATOR . 'submit!',
				array()
			));
		}
	}



	/**
	 * Detects form submission and loads PresenterRequest values.
	 * @return void
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR)
                                (SCALAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_ENCAPS_LIST
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CLASS_CONST
                                            (SCALAR))))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_NEW
                            (
                                (AST_VAR)
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (AST_METHOD_CALL
                                            (AST_VAR)
                                            (
                                                (SCALAR)))
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR))
                                (AST_ARRAY)))))))))