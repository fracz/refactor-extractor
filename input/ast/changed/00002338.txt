	public function execute($action, $forwarder = "") {
		$action = rtrim($action, '/');
		$this->currentAction = $action;

		// @todo REMOVE THESE ONCE #1509 IS IN PLACE.
		// Allow users to disable plugins without a token in order to
		// remove plugins that are incompatible.
		// Login and logout are for convenience.
		// file/download (see #2010)
		$exceptions = [
			'admin/plugins/disable',
			'logout',
			'file/download',
		];

		if (!in_array($action, $exceptions)) {
			// All actions require a token.
			$pass = $this->gatekeeper($action);
			if (!$pass) {
				return;
			}
		}

		$forwarder = str_replace($this->config->wwwroot, "", $forwarder);
		$forwarder = str_replace("http://", "", $forwarder);
		$forwarder = str_replace("@", "", $forwarder);
		if (substr($forwarder, 0, 1) == "/") {
			$forwarder = substr($forwarder, 1);
		}

		$ob_started = false;

		/**
		 * Prepare action response
		 *
		 * @param string $error_key   Error message key
		 * @param int    $status_code HTTP status code
		 * @return ResponseBuilder
		 */
		$forward = function ($error_key = '', $status_code = ELGG_HTTP_OK) use ($action, $forwarder, &$ob_started) {
			if ($error_key) {
				if ($ob_started) {
					ob_end_clean();
				}
				$msg = _elgg_services()->translator->translate($error_key, [$action]);
				_elgg_services()->systemMessages->addErrorMessage($msg);
				$response = new \Elgg\Http\ErrorResponse($msg, $status_code);
			} else {
				$content = ob_get_clean();
				$response = new \Elgg\Http\OkResponse($content, $status_code);
			}

			$forwarder = empty($forwarder) ? REFERER : $forwarder;
			$response->setForwardURL($forwarder);
			return $response;
		};

		if (!isset($this->actions[$action])) {
			return $forward('actionundefined', ELGG_HTTP_NOT_IMPLEMENTED);
		}

		$user = $this->session->getLoggedInUser();

		// access checks
		switch ($this->actions[$action]['access']) {
			case 'public':
				break;
			case 'logged_in':
				if (!$user) {
					return $forward('actionloggedout', ELGG_HTTP_FORBIDDEN);
				}
				break;
			default:
				// admin or misspelling
				if (!$user || !$user->isAdmin()) {
					return $forward('actionunauthorized', ELGG_HTTP_FORBIDDEN);
				}
		}

		ob_start();

		// To quietly cancel the file, return a falsey value in the "action" hook.
		if (!_elgg_services()->hooks->trigger('action', $action, null, true)) {
			return $forward('', ELGG_HTTP_OK);
		}

		$file = $this->actions[$action]['file'];

		if (!is_file($file) || !is_readable($file)) {
			return $forward('actionnotfound', ELGG_HTTP_NOT_IMPLEMENTED);
		}

		// set the maximum execution time for actions
		$action_timeout = $this->config->action_time_limit;
		if (isset($action_timeout)) {
			set_time_limit($action_timeout);
		}

		$result = Includer::includeFile($file);
		if ($result instanceof ResponseBuilder) {
			ob_end_clean();
			return $result;
		}

		return $forward('', ELGG_HTTP_OK);
	}

	/**
	 * @see elgg_register_action
	 * @access private
	 */
||||||||	public function execute($action, $forwarder = "") {
		$action = rtrim($action, '/');
		$this->currentAction = $action;

		// @todo REMOVE THESE ONCE #1509 IS IN PLACE.
		// Allow users to disable plugins without a token in order to
		// remove plugins that are incompatible.
		// Login and logout are for convenience.
		// file/download (see #2010)
		$exceptions = [
			'admin/plugins/disable',
			'logout',
			'file/download',
		];

		if (!in_array($action, $exceptions)) {
			// All actions require a token.
			$pass = $this->gatekeeper($action);
			if (!$pass) {
				return;
			}
		}

		$forwarder = str_replace($this->config->wwwroot, "", $forwarder);
		$forwarder = str_replace("http://", "", $forwarder);
		$forwarder = str_replace("@", "", $forwarder);
		if (substr($forwarder, 0, 1) == "/") {
			$forwarder = substr($forwarder, 1);
		}

		$ob_started = false;

		/**
		 * Prepare action response
		 *
		 * @param string $error_key   Error message key
		 * @param int    $status_code HTTP status code
		 * @return ResponseBuilder
		 */
		$forward = function ($error_key = '', $status_code = ELGG_HTTP_OK) use ($action, $forwarder, &$ob_started) {
			if ($error_key) {
				if ($ob_started) {
					ob_end_clean();
				}
				$msg = _elgg_services()->translator->translate($error_key, [$action]);
				_elgg_services()->systemMessages->addErrorMessage($msg);
				$response = new \Elgg\Http\ErrorResponse($msg, $status_code);
			} else {
				$content = ob_get_clean();
				$response = new \Elgg\Http\OkResponse($content, $status_code);
			}

			$forwarder = empty($forwarder) ? REFERER : $forwarder;
			$response->setForwardURL($forwarder);
			return $response;
		};

		if (!isset($this->actions[$action])) {
			return $forward('actionundefined', ELGG_HTTP_NOT_IMPLEMENTED);
		}

		$user = $this->session->getLoggedInUser();

		// access checks
		switch ($this->actions[$action]['access']) {
			case 'public':
				break;
			case 'logged_in':
				if (!$user) {
					return $forward('actionloggedout', ELGG_HTTP_FORBIDDEN);
				}
				break;
			default:
				// admin or misspelling
				if (!$user || !$user->isAdmin()) {
					return $forward('actionunauthorized', ELGG_HTTP_FORBIDDEN);
				}
		}

		ob_start();

		// To quietly cancel the file, return a falsey value in the "action" hook.
		if (!_elgg_services()->hooks->trigger('action', $action, null, true)) {
			return $forward('', ELGG_HTTP_OK);
		}

		$file = $this->actions[$action]['file'];

		if (!is_file($file) || !is_readable($file)) {
			ob_end_clean();
			return $forward('actionnotfound', ELGG_HTTP_NOT_IMPLEMENTED);
		}

		// set the maximum execution time for actions
		$action_timeout = $this->config->action_time_limit;
		if (isset($action_timeout)) {
			set_time_limit($action_timeout);
		}

		$result = Includer::includeFile($file);
		if ($result instanceof ResponseBuilder) {
			ob_end_clean();
			return $result;
		}

		return $forward('', ELGG_HTTP_OK);
	}

	/**
	 * @see elgg_register_action
	 * @access private
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (NULL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_VAR)
                                    (
                                        (AST_CALL))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_CALL))
                                    (
                                        (AST_VAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL))))))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_CALL))
                                (
                                    (AST_VAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_CONST)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_SWITCH
        (AST_DIM
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (SCALAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_CONST)))))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_VAR))
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (
                                (AST_RETURN
                                    (AST_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_CONST)))))))))))
    (AST_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_CALL))
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST))))
            (
                (AST_RETURN
                    (AST_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_RETURN
                    (AST_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_CALL)
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_CONST)))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR)
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_VAR))
                        (
                            (AST_RETURN
                                (NULL))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (SCALAR)
                (SCALAR)
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_CALL
                    (
                        (AST_VAR)
                        (SCALAR)
                        (SCALAR)))
                (SCALAR))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
            (AST_CLOSURE_USES
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR)
                (AST_CLOSURE_VAR))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_VAR)
                                    (
                                        (AST_CALL))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_METHOD_CALL
                                    (AST_PROP
                                        (AST_CALL))
                                    (
                                        (AST_VAR)
                                        (AST_ARRAY
                                            (AST_ARRAY_ELEM
                                                (AST_VAR)
                                                (NULL))))))
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_CALL))
                                (
                                    (AST_VAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR))))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_NEW
                                    (
                                        (AST_VAR)
                                        (AST_VAR)))))))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_EMPTY
                            (AST_VAR))
                        (AST_CONST)
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_RETURN
                    (AST_VAR)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR))))
            (
                (AST_RETURN
                    (AST_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))))
    (AST_SWITCH
        (AST_DIM
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (SCALAR))
        (AST_SWITCH_LIST
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (SCALAR)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_UNARY_OP
                                (AST_VAR))
                            (
                                (AST_RETURN
                                    (AST_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_CONST)))))))
                    (AST_BREAK
                        (NULL))))
            (AST_SWITCH_CASE
                (NULL)
                (
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_BINARY_OP
                                (AST_UNARY_OP
                                    (AST_VAR))
                                (AST_UNARY_OP
                                    (AST_METHOD_CALL
                                        (AST_VAR))))
                            (
                                (AST_RETURN
                                    (AST_CALL
                                        (AST_VAR)
                                        (
                                            (SCALAR)
                                            (AST_CONST)))))))))))
    (AST_CALL)
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_CALL))
                    (
                        (SCALAR)
                        (AST_VAR)
                        (AST_CONST)
                        (AST_CONST))))
            (
                (AST_RETURN
                    (AST_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (AST_VAR))
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR))))
                (AST_UNARY_OP
                    (AST_CALL
                        (
                            (AST_VAR)))))
            (
                (AST_CALL)
                (AST_RETURN
                    (AST_CALL
                        (AST_VAR)
                        (
                            (SCALAR)
                            (AST_CONST)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_PROP
            (AST_PROP
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_VAR))
            (
                (AST_CALL
                    (
                        (AST_VAR))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_INSTANCEOF
                (AST_VAR))
            (
                (AST_CALL)
                (AST_RETURN
                    (AST_VAR)))))
    (AST_RETURN
        (AST_CALL
            (AST_VAR)
            (
                (SCALAR)
                (AST_CONST)))))