class RedBean_Decorator extends RedBean_Observable implements IteratorAggregate { protected $data = null; protected $type = ""; protected $problems = array(); protected $provider = null; public function __construct( RedBean_OODB $provider, $type=false, $id=0, $lock=false ) { $this->provider = $provider; $id = floatval( $id ); if (!$type) { throw new Exception("Undefined bean type"); } else { $this->type = preg_replace( "[\W_]","", strtolower($type)); if ($id > 0) { $this->data = $this->provider->getById( $this->type, $id, $lock ); } else { $this->data = $this->provider->dispense( $this->type ); } } } private static function getStaticProvider() { return RedBean_OODB::getInstance(); } public function free( $property ) { $this->signal("deco_free", $this); $this->provider->dropColumn( $this->type, $property ); } public function importFromPost( $selection=null ) { $this->signal("deco_importpost", $this); if (!$selection) { $selection = array_keys($_POST); } if (is_string($selection)) { $selection = explode(",",$selection); } if ($selection && is_array($selection) && count($selection) > 0) { foreach( $selection as $field ) { $setter = "set".ucfirst( $field ); if (isset( $_POST[$field] )) { $resp = $this->$setter( $_POST[ $field ] ); } } } return $this; } public function import( $arr ) { $this->signal("deco_import", $this); foreach( $arr as $key=>$val ) { $setter = "set".ucfirst( $key ); $resp = $this->$setter( $val ); } return $this; } public function __call( $method, $arguments ) { return $this->command( $method, $arguments ); } public function __get( $name ) { $this->signal("deco_get", $this); $name = strtolower( $name ); return isset($this->data->$name) ? $this->data->$name : null; } public function __set( $name, $value ) { $this->signal("deco_set", $this); $name = strtolower( $name ); if ($name=="type") { throw new RedBean_Exception_Security("type is a reserved property to identify the table, pleae use another name for this property."); } if ($name=="id") { throw new RedBean_Exception_Security("id is a reserved property to identify the record, pleae use another name for this property."); } $this->data->$name = $value; } public function command( $method, $arguments ) { if (strpos( $method,"set" ) === 0) { $prop = substr( $method, 3 ); if ($prop=="type") { throw new RedBean_Exception_Security("type is a reserved property to identify the table, pleae use another name for this property."); } if ($prop=="id") { throw new RedBean_Exception_Security("id is a reserved property to identify the record, pleae use another name for this property."); } $this->$prop = $arguments[0]; return $this; } elseif (strpos($method,"getRelated")===0) { $this->signal("deco_get", $this); $prop = strtolower( substr( $method, 10 ) ); $beans = $this->provider->getAssoc( $this->data, $prop ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$prop.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } return $decos; } elseif (strpos( $method, "get" ) === 0) { $prop = substr( $method, 3 ); return $this->$prop; } elseif (strpos( $method, "is" ) === 0) { $prop = strtolower( substr( $method, 2 ) ); if (!isset($this->data->$prop)) { $this->signal("deco_get",$this); return false; } return ($this->data->$prop ? TRUE : FALSE); } else if (strpos($method,"add") === 0) { $this->signal("deco_add",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->associate($this->data, $bean); return $this; } else if (strpos($method,"remove")===0) { $this->signal("deco_remove",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->unassociate($this->data, $bean); return $this; } else if (strpos($method,"attach")===0) { $this->signal("deco_attach",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->addChild($this->data, $bean); return $this; } else if (strpos($method,"clearRelated")===0) { $this->signal("deco_clearrelated",$this); $type = strtolower( substr( $method, 12 ) ); $this->provider->deleteAllAssocType($type, $this->data); return $this; } else if (strpos($method,"numof")===0) { $this->signal("deco_numof",$this); $type = strtolower( substr( $method, 5 ) ); return $this->provider->numOfRelated($type, $this->data); } } public function belongsTo( $deco ) { $this->signal("deco_belongsto", $this); $this->provider->deleteAllAssocType($deco->getType(), $this->data); $this->provider->associate($this->data, $deco->getData()); } public function exclusiveAdd( $deco ) { $this->signal("deco_exclusiveadd", $this); $this->provider->deleteAllAssocType($this->type,$deco->getData()); $this->provider->associate($deco->getData(), $this->data); } public function parent() { $this->signal("deco_parent", $this); $beans = $this->provider->getParent( $this->data ); if (count($beans) > 0 ) $bean = array_pop($beans); else return null; $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; $deco = new $dclass(); $deco->setData( $bean ); return $deco; } public function siblings() { $this->signal("deco_siblings", $this); $beans = $this->provider->getParent( $this->data ); if (count($beans) > 0 ) { $bean = array_pop($beans); } else { return null; } $beans = $this->provider->getChildren( $bean ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { if ($b->id != $this->data->id) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } } return $decos; } public function children() { $this->signal("deco_children", $this); $beans = $this->provider->getChildren( $this->data ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } return $decos; } public function hasParent( $deco ) { $me = $this; while( $parent = $me->parent() ) { if ($deco->getID() == $parent->getID()) { return true; } else { $me = $parent; } } return false; } public function hasChild( $deco ) { $nodes = array($this); while($node = array_shift($nodes)) { if ($node->getID() == $deco->getID() && ($node->getID() != $this->getID())) { return true; } if ($children = $node->children()) { $nodes = array_merge($nodes, $children); } } return false; } public function hasSibling( $deco ) { $siblings = $this->siblings(); foreach( $siblings as $sibling ) { if ($sibling->getID() == $deco->getID()) { return true; } } return false; } public function copy() { $this->signal("deco_copy", $this); $clone = new self( $this->provider, $this->type, 0 ); $clone->setData( $this->getData() ); return $clone; } public function clearAllRelations() { $this->signal("deco_clearrelations", $this); $this->provider->deleteAllAssoc( $this->getData() ); } public function getData() { return $this->data; } public function setData( $data ) { $this->data = $data; } public function save() { $this->signal("deco_save", $this); return $this->provider->set( $this->data ); } public static function delete( $deco ) { self::getStaticProvider()->trash( $deco->getData() ); } public function lock() { $this->provider->openBean($this->getData()); } public function unlock() { $this->provider->closeBean( $this->getData()); } public static function close( $deco ) { self::getStaticProvider()->closeBean( $deco->getData() ); } public static function make( $type="", $id ){ return new RedBean_Decorator( self::getStaticProvider(), $type, $id ); } public function exportTo( &$bean, $overridebean=false ) { foreach($this->data as $prop=>$value) { if (is_object($overridebean) && isset($overridebean->$prop)) { $value = $overridebean->$prop; } elseif (is_array($overridebean) && isset($overridebean[$prop])) { $value = $overridebean[$prop]; } if (is_object($value)){ $value = $value->getID(); } if (is_object($bean)) { $bean->$prop = $value; } elseif (is_array($bean)) { $bean[$prop] = $value; } } return $bean; } public function exportAsArr() { $arr = array(); foreach($this->data as $prop=>$value) { if ($value instanceof RedBean_Decorator){ $value = $value->getID(); } $arr[ $prop ] = $value; } return $arr; } public static function find( $deco, $filter, $start=0, $end=100, $orderby=" id ASC ", $extraSQL=false ) { if (!is_array($filter)) { return array(); } if (count($filter)<1) { return array(); } $filters = array(); foreach($filter as $key=>$f) { $filters[strtolower($key)] =$f; if (!in_array($f,array("=","!=","<",">","<=",">=","like","LIKE"))) { throw new ExceptionInvalidFindOperator(); } } $beans = self::getStaticProvider()->find( $deco->getData(), $filters, $start, $end, $orderby, $extraSQL ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$deco->type.RedBean_Setup_Namespace_SFFX; foreach( $beans as $bean ) { $decos[ $bean->id ] = new $dclass( floatval( $bean->id ) ); $decos[ $bean->id ]->setData( $bean ); } return $decos; } public function getIterator() { $o = new ArrayObject($this->data); return $o->getIterator(); } public function isReadOnly() { try{ $this->provider->openBean($this->data, true); } catch(RedBean_Exception_FailedAccessBean $e){ return false; } return true; } }
class RedBean_Driver_MySQL implements RedBean_Driver { private static $me = null; public $Insert_ID; private $debug = false; private $rs = null; private function __construct(){} public static function getInstance( $host, $user, $pass, $dbname ) { if (!self::$me) { mysql_connect( $host, $user, $pass ); mysql_selectdb( $dbname ); self::$me = new RedBean_Driver_MySQL(); } return self::$me; } public function GetAll( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; $arr = array(); while( $r = @mysql_fetch_assoc($rs) ) { $arr[] = $r; } if ($this->debug) { if (count($arr) > 0) { echo "<br><b style='color:green'>resultset: ".count($arr)." rows</b>"; } $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } return $arr; } public function GetCol( $sql ) { $rows = $this->GetAll($sql); $cols = array(); foreach( $rows as $row ) { $cols[] = array_shift( $row ); } return $cols; } public function GetCell( $sql ) { $arr = $this->GetAll( $sql ); $row1 = array_shift( $arr ); $col1 = array_shift( $row1 ); return $col1; } public function GetRow( $sql ) { $arr = $this->GetAll( $sql ); return array_shift( $arr ); } public function ErrorNo() { return mysql_errno(); } public function Errormsg() { return mysql_error(); } public function Execute( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; if ($this->debug) { $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } $this->Insert_ID = $this->GetInsertID(); return intval( mysql_affected_rows()); } public function Escape( $str ) { return mysql_real_escape_string( $str ); } public function GetInsertID() { return intval( mysql_insert_id()); } public function Affected_Rows() { return mysql_affected_rows(); } public function setDebugMode($tf) { $this->debug = $tf; } public function getRaw() { return $this->rs; } }
||||||||class RedBean_Decorator extends RedBean_Observable implements IteratorAggregate { protected $data = null; protected $type = ""; protected $problems = array(); protected $provider = null; public function __construct( RedBean_OODB $provider, $type=false, $id=0, $lock=false ) { $this->provider = $provider; $id = floatval( $id ); if (!$type) { throw new Exception("Undefined bean type"); } else { $this->type = preg_replace( "[\W_]","", strtolower($type)); if ($id > 0) { $this->data = $this->provider->getById( $this->type, $id, $lock ); } else { $this->data = $this->provider->dispense( $this->type ); } } } private static function getStaticProvider() { return RedBean_OODB::getInstance(); } public function free( $property ) { $this->signal("deco_free", $this); $this->provider->dropColumn( $this->type, $property ); } public function importFromPost( $selection=null ) { $this->signal("deco_importpost", $this); if (!$selection) { $selection = array_keys($_POST); } if (is_string($selection)) { $selection = explode(",",$selection); } if ($selection && is_array($selection) && count($selection) > 0) { foreach( $selection as $field ) { $setter = "set".ucfirst( $field ); if (isset( $_POST[$field] )) { $resp = $this->$setter( $_POST[ $field ] ); } } } return $this; } public function import( $arr ) { $this->signal("deco_import", $this); foreach( $arr as $key=>$val ) { $setter = "set".ucfirst( $key ); $resp = $this->$setter( $val ); } return $this; } public function __call( $method, $arguments ) { return $this->command( $method, $arguments ); } private function filterProperty( $name, $forReading = false ) { $name = strtolower($name); if (!$forReading) { if ($name=="type") { throw new RedBean_Exception_Security("type is a reserved property to identify the table, pleae use another name for this property."); } if ($name=="id") { throw new RedBean_Exception_Security("id is a reserved property to identify the record, pleae use another name for this property."); } } $name = trim(preg_replace("/[^abcdefghijklmnopqrstuvwxyz0123456789]/","",$name)); if (strlen($name)===0) { throw new RedBean_Exception_Security("Empty property is not allowed"); } return $name; } public function __get( $name ) { $this->signal("deco_get", $this); $name = $this->filterProperty($name, true); return isset($this->data->$name) ? $this->data->$name : null; } public function __set( $name, $value ) { $this->signal("deco_set", $this); $name = $this->filterProperty($name); $this->data->$name = $value; } public function command( $method, $arguments ) { if (strpos( $method,"set" ) === 0) { $prop = substr( $method, 3 ); $prop = $this->filterProperty($prop); $this->$prop = $arguments[0]; return $this; } elseif (strpos($method,"getRelated")===0) { $this->signal("deco_get", $this); $prop = strtolower( substr( $method, 10 ) ); $beans = $this->provider->getAssoc( $this->data, $prop ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$prop.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } return $decos; } elseif (strpos( $method, "get" ) === 0) { $prop = substr( $method, 3 ); $prop = $this->filterProperty($prop, true); return $this->$prop; } elseif (strpos( $method, "is" ) === 0) { $prop = strtolower( substr( $method, 2 ) ); if (!isset($this->data->$prop)) { $this->signal("deco_get",$this); return false; } return ($this->data->$prop ? TRUE : FALSE); } else if (strpos($method,"add") === 0) { $this->signal("deco_add",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->associate($this->data, $bean); return $this; } else if (strpos($method,"remove")===0) { $this->signal("deco_remove",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->unassociate($this->data, $bean); return $this; } else if (strpos($method,"attach")===0) { $this->signal("deco_attach",$this); $deco = $arguments[0]; $bean = $deco->getData(); $this->provider->addChild($this->data, $bean); return $this; } else if (strpos($method,"clearRelated")===0) { $this->signal("deco_clearrelated",$this); $type = strtolower( substr( $method, 12 ) ); $this->provider->deleteAllAssocType($type, $this->data); return $this; } else if (strpos($method,"numof")===0) { $this->signal("deco_numof",$this); $type = strtolower( substr( $method, 5 ) ); return $this->provider->numOfRelated($type, $this->data); } } public function belongsTo( $deco ) { $this->signal("deco_belongsto", $this); $this->provider->deleteAllAssocType($deco->getType(), $this->data); $this->provider->associate($this->data, $deco->getData()); } public function exclusiveAdd( $deco ) { $this->signal("deco_exclusiveadd", $this); $this->provider->deleteAllAssocType($this->type,$deco->getData()); $this->provider->associate($deco->getData(), $this->data); } public function parent() { $this->signal("deco_parent", $this); $beans = $this->provider->getParent( $this->data ); if (count($beans) > 0 ) $bean = array_pop($beans); else return null; $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; $deco = new $dclass(); $deco->setData( $bean ); return $deco; } public function siblings() { $this->signal("deco_siblings", $this); $beans = $this->provider->getParent( $this->data ); if (count($beans) > 0 ) { $bean = array_pop($beans); } else { return null; } $beans = $this->provider->getChildren( $bean ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { if ($b->id != $this->data->id) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } } return $decos; } public function children() { $this->signal("deco_children", $this); $beans = $this->provider->getChildren( $this->data ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$this->type.RedBean_Setup_Namespace_SFFX; if ($beans && is_array($beans)) { foreach($beans as $b) { $d = new $dclass(); $d->setData( $b ); $decos[] = $d; } } return $decos; } public function hasParent( $deco ) { $me = $this; while( $parent = $me->parent() ) { if ($deco->getID() == $parent->getID()) { return true; } else { $me = $parent; } } return false; } public function hasChild( $deco ) { $nodes = array($this); while($node = array_shift($nodes)) { if ($node->getID() == $deco->getID() && ($node->getID() != $this->getID())) { return true; } if ($children = $node->children()) { $nodes = array_merge($nodes, $children); } } return false; } public function hasSibling( $deco ) { $siblings = $this->siblings(); foreach( $siblings as $sibling ) { if ($sibling->getID() == $deco->getID()) { return true; } } return false; } public function copy() { $this->signal("deco_copy", $this); $clone = new self( $this->provider, $this->type, 0 ); $clone->setData( $this->getData() ); return $clone; } public function clearAllRelations() { $this->signal("deco_clearrelations", $this); $this->provider->deleteAllAssoc( $this->getData() ); } public function getData() { return $this->data; } public function setData( $data ) { $this->data = $data; } public function save() { $this->signal("deco_save", $this); return $this->provider->set( $this->data ); } public static function delete( $deco ) { self::getStaticProvider()->trash( $deco->getData() ); } public function lock() { $this->provider->openBean($this->getData()); } public function unlock() { $this->provider->closeBean( $this->getData()); } public static function close( $deco ) { self::getStaticProvider()->closeBean( $deco->getData() ); } public static function make( $type="", $id ){ return new RedBean_Decorator( self::getStaticProvider(), $type, $id ); } public function exportTo( &$bean, $overridebean=false ) { foreach($this->data as $prop=>$value) { if (is_object($overridebean) && isset($overridebean->$prop)) { $value = $overridebean->$prop; } elseif (is_array($overridebean) && isset($overridebean[$prop])) { $value = $overridebean[$prop]; } if (is_object($value)){ $value = $value->getID(); } if (is_object($bean)) { $bean->$prop = $value; } elseif (is_array($bean)) { $bean[$prop] = $value; } } return $bean; } public function exportAsArr() { $arr = array(); foreach($this->data as $prop=>$value) { if ($value instanceof RedBean_Decorator){ $value = $value->getID(); } $arr[ $prop ] = $value; } return $arr; } public static function find( $deco, $filter, $start=0, $end=100, $orderby=" id ASC ", $extraSQL=false ) { if (!is_array($filter)) { return array(); } if (count($filter)<1) { return array(); } $filters = array(); foreach($filter as $key=>$f) { $filters[strtolower($key)] =$f; if (!in_array($f,array("=","!=","<",">","<=",">=","like","LIKE"))) { throw new ExceptionInvalidFindOperator(); } } $beans = self::getStaticProvider()->find( $deco->getData(), $filters, $start, $end, $orderby, $extraSQL ); $decos = array(); $dclass = RedBean_Setup_Namespace_PRFX.$deco->type.RedBean_Setup_Namespace_SFFX; foreach( $beans as $bean ) { $decos[ $bean->id ] = new $dclass( floatval( $bean->id ) ); $decos[ $bean->id ]->setData( $bean ); } return $decos; } public function getIterator() { $o = new ArrayObject($this->data); return $o->getIterator(); } public function isReadOnly() { try{ $this->provider->openBean($this->data, true); } catch(RedBean_Exception_FailedAccessBean $e){ return false; } return true; } }
class RedBean_Driver_MySQL implements RedBean_Driver { private static $me = null; public $Insert_ID; private $debug = false; private $rs = null; private function __construct(){} public static function getInstance( $host, $user, $pass, $dbname ) { if (!self::$me) { mysql_connect( $host, $user, $pass ); mysql_selectdb( $dbname ); self::$me = new RedBean_Driver_MySQL(); } return self::$me; } public function GetAll( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; $arr = array(); while( $r = @mysql_fetch_assoc($rs) ) { $arr[] = $r; } if ($this->debug) { if (count($arr) > 0) { echo "<br><b style='color:green'>resultset: ".count($arr)." rows</b>"; } $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } return $arr; } public function GetCol( $sql ) { $rows = $this->GetAll($sql); $cols = array(); foreach( $rows as $row ) { $cols[] = array_shift( $row ); } return $cols; } public function GetCell( $sql ) { $arr = $this->GetAll( $sql ); $row1 = array_shift( $arr ); $col1 = array_shift( $row1 ); return $col1; } public function GetRow( $sql ) { $arr = $this->GetAll( $sql ); return array_shift( $arr ); } public function ErrorNo() { return mysql_errno(); } public function Errormsg() { return mysql_error(); } public function Execute( $sql ) { if ($this->debug) { echo "<HR>".$sql; } $rs = mysql_query( $sql ); $this->rs=$rs; if ($this->debug) { $str = mysql_error(); if ($str!="") { echo "<br><b style='color:red'>".$str."</b>"; } } $this->Insert_ID = $this->GetInsertID(); return intval( mysql_affected_rows()); } public function Escape( $str ) { return mysql_real_escape_string( $str ); } public function GetInsertID() { return intval( mysql_insert_id()); } public function Affected_Rows() { return mysql_affected_rows(); } public function setDebugMode($tf) { $this->debug = $tf; } public function getRaw() { return $this->rs; } }
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_PROP
                    (AST_PROP
                        (AST_VAR))))
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (AST_CONST))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR)
                (AST_CONST))))
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_PROP
                    (AST_PROP
                        (AST_VAR))))
            (AST_PROP
                (AST_PROP
                    (AST_VAR)))
            (AST_CONST))))