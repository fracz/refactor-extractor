    private function getProcessFn()
    {
        return function ($result) {
            // $state = $this->determineState($result);
            static $tries = 0;
            $state = ++$tries < 5 ? 'retry' : 'success';
            echo 'Try: ' . $tries . "\n" . xdebug_get_stack_depth() . "\n";
            sleep(1);

            if ($state === 'success') {
                $this->resolve($result);
            } elseif ($state === 'failed') {
                $this->reject("The {$this->name} waiter entered a failure state.", 0, $result);
            } elseif ($this->attempt < $this->config['maxAttempts']) {
                if ($this->config['retry']) {
                    $this->config['retry']($this->attempt);
                }
                $this->pollResource();
            } else {
                $this->reject(new \RuntimeException(
                    "Waiter failed after the attempt #{$this->attempt}."
                ));
            }
        };
    }

    /**
     * Executes the command that polls the status of the resource to see if the
     * waiter can stop waiting.
     */
||||||||    private function getProcessFn()
    {
        return function ($result) {
            // $state = $this->determineState($result);
            static $tries = 0;
            $state = ++$tries < 5 ? 'retry' : 'success';

            if ($state === 'success') {
                $this->resolve($result);
            } elseif ($state === 'failed') {
                $this->reject("The {$this->name} waiter entered a failure state.", 0, $result);
            } elseif ($this->attempt < $this->config['maxAttempts']) {
                if ($this->config['retry']) {
                    $this->config['retry']($this->attempt);
                }
                $this->pollResource();
            } else {
                $this->reject(new \RuntimeException(
                    "Waiter failed after the attempt #{$this->attempt}."
                ));
            }
        };
    }

    /**
     * Executes the command that polls the status of the resource to see if the
     * waiter can stop waiting.
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_STATIC
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_PRE_INC
                                (AST_VAR))
                            (SCALAR))
                        (SCALAR)
                        (SCALAR)))
                (AST_ECHO
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (SCALAR)
                                    (AST_VAR))
                                (SCALAR))
                            (AST_CALL))
                        (SCALAR)))
                (AST_CALL
                    (
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (SCALAR)
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (
                                        (AST_CALL
                                            (AST_DIM
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR))
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))))
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_NEW
                                        (
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR)))))))))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_RETURN
        (AST_CLOSURE
            (NO_PARAM_TYPENO_PARAM_DEFAULT)
            (NULL)
            (
                (AST_STATIC
                    (AST_VAR)
                    (SCALAR))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CONDITIONAL
                        (AST_BINARY_OP
                            (AST_PRE_INC
                                (AST_VAR))
                            (SCALAR))
                        (SCALAR)
                        (SCALAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR))
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (SCALAR)
                                    (AST_VAR)))))
                    (AST_IF_ELEM
                        (AST_BINARY_OP
                            (AST_PROP
                                (AST_VAR))
                            (AST_DIM
                                (AST_PROP
                                    (AST_VAR))
                                (SCALAR)))
                        (
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_DIM
                                        (AST_PROP
                                            (AST_VAR))
                                        (SCALAR))
                                    (
                                        (AST_CALL
                                            (AST_DIM
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR))
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))))
                            (AST_METHOD_CALL
                                (AST_VAR))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_NEW
                                        (
                                            (AST_ENCAPS_LIST
                                                (SCALAR)
                                                (AST_PROP
                                                    (AST_VAR))
                                                (SCALAR)))))))))))))