	public static function enabled($name) {
		return is_null(static::_config($name)) ? null : static::adapter($name)->enabled();
	}

	/**
	 * Looks up an adapter class by name, using the `$_adapters` property set by a subclass of
	 * `Adaptable`.
	 *
	 * @see lithium\core\libraries::locate()
	 * @param string $config The configuration array of the adapter to be located.
	 * @param array $paths Optional array of search paths that will be checked.
	 * @return string Returns a fully-namespaced class reference to the adapter class.
	 */
||||||||	public static function enabled($name) {
		if (!static::_config($name)) {
			return;
		}
		$adapter = static::adapter($name);
		return $adapter::enabled();
	}

	/**
	 * Looks up an adapter class by name, using the `$_adapters` property set by a subclass of
	 * `Adaptable`.
	 *
	 * @see lithium\core\libraries::locate()
	 * @param string $config The configuration array of the adapter to be located.
	 * @param array $paths Optional array of search paths that will be checked.
	 * @return string Returns a fully-namespaced class reference to the adapter class.
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_RETURN
        (AST_CONDITIONAL
            (AST_CALL
                (
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)))))
            (AST_CONST)
            (AST_METHOD_CALL
                (AST_STATIC_CALL
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_STATIC_CALL
                    (
                        (AST_VAR))))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (AST_VAR))))
    (AST_RETURN
        (AST_STATIC_CALL
            (AST_VAR))))