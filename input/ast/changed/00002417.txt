	protected function installDatabase() {
		try {
			_elgg_services()->db->runSqlScript(\Elgg\Application::elggDir()->getPath("/engine/schema/mysql.sql"));
		} catch (Exception $e) {
			$msg = $e->getMessage();
			if (strpos($msg, 'already exists')) {
				$msg = _elgg_services()->translator->translate('install:error:tables_exist');
			}
			register_error($msg);
			return false;
		}

		return true;
	}

	/**
	 * Site settings support methods
	 */

	/**
	 * Create the data directory if requested
	 *
	 * @param array $submissionVars Submitted vars
	 * @param array $formVars       Variables in the form
	 *
	 * @return bool
	 */
||||||||	protected function installDatabase() {
		try {
			$this->services->db->runSqlScript(Paths::elgg() . "engine/schema/mysql.sql");
			init_site_secret();
		} catch (Exception $e) {
			$msg = $e->getMessage();
			if (strpos($msg, 'already exists')) {
				$msg = elgg_echo('install:error:tables_exist');
			}
			register_error($msg);
			return false;
		}

		return true;
	}

	/**
	 * Site settings support methods
	 */

	/**
	 * Create the data directory if requested
	 *
	 * @param array $submissionVars Submitted vars
	 * @param array $formVars       Variables in the form
	 *
	 * @return bool
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_CALL))
                (
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL)
                        (
                            (SCALAR))))))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_METHOD_CALL
                                        (AST_PROP
                                            (AST_CALL))
                                        (
                                            (SCALAR)))))))
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_RETURN
                        (AST_CONST)))))
        (NULL))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_TRY
        (
            (AST_METHOD_CALL
                (AST_PROP
                    (AST_PROP
                        (AST_VAR)))
                (
                    (AST_BINARY_OP
                        (AST_STATIC_CALL)
                        (SCALAR))))
            (AST_CALL))
        (AST_CATCH_LIST
            (AST_CATCH
                (AST_NAME_LIST)
                (AST_VAR)
                (
                    (AST_ASSIGN
                        (AST_VAR)
                        (AST_METHOD_CALL
                            (AST_VAR)))
                    (AST_IF
                        (AST_IF_ELEM
                            (AST_CALL
                                (
                                    (AST_VAR)
                                    (SCALAR)))
                            (
                                (AST_ASSIGN
                                    (AST_VAR)
                                    (AST_CALL
                                        (
                                            (SCALAR)))))))
                    (AST_CALL
                        (
                            (AST_VAR)))
                    (AST_RETURN
                        (AST_CONST)))))
        (NULL))
    (AST_RETURN
        (AST_CONST)))