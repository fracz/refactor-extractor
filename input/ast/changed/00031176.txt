    static public function initCorePiwikInTrackerMode()
    {
        if (SettingsServer::isTrackerApiRequest()
            && self::$initTrackerMode === false
        ) {
            self::$initTrackerMode = true;
            require_once PIWIK_INCLUDE_PATH . '/core/Loader.php';
            require_once PIWIK_INCLUDE_PATH . '/core/Option.php';

            $access = Access::getInstance();
            $config = Config::getInstance();

            try {
                Db::get();
            } catch (Exception $e) {
                Db::createDatabaseObject();
            }

            $pluginsManager = \Piwik\Plugin\Manager::getInstance();
            $pluginsToLoad = Config::getInstance()->Plugins['Plugins'];
            $pluginsForcedNotToLoad = Tracker::getPluginsNotToLoad();
            $pluginsToLoad = array_diff($pluginsToLoad, $pluginsForcedNotToLoad);
            if(defined('PIWIK_TEST_MODE')) {
                $pluginsToLoad = array_intersect($pluginsToLoad, $pluginsManager->getPluginsToLoadDuringTests());
            }
            $pluginsManager->loadPlugins($pluginsToLoad);
        }
    }

    /**
     * Echos an error message & other information, then exits.
     *
     * @param Exception $e
     * @param bool $authenticated
     */
||||||||    static public function initCorePiwikInTrackerMode()
    {
        if (SettingsServer::isTrackerApiRequest()
            && self::$initTrackerMode === false
        ) {
            self::$initTrackerMode = true;
            require_once PIWIK_INCLUDE_PATH . '/core/Loader.php';
            require_once PIWIK_INCLUDE_PATH . '/core/Option.php';

            $access = Access::getInstance();
            $config = Config::getInstance();

            try {
                Db::get();
            } catch (Exception $e) {
                Db::createDatabaseObject();
            }

            \Piwik\Plugin\Manager::getInstance()->loadCorePluginsDuringTracker();
        }
    }

    /**
     * Echos an error message & other information, then exits.
     *
     * @param Exception $e
     * @param bool $authenticated
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL)
                (AST_BINARY_OP
                    (AST_STATIC_PROP)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CONST))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR)))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_TRY
                    (
                        (AST_STATIC_CALL))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_STATIC_CALL))))
                    (NULL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_STATIC_CALL))
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR))))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_CALL
                            (
                                (SCALAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_CALL
                                    (
                                        (AST_VAR)
                                        (AST_METHOD_CALL
                                            (AST_VAR))))))))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_STATIC_CALL)
                (AST_BINARY_OP
                    (AST_STATIC_PROP)
                    (AST_CONST)))
            (
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CONST))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR)))
                (AST_INCLUDE_OR_EVAL
                    (AST_BINARY_OP
                        (AST_CONST)
                        (SCALAR)))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_TRY
                    (
                        (AST_STATIC_CALL))
                    (AST_CATCH_LIST
                        (AST_CATCH
                            (AST_NAME_LIST)
                            (AST_VAR)
                            (
                                (AST_STATIC_CALL))))
                    (NULL))
                (AST_METHOD_CALL
                    (AST_STATIC_CALL))))))