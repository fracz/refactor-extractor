	public static function hasValidClassPrefix($classRef, array $additionalPrefixes = array()) {
		$hasValidPrefix = FALSE;
		$validPrefixes = array('tx_', 'Tx_', $GLOBALS['TYPO3_CONF_VARS']['FE']['userFuncClassPrefix']);
		$classRef = trim($classRef);

		if (count($additionalPrefixes)) {
			$validPrefixes = array_merge($validPrefixes, $additionalPrefixes);
		}

		foreach ($validPrefixes as $prefixToCheck) {
			if (self::isFirstPartOfStr($classRef, $prefixToCheck)) {
				$hasValidPrefix = TRUE;
				break;
			}
		}

		return $hasValidPrefix;
	}

	/**
	 * Creates an instance of a class taking into account the class-extensions
	 * API of TYPO3. USE THIS method instead of the PHP "new" keyword.
	 * Eg. "$obj = new myclass;" should be "$obj = t3lib_div::makeInstance("myclass")" instead!
	 *
	 * You can also pass arguments for a constructor:
	 * 		t3lib_div::makeInstance('myClass', $arg1, $arg2,  ..., $argN)
	 *
	 * @throws	InvalidArgumentException if classname is an empty string
	 * @param	string		$className
	 * 			name of the class to instantiate, must not be empty
	 * @return	object		the created instance
	 */
||||||||	public static function hasValidClassPrefix($classRef, array $additionalPrefixes = array()) {
		if (empty($classRef)) {
			return FALSE;
		}
		if (!is_string($classRef)) {
			throw new InvalidArgumentException('$classRef has to be of type string', 1313917992);
		}
		$hasValidPrefix = FALSE;
		$validPrefixes = self::getValidClassPrefixes();
		$classRef = trim($classRef);

		if (count($additionalPrefixes)) {
			$validPrefixes = array_merge($validPrefixes, $additionalPrefixes);
		}
		foreach ($validPrefixes as $prefixToCheck) {
			if (self::isFirstPartOfStr($classRef, $prefixToCheck) || $prefixToCheck === '') {
				$hasValidPrefix = TRUE;
				break;
			}
		}

		return $hasValidPrefix;
	}

	/**
	 * Returns all valid class prefixes.
	 *
	 * @return array Array of valid prefixed of class names
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_ARRAY
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (SCALAR)
                (NULL))
            (AST_ARRAY_ELEM
                (AST_DIM
                    (AST_DIM
                        (AST_DIM
                            (AST_VAR)
                            (SCALAR))
                        (SCALAR))
                    (SCALAR))
                (NULL))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_STATIC_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST))
                        (AST_BREAK
                            (NULL)))))))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_EMPTY
                (AST_VAR))
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (SCALAR)
                            (SCALAR)))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONST))
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CALL
                        (
                            (AST_VAR)
                            (AST_VAR)))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)
                                (AST_VAR)))
                        (AST_BINARY_OP
                            (AST_VAR)
                            (SCALAR)))
                    (
                        (AST_ASSIGN
                            (AST_VAR)
                            (AST_CONST))
                        (AST_BREAK
                            (NULL)))))))
    (AST_RETURN
        (AST_VAR)))