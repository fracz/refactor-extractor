   public function SetVolatileMarker($UserID) {
      if(is_null($UserID))
         return;


      // Note: 172800 is 60*60*24*2 or 2 days
      $Expiration = time() + 172800;
      // Note: setting $Expire to 0 will cause the cookie to die when the browser closes.
      $Expire = 0;

      // Create the cookie contents
      $Key = $this->_Hash($UserID . $Expiration);
      $Hash = $this->_HashHMAC($this->CookieHashMethod, $UserID . $Expiration, $Key);
      $CookieContents = $UserID . '|' . $Expiration . '|' . $Hash . '|' . time();

      // Create the cookie.
      setcookie($this->VolatileMarker, $CookieContents, $Expire, $this->CookiePath, $this->CookieDomain);
   }

}||||||||   public function SetVolatileMarker($UserID) {
      if(is_null($UserID))
         return;

      // Note: 172800 is 60*60*24*2 or 2 days
      $Expiration = time() + 172800;
      // Note: setting $Expire to 0 will cause the cookie to die when the browser closes.
      $Expire = 0;

      $KeyData = $UserID.$Expiration;
      self::SetCookie($this->VolatileMarker, $KeyData, array($UserID, $Expiration), $Expire);
   }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_PROP
                    (AST_VAR))
                (AST_BINARY_OP
                    (AST_VAR)
                    (AST_VAR))
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_BINARY_OP
                        (AST_BINARY_OP
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR))
                        (SCALAR))
                    (AST_VAR))
                (SCALAR))
            (AST_CALL)))
    (AST_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_VAR)
            (AST_VAR)
            (AST_PROP
                (AST_VAR))
            (AST_PROP
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_RETURN
                    (NULL)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL)
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (SCALAR))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_VAR)))
    (AST_STATIC_CALL
        (
            (AST_PROP
                (AST_VAR))
            (AST_VAR)
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL))
                (AST_ARRAY_ELEM
                    (AST_VAR)
                    (NULL)))
            (AST_VAR))))