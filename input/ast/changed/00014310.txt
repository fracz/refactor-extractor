	public static function preload($assetTypes = 'components', $reload = false)
	{
		// Get instance of the Profiler:
		$profiler = JProfiler::getInstance('Application');

		// Check for default case:
		$isDefault = (is_string($assetTypes) && in_array($assetTypes, array('components', 'component')));

		// Preload the rules for all of the components:
		if ($isDefault)
		{
			// Mark in the profiler.
			JDEBUG ? $profiler->mark('Start JAccess::preload(components)') : null;

			$components = self::preloadComponents();
			self::$preloadedAssetTypes = array_merge(self::$preloadedAssetTypes, array_flip($components));

			// Mark in the profiler.
			JDEBUG ? $profiler->mark('Finish JAccess::preload(components)') : null;

			// Quick short circuit for default case:
			if ($isDefault)
			{
				return true;
			}
		}

		// If we get to this point, this is a regular asset type
		// and we'll proceed with the preloading process.

		if (!is_array($assetTypes))
		{
			$assetTypes = (array) $assetTypes;
		}

		foreach ($assetTypes as $assetType)
		{
			if (!isset(self::$preloadedAssetTypes[$assetType]) || $reload)
			{
				JDEBUG ? $profiler->mark('New JAccess Preloading Process(' . $assetType . ')') : null;

				self::preloadPermissionsParentIdMapping($assetType);
				JDEBUG ? $profiler->mark('After preloadPermissionsParentIdMapping (' . $assetType . ')') : null;

				self::preloadPermissions($assetType);
				JDEBUG ? $profiler->mark('After preloadPermissions (' . $assetType . ')') : null;

				JDEBUG ? $profiler->mark('End New JAccess Preloading Process(' . $assetType . ')') : null;

				self::$preloadedAssetTypes[$assetType] = true;
			}
		}

		return true;
	}

	/**
	 * Method to recursively retrieve the list of parent Asset IDs
	 * for a particular Asset.
	 *
	 * @param   string      $assetType  e.g. 'com_content.article'
	 * @param   string|int  $assetId    numeric Asset ID
	 *
	 * @return   array  List of Ancestor IDs (includes original $assetId)
	 *
	 * @since    1.6
	 */
||||||||	public static function preload($assetTypes = 'components', $reload = false)
	{
		// Check for default case:
		$isDefault = is_string($assetTypes) && in_array($assetTypes, array('components', 'component'));

		// Preload the rules for all of the components:
		if ($isDefault && !self::$componentsPreloaded)
		{
			// Mark in the profiler.
			!JDEBUG ?: JProfiler::getInstance('Application')->mark('Before JAccess::preload (all components)');

			self::preloadComponents();
			self::$componentsPreloaded = true;

			// Mark in the profiler.
			!JDEBUG ?: JProfiler::getInstance('Application')->mark('After JAccess::preload (all components)');
		}

		// Quick short circuit for default case
		if ($isDefault)
		{
			return true;
		}

		// If we get to this point, this is a regular asset type
		// and we'll proceed with the preloading process.

		if (!is_array($assetTypes))
		{
			$assetTypes = (array) $assetTypes;
		}

		foreach ($assetTypes as $assetType)
		{
			if (!isset(self::$preloadedAssetTypes[$assetType]) || $reload)
			{
				!JDEBUG ?: JProfiler::getInstance('Application')->mark('Before JAccess::preload (' . $assetType . ')');

				self::preloadPermissions($assetType);
				self::$preloadedAssetTypes[$assetType] = true;

				!JDEBUG ?: JProfiler::getInstance('Application')->mark('After JAccess::preload (' . $assetType . ')');
			}
		}

		return true;
	}

	/**
	 * Method to recursively retrieve the list of parent Asset IDs
	 * for a particular Asset.
	 *
	 * @param   string      $extensionName  e.g. 'com_content.article'
	 * @param   string|int  $assetId        numeric Asset ID
	 *
	 * @return   array  List of Ancestor IDs (includes original $assetId)
	 *
	 * @since    1.6
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_CONDITIONAL
                    (AST_CONST)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_CONST))
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_STATIC_CALL))
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CALL
                        (
                            (AST_STATIC_PROP)
                            (AST_CALL
                                (
                                    (AST_VAR))))))
                (AST_CONDITIONAL
                    (AST_CONST)
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (SCALAR)))
                    (AST_CONST))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_VAR)
                        (
                            (AST_RETURN
                                (AST_CONST))))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_ISSET
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (AST_VAR))))
                        (AST_VAR))
                    (
                        (AST_CONDITIONAL
                            (AST_CONST)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_CONST))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (AST_CONDITIONAL
                            (AST_CONST)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_CONST))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (AST_CONDITIONAL
                            (AST_CONST)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_CONST))
                        (AST_CONDITIONAL
                            (AST_CONST)
                            (AST_METHOD_CALL
                                (AST_VAR)
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))))
                            (AST_CONST))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))
                            (AST_CONST)))))))
    (AST_RETURN
        (AST_CONST)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPEPARAM_DEFAULTNO_PARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_VAR)))
            (AST_CALL
                (
                    (AST_VAR)
                    (AST_ARRAY
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL))
                        (AST_ARRAY_ELEM
                            (SCALAR)
                            (NULL)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_VAR)
                (AST_UNARY_OP
                    (AST_STATIC_PROP)))
            (
                (AST_CONDITIONAL
                    (AST_UNARY_OP
                        (AST_CONST))
                    (NULL)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (
                            (SCALAR))))
                (AST_STATIC_CALL)
                (AST_ASSIGN
                    (AST_STATIC_PROP)
                    (AST_CONST))
                (AST_CONDITIONAL
                    (AST_UNARY_OP
                        (AST_CONST))
                    (NULL)
                    (AST_METHOD_CALL
                        (AST_STATIC_CALL
                            (
                                (SCALAR)))
                        (
                            (SCALAR)))))))
    (AST_IF
        (AST_IF_ELEM
            (AST_VAR)
            (
                (AST_RETURN
                    (AST_CONST)))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_CAST
                        (AST_VAR))))))
    (AST_FOREACH
        (AST_VAR)
        (AST_VAR)
        (NULL)
        (
            (AST_IF
                (AST_IF_ELEM
                    (AST_BINARY_OP
                        (AST_UNARY_OP
                            (AST_ISSET
                                (AST_DIM
                                    (AST_STATIC_PROP)
                                    (AST_VAR))))
                        (AST_VAR))
                    (
                        (AST_CONDITIONAL
                            (AST_UNARY_OP
                                (AST_CONST))
                            (NULL)
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR)))))
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (AST_ASSIGN
                            (AST_DIM
                                (AST_STATIC_PROP)
                                (AST_VAR))
                            (AST_CONST))
                        (AST_CONDITIONAL
                            (AST_UNARY_OP
                                (AST_CONST))
                            (NULL)
                            (AST_METHOD_CALL
                                (AST_STATIC_CALL
                                    (
                                        (SCALAR)))
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_VAR))
                                        (SCALAR))))))))))
    (AST_RETURN
        (AST_CONST)))