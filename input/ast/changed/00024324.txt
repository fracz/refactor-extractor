	public static function createApplication(IContainer $container, array $options = NULL)
	{
		$container = clone $container;
		$container->addService('Nette\\Application\\IRouter', 'Nette\Application\Routers\RouteList');

		if (!$container->hasService('Nette\\Application\\IPresenterFactory')) {
			$container->addService('Nette\\Application\\IPresenterFactory', function() use ($container) {
				return new Nette\Application\PresenterFactory(Environment::getVariable('appDir'), $container);
			});
		}

		Nette\Application\UI\Presenter::$invalidLinkMode = Environment::isProduction()
			? Nette\Application\UI\Presenter::INVALID_LINK_SILENT
			: Nette\Application\UI\Presenter::INVALID_LINK_WARNING;

		$class = isset($options['class']) ? $options['class'] : 'Nette\Application\Application';
		$application = new $class($container);
		$application->catchExceptions = Environment::isProduction();
		return $application;
	}



	/**
	 * @return Nette\Http\Request
	 */
||||||||	public static function createApplication(IContainer $container, array $options = NULL)
	{
		$context = new Nette\DI\Container;
		$context->addService('httpRequest', $container->getService('Nette\\Web\\IHttpRequest'));
		$context->addService('httpResponse', $container->getService('Nette\\Web\\IHttpResponse'));
		$context->addService('session', $container->getService('Nette\\Web\\Session'));
		$context->addService('presenterFactory', $container->getService('Nette\\Application\\IPresenterFactory'));
		$context->addService('router', 'Nette\Application\Routers\RouteList');

		Nette\Application\UI\Presenter::$invalidLinkMode = Environment::isProduction()
			? Nette\Application\UI\Presenter::INVALID_LINK_SILENT
			: Nette\Application\UI\Presenter::INVALID_LINK_WARNING;

		$class = isset($options['class']) ? $options['class'] : 'Nette\Application\Application';
		$application = new $class($context);
		$application->catchExceptions = Environment::isProduction();
		return $application;
	}



	/**
	 * @return Nette\Application\IPresenterFactory
	 */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CLONE
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR)
                        (AST_CLOSURE
                            (AST_CLOSURE_USES
                                (AST_CLOSURE_VAR))
                            (
                                (AST_RETURN
                                    (AST_NEW
                                        (
                                            (AST_STATIC_CALL
                                                (
                                                    (SCALAR)))
                                            (AST_VAR)))))))))))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONDITIONAL
            (AST_STATIC_CALL)
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL))
    (AST_RETURN
        (AST_VAR)))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPEPARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_METHOD_CALL
                (AST_VAR)
                (
                    (SCALAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (SCALAR)))
    (AST_ASSIGN
        (AST_STATIC_PROP)
        (AST_CONDITIONAL
            (AST_STATIC_CALL)
            (AST_CLASS_CONST
                (SCALAR))
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CONDITIONAL
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (AST_DIM
                (AST_VAR)
                (SCALAR))
            (SCALAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_STATIC_CALL))
    (AST_RETURN
        (AST_VAR)))