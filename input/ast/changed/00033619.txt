    function _is_compiled($file_path, $compile_path)
    {
        if (!$this->force_compile && file_exists($compile_path)) {
            if (!$this->compile_check) {
                // no need to check compiled file
                return true;
            } else {
                // get file source and timestamp
				require_once(SMARTY_DIR . 'core/core.fetch_file_info.php');
				$_params = array('file_path' => $file_path);
                if (!smarty_core_fetch_file_info($_params, $this)) {
                    return false;
                }
				$_file_source = $_params['file_source'];
				$_file_timestamp = $_params['file_timestamp'];
                if ($_file_timestamp <= filemtime($compile_path)) {
                    // template not expired, no recompile
                    return true;
                } else {
					// compile template
                    return false;
                }
            }
        } else {
            // compiled template does not exist, or forced compile
            return false;
        }
    }

   /**
     * compile the template
     *
     * @param string $file_path
     * @param string $compile_path
     * @return boolean
     */
||||||||    function _is_compiled($resource_name, $compile_path)
    {
        if (!$this->force_compile && file_exists($compile_path)) {
            if (!$this->compile_check) {
                // no need to check compiled file
                return true;
            } else {
                // get file source and timestamp
				require_once(SMARTY_DIR . 'core/core.fetch_resource_info.php');
				$_params = array('resource_name' => $resource_name);
                if (!smarty_core_fetch_resource_info($_params, $this)) {
                    return false;
                }
                if ($_params['resource_timestamp'] <= filemtime($compile_path)) {
                    // template not expired, no recompile
                    return true;
                } else {
					// compile template
                    return false;
                }
            }
        } else {
            // compiled template does not exist, or forced compile
            return false;
        }
    }

   /**
     * compile the template
     *
     * @param string $resource_name
     * @param string $compile_path
     * @return boolean
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_INCLUDE_OR_EVAL
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (SCALAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_VAR))))
                                    (
                                        (AST_RETURN
                                            (AST_CONST)))))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_VAR)
                                        (AST_CALL
                                            (
                                                (AST_VAR))))
                                    (
                                        (AST_RETURN
                                            (AST_CONST))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_RETURN
                                            (AST_CONST))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULTNO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_UNARY_OP
                    (AST_PROP
                        (AST_VAR)))
                (AST_CALL
                    (
                        (AST_VAR))))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_UNARY_OP
                            (AST_PROP
                                (AST_VAR)))
                        (
                            (AST_RETURN
                                (AST_CONST))))
                    (AST_IF_ELEM
                        (NULL)
                        (
                            (AST_INCLUDE_OR_EVAL
                                (AST_BINARY_OP
                                    (AST_CONST)
                                    (SCALAR)))
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_ARRAY
                                    (AST_ARRAY_ELEM
                                        (AST_VAR)
                                        (SCALAR))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_UNARY_OP
                                        (AST_CALL
                                            (
                                                (AST_VAR)
                                                (AST_VAR))))
                                    (
                                        (AST_RETURN
                                            (AST_CONST)))))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_BINARY_OP
                                        (AST_DIM
                                            (AST_VAR)
                                            (SCALAR))
                                        (AST_CALL
                                            (
                                                (AST_VAR))))
                                    (
                                        (AST_RETURN
                                            (AST_CONST))))
                                (AST_IF_ELEM
                                    (NULL)
                                    (
                                        (AST_RETURN
                                            (AST_CONST))))))))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_RETURN
                    (AST_CONST))))))