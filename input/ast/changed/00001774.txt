    public function testMultipleTestsGeneration()
    {
        $this->execute(['suite' => 'dummy']);
        $fileNames = array_map(function ($f) { return $f['filename']; }, $this->log);
        $this->assertContains(codecept_root_dir().'tests/data/scenarios/dummy/Another.optimistic.txt', $fileNames);
        $this->assertContains(codecept_root_dir().'tests/data/scenarios/dummy/Another.pessimistic.txt', $fileNames);
        $this->assertContains('I WANT TO CHECK CONFIG EXISTS', $this->content);
        $this->assertContains('I see file found "$codeception"', $this->content);
        $this->assertContains('* File_Exists generated', $this->output);
    }

||||||||    public function testMultipleTestsGeneration()
    {
        $this->execute(['suite' => 'dummy']);
        $fileNames = array_keys($this->log);
        $this->assertContains(codecept_root_dir().'tests/data/scenarios/dummy/Another.optimistic.txt', $fileNames);
        $this->assertContains(codecept_root_dir().'tests/data/scenarios/dummy/Another.pessimistic.txt', $fileNames);
        $this->assertArrayHasKey($file = codecept_root_dir().'tests/data/scenarios/dummy/File_Exists.txt', $this->saved);
        $content = $this->saved[$file];
        $this->assertContains('I WANT TO CHECK CONFIG EXISTS', $content);
        $this->assertContains('I see file found "$codeception"', $content);
        $this->assertContains('* File_Exists generated', $this->output);
    }

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_CLOSURE
                    (NO_PARAM_TYPENO_PARAM_DEFAULT)
                    (NULL)
                    (
                        (AST_RETURN
                            (AST_DIM
                                (AST_VAR)
                                (SCALAR)))))
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL)
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL)
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR)))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ARRAY
                (AST_ARRAY_ELEM
                    (SCALAR)
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_PROP
                    (AST_VAR)))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL)
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_BINARY_OP
                (AST_CALL)
                (SCALAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_ASSIGN
                (AST_VAR)
                (AST_BINARY_OP
                    (AST_CALL)
                    (SCALAR)))
            (AST_PROP
                (AST_VAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_DIM
            (AST_PROP
                (AST_VAR))
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (SCALAR)
            (AST_PROP
                (AST_VAR)))))