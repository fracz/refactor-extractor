	public function init()
	{
		$resourceDirectory = static::getResourcesDirectory();
		$currentDirectory = rtrim($this->adapter->getcwd(), DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;

		$defaultConfigFile = $currentDirectory . static::defaultConfigFile;

		if ($this->adapter->file_exists($defaultConfigFile) === false || $this->prompt($this->locale->_('Default configuration file \'' . static::defaultConfigFile . '\' already exists in the current directory, type \'Y\' to overwrite it...')) === 'Y')
		{
			$this
				->copy($resourceDirectory . '/configurations/runner/atoum.php.dist', $defaultConfigFile)
				->writeMessage($this->locale->_('Default configuration file \'' . static::defaultConfigFile . '\' was successfully created in the current directory'))
			;
		}

		$bootstrapFile = $currentDirectory . static::defaultBootstrapFile;

		if ($this->adapter->file_exists($bootstrapFile) == false || $this->prompt($this->locale->_('Default bootstrap file \'' . static::defaultBootstrapFile . '\' already exists in the current directory, type \'Y\' to overwrite it...')) === 'Y')
		{
			$this
				->copy($resourceDirectory . '/configurations/runner/bootstrap.php.dist', $bootstrapFile)
				->writeMessage($this->locale->_('Default bootstrap file \'' . static::defaultBootstrapFile . '\' was successfully created in the current directory'))
			;
		}

		$this->runTests = false;

		return $this;
	}

||||||||	public function init()
	{
		$resourceDirectory = static::getResourcesDirectory();
		$currentDirectory = rtrim($this->adapter->getcwd(), DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;

		$defaultConfigFile = $currentDirectory . static::defaultConfigFile;

		if ($this->adapter->file_exists($defaultConfigFile) === false || $this->prompt($this->locale->_('Default configuration file \'' . static::defaultConfigFile . '\' already exists in the current directory, type \'Y\' to overwrite it...')) === 'Y')
		{
			$this
				->copy($resourceDirectory . '/configurations/runner/atoum.php.dist', $defaultConfigFile)
				->writeMessage($this->locale->_('Default configuration file \'' . static::defaultConfigFile . '\' was successfully created in the current directory'))
			;
		}

		$bootstrapFile = $currentDirectory . static::defaultBootstrapFile;

		if ($this->adapter->file_exists($bootstrapFile) == false || $this->prompt($this->locale->_('Default bootstrap file \'' . static::defaultBootstrapFile . '\' already exists in the current directory, type \'Y\' to overwrite it...')) === 'Y')
		{
			$this
				->copy($resourceDirectory . '/configurations/runner/bootstrap.php.dist', $bootstrapFile)
				->writeMessage($this->locale->_('Default bootstrap file \'' . static::defaultBootstrapFile . '\' was successfully created in the current directory'))
			;
		}

		return $this->stopRun();
	}

||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CONST)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (SCALAR))))))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (SCALAR))))))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_CONST))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_STATIC_CALL))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_CALL
                (
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR)))
                    (AST_CONST)))
            (AST_CONST)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (SCALAR))))))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_BINARY_OP
            (AST_VAR)
            (AST_CLASS_CONST
                (SCALAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_PROP
                            (AST_VAR))
                        (
                            (AST_VAR)))
                    (AST_CONST))
                (AST_BINARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_METHOD_CALL
                                (AST_PROP
                                    (AST_VAR))
                                (
                                    (AST_BINARY_OP
                                        (AST_BINARY_OP
                                            (SCALAR)
                                            (AST_CLASS_CONST
                                                (SCALAR)))
                                        (SCALAR))))))
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_METHOD_CALL
                        (AST_VAR)
                        (
                            (AST_BINARY_OP
                                (AST_VAR)
                                (SCALAR))
                            (AST_VAR)))
                    (
                        (AST_METHOD_CALL
                            (AST_PROP
                                (AST_VAR))
                            (
                                (AST_BINARY_OP
                                    (AST_BINARY_OP
                                        (SCALAR)
                                        (AST_CLASS_CONST
                                            (SCALAR)))
                                    (SCALAR)))))))))
    (AST_RETURN
        (AST_METHOD_CALL
            (AST_VAR))))