    public function execute(TaskEvent $event)
    {
        if (isset($event['project_id']) && !$this->isExecuted()) {
            $this->logger->debug('Subscriber executed: '.__METHOD__);
            $this->queueManager->push(ProjectMetricJob::getInstance($this->container)->withParams($event['project_id']));
        }
    }
}||||||||    public function execute(TaskEvent $event)
    {
        if (isset($event['project_id'])) {
            $this->logger->debug('Subscriber executed: '.__METHOD__);
            $this->queueManager->push(ProjectMetricJob::getInstance($this->container)->withParams($event['project_id']));
        }
    }
}||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_ISSET
                    (AST_DIM
                        (AST_VAR)
                        (SCALAR)))
                (AST_UNARY_OP
                    (AST_METHOD_CALL
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_MAGIC_CONST))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))))))))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_VAR)
                    (SCALAR)))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_BINARY_OP
                            (SCALAR)
                            (AST_MAGIC_CONST))))
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (AST_METHOD_CALL
                            (AST_STATIC_CALL
                                (
                                    (AST_PROP
                                        (AST_VAR))))
                            (
                                (AST_DIM
                                    (AST_VAR)
                                    (SCALAR))))))))))