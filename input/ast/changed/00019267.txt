    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->input      = $input;
        $this->output     = $output;
        $this->maxRuns    = $this->input->getOption('max-runs');
        $this->queryCount = $this->input->getOption('query-count');

        $translator = $this->getContainer()->get('translator');
        $translator->setLocale($this->getContainer()->getParameter('mautic.locale'));

        // get the twitter integration
        $this->twitter = $this->getTwitterIntegration();

        if (!$this->twitter->isAuthorized()) {
            $this->output->writeln('Twitter integration not configured or authorized. Configure the integration to complete this task.');

            return 1;
        }

        // get the mid from the cli
        $mid = $input->getOption('mid');

        // monitor record
        $monitor = $this->getMonitor($mid);

        // process the monitor
        $this->processMonitor($monitor);

        $dispatcher = $this->getContainer()->get('event_dispatcher');

        $dispatcher->dispatch(
            SocialEvents::MONITOR_POST_PROCESS,
            new SocialMonitorEvent($this->getNetworkName(), $monitor, $this->manipulatedLeads, $this->newLeads, $this->updatedLeads)
        );

        return 0;
    }

    /*
     * Process the monitor record
     */
||||||||    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $this->input      = $input;
        $this->output     = $output;
        $this->maxRuns    = $this->input->getOption('max-runs');
        $this->queryCount = $this->input->getOption('query-count');
        $this->monitoringModel = $this->getContainer()->get('mautic.social.model.monitoring');

        $translator = $this->getContainer()->get('translator');
        $translator->setLocale($this->getContainer()->getParameter('mautic.locale'));

        // get the twitter integration
        $this->twitter = $this->getTwitterIntegration();

        if (!$this->twitter->isAuthorized()) {
            $this->output->writeln('Twitter integration not configured or authorized. Configure the integration to complete this task.');

            return 1;
        }

        // get the mid from the cli
        $mid = $input->getOption('mid');

        // monitor record
        $monitor = $this->getMonitor($mid);

        // process the monitor
        $this->processMonitor($monitor);

        $dispatcher = $this->getContainer()->get('event_dispatcher');

        $dispatcher->dispatch(
            SocialEvents::MONITOR_POST_PROCESS,
            new SocialMonitorEvent($this->getNetworkName(), $monitor, $this->manipulatedLeads, $this->newLeads, $this->updatedLeads)
        );

        return 0;
    }

    /*
     * Process the monitor record
     */
||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))))
    (AST_RETURN
        (SCALAR)))||||||||NO_DOC_COMMENTNO_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_VAR))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_PROP
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_METHOD_CALL
                (AST_METHOD_CALL
                    (AST_VAR))
                (
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_PROP
            (AST_VAR))
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))))
            (
                (AST_METHOD_CALL
                    (AST_PROP
                        (AST_VAR))
                    (
                        (SCALAR)))
                (AST_RETURN
                    (SCALAR)))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (SCALAR))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)
            (
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_METHOD_CALL
                (AST_VAR))
            (
                (SCALAR))))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_CLASS_CONST
                (SCALAR))
            (AST_NEW
                (
                    (AST_METHOD_CALL
                        (AST_VAR))
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))
                    (AST_PROP
                        (AST_VAR))))))
    (AST_RETURN
        (SCALAR)))