    public function initFormatter($name)
    {
        $name = strtolower($name);

        if (class_exists($name)) {
            $class = $name;
        } elseif (isset($this->formatterClasses[$name])) {
            $class = $this->formatterClasses[$name];
        } else {
            throw new \RuntimeException("Unknown formatter: \"$name\". " .
                'Available formatters are: ' . implode(', ', array_keys($this->formatterClasses))
            );
        }

        $refClass = new \ReflectionClass($class);
        if (!$refClass->implementsInterface('Behat\Behat\Formatter\FormatterInterface')) {
            throw new \RuntimeException(sprintf(
                'Formatter class "%s" should implement FormatterInterface', $class
            ));
        }

        $formatter = new $class();
        $formatter->setTranslator($this->translator);
        $this->dispatcher->addSubscriber($formatter, -5);

        return $this->formatters[] = $formatter;
    }

    /**
     * Sets specific parameter in all initialized formatters.
     *
     * @param   string  $param  parameter name
     * @param   mixed   $value  parameter value
     */
||||||||    public function initFormatter($name)
    {
        $name = strtolower($name);

        if (class_exists($name)) {
            $dispatcher = new FormatterDispatcher($name);
        } elseif (isset($this->dispatchers[$name])) {
            $dispatcher = $this->dispatchers[$name];
        } else {
            throw new \RuntimeException("Unknown formatter: \"$name\". " .
                'Available formatters are: ' . implode(', ', array_keys($this->formatterClasses))
            );
        }

        $formatter = $dispatcher->createFormatter();
        $formatter->setTranslator($this->translator);
        $this->eventDispatcher->addSubscriber($formatter, -5);

        return $this->formatters[] = $formatter;
    }

    /**
     * Sets specific parameter in all initialized formatters.
     *
     * @param   string  $param  parameter name
     * @param   mixed   $value  parameter value
     */
||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_VAR))))
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_UNARY_OP
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (SCALAR))))
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_CALL
                                (
                                    (SCALAR)
                                    (AST_VAR)))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_NEW
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)
            (AST_UNARY_OP
                (SCALAR))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (NULL))
            (AST_VAR))))||||||||HAS_DOC_COMMENTNO_RETURN_TYPE
(NO_PARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_ASSIGN
        (AST_VAR)
        (AST_CALL
            (
                (AST_VAR))))
    (AST_IF
        (AST_IF_ELEM
            (AST_CALL
                (
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_NEW
                        (
                            (AST_VAR))))))
        (AST_IF_ELEM
            (AST_ISSET
                (AST_DIM
                    (AST_PROP
                        (AST_VAR))
                    (AST_VAR)))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_DIM
                        (AST_PROP
                            (AST_VAR))
                        (AST_VAR)))))
        (AST_IF_ELEM
            (NULL)
            (
                (AST_THROW
                    (AST_NEW
                        (
                            (AST_BINARY_OP
                                (AST_BINARY_OP
                                    (AST_ENCAPS_LIST
                                        (SCALAR)
                                        (AST_VAR)
                                        (SCALAR))
                                    (SCALAR))
                                (AST_CALL
                                    (
                                        (SCALAR)
                                        (AST_CALL
                                            (
                                                (AST_PROP
                                                    (AST_VAR)))))))))))))
    (AST_ASSIGN
        (AST_VAR)
        (AST_METHOD_CALL
            (AST_VAR)))
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_PROP
                (AST_VAR))))
    (AST_METHOD_CALL
        (AST_PROP
            (AST_VAR))
        (
            (AST_VAR)
            (AST_UNARY_OP
                (SCALAR))))
    (AST_RETURN
        (AST_ASSIGN
            (AST_DIM
                (AST_PROP
                    (AST_VAR))
                (NULL))
            (AST_VAR))))