    private function updateContextWithNegation(Node $negatedNode, Context $context) : Context
    {
        // Negation
        // TODO: negate instanceof, other checks
        // TODO: negation would also go in the else statement
        if (($negatedNode->kind ?? 0) === \ast\AST_CALL) {
            if (self::isCallStringWithSingleVariableArgument($negatedNode)) {
                // TODO: Make this generic to all type assertions? E.g. if (!is_string($x)) removes 'string' from type, makes '?string' (nullable) into 'null'.
                // This may be redundant in some places if AST canonicalization is used, but still useful in some places
                // TODO: Make this generic so that it can be used in the 'else' branches?
                $function_name = $negatedNode->children['expr']->children['name'];
                if (in_array($function_name, ['empty', 'is_null', 'is_scalar'], true)) {
                    return $this->removeNullFromVariable($negatedNode->children['args']->children[0], $context);
                }
            }
        }
        return $context;
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||    private function updateContextWithNegation(Node $negatedNode, Context $context) : Context
    {
        $this->checkVariablesDefined($negatedNode);
        // Negation
        // TODO: negate instanceof, other checks
        // TODO: negation would also go in the else statement
        if (($negatedNode->kind ?? 0) === \ast\AST_CALL) {
            $args = $negatedNode->children;
            $this->checkVariablesDefinedInCallArgs($negatedNode);
            if (self::isCallStringWithSingleVariableArgument($negatedNode)) {
                // TODO: Make this generic to all type assertions? E.g. if (!is_string($x)) removes 'string' from type, makes '?string' (nullable) into 'null'.
                // This may be redundant in some places if AST canonicalization is used, but still useful in some places
                // TODO: Make this generic so that it can be used in the 'else' branches?
                $function_name = $negatedNode->children['expr']->children['name'];
                if (in_array($function_name, ['empty', 'is_null', 'is_scalar'], true)) {
                    return $this->removeNullFromVariable($negatedNode->children['args']->children[0], $context);
                }
            }
        }
        return $context;
    }

    /**
     * @param Node $node
     * A node to parse
     *
     * @return Context
     * A new or an unchanged context resulting from
     * parsing the node
     */
||||||||NO_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_CONST))
            (
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_PROP
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)))
                                    (SCALAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (NULL))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (NULL))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (NULL)))
                                            (AST_CONST)))
                                    (
                                        (AST_RETURN
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_DIM
                                                        (AST_PROP
                                                            (AST_DIM
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (SCALAR)))
                                                        (SCALAR))
                                                    (AST_VAR)))))))))))))
    (AST_RETURN
        (AST_VAR)))||||||||NO_DOC_COMMENTHAS_RETURN_TYPE
(PARAM_TYPENO_PARAM_DEFAULTPARAM_TYPENO_PARAM_DEFAULT)
(
    (AST_METHOD_CALL
        (AST_VAR)
        (
            (AST_VAR)))
    (AST_IF
        (AST_IF_ELEM
            (AST_BINARY_OP
                (AST_BINARY_OP
                    (AST_PROP
                        (AST_VAR))
                    (SCALAR))
                (AST_CONST))
            (
                (AST_ASSIGN
                    (AST_VAR)
                    (AST_PROP
                        (AST_VAR)))
                (AST_METHOD_CALL
                    (AST_VAR)
                    (
                        (AST_VAR)))
                (AST_IF
                    (AST_IF_ELEM
                        (AST_STATIC_CALL
                            (
                                (AST_VAR)))
                        (
                            (AST_ASSIGN
                                (AST_VAR)
                                (AST_DIM
                                    (AST_PROP
                                        (AST_DIM
                                            (AST_PROP
                                                (AST_VAR))
                                            (SCALAR)))
                                    (SCALAR)))
                            (AST_IF
                                (AST_IF_ELEM
                                    (AST_CALL
                                        (
                                            (AST_VAR)
                                            (AST_ARRAY
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (NULL))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (NULL))
                                                (AST_ARRAY_ELEM
                                                    (SCALAR)
                                                    (NULL)))
                                            (AST_CONST)))
                                    (
                                        (AST_RETURN
                                            (AST_METHOD_CALL
                                                (AST_VAR)
                                                (
                                                    (AST_DIM
                                                        (AST_PROP
                                                            (AST_DIM
                                                                (AST_PROP
                                                                    (AST_VAR))
                                                                (SCALAR)))
                                                        (SCALAR))
                                                    (AST_VAR)))))))))))))
    (AST_RETURN
        (AST_VAR)))