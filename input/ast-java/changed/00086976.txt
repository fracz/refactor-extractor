@SuppressWarnings("rawtypes")
@Test
public void shouldOrderTransactionsMakingLegacyIndexChanges() throws Exception {
    // GIVEN
    LogFile logFile = mock(LogFile.class);
    WritableLogChannel channel = new InMemoryLogChannel();
    when(logFile.getWriter()).thenReturn(channel);
    TransactionMetadataCache metadataCache = new TransactionMetadataCache(10, 100);
    TransactionIdStore transactionIdStore = mock(TransactionIdStore.class);
    when(transactionIdStore.nextCommittingTransactionId()).thenReturn(1L, 2L, 3L, 4L, 5L);
    IdOrderingQueue legacyIndexOrdering = new SynchronizedArrayIdOrderingQueue(5);
    TransactionAppender appender = life.add(new BatchingTransactionAppender(logFile, NO_ROTATION, Consumers.LNOOP, metadataCache, transactionIdStore, legacyIndexOrdering, kernelHealth));
    life.start();
    // WHEN appending 5 simultaneous transaction, of which 3 has legacy index changes [1*,2,3*,4,5*]
    // LEGEND: * = has legacy index changes
    boolean[] transactions = { true, false, true, false, true };
    Future[] committers = committersStartYourEngines(appender, transactions);
    // THEN the ones w/o legacy index changes should just have fallen right through
    // and the ones w/ such changes should be ordered and wait for each other
    // ... so make sure to let the non-legacy-index transactions through, just because we can
    boolean[] completed = new boolean[transactions.length];
    for (int i = 0; i < transactions.length; i++) {
        if (!transactions[i]) {
            // Here's a non-legacy-index transaction
            assertNotNull(tryComplete(committers[i], 1000));
            completed[i] = true;
        }
    }
    // ... and wait for the legacy index transactions to be completed in order
    while (anyBoolean(completed, false)) {
        // Look for incomplete transactions (i.e. the legacy index transactions), and among
        // those there should be one that is completed, whereas the other should not be.
        Long doneTx = null;
        for (int attempt = 0; attempt < 5 && doneTx == null; attempt++) {
            for (int i = 0; i < completed.length; i++) {
                if (!completed[i]) {
                    Long tx = tryComplete(committers[i], 100);
                    if (tx != null) {
                        assertNull("Multiple legacy index transactions seems to have " + "moved on from append at the same time", doneTx);
                        doneTx = tx;
                        completed[i] = true;
                    }
                }
            }
        }
        assertNotNull("None done this round", doneTx);
        legacyIndexOrdering.removeChecked(doneTx);
    }
}||||||||@SuppressWarnings("rawtypes")
@Test
public void shouldOrderTransactionsMakingLegacyIndexChanges() throws Exception {
    // GIVEN
    WritableLogChannel channel = new InMemoryLogChannel();
    when(logFile.getWriter()).thenReturn(channel);
    when(transactionIdStore.nextCommittingTransactionId()).thenReturn(1L, 2L, 3L, 4L, 5L);
    IdOrderingQueue legacyIndexOrdering = new SynchronizedArrayIdOrderingQueue(5);
    TransactionAppender appender = life.add(new BatchingTransactionAppender(logFile, NO_ROTATION, positionCache, transactionIdStore, legacyIndexOrdering, kernelHealth));
    life.start();
    // WHEN appending 5 simultaneous transaction, of which 3 has legacy index changes [1*,2,3*,4,5*]
    // LEGEND: * = has legacy index changes
    boolean[] transactions = { true, false, true, false, true };
    Future[] committers = committersStartYourEngines(appender, transactions);
    // THEN the ones w/o legacy index changes should just have fallen right through
    // and the ones w/ such changes should be ordered and wait for each other
    // ... so make sure to let the non-legacy-index transactions through, just because we can
    boolean[] completed = new boolean[transactions.length];
    for (int i = 0; i < transactions.length; i++) {
        if (!transactions[i]) {
            // Here's a non-legacy-index transaction
            assertNotNull(tryComplete(committers[i], 1000));
            completed[i] = true;
        }
    }
    // ... and wait for the legacy index transactions to be completed in order
    while (anyBoolean(completed, false)) {
        // Look for incomplete transactions (i.e. the legacy index transactions), and among
        // those there should be one that is completed, whereas the other should not be.
        Long doneTx = null;
        for (int attempt = 0; attempt < 5 && doneTx == null; attempt++) {
            for (int i = 0; i < completed.length; i++) {
                if (!completed[i]) {
                    Long tx = tryComplete(committers[i], 100);
                    if (tx != null) {
                        assertNull("Multiple legacy index transactions seems to have " + "moved on from append at the same time", doneTx);
                        doneTx = tx;
                        completed[i] = true;
                    }
                }
            }
        }
        assertNotNull("None done this round", doneTx);
        legacyIndexOrdering.removeChecked(doneTx);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayInitializerExpr
						(BooleanLiteralExpr
						)
						(BooleanLiteralExpr
						)
						(BooleanLiteralExpr
						)
						(BooleanLiteralExpr
						)
						(BooleanLiteralExpr
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(PrimitiveType
						)
						(ArrayCreationLevel
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
									SimpleName
								)
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ForStmt
					(BlockStmt
						(ForStmt
							(BlockStmt
								(IfStmt
									(UnaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(IntegerLiteralExpr
														)
														SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(BinaryExpr
															StringLiteralExpr
															StringLiteralExpr
														)
														NameExpr
															SimpleName
														SimpleName
													)
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(ExpressionStmt
													(AssignExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(BooleanLiteralExpr
														)
													)
												)
											)
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayInitializerExpr
						(BooleanLiteralExpr
						)
						(BooleanLiteralExpr
						)
						(BooleanLiteralExpr
						)
						(BooleanLiteralExpr
						)
						(BooleanLiteralExpr
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(PrimitiveType
						)
						(ArrayCreationLevel
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
									SimpleName
								)
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ForStmt
					(BlockStmt
						(ForStmt
							(BlockStmt
								(IfStmt
									(UnaryExpr
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(IntegerLiteralExpr
														)
														SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(BinaryExpr
															StringLiteralExpr
															StringLiteralExpr
														)
														NameExpr
															SimpleName
														SimpleName
													)
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(ExpressionStmt
													(AssignExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(BooleanLiteralExpr
														)
													)
												)
											)
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)

