/**
 * Enable control of the Bluetooth Adapter for a single application.
 *
 * <p>Some applications need to use Bluetooth for short periods of time to
 * transfer data but don't want all the associated implications like
 * automatic connection to headsets etc.
 *
 * <p> Multiple applications can call this. This is reference counted and
 * Bluetooth disabled only when no one else is using it. There will be no UI
 * shown to the user while bluetooth is being enabled. Any user action will
 * override this call. For example, if user wants Bluetooth on and the last
 * user of this API wanted to disable Bluetooth, Bluetooth will not be
 * turned off.
 *
 * <p> This API is only meant to be used by internal applications. Third
 * party applications but use {@link #enable} and {@link #disable} APIs.
 *
 * <p> If this API returns true, it means the callback will be called.
 * The callback will be called with the current state of Bluetooth.
 * If the state is not what was requested, an internal error would be the
 * reason. If Bluetooth is already on and if this function is called to turn
 * it on, the api will return true and a callback will be called.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 *
 * @param on True for on, false for off.
 * @param callback The callback to notify changes to the state.
 * @hide
 */
public boolean changeApplicationBluetoothState(boolean on, BluetoothStateChangeCallback callback) {
    if (callback == null)
        return false;
    /*
        try {
            mServiceLock.readLock().lock();
            if (mService != null) {
                return mService.changeApplicationBluetoothState(on, new
                    StateChangeCallbackWrapper(callback), new Binder());
            }
        } catch (RemoteException e) {
            Log.e(TAG, "changeBluetoothState", e);
        } finally {
            mServiceLock.readLock().unlock();
        }
        */
    return false;
}||||||||/**
 * Enable control of the Bluetooth Adapter for a single application.
 *
 * <p>Some applications need to use Bluetooth for short periods of time to
 * transfer data but don't want all the associated implications like
 * automatic connection to headsets etc.
 *
 * <p> Multiple applications can call this. This is reference counted and
 * Bluetooth disabled only when no one else is using it. There will be no UI
 * shown to the user while bluetooth is being enabled. Any user action will
 * override this call. For example, if user wants Bluetooth on and the last
 * user of this API wanted to disable Bluetooth, Bluetooth will not be
 * turned off.
 *
 * <p> This API is only meant to be used by internal applications. Third
 * party applications but use {@link #enable} and {@link #disable} APIs.
 *
 * <p> If this API returns true, it means the callback will be called.
 * The callback will be called with the current state of Bluetooth.
 * If the state is not what was requested, an internal error would be the
 * reason. If Bluetooth is already on and if this function is called to turn
 * it on, the api will return true and a callback will be called.
 *
 * <p>Requires {@link android.Manifest.permission#BLUETOOTH}
 *
 * @param on True for on, false for off.
 * @param callback The callback to notify changes to the state.
 * @hide
 */
public boolean changeApplicationBluetoothState(boolean on, BluetoothStateChangeCallback callback) {
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
				(BooleanLiteralExpr
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
			(BlockComment
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

