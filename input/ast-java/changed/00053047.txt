// @Override
/*	  public int getOutputVectorSize() {
		  return this.outputValues;
	  }
*/
// doesnt really do anything in a 2 class dataset
/*	  @Override
	  public String GetClassnameByID(int id) {
	    return String.valueOf(id); // this.newsGroups.values().get(id);
	  }
*/
/*
	  public void clearVector(Vector v) {

		  Iterator<Element> it = v.iterateNonZero();
		  while (it.hasNext()) {
		    Element e = it.next();
		    e.set(0);
		  }

	  }
	  */
// INDArray vector = Nd4j.create(10);
/**
 * example line: "-1 1:0.43 3:0.12 9284:0.2 # abcdef"
 *
 * @param line
 * @param input_vec
 * @param output_vec
 * @throws Exception
 */
public void parseFromLine(String line, INDArray input_vec, INDArray output_vec) {
    // String[] inputs_outputs = line.split("\\|");
    // remove comments
    String[] vector_and_comments = line.split("#");
    // now use only the left hand part
    String[] inputs_outputs = vector_and_comments[0].split(" ");
    // System.out.println("in: " + inputs_outputs[0]);
    // System.out.println("out: " + inputs_outputs[1]);
    String label = inputs_outputs[0].trim();
    // String[] outputs = inputs_outputs[1].trim().split(" ");
    // clear it
    // clear vector
    input_vec.muli(0.0);
    int startFeatureIndex = 0;
    // dont know what to do the the "namespace" "f"
    if (this.useBiasTerm) {
        // input_vec.set(0, 1.0);
        input_vec.putScalar(0, 1.0);
        startFeatureIndex = 1;
    }
    for (int x = 1; x < inputs_outputs.length; x++) {
        // System.out.println("> DEbug > part: " + parts[x]);
        String[] feature = inputs_outputs[x].split(":");
        if ("#".equals(feature[0].trim())) {
        // comment
        } else {
            // get (offset) feature index and hash as necesary
            // % this.featureVectorSize;
            int index = (Integer.parseInt(feature[0]) + startFeatureIndex);
            double val = Double.parseDouble(feature[1]);
            if (index < this.featureVectorSize) {
                input_vec.putScalar(index, val);
            } else {
                // Should we throw an exception here?
                System.err.println("Could Hash: " + index + " to " + (index % this.featureVectorSize));
            }
        }
    }
    // FeatureUtil.toOutcomeVector(index, numOutcomes)
    // clear vector
    output_vec.muli(0.0);
    // boolean noLabelException = false;
    double val = 0;
    val = Double.parseDouble(label);
    output_vec.putScalar(0, val);
}||||||||// INDArray vector = Nd4j.create(10);
/**
 * example line: "-1 1:0.43 3:0.12 9284:0.2 # abcdef"
 *
 * @param line
 * @param input_vec
 * @param output_vec
 * @throws Exception
 */
public void parseFromLine(String line, INDArray input_vec, INDArray output_vec) {
    // String[] inputs_outputs = line.split("\\|");
    // remove comments
    String[] vector_and_comments = line.split("#");
    // now use only the left hand part
    String[] inputs_outputs = vector_and_comments[0].split(" ");
    // System.out.println("in: " + inputs_outputs[0]);
    // System.out.println("out: " + inputs_outputs[1]);
    String label = inputs_outputs[0].trim();
    // String[] outputs = inputs_outputs[1].trim().split(" ");
    // clear it
    // clear vector
    input_vec.muli(0.0);
    int startFeatureIndex = 0;
    // dont know what to do the the "namespace" "f"
    if (this.useBiasTerm) {
        // input_vec.set(0, 1.0);
        input_vec.putScalar(0, 1.0);
        startFeatureIndex = 1;
    }
    for (int x = 1; x < inputs_outputs.length; x++) {
        // System.out.println("> DEbug > part: " + parts[x]);
        String[] feature = inputs_outputs[x].split(":");
        if ("#".equals(feature[0].trim())) {
        // comment
        } else {
            // get (offset) feature index and hash as neccesary
            // % this.featureVectorSize;
            int index = (Integer.parseInt(feature[0]) + startFeatureIndex);
            double val = Double.parseDouble(feature[1]);
            if (index < this.featureVectorSize) {
                input_vec.putScalar(index, val);
            } else {
                // Should we throw an exception here?
                System.err.println("Could Hash: " + index + " to " + (index % this.featureVectorSize));
            }
        }
    }
    // clear vector
    output_vec.muli(0.0);
    double val = 0;
    val = Double.parseDouble(label);
    output_vec.putScalar(0, val);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(DoubleLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				(ThisExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(DoubleLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						SimpleName
						StringLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(EnclosedExpr
										(BinaryExpr
											(MethodCallExpr
												(ArrayAccessExpr
													(IntegerLiteralExpr
													)
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ArrayAccessExpr
											(IntegerLiteralExpr
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														(ThisExpr
														)
													)
												)
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(DoubleLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(DoubleLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(FieldAccessExpr
				SimpleName
				(ThisExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(DoubleLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
						)
						SimpleName
						StringLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(EnclosedExpr
										(BinaryExpr
											(MethodCallExpr
												(ArrayAccessExpr
													(IntegerLiteralExpr
													)
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ArrayAccessExpr
											(IntegerLiteralExpr
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														(ThisExpr
														)
													)
												)
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(DoubleLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

