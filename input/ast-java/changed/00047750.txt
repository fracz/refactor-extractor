/**
 * Get the earliest available offsets for the given partitions.
 *
 * Notice that this method may block indefinitely if the partition does not exist.
 *
 * @param partitions the partitions to get the earliest offsets.
 * @return The earliest available offsets for the given partitions
 */
@Override
public Map<TopicPartition, Long> beginningOffsets(Collection<TopicPartition> partitions) {
    return fetcher.earliestOffsets(partitions);
}||||||||/**
 * Get the first offset for the given partitions.
 * <p>
 * Notice that this method may block indefinitely if the partition does not exist.
 * This method does not change the current consumer position of the partitions.
 *
 * @see #seekToBeginning(Collection)
 *
 * @param partitions the partitions to get the earliest offsets.
 * @return The earliest available offsets for the given partitions
 */
@Override
public Map<TopicPartition, Long> beginningOffsets(Collection<TopicPartition> partitions) {
    return fetcher.beginningOffsets(partitions, requestTimeoutMs);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

