/**
 * The test demonstrates that the generics-based API for
 * {@link CollectionFactory#createApproximateCollection(Object, int)}
 * is not type-safe.
 * <p>Specifically, the parameterized type {@code E} is not bound to
 * the type of elements contained in the {@code collection} argument
 * passed to {@code createApproximateCollection()}. Thus casting the
 * value returned by {@link EnumSet#copyOf(EnumSet)} to
 * {@code (Collection<E>)} cannot guarantee that the returned collection
 * actually contains elements of type {@code E}.
 */
@Test
public void createApproximateCollectionIsNotTypeSafe() {
    Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3);
    // next line and not as a result of the previous line.
    try {
        // Note that ints is of type Collection<Integer>, but the collection returned
        // by createApproximateCollection() is of type Collection<Color>.
        ints.iterator().next().intValue();
        fail("Should have thrown a ClassCastException");
    } catch (ClassCastException e) {
    /* expected */
    }
}||||||||/**
 * The test demonstrates that the generics-based API for
 * {@link CollectionFactory#createApproximateCollection(Object, int)}
 * is not type-safe.
 * <p>Specifically, the parameterized type {@code E} is not bound to
 * the type of elements contained in the {@code collection} argument
 * passed to {@code createApproximateCollection()}. Thus casting the
 * value returned by {@link EnumSet#copyOf(EnumSet)} to
 * {@code (Collection<E>)} cannot guarantee that the returned collection
 * actually contains elements of type {@code E}.
 */
@Test
public void createApproximateCollectionIsNotTypeSafe() {
    Collection<Integer> ints = createApproximateCollection(EnumSet.of(Color.BLUE), 3);
    // next line and not as a result of the previous line.
    try {
        // Note that ints is of type Collection<Integer>, but the collection returned
        // by createApproximateCollection() is of type Collection<Color>. Thus, 42
        // cannot be cast to a Color.
        ints.add(42);
        fail("Should have thrown a ClassCastException");
    } catch (ClassCastException e) {
    /* expected */
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

