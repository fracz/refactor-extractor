@Override
protected void decode(ChannelHandlerContext ctx, ByteBuf in, MessageBuf<Object> out) throws Exception {
    // Discard all data received if closing handshake was received before.
    if (receivedClosingHandshake) {
        in.skipBytes(actualReadableBytes());
        return;
    }
    switch(state()) {
        case FRAME_START:
            framePayloadBytesRead = 0;
            framePayloadLength = -1;
            framePayload = null;
            // FIN, RSV, OPCODE
            byte b = in.readByte();
            frameFinalFlag = (b & 0x80) != 0;
            frameRsv = (b & 0x70) >> 4;
            frameOpcode = b & 0x0F;
            if (logger.isDebugEnabled()) {
                logger.debug("Decoding WebSocket Frame opCode={}", frameOpcode);
            }
            // MASK, PAYLOAD LEN 1
            b = in.readByte();
            boolean frameMasked = (b & 0x80) != 0;
            int framePayloadLen1 = b & 0x7F;
            if (frameRsv != 0 && !allowExtensions) {
                protocolViolation(ctx, "RSV != 0 and no extension negotiated, RSV:" + frameRsv);
                return;
            }
            if (maskedPayload && !frameMasked) {
                protocolViolation(ctx, "unmasked client to server frame");
                return;
            }
            if (frameOpcode > 7) {
                // control frames MUST NOT be fragmented
                if (!frameFinalFlag) {
                    protocolViolation(ctx, "fragmented control frame");
                    return;
                }
                // control frames MUST have payload 125 octets or less
                if (framePayloadLen1 > 125) {
                    protocolViolation(ctx, "control frame with payload length > 125 octets");
                    return;
                }
                // check for reserved control frame opcodes
                if (!(frameOpcode == OPCODE_CLOSE || frameOpcode == OPCODE_PING || frameOpcode == OPCODE_PONG)) {
                    protocolViolation(ctx, "control frame using reserved opcode " + frameOpcode);
                    return;
                }
                // order) representing a getStatus code
                if (frameOpcode == 8 && framePayloadLen1 == 1) {
                    protocolViolation(ctx, "received close control frame with payload len 1");
                    return;
                }
            } else {
                // check for reserved data frame opcodes
                if (!(frameOpcode == OPCODE_CONT || frameOpcode == OPCODE_TEXT || frameOpcode == OPCODE_BINARY)) {
                    protocolViolation(ctx, "data frame using reserved opcode " + frameOpcode);
                    return;
                }
                // check opcode vs message fragmentation state 1/2
                if (fragmentedFramesCount == 0 && frameOpcode == OPCODE_CONT) {
                    protocolViolation(ctx, "received continuation data frame outside fragmented message");
                    return;
                }
                // check opcode vs message fragmentation state 2/2
                if (fragmentedFramesCount != 0 && frameOpcode != OPCODE_CONT && frameOpcode != OPCODE_PING) {
                    protocolViolation(ctx, "received non-continuation data frame while inside fragmented message");
                    return;
                }
            }
            // Read frame payload length
            if (framePayloadLen1 == 126) {
                framePayloadLength = in.readUnsignedShort();
                if (framePayloadLength < 126) {
                    protocolViolation(ctx, "invalid data frame length (not using minimal length encoding)");
                    return;
                }
            } else if (framePayloadLen1 == 127) {
                framePayloadLength = in.readLong();
                if (framePayloadLength < 65536) {
                    protocolViolation(ctx, "invalid data frame length (not using minimal length encoding)");
                    return;
                }
            } else {
                framePayloadLength = framePayloadLen1;
            }
            if (framePayloadLength > maxFramePayloadLength) {
                protocolViolation(ctx, "Max frame length of " + maxFramePayloadLength + " has been exceeded.");
                return;
            }
            if (logger.isDebugEnabled()) {
                logger.debug("Decoding WebSocket Frame length={}", framePayloadLength);
            }
            checkpoint(State.MASKING_KEY);
        case MASKING_KEY:
            if (maskedPayload) {
                maskingKey = in.readBytes(4);
            }
            checkpoint(State.PAYLOAD);
        case PAYLOAD:
            // Sometimes, the payload may not be delivered in 1 nice packet
            // We need to accumulate the data until we have it all
            int rbytes = actualReadableBytes();
            ByteBuf payloadBuffer = null;
            long willHaveReadByteCount = framePayloadBytesRead + rbytes;
            // framePayloadLength);
            if (willHaveReadByteCount == framePayloadLength) {
                // We have all our content so proceed to process
                payloadBuffer = ctx.alloc().buffer(rbytes);
                payloadBuffer.writeBytes(in, rbytes);
            } else if (willHaveReadByteCount < framePayloadLength) {
                // Returning null means we will get called back
                if (framePayload == null) {
                    framePayload = ctx.alloc().buffer(toFrameLength(framePayloadLength));
                }
                framePayload.writeBytes(in, rbytes);
                framePayloadBytesRead += rbytes;
                // Return null to wait for more bytes to arrive
                return;
            } else if (willHaveReadByteCount > framePayloadLength) {
                // Leave the remainder in the buffer for next frame
                if (framePayload == null) {
                    framePayload = ctx.alloc().buffer(toFrameLength(framePayloadLength));
                }
                framePayload.writeBytes(in, toFrameLength(framePayloadLength - framePayloadBytesRead));
            }
            // Now we have all the data, the next checkpoint must be the next
            // frame
            checkpoint(State.FRAME_START);
            // Take the data that we have in this packet
            if (framePayload == null) {
                framePayload = payloadBuffer;
            } else if (payloadBuffer != null) {
                framePayload.writeBytes(payloadBuffer);
            }
            // Unmask data if needed
            if (maskedPayload) {
                unmask(framePayload);
            }
            // fragmented
            if (frameOpcode == OPCODE_PING) {
                out.add(new PingWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                return;
            }
            if (frameOpcode == OPCODE_PONG) {
                out.add(new PongWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                return;
            }
            if (frameOpcode == OPCODE_CLOSE) {
                checkCloseFrameBody(ctx, framePayload);
                receivedClosingHandshake = true;
                out.add(new CloseWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                return;
            }
            // Processing for possible fragmented messages for text and binary
            // frames
            String aggregatedText = null;
            if (frameFinalFlag) {
                // allowed in the middle of a fragmented message
                if (frameOpcode != OPCODE_PING) {
                    fragmentedFramesCount = 0;
                    // Check text for UTF8 correctness
                    if (frameOpcode == OPCODE_TEXT || fragmentedFramesText != null) {
                        // Check UTF-8 correctness for this payload
                        checkUTF8String(ctx, framePayload);
                        // This does a second check to make sure UTF-8
                        // correctness for entire text message
                        aggregatedText = fragmentedFramesText.toString();
                        fragmentedFramesText = null;
                    }
                }
            } else {
                // fragmented sequence
                if (fragmentedFramesCount == 0) {
                    // First text or binary frame for a fragmented set
                    fragmentedFramesText = null;
                    if (frameOpcode == OPCODE_TEXT) {
                        checkUTF8String(ctx, framePayload);
                    }
                } else {
                    // Subsequent frames - only check if init frame is text
                    if (fragmentedFramesText != null) {
                        checkUTF8String(ctx, framePayload);
                    }
                }
                // Increment counter
                fragmentedFramesCount++;
            }
            // Return the frame
            if (frameOpcode == OPCODE_TEXT) {
                out.add(new TextWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                return;
            } else if (frameOpcode == OPCODE_BINARY) {
                out.add(new BinaryWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                return;
            } else if (frameOpcode == OPCODE_CONT) {
                out.add(new ContinuationWebSocketFrame(frameFinalFlag, frameRsv, framePayload, aggregatedText));
                return;
            } else {
                throw new UnsupportedOperationException("Cannot decode web socket frame with opcode: " + frameOpcode);
            }
        case CORRUPT:
            // If we don't keep reading Netty will throw an exception saying
            // we can't return null if no bytes read and state not changed.
            in.readByte();
            return;
        default:
            throw new Error("Shouldn't reach here.");
    }
}||||||||@Override
protected void decode(ChannelHandlerContext ctx, ByteBuf in, MessageList<Object> out) throws Exception {
    // Discard all data received if closing handshake was received before.
    if (receivedClosingHandshake) {
        in.skipBytes(actualReadableBytes());
        return;
    }
    try {
        switch(state()) {
            case FRAME_START:
                framePayloadBytesRead = 0;
                framePayloadLength = -1;
                framePayload = null;
                payloadBuffer = null;
                // FIN, RSV, OPCODE
                byte b = in.readByte();
                frameFinalFlag = (b & 0x80) != 0;
                frameRsv = (b & 0x70) >> 4;
                frameOpcode = b & 0x0F;
                if (logger.isDebugEnabled()) {
                    logger.debug("Decoding WebSocket Frame opCode={}", frameOpcode);
                }
                // MASK, PAYLOAD LEN 1
                b = in.readByte();
                boolean frameMasked = (b & 0x80) != 0;
                int framePayloadLen1 = b & 0x7F;
                if (frameRsv != 0 && !allowExtensions) {
                    protocolViolation(ctx, "RSV != 0 and no extension negotiated, RSV:" + frameRsv);
                    return;
                }
                if (maskedPayload && !frameMasked) {
                    protocolViolation(ctx, "unmasked client to server frame");
                    return;
                }
                if (frameOpcode > 7) {
                    // control frames MUST NOT be fragmented
                    if (!frameFinalFlag) {
                        protocolViolation(ctx, "fragmented control frame");
                        return;
                    }
                    // control frames MUST have payload 125 octets or less
                    if (framePayloadLen1 > 125) {
                        protocolViolation(ctx, "control frame with payload length > 125 octets");
                        return;
                    }
                    // check for reserved control frame opcodes
                    if (!(frameOpcode == OPCODE_CLOSE || frameOpcode == OPCODE_PING || frameOpcode == OPCODE_PONG)) {
                        protocolViolation(ctx, "control frame using reserved opcode " + frameOpcode);
                        return;
                    }
                    // order) representing a getStatus code
                    if (frameOpcode == 8 && framePayloadLen1 == 1) {
                        protocolViolation(ctx, "received close control frame with payload len 1");
                        return;
                    }
                } else {
                    // check for reserved data frame opcodes
                    if (!(frameOpcode == OPCODE_CONT || frameOpcode == OPCODE_TEXT || frameOpcode == OPCODE_BINARY)) {
                        protocolViolation(ctx, "data frame using reserved opcode " + frameOpcode);
                        return;
                    }
                    // check opcode vs message fragmentation state 1/2
                    if (fragmentedFramesCount == 0 && frameOpcode == OPCODE_CONT) {
                        protocolViolation(ctx, "received continuation data frame outside fragmented message");
                        return;
                    }
                    // check opcode vs message fragmentation state 2/2
                    if (fragmentedFramesCount != 0 && frameOpcode != OPCODE_CONT && frameOpcode != OPCODE_PING) {
                        protocolViolation(ctx, "received non-continuation data frame while inside fragmented message");
                        return;
                    }
                }
                // Read frame payload length
                if (framePayloadLen1 == 126) {
                    framePayloadLength = in.readUnsignedShort();
                    if (framePayloadLength < 126) {
                        protocolViolation(ctx, "invalid data frame length (not using minimal length encoding)");
                        return;
                    }
                } else if (framePayloadLen1 == 127) {
                    framePayloadLength = in.readLong();
                    if (framePayloadLength < 65536) {
                        protocolViolation(ctx, "invalid data frame length (not using minimal length encoding)");
                        return;
                    }
                } else {
                    framePayloadLength = framePayloadLen1;
                }
                if (framePayloadLength > maxFramePayloadLength) {
                    protocolViolation(ctx, "Max frame length of " + maxFramePayloadLength + " has been exceeded.");
                    return;
                }
                if (logger.isDebugEnabled()) {
                    logger.debug("Decoding WebSocket Frame length={}", framePayloadLength);
                }
                checkpoint(State.MASKING_KEY);
            case MASKING_KEY:
                if (maskedPayload) {
                    maskingKey = in.readBytes(4);
                }
                checkpoint(State.PAYLOAD);
            case PAYLOAD:
                // Sometimes, the payload may not be delivered in 1 nice packet
                // We need to accumulate the data until we have it all
                int rbytes = actualReadableBytes();
                long willHaveReadByteCount = framePayloadBytesRead + rbytes;
                // framePayloadLength);
                if (willHaveReadByteCount == framePayloadLength) {
                    // We have all our content so proceed to process
                    payloadBuffer = ctx.alloc().buffer(rbytes);
                    payloadBuffer.writeBytes(in, rbytes);
                } else if (willHaveReadByteCount < framePayloadLength) {
                    // Returning null means we will get called back
                    if (framePayload == null) {
                        framePayload = ctx.alloc().buffer(toFrameLength(framePayloadLength));
                    }
                    framePayload.writeBytes(in, rbytes);
                    framePayloadBytesRead += rbytes;
                    // Return null to wait for more bytes to arrive
                    return;
                } else if (willHaveReadByteCount > framePayloadLength) {
                    // Leave the remainder in the buffer for next frame
                    if (framePayload == null) {
                        framePayload = ctx.alloc().buffer(toFrameLength(framePayloadLength));
                    }
                    framePayload.writeBytes(in, toFrameLength(framePayloadLength - framePayloadBytesRead));
                }
                // Now we have all the data, the next checkpoint must be the next
                // frame
                checkpoint(State.FRAME_START);
                // Take the data that we have in this packet
                if (framePayload == null) {
                    framePayload = payloadBuffer;
                } else if (payloadBuffer != null) {
                    framePayload.writeBytes(payloadBuffer);
                }
                // Unmask data if needed
                if (maskedPayload) {
                    unmask(framePayload);
                }
                // fragmented
                if (frameOpcode == OPCODE_PING) {
                    out.add(new PingWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                    return;
                }
                if (frameOpcode == OPCODE_PONG) {
                    out.add(new PongWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                    return;
                }
                if (frameOpcode == OPCODE_CLOSE) {
                    checkCloseFrameBody(ctx, framePayload);
                    receivedClosingHandshake = true;
                    out.add(new CloseWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                    return;
                }
                // Processing for possible fragmented messages for text and binary
                // frames
                String aggregatedText = null;
                if (frameFinalFlag) {
                    // allowed in the middle of a fragmented message
                    if (frameOpcode != OPCODE_PING) {
                        fragmentedFramesCount = 0;
                        // Check text for UTF8 correctness
                        if (frameOpcode == OPCODE_TEXT || fragmentedFramesText != null) {
                            // Check UTF-8 correctness for this payload
                            checkUTF8String(ctx, framePayload);
                            // This does a second check to make sure UTF-8
                            // correctness for entire text message
                            aggregatedText = fragmentedFramesText.toString();
                            fragmentedFramesText = null;
                        }
                    }
                } else {
                    // fragmented sequence
                    if (fragmentedFramesCount == 0) {
                        // First text or binary frame for a fragmented set
                        fragmentedFramesText = null;
                        if (frameOpcode == OPCODE_TEXT) {
                            checkUTF8String(ctx, framePayload);
                        }
                    } else {
                        // Subsequent frames - only check if init frame is text
                        if (fragmentedFramesText != null) {
                            checkUTF8String(ctx, framePayload);
                        }
                    }
                    // Increment counter
                    fragmentedFramesCount++;
                }
                // Return the frame
                if (frameOpcode == OPCODE_TEXT) {
                    out.add(new TextWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                    return;
                } else if (frameOpcode == OPCODE_BINARY) {
                    out.add(new BinaryWebSocketFrame(frameFinalFlag, frameRsv, framePayload));
                    return;
                } else if (frameOpcode == OPCODE_CONT) {
                    out.add(new ContinuationWebSocketFrame(frameFinalFlag, frameRsv, framePayload, aggregatedText));
                    return;
                } else {
                    throw new UnsupportedOperationException("Cannot decode web socket frame with opcode: " + frameOpcode);
                }
            case CORRUPT:
                // If we don't keep reading Netty will throw an exception saying
                // we can't return null if no bytes read and state not changed.
                in.readByte();
                return;
            default:
                throw new Error("Shouldn't reach here.");
        }
    } catch (Exception e) {
        if (payloadBuffer != null) {
            if (payloadBuffer.refCnt() > 0) {
                payloadBuffer.release();
            }
            payloadBuffer = null;
        }
        if (framePayload != null) {
            if (framePayload.refCnt() > 0) {
                framePayload.release();
            }
            framePayload = null;
        }
        throw e;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											SimpleName
										)
									)
									(ReturnStmt
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
													)
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
								LineComment
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											LineComment
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
										)
									)
									LineComment
								)
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(ObjectCreationExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
						)
					)
					LineComment
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
							)
						)
					)
					(ThrowStmt
						NameExpr
							SimpleName
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
									(IntegerLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
									(IntegerLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(IfStmt
									(UnaryExpr
										(EnclosedExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
									LineComment
								)
								(IfStmt
									(UnaryExpr
										(EnclosedExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
									LineComment
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													StringLiteralExpr
													SimpleName
												)
											)
											(ReturnStmt
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												StringLiteralExpr
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(IntegerLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
															)
															SimpleName
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(BlockStmt
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
														)
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										LineComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NullLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(BlockStmt
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
													)
												)
											)
											LineComment
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
													)
												)
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
										(IfStmt
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														SimpleName
													)
													LineComment
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													LineComment
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														NullLiteralExpr
													)
												)
											)
											LineComment
										)
									)
									LineComment
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ThrowStmt
											(ObjectCreationExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(ObjectCreationExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ReturnStmt
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(ObjectCreationExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ObjectCreationExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
								)
							)
							LineComment
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ReturnStmt
						)
					)
					(SwitchEntryStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

