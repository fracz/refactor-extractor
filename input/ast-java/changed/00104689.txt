@Override
protected IStatus run(DBRProgressMonitor monitor) {
    monitor.beginTask(getName(), tasks.size());
    boolean ignoreErrors = false;
    for (int i = 0; i < tasks.size(); ) {
        DBRRunnableWithProgress task = tasks.get(i);
        if (monitor.isCanceled()) {
            break;
        }
        try {
            task.run(monitor);
        } catch (InvocationTargetException e) {
            if (tasks.size() == 1) {
                UIUtils.showErrorDialog(null, getName(), null, e.getTargetException());
            } else if (!ignoreErrors) {
                boolean keepRunning = true;
                switch(ExecutionQueueErrorJob.showError(getName(), e.getTargetException(), true)) {
                    case STOP:
                        keepRunning = false;
                        break;
                    case RETRY:
                        // just make it again
                        continue;
                    case IGNORE:
                        // Just do nothing
                        break;
                    case IGNORE_ALL:
                        ignoreErrors = true;
                        break;
                }
                if (!keepRunning) {
                    break;
                }
            }
        } catch (InterruptedException e) {
        // Ignore
        }
        monitor.worked(1);
        i++;
    }
    monitor.done();
    return Status.OK_STATUS;
}||||||||@Override
protected IStatus run(DBRProgressMonitor monitor) {
    monitor.beginTask(getName(), tasks.size());
    boolean ignoreErrors = false;
    for (int i = 0; i < tasks.size(); ) {
        DBRRunnableWithProgress task = tasks.get(i);
        if (monitor.isCanceled()) {
            break;
        }
        try {
            task.run(monitor);
        } catch (InvocationTargetException e) {
            if (tasks.size() == 1) {
                DBUserInterface.getInstance().showError(getName(), null, e.getTargetException());
            } else if (!ignoreErrors) {
                boolean keepRunning = true;
                switch(ExecutionQueueErrorJob.showError(getName(), e.getTargetException(), true)) {
                    case STOP:
                        keepRunning = false;
                        break;
                    case RETRY:
                        // just make it again
                        continue;
                    case IGNORE:
                        // Just do nothing
                        break;
                    case IGNORE_ALL:
                        ignoreErrors = true;
                        break;
                }
                if (!keepRunning) {
                    break;
                }
            }
        } catch (InterruptedException e) {
        // Ignore
        }
        monitor.worked(1);
        i++;
    }
    monitor.done();
    return Status.OK_STATUS;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(BreakStmt
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(BooleanLiteralExpr
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(SwitchStmt
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
												(BreakStmt
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ContinueStmt
													LineComment
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(BreakStmt
													LineComment
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
												(BreakStmt
												)
											)
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BooleanLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(IfStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											(BlockStmt
												(BreakStmt
												)
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NullLiteralExpr
											(MethodCallExpr
												SimpleName
											)
											NullLiteralExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(BreakStmt
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(BooleanLiteralExpr
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(SwitchStmt
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
												(BreakStmt
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ContinueStmt
													LineComment
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(BreakStmt
													LineComment
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BooleanLiteralExpr
														)
													)
												)
												(BreakStmt
												)
											)
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BooleanLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(IfStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											(BlockStmt
												(BreakStmt
												)
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
											)
											NullLiteralExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

