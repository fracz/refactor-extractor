@Test
public void overlappingDiffs_throws() {
    DescriptionBasedDiff diff = createDescriptionBasedDiff();
    assertThrows(IllegalArgumentException.class, () -> diff.onDescribed(new Description(null, "message", SuggestedFix.builder().replace(117, 120, "baz").replace(117, 120, "bar").build(), SeverityLevel.SUGGESTION)));
    DescriptionBasedDiff diff2 = createDescriptionBasedDiff();
    diff2.onDescribed(new Description(null, "bah", SuggestedFix.builder().replace(117, 120, "baz").build(), SeverityLevel.SUGGESTION));
    assertThrows(IllegalArgumentException.class, () -> diff2.onDescribed(new Description(null, "message", SuggestedFix.builder().replace(117, 120, "bar").build(), SeverityLevel.SUGGESTION)));
    DescriptionBasedDiff diff3 = DescriptionBasedDiff.createIgnoringOverlaps(compilationUnit, ImportOrganizer.STATIC_FIRST_ORGANIZER);
    diff3.onDescribed(new Description(null, "bah", SuggestedFix.builder().replace(117, 120, "baz").build(), SeverityLevel.SUGGESTION));
    // No throw, since it's lenient. Refactors to the first "baz" replacement and ignores this.
    diff3.onDescribed(new Description(null, "message", SuggestedFix.builder().replace(117, 120, "bar").build(), SeverityLevel.SUGGESTION));
    diff3.applyDifferences(sourceFile);
    assertThat(sourceFile.getLines()).containsExactly("package foo.bar;", "import com.foo.Bar;", "", "class Foo {", "  public static void main(String[] args) {", "    System.out.println(\"baz\");", "  }", "}").inOrder();
}||||||||@Test
public void overlappingDiffs_throws() {
    DescriptionBasedDiff diff = createDescriptionBasedDiff();
    assertThrows(IllegalArgumentException.class, () -> diff.onDescribed(new Description(null, "message", SuggestedFix.builder().replace(137, 140, "baz").replace(137, 140, "bar").build(), SeverityLevel.SUGGESTION)));
    DescriptionBasedDiff diff2 = createDescriptionBasedDiff();
    diff2.onDescribed(new Description(null, "bah", SuggestedFix.builder().replace(137, 140, "baz").build(), SeverityLevel.SUGGESTION));
    assertThrows(IllegalArgumentException.class, () -> diff2.onDescribed(new Description(null, "message", SuggestedFix.builder().replace(137, 140, "bar").build(), SeverityLevel.SUGGESTION)));
    DescriptionBasedDiff diff3 = DescriptionBasedDiff.createIgnoringOverlaps(compilationUnit, ImportOrganizer.STATIC_FIRST_ORGANIZER);
    diff3.onDescribed(new Description(null, "bah", SuggestedFix.builder().replace(137, 140, "baz").build(), SeverityLevel.SUGGESTION));
    // No throw, since it's lenient. Refactors to the first "baz" replacement and ignores this.
    diff3.onDescribed(new Description(null, "message", SuggestedFix.builder().replace(137, 140, "bar").build(), SeverityLevel.SUGGESTION));
    diff3.applyDifferences(sourceFile);
    assertThat(sourceFile.getLines()).containsExactly("package foo.bar;", "import org.bar.Baz;", "import com.foo.Bar;", "", "class Foo {", "  public static void main(String[] args) {", "    System.out.println(\"baz\");", "  }", "}").inOrder();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							(ObjectCreationExpr
								NullLiteralExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										(IntegerLiteralExpr
										)
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											(IntegerLiteralExpr
											)
											(IntegerLiteralExpr
											)
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NullLiteralExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							(ObjectCreationExpr
								NullLiteralExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										(IntegerLiteralExpr
										)
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NullLiteralExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NullLiteralExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							(ObjectCreationExpr
								NullLiteralExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										(IntegerLiteralExpr
										)
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											(IntegerLiteralExpr
											)
											(IntegerLiteralExpr
											)
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NullLiteralExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							(ObjectCreationExpr
								NullLiteralExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										(IntegerLiteralExpr
										)
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NullLiteralExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NullLiteralExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

