private static synchronized boolean checkSystemFolders() {
    String configPath = PathManager.getConfigPath();
    PathManager.ensureConfigFolderExists();
    if (!new File(configPath).isDirectory()) {
        String message = "Config path '" + configPath + "' is invalid.\n" + "If you have modified the '" + PathManager.PROPERTY_CONFIG_PATH + "' property please make sure it is correct,\n" + "otherwise please re-install the IDE.";
        Main.showMessage("Invalid Config Path", message, true);
        return false;
    }
    String systemPath = PathManager.getSystemPath();
    if (!new File(systemPath).isDirectory()) {
        String message = "System path '" + systemPath + "' is invalid.\n" + "If you have modified the '" + PathManager.PROPERTY_SYSTEM_PATH + "' property please make sure it is correct,\n" + "otherwise please re-install the IDE.";
        Main.showMessage("Invalid System Path", message, true);
        return false;
    }
    boolean tempAccessible = false;
    File ideTempDir = new File(PathManager.getTempPath());
    if (ideTempDir.isDirectory() || ideTempDir.mkdirs()) {
        File ideTempFile = new File(ideTempDir, "idea_tmp_check.sh");
        try {
            FileUtil.writeToFile(ideTempFile, "#!/bin/sh\nexit 0");
            boolean tempExecutable = !SystemInfo.isUnix || SystemInfo.isMac;
            if (!tempExecutable) {
                tempExecutable = ideTempFile.setExecutable(true, true) && ideTempDir.canExecute() && new ProcessBuilder(ideTempFile.getAbsolutePath()).start().waitFor() == 0;
            }
            if (!FileUtilRt.delete(ideTempFile)) {
                ideTempFile.deleteOnExit();
            }
            tempAccessible = tempExecutable;
        } catch (Exception ignored) {
        }
    }
    if (!tempAccessible) {
        String message = "Temp directory '" + ideTempDir + "' is inaccessible.\n" + "If you have modified the '" + PathManager.PROPERTY_SYSTEM_PATH + "' property please make sure it is correct,\n" + "otherwise please re-install the IDE.";
        Main.showMessage("Invalid System Path", message, true);
        return false;
    }
    return true;
}||||||||private static synchronized boolean checkSystemFolders() {
    String configPath = PathManager.getConfigPath();
    PathManager.ensureConfigFolderExists();
    if (!new File(configPath).isDirectory()) {
        String message = "Config path '" + configPath + "' is invalid.\n" + "If you have modified the '" + PathManager.PROPERTY_CONFIG_PATH + "' property please make sure it is correct,\n" + "otherwise please re-install the IDE.";
        Main.showMessage("Invalid Config Path", message, true);
        return false;
    }
    String systemPath = PathManager.getSystemPath();
    if (!new File(systemPath).isDirectory()) {
        String message = "System path '" + systemPath + "' is invalid.\n" + "If you have modified the '" + PathManager.PROPERTY_SYSTEM_PATH + "' property please make sure it is correct,\n" + "otherwise please re-install the IDE.";
        Main.showMessage("Invalid System Path", message, true);
        return false;
    }
    boolean tempAccessible = false;
    File ideTempDir = new File(PathManager.getTempPath());
    if (ideTempDir.isDirectory() || ideTempDir.mkdirs()) {
        File ideTempFile = new File(ideTempDir, "idea_tmp_check.sh");
        try {
            FileUtil.writeToFile(ideTempFile, "#!/bin/sh\nexit 0");
            tempAccessible = (SystemInfo.isWindows || SystemInfo.isMac) || (ideTempFile.setExecutable(true, true) && ideTempDir.canExecute() && new ProcessBuilder(ideTempFile.getAbsolutePath()).start().waitFor() == 0);
            if (!FileUtilRt.delete(ideTempFile)) {
                ideTempFile.deleteOnExit();
            }
        } catch (Exception ignored) {
        }
    }
    if (!tempAccessible) {
        String message = "Temp directory '" + ideTempDir + "' is inaccessible.\n" + "If you have modified the '" + PathManager.PROPERTY_SYSTEM_PATH + "' property please make sure it is correct,\n" + "otherwise please re-install the IDE.";
        Main.showMessage("Invalid System Path", message, true);
        return false;
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BinaryExpr
										(UnaryExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(BinaryExpr
												(MethodCallExpr
													(BooleanLiteralExpr
													)
													(BooleanLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														(ObjectCreationExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(BinaryExpr
												(MethodCallExpr
													(BooleanLiteralExpr
													)
													(BooleanLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														(ObjectCreationExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
)

