public void setLayerMaskArrays(INDArray featuresMaskArray, INDArray labelsMaskArray) {
    if (featuresMaskArray != null) {
        // feedforward layers below a RNN layer: need the input (features) mask array
        // Now, if mask array is 2d -> need to reshape to 1d (column vector) in the exact same order
        // as is done for 3d -> 2d time series reshaping
        INDArray reshapedFeaturesMask = TimeSeriesUtils.reshapeTimeSeriesMaskToVector(featuresMaskArray);
        for (int i = 0; i < layers.length - 1; i++) {
            Type t = layers[i].type();
            if (t == Type.CONVOLUTIONAL || t == Type.FEED_FORWARD) {
                layers[i].setMaskArray(reshapedFeaturesMask);
            } else if (t == Type.RECURRENT)
                break;
        }
    }
    if (labelsMaskArray != null) {
        if (!(layers[layers.length - 1] instanceof BaseOutputLayer))
            return;
        layers[layers.length - 1].setMaskArray(labelsMaskArray);
    }
}||||||||/**
 * Set the mask arrays for features and labels. Mask arrays are typically used in situations such as one-to-many
 * and many-to-one learning with recurrent neural networks, as well as for supporting time series of varying lengths
 * within the same minibatch.<br>
 * For example, with RNN data sets with input of shape [miniBatchSize,nIn,timeSeriesLength] and outputs of shape
 * [miniBatchSize,nOut,timeSeriesLength], the features and mask arrays will have shape [miniBatchSize,timeSeriesLength]
 * and contain values 0 or 1 at each element (to specify whether a given input/example is present - or merely padding -
 * at a given time step).<br>
 * <b>NOTE</b>: This method is not usually used directly. Instead, methods such as {@link #feedForward(INDArray, INDArray, INDArray)}
 * and {@link #output(INDArray, boolean, INDArray, INDArray)} handle setting of masking internally.
 * @param featuresMaskArray Mask array for features (input)
 * @param labelsMaskArray Mask array for labels (output)
 * @see #clearLayerMaskArrays()
 */
public void setLayerMaskArrays(INDArray featuresMaskArray, INDArray labelsMaskArray) {
    if (featuresMaskArray != null) {
        // feedforward layers below a RNN layer: need the input (features) mask array
        // Now, if mask array is 2d -> need to reshape to 1d (column vector) in the exact same order
        // as is done for 3d -> 2d time series reshaping
        INDArray reshapedFeaturesMask = TimeSeriesUtils.reshapeTimeSeriesMaskToVector(featuresMaskArray);
        for (int i = 0; i < layers.length - 1; i++) {
            Type t = layers[i].type();
            if (t == Type.CONVOLUTIONAL || t == Type.FEED_FORWARD) {
                layers[i].setMaskArray(reshapedFeaturesMask);
            } else if (t == Type.RECURRENT)
                break;
        }
    }
    if (labelsMaskArray != null) {
        if (!(layers[layers.length - 1] instanceof BaseOutputLayer))
            return;
        layers[layers.length - 1].setMaskArray(labelsMaskArray);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(EnclosedExpr
							(InstanceOfExpr
								(ArrayAccessExpr
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ReturnStmt
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(ArrayAccessExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(EnclosedExpr
							(InstanceOfExpr
								(ArrayAccessExpr
									(BinaryExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
									)
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ReturnStmt
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(ArrayAccessExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

