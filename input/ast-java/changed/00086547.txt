private boolean isResultKey() {
    if (layout.compare(mutableKey, fromInclusive) < 0) {
        // too far to the left possibly because page reuse
        concurrentWriteHappened = true;
        return false;
    } else if (!first && layout.compare(prevKey, mutableKey) >= 0) {
        // This is outlined in InternalTreeLogic, skip this value (it's fine)
        return false;
    }
    // A hit, it's within the range we search for
    if (first) {
        // Setting first to false include an additional check for coming potential
        // hits so that we cannot go backwards in our result. Going backwards can
        // happen when reading through concurrent splits or similar and is a benign
        // temporary observed state.
        first = false;
    }
    return true;
}||||||||private boolean isResultKey() {
    if (!insideStartRange()) {
        // Key is outside start range, possibly because page reuse
        concurrentWriteHappened = true;
        return false;
    } else if (!first && !insidePrevKey()) {
        // This is outlined in InternalTreeLogic, skip this value (it's fine)
        return false;
    }
    // A hit, it's within the range we search for
    if (first) {
        // Setting first to false include an additional check for coming potential
        // hits so that we cannot go backwards in our result. Going backwards can
        // happen when reading through concurrent splits or similar and is a benign
        // temporary observed state.
        first = false;
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(IfStmt
				(BinaryExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(BooleanLiteralExpr
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
					LineComment
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(BooleanLiteralExpr
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
					LineComment
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
)

