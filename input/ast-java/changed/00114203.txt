/**
 * Return a tokenizer which might be suitable for tokenizing text that
 * will be used with this Treebank/Language pair, without tokenizing carriage returns (i.e., treating them as white space).  The implementation in AbstractTreebankLanguagePack
 * returns a factory for {@link WhitespaceTokenizer}.
 *
 * @return A tokenizer
 */
@Override
public TokenizerFactory<? extends HasWord> getTokenizerFactory() {
    return WhitespaceTokenizer.factory(false);
}||||||||/**
 * Return a tokenizer which might be suitable for tokenizing text that
 * will be used with this Treebank/Language pair, without tokenizing carriage returns (i.e., treating them as white space).  The implementation in AbstractTreebankLanguagePack
 * returns a factory for {@link WhitespaceTokenizer}.
 *
 * @return A tokenizer
 */
public TokenizerFactory<? extends HasWord> getTokenizerFactory() {
    return WhitespaceTokenizer.factory(false);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(JavadocComment
	)
)

