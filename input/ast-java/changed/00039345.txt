/**
 * <p>Modifies the bitmap to have a specified width, height, and {@link
 * Config}, without affecting the underlying allocation backing the bitmap.
 * Bitmap pixel data is not re-initialized for the new configuration.</p>
 *
 * <p>This method can be used to avoid allocating a new bitmap, instead
 * reusing an existing bitmap's allocation for a new configuration of equal
 * or lesser size. If the Bitmap's allocation isn't large enough to support
 * the new configuration, an IllegalArgumentException will be thrown and the
 * bitmap will not be modified.</p>
 *
 * <p>The result of {@link #getByteCount()} will reflect the new configuration,
 * while {@link #getAllocationByteCount()} will reflect that of the initial
 * configuration.</p>
 *
 * <p>Note: This may change this result of hasAlpha(). When converting to 565,
 * the new bitmap will always be considered opaque. When converting from 565,
 * the new bitmap will be considered non-opaque, and will respect the value
 * set by setPremultiplied().</p>
 *
 * <p>WARNING: This method should NOT be called on a bitmap currently in use
 * by the view system, Canvas, or the AndroidBitmap NDK API. It does not
 * make guarantees about how the underlying pixel buffer is remapped to the
 * new config, just that the allocation is reused. Additionally, the view
 * system does not account for bitmap properties being modifying during use,
 * e.g. while attached to drawables.</p>
 *
 * <p>In order to safely ensure that a Bitmap is no longer in use by the
 * View system it is necessary to wait for a draw pass to occur after
 * invalidate()'ing any view that had previously drawn the Bitmap in the last
 * draw pass due to hardware acceleration's caching of draw commands. As
 * an example, here is how this can be done for an ImageView:
 * <pre class="prettyprint">
 * ImageView myImageView = ...;
 * final Bitmap myBitmap = ...;
 * myImageView.setImageDrawable(null);
 * myImageView.post(new Runnable() {
 * public void run() {
 * // myBitmap is now no longer in use by the ImageView
 * // and can be safely reconfigured.
 * myBitmap.reconfigure(...);
 * }
 * });
 * </pre></p>
 *
 * @see #setWidth(int)
 * @see #setHeight(int)
 * @see #setConfig(Config)
 */
public void reconfigure(int width, int height, Config config) {
    checkRecycled("Can't call reconfigure() on a recycled bitmap");
    if (width <= 0 || height <= 0) {
        throw new IllegalArgumentException("width and height must be > 0");
    }
    if (!isMutable()) {
        throw new IllegalStateException("only mutable bitmaps may be reconfigured");
    }
    if (mBuffer == null) {
        throw new IllegalStateException("native-backed bitmaps may not be reconfigured");
    }
    nativeReconfigure(mNativePtr, width, height, config.nativeInt, mBuffer.length, mRequestPremultiplied);
    mWidth = width;
    mHeight = height;
}||||||||/**
 * <p>Modifies the bitmap to have a specified width, height, and {@link
 * Config}, without affecting the underlying allocation backing the bitmap.
 * Bitmap pixel data is not re-initialized for the new configuration.</p>
 *
 * <p>This method can be used to avoid allocating a new bitmap, instead
 * reusing an existing bitmap's allocation for a new configuration of equal
 * or lesser size. If the Bitmap's allocation isn't large enough to support
 * the new configuration, an IllegalArgumentException will be thrown and the
 * bitmap will not be modified.</p>
 *
 * <p>The result of {@link #getByteCount()} will reflect the new configuration,
 * while {@link #getAllocationByteCount()} will reflect that of the initial
 * configuration.</p>
 *
 * <p>Note: This may change this result of hasAlpha(). When converting to 565,
 * the new bitmap will always be considered opaque. When converting from 565,
 * the new bitmap will be considered non-opaque, and will respect the value
 * set by setPremultiplied().</p>
 *
 * <p>WARNING: This method should NOT be called on a bitmap currently in use
 * by the view system, Canvas, or the AndroidBitmap NDK API. It does not
 * make guarantees about how the underlying pixel buffer is remapped to the
 * new config, just that the allocation is reused. Additionally, the view
 * system does not account for bitmap properties being modifying during use,
 * e.g. while attached to drawables.</p>
 *
 * <p>In order to safely ensure that a Bitmap is no longer in use by the
 * View system it is necessary to wait for a draw pass to occur after
 * invalidate()'ing any view that had previously drawn the Bitmap in the last
 * draw pass due to hardware acceleration's caching of draw commands. As
 * an example, here is how this can be done for an ImageView:
 * <pre class="prettyprint">
 * ImageView myImageView = ...;
 * final Bitmap myBitmap = ...;
 * myImageView.setImageDrawable(null);
 * myImageView.post(new Runnable() {
 * public void run() {
 * // myBitmap is now no longer in use by the ImageView
 * // and can be safely reconfigured.
 * myBitmap.reconfigure(...);
 * }
 * });
 * </pre></p>
 *
 * @see #setWidth(int)
 * @see #setHeight(int)
 * @see #setConfig(Config)
 */
public void reconfigure(int width, int height, Config config) {
    checkRecycled("Can't call reconfigure() on a recycled bitmap");
    if (width <= 0 || height <= 0) {
        throw new IllegalArgumentException("width and height must be > 0");
    }
    if (!isMutable()) {
        throw new IllegalStateException("only mutable bitmaps may be reconfigured");
    }
    nativeReconfigure(mNativePtr, width, height, config.nativeInt, mRequestPremultiplied);
    mWidth = width;
    mHeight = height;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

