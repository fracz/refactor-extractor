// Activity lifecycle
@Override
public void onResume() {
    checkIsBot();
    super.onResume();
    emojiKeyboard.setPeer(peer);
    voiceRecordActor = ActorSystem.system().actorOf(Props.create(new ActorCreator() {

        @Override
        public VoiceCaptureActor create() {
            return new VoiceCaptureActor(ChatActivity.this, new VoiceCaptureActor.VoiceCaptureCallback() {

                @Override
                public void onRecordProgress(final long time) {
                    runOnUiThread(new Runnable() {

                        @Override
                        public void run() {
                            audioTimer.setText(messenger().getFormatter().formatDuration((int) (time / 1000)));
                        }
                    });
                }

                @Override
                public void onRecordCrash() {
                    runOnUiThread(new Runnable() {

                        @Override
                        public void run() {
                            hideAudio(true);
                        }
                    });
                }

                @Override
                public void onRecordStop(long progress) {
                    if (progress < 1200) {
                    // Cancel
                    } else {
                        messenger().sendVoice(peer, (int) progress, audioFile);
                    }
                }
            });
        }
    }).changeDispatcher("voice_capture_dispatcher"), "actor/voice_capture");
    // Force keyboard open if activity started with Compose flag
    if (isCompose) {
        messageEditText.requestFocus();
        keyboardUtils.setImeVisibility(messageEditText, true);
    }
    isCompose = false;
    // Loading drafts
    isTypingDisabled = true;
    String text = messenger().loadDraft(peer);
    if (text != null) {
        // Using only links parsing to avoid non-mentions formatting
        Spannable spantext = AndroidMarkdown.processOnlyLinks(text);
        spantext = emoji().processEmojiCompatMutable(spantext, SmileProcessor.CONFIGURATION_BUBBLES);
        messageEditText.setText(spantext);
    } else {
        messageEditText.setText("");
    }
    messageEditText.setSelection(messageEditText.getText().length());
    isTypingDisabled = false;
    if (sendText != null && !sendText.isEmpty()) {
        messageEditText.setText(sendText);
        sendText = "";
    }
    if (forwardTextRaw != null && !forwardTextRaw.isEmpty()) {
        addQuote(forwardText, forwardTextRaw);
        forwardText = "";
        forwardTextRaw = "";
    }
    if (forwardContent != null) {
        messenger().forwardContent(peer, forwardContent);
        forwardContent = null;
    }
    if (isBot) {
        emptyBotSend.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
        TextView emptyBotSendText = (TextView) emptyBotSend.findViewById(R.id.empty_bot_text);
        emptyBotSendText.setTextColor(ActorSDK.sharedActor().style.getMainColor());
        emptyBotSendText.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                messenger().sendMessage(peer, "/start");
            }
        });
        checkEmptyBot();
    }
    if (isShareVisible) {
        messenger().getGalleryScannerActor().send(new GalleryScannerActor.Show());
    }
}||||||||// Activity lifecycle
@Override
public void onResume() {
    super.onResume();
// if (forwardTextRaw != null && !forwardTextRaw.isEmpty()) {
// addQuote(forwardText, forwardTextRaw);
// forwardText = "";
// forwardTextRaw = "";
// }
// if (isBot) {
// emptyBotSend.setBackgroundColor(ActorSDK.sharedActor().style.getMainBackgroundColor());
// TextView emptyBotSendText = (TextView) emptyBotSend.findViewById(R.id.empty_bot_text);
// emptyBotSendText.setTextColor(ActorSDK.sharedActor().style.getMainColor());
// 
// emptyBotSendText.setOnClickListener(v -> messenger().sendMessage(peer, "/start"));
// 
// checkEmptyBot();
// }
// if (isShareVisible) {
// messenger().getGalleryScannerActor().send(new GalleryScannerActor.Show());
// }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(ReturnStmt
											(ObjectCreationExpr
												(ThisExpr
													NameExpr
														SimpleName
												)
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	(ObjectCreationExpr
																		(MethodDeclaration
																			(BlockStmt
																				(ExpressionStmt
																					(MethodCallExpr
																						(MethodCallExpr
																							(CastExpr
																								(EnclosedExpr
																									(BinaryExpr
																										NameExpr
																											SimpleName
																										(IntegerLiteralExpr
																										)
																									)
																								)
																								(PrimitiveType
																								)
																							)
																							SimpleName
																							(MethodCallExpr
																								SimpleName
																								(MethodCallExpr
																									SimpleName
																								)
																							)
																						)
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																				)
																			)
																			(VoidType
																			)
																			SimpleName
																			(MarkerAnnotationExpr
																				Name
																			)
																		)
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																	SimpleName
																)
															)
														)
														(VoidType
														)
														SimpleName
														(Parameter
															SimpleName
															(PrimitiveType
															)
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													(MethodDeclaration
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	(ObjectCreationExpr
																		(MethodDeclaration
																			(BlockStmt
																				(ExpressionStmt
																					(MethodCallExpr
																						(BooleanLiteralExpr
																						)
																						SimpleName
																					)
																				)
																			)
																			(VoidType
																			)
																			SimpleName
																			(MarkerAnnotationExpr
																				Name
																			)
																		)
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																	SimpleName
																)
															)
														)
														(VoidType
														)
														SimpleName
														(MarkerAnnotationExpr
															Name
														)
													)
													(MethodDeclaration
														(BlockStmt
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			(CastExpr
																				NameExpr
																					SimpleName
																				(PrimitiveType
																				)
																			)
																			NameExpr
																				SimpleName
																			SimpleName
																			(MethodCallExpr
																				SimpleName
																			)
																		)
																	)
																)
																(BlockStmt
																)
															)
														)
														(VoidType
														)
														SimpleName
														(Parameter
															SimpleName
															(PrimitiveType
															)
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

