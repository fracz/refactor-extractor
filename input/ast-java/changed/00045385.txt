/**
 * submits flush sort on the flushSorter executor, which will in turn submit to flushWriter when sorted.
 * TODO because our executors use CallerRunsPolicy, when flushSorter fills up, no writes will proceed
 * because the next flush will start executing on the caller, mutation-stage thread that has the
 * flush write lock held.  (writes aquire this as a read lock before proceeding.)
 * This is good, because it backpressures flushes, but bad, because we can't write until that last
 * flushing thread finishes sorting, which will almost always be longer than any of the flushSorter threads proper
 * (since, by definition, it started last).
 */
Condition submitFlush(final IFlushable flushable) {
    logger_.info("Enqueuing flush of " + flushable);
    if (flushable instanceof Memtable) {
        // special-casing Memtable here is a bit messy, but it's best to keep the flush-related happenings in one place
        // since they're a little complicated.  (We dont' want to move the remove back to switchMemtable, which is
        // the other sane option, since that could mean keeping a flushed memtable in the Historical set unnecessarily
        // while earlier flushes finish.)
        // it's ok for the MT to briefly be both active and pendingFlush
        getMemtablesPendingFlushNotNull(columnFamily_).add((Memtable) flushable);
    }
    final Condition condition = new SimpleCondition();
    flushSorter_.submit(new Runnable() {

        public void run() {
            final List sortedKeys = flushable.getSortedKeys();
            flushWriter_.submit(new WrappedRunnable() {

                public void runMayThrow() throws IOException {
                    addSSTable(flushable.writeSortedContents(sortedKeys));
                    if (flushable instanceof Memtable) {
                        getMemtablesPendingFlushNotNull(columnFamily_).remove(flushable);
                    }
                    condition.signalAll();
                }
            });
        }
    });
    return condition;
}||||||||/**
 * submits flush sort on the flushSorter executor, which will in turn submit to flushWriter when sorted.
 * TODO because our executors use CallerRunsPolicy, when flushSorter fills up, no writes will proceed
 * because the next flush will start executing on the caller, mutation-stage thread that has the
 * flush write lock held.  (writes aquire this as a read lock before proceeding.)
 * This is good, because it backpressures flushes, but bad, because we can't write until that last
 * flushing thread finishes sorting, which will almost always be longer than any of the flushSorter threads proper
 * (since, by definition, it started last).
 */
Condition submitFlush(final IFlushable flushable) {
    logger_.info("Enqueuing flush of " + flushable);
    final Condition condition = new SimpleCondition();
    flushable.flushAndSignal(condition, flushSorter_, flushWriter_);
    return condition;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(ObjectCreationExpr
										(MethodDeclaration
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
												(IfStmt
													(InstanceOfExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																)
															)
														)
													)
												)
												(ExpressionStmt
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(VoidType
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

