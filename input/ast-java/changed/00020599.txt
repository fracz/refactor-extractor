/**
 * Shows notification that not all conflicts were resolved.
 * @param roots Roots that were merged.
 */
protected void notifyUnresolvedRemain(Collection<VirtualFile> roots) {
    GitVcs.IMPORTANT_ERROR_NOTIFICATION.createNotification(myErrorNotificationTitle, "You have to <a href='resolve'>resolve</a> all conflicts first." + myErrorNotificationAdditionalDescription, NotificationType.WARNING, new ResolveNotificationListener(roots)).notify(myProject);
}||||||||/**
 * Shows notification that not all conflicts were resolved.
 * @param roots Roots that were merged.
 */
protected void notifyUnresolvedRemain() {
    notifyWarning(myParams.myErrorNotificationTitle, "You have to <a href='resolve'>resolve</a> all conflicts first." + myParams.myErrorNotificationAdditionalDescription);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

