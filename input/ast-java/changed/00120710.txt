public void setPackage(String annotationPackage) {
    this.annotationPackage = annotationPackage;
    this.annotationPackages = (annotationPackage == null || annotationPackage.length() == 0) ? null : COMMA_SPLIT_PATTERN.split(annotationPackage);
}||||||||public void setPackage(String annotationPackage) {
    this.annotationPackage = annotationPackage;
    this.annotationPackages = (annotationPackage == null || annotationPackage.length() == 0) ? null : annotationPackage.split(SpringBeanUtil.COMMA_SPLIT_PATTERN);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(ConditionalExpr
					(EnclosedExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(ConditionalExpr
					(EnclosedExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

