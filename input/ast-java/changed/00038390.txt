/**
 * Moves an activity, and all of the other activities within the same task, to the bottom
 * of the history stack.  The activity's order within the task is unchanged.
 *
 * @param token A reference to the activity we wish to move
 * @param nonRoot If false then this only works if the activity is the root
 * of a task; if true it will work for any activity in a task.
 * @return Returns true if the move completed, false if not.
 */
@Override
public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot) {
    enforceNotIsolatedCaller("moveActivityTaskToBack");
    synchronized (this) {
        final long origId = Binder.clearCallingIdentity();
        try {
            int taskId = ActivityRecord.getTaskForActivityLocked(token, !nonRoot);
            if (taskId >= 0) {
                if ((mStackSupervisor.mLockTaskModeTask != null) && (mStackSupervisor.mLockTaskModeTask.taskId == taskId)) {
                    mStackSupervisor.showLockTaskToast();
                    return false;
                }
                return ActivityRecord.getStackLocked(token).moveTaskToBackLocked(taskId, null);
            }
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }
    return false;
}||||||||/**
 * Moves an activity, and all of the other activities within the same task, to the bottom
 * of the history stack.  The activity's order within the task is unchanged.
 *
 * @param token A reference to the activity we wish to move
 * @param nonRoot If false then this only works if the activity is the root
 * of a task; if true it will work for any activity in a task.
 * @return Returns true if the move completed, false if not.
 */
@Override
public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot) {
    enforceNotIsolatedCaller("moveActivityTaskToBack");
    synchronized (this) {
        final long origId = Binder.clearCallingIdentity();
        try {
            int taskId = ActivityRecord.getTaskForActivityLocked(token, !nonRoot);
            if (taskId >= 0) {
                if ((mStackSupervisor.mLockTaskModeTask != null) && (mStackSupervisor.mLockTaskModeTask.taskId == taskId)) {
                    mStackSupervisor.showLockTaskToast();
                    return false;
                }
                return ActivityRecord.getStackLocked(token).moveTaskToBackLocked(taskId);
            }
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(TryStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(UnaryExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(EnclosedExpr
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												NullLiteralExpr
											)
										)
										(EnclosedExpr
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ReturnStmt
											(BooleanLiteralExpr
											)
										)
									)
								)
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NullLiteralExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			(ThisExpr
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(TryStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(UnaryExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(EnclosedExpr
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												NullLiteralExpr
											)
										)
										(EnclosedExpr
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ReturnStmt
											(BooleanLiteralExpr
											)
										)
									)
								)
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			(ThisExpr
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

