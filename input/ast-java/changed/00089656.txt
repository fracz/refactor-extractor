@Override
public int hashCode() {
    // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
    // array, which may have different lengths for two maps of same size(), so the
    // capacity cannot be used as input for hashing but the size can.
    int hash = size;
    for (int i = 0; i < keys.length; ++i) {
        // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
        // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
        // or the devastatingly bad memory locality of visiting value objects.
        // Also, it's important to use a hash function that does not depend on the ordering
        // of terms, only their values; since the map is an unordered collection and
        // entries can end up in different positions in different maps that have the same
        // elements, but with different history of puts/removes, due to conflicts.
        hash ^= keys[i];
    }
    return hash;
}||||||||@Override
public int hashCode() {
    // Hashcode is based on all non-zero, valid keys. We have to scan the whole keys
    // array, which may have different lengths for two maps of same size(), so the
    // capacity cannot be used as input for hashing but the size can.
    int hash = size;
    for (int key : keys) {
        // 0 can be a valid key or unused slot, but won't impact the hashcode in either case.
        // This way we can use a cheap loop without conditionals, or hard-to-unroll operations,
        // or the devastatingly bad memory locality of visiting value objects.
        // Also, it's important to use a hash function that does not depend on the ordering
        // of terms, only their values; since the map is an unordered collection and
        // entries can end up in different positions in different maps that have the same
        // elements, but with different history of puts/removes, due to conflicts.
        hash ^= key;
    }
    return hash;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

