/**
 * The transformation for a given value (a scalar ndarray)
 *
 * @param value the value to applyTransformToOrigin (a scalar ndarray)
 * @param i     the index of the element being acted upon
 * @return the transformed value based on the input
 */
@Override
public INDArray apply(INDArray value, int i) {
    return null;
}||||||||/**
 * The transformation for a given value (a scalar ndarray)
 *
 * @param input the value to applyTransformToOrigin (a scalar ndarray)
 * @param i     the index of the element being acted upon
 * @return the transformed value based on the input
 */
@Override
public INDArray apply(INDArray input, int i) {
    if (input instanceof IComplexNDArray) {
        IComplexNumber number = (IComplexNumber) input.element();
        double arg = number.complexArgument().doubleValue();
        double sigArg = 1 / 1 + (Math.exp(-arg)) - 1 + .5;
        double ret = Math.exp(sigArg);
        return NDArrays.scalar(NDArrays.createDouble(ret, 0));
    } else
        return NDArrays.scalar(1 / 1 + Math.exp(-(double) input.element()));
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NullLiteralExpr
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(ReturnStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
						)
						(MethodCallExpr
							(UnaryExpr
								(CastExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(PrimitiveType
									)
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(IntegerLiteralExpr
											)
											(IntegerLiteralExpr
											)
										)
										(EnclosedExpr
											(MethodCallExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(IntegerLiteralExpr
									)
								)
								(DoubleLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ReturnStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

