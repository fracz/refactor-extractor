public void addError(Test test, Throwable t) {
    if (junit4 && t instanceof AssertionFailedError) {
        // JUnit 4 does not distinguish between errors and failures
        // even in the JUnit 3 adapter.
        // So we need to help it a bit to retain compatibility for JUnit 3 tests.
        wrappedListener.addFailure(test, (AssertionFailedError) t);
    } else if (junit4 && t.getClass().getName().equals("java.lang.AssertionError")) {
        // We would prefer to show "failure" for things that logically are.
        try {
            String msg = t.getMessage();
            AssertionFailedError failure = msg != null ? new AssertionFailedError(msg) : new AssertionFailedError();
            // To compile on pre-JDK 4 (even though this should always succeed):
            Method initCause = Throwable.class.getMethod("initCause", new Class[] { Throwable.class });
            initCause.invoke(failure, new Object[] { t });
            wrappedListener.addFailure(test, failure);
        } catch (Exception e) {
            // Rats.
            // should not happen
            e.printStackTrace();
            wrappedListener.addError(test, t);
        }
    } else {
        wrappedListener.addError(test, t);
    }
}||||||||public void addError(Test test, Throwable t) {
    if (JUnit4Detecter.isJUnit4Available() && t instanceof AssertionFailedError) {
        // JUnit 4 does not distinguish between errors and failures
        // even in the JUnit 3 adapter.
        // So we need to help it a bit to retain compatibility for JUnit 3 tests.
        wrappedListener.addFailure(test, (AssertionFailedError) t);
    } else if (JUnit4Detecter.isJUnit4Available() && t.getClass().getName().equals("java.lang.AssertionError")) {
        // We would prefer to show "failure" for things that logically are.
        try {
            String msg = t.getMessage();
            AssertionFailedError failure = msg != null ? new AssertionFailedError(msg) : new AssertionFailedError();
            // To compile on pre-JDK 4 (even though this should always succeed):
            Method initCause = Throwable.class.getMethod("initCause", new Class[] { Throwable.class });
            initCause.invoke(failure, new Object[] { t });
            wrappedListener.addFailure(test, failure);
        } catch (Exception e) {
            // Rats.
            // should not happen
            e.printStackTrace();
            wrappedListener.addError(test, t);
        }
    } else {
        wrappedListener.addError(test, t);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(ObjectCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											(ObjectCreationExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											StringLiteralExpr
											(ArrayCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
												(ArrayInitializerExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(ArrayCreationLevel
												)
											)
											SimpleName
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
										(ArrayInitializerExpr
											NameExpr
												SimpleName
										)
										(ArrayCreationLevel
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(IfStmt
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(ObjectCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											(ObjectCreationExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											StringLiteralExpr
											(ArrayCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
												(ArrayInitializerExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(ArrayCreationLevel
												)
											)
											SimpleName
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(ArrayCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
										(ArrayInitializerExpr
											NameExpr
												SimpleName
										)
										(ArrayCreationLevel
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(CastExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

