/**
 * Does real work to generate project
 */
protected abstract void configureProject(@NotNull final Project project, @NotNull final VirtualFile baseDir, @Nullable final T settings, @NotNull final Module module);||||||||/**
 * Does real work to generate project.
 * Parent class does its best to handle remote interpreters.
 * Inheritors should only create project.
 * To support remote project creation, be sure to use {@link PyProjectSynchronizer}.
 * <br/>
 * When overwriting this method, <strong>be sure</strong> to call super() or call
 * {@link PyProjectSynchronizer#syncProject(Module, PySyncDirection, Consumer)}  at least once: automatic sync works only after it.
 *
 * @param synchronizer null if project is local and no sync required.
 * Otherwise, be sure to use it move code between local (java) and remote (python) side.
 * Remote interpreters can't be used with out of it. Contract is following:
 * <ol>
 * <li>Create some code on python (remote) side using helpers</li>
 * <li>call {@link PyProjectSynchronizer#syncProject(Module, PySyncDirection, Consumer)}</li>
 * <li>Change locally</li>
 * <li>call {@link PyProjectSynchronizer#syncProject(Module, PySyncDirection, Consumer)} again in opposite direction</li>
 * </ol>
 */
protected void configureProject(@NotNull final Project project, @NotNull final VirtualFile baseDir, @NotNull final T settings, @NotNull final Module module, @Nullable final PyProjectSynchronizer synchronizer) {
    // Automatic deployment works only after first sync
    if (synchronizer != null) {
        synchronizer.syncProject(module, PySyncDirection.JAVA_TO_PYTHON, null);
    }
}||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

