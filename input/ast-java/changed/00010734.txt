/**
 * @param steppingEvent true means stopping was caused by a breakpoint or an external signal, and the tool window should be shown.
 * false means stopping was caused by stepping, and the tool window should not be shown.
 */
private void positionReachedInternal(@NotNull final XSuspendContext suspendContext, boolean steppingEvent) {
    enableBreakpoints();
    mySuspendContext = suspendContext;
    myCurrentExecutionStack = suspendContext.getActiveExecutionStack();
    myCurrentStackFrame = myCurrentExecutionStack != null ? myCurrentExecutionStack.getTopFrame() : null;
    myIsTopFrame = true;
    myTopFramePosition = myCurrentStackFrame != null ? myCurrentStackFrame.getSourcePosition() : null;
    myPaused.set(true);
    updateExecutionPosition();
    if (myShowTabOnSuspend.compareAndSet(true, false)) {
        UIUtil.invokeLaterIfNeeded(() -> {
            initSessionTab(null);
            showSessionTab();
        });
    }
    myDispatcher.getMulticaster().sessionPaused();
    // and should not be made when user steps in the code
    if (!steppingEvent) {
        UIUtil.invokeLaterIfNeeded(() -> {
            if (mySessionTab != null) {
                if (XDebuggerSettingManagerImpl.getInstanceImpl().getGeneralSettings().isShowDebuggerOnBreakpoint()) {
                    mySessionTab.toFront(true, this::updateExecutionPosition);
                }
                if (myTopFramePosition == null) {
                    // if there is no source position available, we should somehow tell the user that session is stopped.
                    // the best way is to show the stack frames.
                    XDebugSessionTab.showFramesView(this);
                }
                mySessionTab.getUi().attractBy(XDebuggerUIConstants.LAYOUT_VIEW_BREAKPOINT_CONDITION);
            }
        });
    }
}||||||||private void positionReachedInternal(@NotNull final XSuspendContext suspendContext, @NotNull XPauseReason reason) {
    enableBreakpoints();
    mySuspendContext = suspendContext;
    myCurrentExecutionStack = suspendContext.getActiveExecutionStack();
    myCurrentStackFrame = myCurrentExecutionStack != null ? myCurrentExecutionStack.getTopFrame() : null;
    myIsTopFrame = true;
    myTopFramePosition = myCurrentStackFrame != null ? myCurrentStackFrame.getSourcePosition() : null;
    myPaused.set(true);
    updateExecutionPosition();
    if (myShowTabOnSuspend.compareAndSet(true, false)) {
        UIUtil.invokeLaterIfNeeded(() -> {
            initSessionTab(null);
            showSessionTab();
        });
    }
    myDispatcher.getMulticaster().sessionPaused();
    // and should not be made when user steps in the code
    if (reason != XPauseReason.STEPPING) {
        UIUtil.invokeLaterIfNeeded(() -> {
            if (mySessionTab != null) {
                if (XDebuggerSettingManagerImpl.getInstanceImpl().getGeneralSettings().isShowDebuggerOnBreakpoint()) {
                    mySessionTab.toFront(true, this::updateExecutionPosition);
                }
                if (myTopFramePosition == null) {
                    // if there is no source position available, we should somehow tell the user that session is stopped.
                    // the best way is to show the stack frames.
                    XDebugSessionTab.showFramesView(this);
                }
                mySessionTab.getUi().attractBy(XDebuggerUIConstants.LAYOUT_VIEW_BREAKPOINT_CONDITION);
            }
        });
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ConditionalExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					NullLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ConditionalExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					NullLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(LambdaExpr
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NullLiteralExpr
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(LambdaExpr
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(IfStmt
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(BooleanLiteralExpr
														)
														(MethodReferenceExpr
															(ThisExpr
															)
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(ThisExpr
														)
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ConditionalExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					NullLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ConditionalExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					NullLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(LambdaExpr
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NullLiteralExpr
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(LambdaExpr
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(IfStmt
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(BooleanLiteralExpr
														)
														(MethodReferenceExpr
															(ThisExpr
															)
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(ThisExpr
														)
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

