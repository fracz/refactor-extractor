/**
 * Transfer the native state from 'other' to this surface, releasing it
 * from 'other'.  This is for use in the client side for drawing into a
 * surface; not guaranteed to work on the window manager side.
 * This is for use by the client to move the underlying surface from
 * one Surface object to another, in particular in SurfaceFlinger.
 * @hide.
 */
public void transferFrom(Surface other) {
    if (other == null) {
        throw new IllegalArgumentException("other must not be null");
    }
    if (other != this) {
        if (mNativeObject != 0) {
            // release our reference to our native object
            nativeRelease(mNativeObject);
        }
        // transfer the reference from other to us
        mNativeObject = other.mNativeObject;
        other.mNativeObject = 0;
    }
}||||||||/**
 * Transfer the native state from 'other' to this surface, releasing it
 * from 'other'.  This is for use in the client side for drawing into a
 * surface; not guaranteed to work on the window manager side.
 * This is for use by the client to move the underlying surface from
 * one Surface object to another, in particular in SurfaceFlinger.
 * @hide.
 */
public void transferFrom(Surface other) {
    if (other == null) {
        throw new IllegalArgumentException("other must not be null");
    }
    if (other != this) {
        if (mNativeObject != 0) {
            // release our reference to our native object
            nativeRelease(mNativeObject);
        }
        // transfer the reference from other to us
        mNativeObject = other.mNativeObject;
        mGenerationId++;
        other.mNativeObject = 0;
        other.mGenerationId++;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(ThisExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(ThisExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(UnaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

