/**
 * Apply the change to the graph (mostly) atomically and signal all nodes that are waiting for
 * this node to complete. Adding nodes and signaling is not atomic, but may need to be changed
 * for interruptibility.
 *
 * <p>Parents are only enqueued if {@code enqueueParents} holds. Parents should be enqueued
 * unless (1) this node is being built after the main evaluation has aborted, or (2) this node
 * is being built with --nokeep_going, and so we are about to shut down the main evaluation
 * anyway.
 *
 * <p>The node entry is informed if the node's value and error are definitive via the flag
 * {@code completeValue}.
 */
void commit(NodeEntry primaryEntry, boolean enqueueParents) {
    // Construct the definitive error info, if there is one.
    finalizeErrorInfo();
    // We have the following implications:
    // errorInfo == null => value != null => enqueueParents.
    // All these implications are strict:
    // (1) errorInfo != null && value != null happens for values with recoverable errors.
    // (2) value == null && enqueueParents happens for values that are found to have errors
    // during a --keep_going build.
    NestedSet<TaggedEvents> events = buildEvents(primaryEntry, /*missingChildren=*/
    false);
    Version valueVersion;
    SkyValue valueWithMetadata;
    if (value == null) {
        Preconditions.checkNotNull(errorInfo, "%s %s", skyKey, primaryEntry);
        valueWithMetadata = ValueWithMetadata.error(errorInfo, events);
    } else {
        // We must be enqueueing parents if we have a value.
        Preconditions.checkState(enqueueParents, "%s %s", skyKey, primaryEntry);
        valueWithMetadata = ValueWithMetadata.normal(value, errorInfo, events);
    }
    if (!oldDeps.isEmpty()) {
        // Remove the rdep on this entry for each of its old deps that is no longer a direct dep.
        Set<SkyKey> depsToRemove = Sets.difference(oldDeps, primaryEntry.getTemporaryDirectDeps().toSet());
        Collection<NodeEntry> oldDepEntries = graph.getBatchWithFieldHints(skyKey, Reason.RDEP_REMOVAL, depsToRemove, EnumSet.of(NodeEntryField.INDIVIDUAL_REVERSE_DEPS)).values();
        for (NodeEntry oldDepEntry : oldDepEntries) {
            oldDepEntry.removeReverseDep(skyKey);
        }
    }
    // If this entry is dirty, setValue may not actually change it, if it determines that
    // the data being written now is the same as the data already present in the entry.
    // We could consider using max(childVersions) here instead of graphVersion. When full
    // versioning is implemented, this would allow evaluation at a version between
    // max(childVersions) and graphVersion to re-use this result.
    Set<SkyKey> reverseDeps = primaryEntry.setValue(valueWithMetadata, graphVersion);
    // Note that if this update didn't actually change the value entry, this version may not
    // be the graph version.
    valueVersion = primaryEntry.getVersion();
    Preconditions.checkState(valueVersion.atMost(graphVersion), "%s should be at most %s in the version partial ordering", valueVersion, graphVersion);
    if (progressReceiver != null) {
        // Tell the receiver that this value was built. If valueVersion.equals(graphVersion), it
        // was evaluated this run, and so was changed. Otherwise, it is less than graphVersion,
        // by the Preconditions check above, and was not actually changed this run -- when it was
        // written above, its version stayed below this update's version, so its value remains the
        // same as before.
        // We use a SkyValueSupplier here because it keeps a reference to the entry, allowing for
        // the receiver to be confident that the entry is readily accessible in memory.
        progressReceiver.evaluated(skyKey, new SkyValueSupplier(primaryEntry), valueVersion.equals(graphVersion) ? EvaluationState.BUILT : EvaluationState.CLEAN);
    }
    signalValuesAndEnqueueIfReady(enqueueParents ? visitor : null, skyKey, reverseDeps, valueVersion);
    visitor.notifyDone(skyKey);
    replayingNestedSetEventVisitor.visit(events);
}||||||||/**
 * Apply the change to the graph (mostly) atomically and signal all nodes that are waiting for
 * this node to complete. Adding nodes and signaling is not atomic, but may need to be changed
 * for interruptibility.
 *
 * <p>Parents are only enqueued if {@code enqueueParents} holds. Parents should be enqueued
 * unless (1) this node is being built after the main evaluation has aborted, or (2) this node
 * is being built with --nokeep_going, and so we are about to shut down the main evaluation
 * anyway.
 *
 * <p>The node entry is informed if the node's value and error are definitive via the flag
 * {@code completeValue}.
 */
void commit(NodeEntry primaryEntry, boolean enqueueParents) {
    // Construct the definitive error info, if there is one.
    finalizeErrorInfo();
    // We have the following implications:
    // errorInfo == null => value != null => enqueueParents.
    // All these implications are strict:
    // (1) errorInfo != null && value != null happens for values with recoverable errors.
    // (2) value == null && enqueueParents happens for values that are found to have errors
    // during a --keep_going build.
    NestedSet<TaggedEvents> events = buildEvents(primaryEntry, /*missingChildren=*/
    false);
    Version valueVersion;
    SkyValue valueWithMetadata;
    if (value == null) {
        Preconditions.checkNotNull(errorInfo, "%s %s", skyKey, primaryEntry);
        valueWithMetadata = ValueWithMetadata.error(errorInfo, events);
    } else {
        // We must be enqueueing parents if we have a value.
        Preconditions.checkState(enqueueParents, "%s %s", skyKey, primaryEntry);
        valueWithMetadata = ValueWithMetadata.normal(value, errorInfo, events);
    }
    if (!oldDeps.isEmpty()) {
        // Remove the rdep on this entry for each of its old deps that is no longer a direct dep.
        Set<SkyKey> depsToRemove = Sets.difference(oldDeps, primaryEntry.getTemporaryDirectDeps().toSet());
        Collection<NodeEntry> oldDepEntries = graph.getBatch(skyKey, Reason.RDEP_REMOVAL, depsToRemove).values();
        for (NodeEntry oldDepEntry : oldDepEntries) {
            oldDepEntry.removeReverseDep(skyKey);
        }
    }
    // If this entry is dirty, setValue may not actually change it, if it determines that
    // the data being written now is the same as the data already present in the entry.
    // We could consider using max(childVersions) here instead of graphVersion. When full
    // versioning is implemented, this would allow evaluation at a version between
    // max(childVersions) and graphVersion to re-use this result.
    Set<SkyKey> reverseDeps = primaryEntry.setValue(valueWithMetadata, graphVersion);
    // Note that if this update didn't actually change the value entry, this version may not
    // be the graph version.
    valueVersion = primaryEntry.getVersion();
    Preconditions.checkState(valueVersion.atMost(graphVersion), "%s should be at most %s in the version partial ordering", valueVersion, graphVersion);
    if (progressReceiver != null) {
        // Tell the receiver that this value was built. If valueVersion.equals(graphVersion), it
        // was evaluated this run, and so was changed. Otherwise, it is less than graphVersion,
        // by the Preconditions check above, and was not actually changed this run -- when it was
        // written above, its version stayed below this update's version, so its value remains the
        // same as before.
        // We use a SkyValueSupplier here because it keeps a reference to the entry, allowing for
        // the receiver to be confident that the entry is readily accessible in memory.
        progressReceiver.evaluated(skyKey, new SkyValueSupplier(primaryEntry), valueVersion.equals(graphVersion) ? EvaluationState.BUILT : EvaluationState.CLEAN);
    }
    signalValuesAndEnqueueIfReady(enqueueParents ? visitor : null, skyKey, reverseDeps, valueVersion);
    visitor.notifyDone(skyKey);
    replayingNestedSetEventVisitor.visit(events);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
							(BlockComment
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				StringLiteralExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ConditionalExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					NameExpr
						SimpleName
					NullLiteralExpr
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
							(BlockComment
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				StringLiteralExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ConditionalExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					NameExpr
						SimpleName
					NullLiteralExpr
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

