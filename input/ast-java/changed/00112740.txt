/**
 * Combines this collection of request condition with another. Returns {@code other}, unless it has the default
 * value (i.e. {@code &#42;/&#42;}).
 *
 * @param other the condition to combine with
 */
public ProducesRequestCondition combine(ProducesRequestCondition other) {
    return !other.isEmpty() ? other : this;
}||||||||/**
 * Returns the "other" instance if "other" as long as it contains any expressions; or "this" instance otherwise.
 * In other words "other" takes precedence over "this" as long as it contains any expressions.
 * <p>Example: method-level "produces" overrides type-level "produces" condition.
 */
public ProducesRequestCondition combine(ProducesRequestCondition other) {
    return !other.expressions.isEmpty() ? other : this;
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ConditionalExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ThisExpr
				)
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ConditionalExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ThisExpr
				)
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

