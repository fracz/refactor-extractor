/**
 * Rearranges the RangeEntry objects contained in entries according to rules specified by the user.
 * Inserts comments as directed.
 *
 * @return rearranged list of RangeEntry and CommentRuleInstance objects.
 */
public final List<RuleInstance> rearrangeEntries() {
    final List<RuleInstance> prioritizedRuleInstances = new ArrayList<RuleInstance>();
    buildRuleInstanceLists(prioritizedRuleInstances);
    /**
     * recursively reorder contents of every nested ClassEntry.
     */
    for (ClassContentsEntry entry : entries) {
        if (entry instanceof ClassEntry) {
            ((ClassEntry) entry).rearrangeContents();
        }
    }
    matchPrioritizedRules(prioritizedRuleInstances);
    /**
     * Move related methods together.  Extracted methods and setters (emitted with getters)
     * were not moved by the rearrangement code ("MatchPrioritizedRules()") just above.
     */
    rearrangeRelatedItems(entries, myResultRuleInstances);
    /**
     * Now go back and determine which comments are going to be emitted, based on their criteria and the
     * state of the immediately surrounding rules.  Ignore inner classes if no rearrangement of inner
     * classes is taking place.
     */
    if (nestingLevel <= 1 || settings.isRearrangeInnerClasses()) {
        determineEmittedComments();
    }
    return myResultRuleInstances;
}||||||||/**
 * Rearranges the RangeEntry objects contained in entries according to rules specified by the user.
 * Inserts comments as directed.
 *
 * @return rearranged list of RangeEntry and CommentRuleInstance objects.
 */
public final List<RuleInstance> rearrangeEntries() {
    final List<RuleInstance> prioritizedRuleInstances = new ArrayList<RuleInstance>();
    buildRuleInstanceLists(prioritizedRuleInstances);
    // Recursively reorder contents of every nested ClassEntry
    for (ClassContentsEntry entry : myEntries) {
        if (entry instanceof ClassEntry) {
            ((ClassEntry) entry).rearrangeContents();
        }
    }
    matchPrioritizedRules(prioritizedRuleInstances);
    // Move related methods together.  Extracted methods and setters (emitted with getters)
    // were not moved by the rearrangement code ("MatchPrioritizedRules()") just above.
    rearrangeRelatedItems(myEntries, myResultRuleInstances);
    // classes is taking place.
    if (myNestingLevel <= 1 || mySettings.isRearrangeInnerClasses()) {
        determineEmittedComments();
    }
    return myResultRuleInstances;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(JavadocComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			(JavadocComment
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(JavadocComment
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)

