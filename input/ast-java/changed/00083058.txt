public DefaultParsingResult normalizedSql(String sql) {
    if (sql == null) {
        return NULL;
    }
    DefaultParsingResult parsingResult = new DefaultParsingResult();
    final int length = sql.length();
    final StringBuilder normalized = new StringBuilder(length + 16);
    boolean change = false;
    int replaceIndex = 0;
    boolean numberTokenStartEnable = true;
    for (int i = 0; i < length; i++) {
        final char ch = sql.charAt(i);
        switch(ch) {
            // COMMENT start check
            case '/':
                // comment state
                int lookAhead1Char = lookAhead1(sql, i);
                // multi line comment and oracle hint /*+ */
                if (lookAhead1Char == '*') {
                    normalized.append("/*");
                    i += 2;
                    for (; i < length; i++) {
                        char stateCh = sql.charAt(i);
                        if (stateCh == '*') {
                            if (lookAhead1(sql, i) == '/') {
                                normalized.append("*/");
                                i++;
                                break;
                            }
                        }
                        normalized.append(stateCh);
                    }
                    break;
                // single line comment
                } else if (lookAhead1Char == '/') {
                    normalized.append("//");
                    i += 2;
                    i = readLine(sql, normalized, i);
                    break;
                } else {
                    // unary operator
                    numberTokenStartEnable = true;
                    normalized.append(ch);
                    break;
                }
            // # is a single line comment in mysql
            case '-':
                // single line comment state
                if (lookAhead1(sql, i) == '-') {
                    normalized.append("--");
                    i += 2;
                    i = readLine(sql, normalized, i);
                    break;
                } else {
                    // unary operator
                    numberTokenStartEnable = true;
                    normalized.append(ch);
                    break;
                }
            // SYMBOL start check
            case '\'':
                // empty symbol
                if (lookAhead1(sql, i) == '\'') {
                    normalized.append("''");
                    // no need to add parameter to output as $ is not converted
                    i += 2;
                    break;
                } else {
                    change = true;
                    normalized.append('\'');
                    i++;
                    parsingResult.appendOutputSeparator();
                    for (; i < length; i++) {
                        char stateCh = sql.charAt(i);
                        if (stateCh == '\'') {
                            // a consecutive ' is the same as \'
                            if (lookAhead1(sql, i) == '\'') {
                                i++;
                                parsingResult.appendOutputParam("''");
                                continue;
                            } else {
                                normalized.append(replaceIndex++);
                                normalized.append(SYMBOL_REPLACE);
                                normalized.append('\'');
                                // outputParam.append(',');
                                break;
                            }
                        }
                        parsingResult.appendSeparatorCheckOutputParam(stateCh);
                    }
                    break;
                }
            // number start check
            case '0':
            case '1':
            case '2':
            case '3':
            case '4':
            case '5':
            case '6':
            case '7':
            case '8':
            case '9':
                // http://www.h2database.com/html/grammar.html look at the state machine more
                if (numberTokenStartEnable) {
                    change = true;
                    normalized.append(replaceIndex++);
                    normalized.append(NUMBER_REPLACE);
                    // number token start
                    parsingResult.appendOutputSeparator();
                    parsingResult.appendOutputParam(ch);
                    i++;
                    tokenEnd: for (; i < length; i++) {
                        char stateCh = sql.charAt(i);
                        switch(stateCh) {
                            case '0':
                            case '1':
                            case '2':
                            case '3':
                            case '4':
                            case '5':
                            case '6':
                            case '7':
                            case '8':
                            case '9':
                            case '.':
                            case 'E':
                            case 'e':
                                parsingResult.appendOutputParam(stateCh);
                                break;
                            default:
                                // should look at the token outside the loop - not here
                                // outputParam.append(SEPARATOR);
                                i--;
                                break tokenEnd;
                        }
                    }
                    break;
                } else {
                    normalized.append(ch);
                    break;
                }
            // empty space
            case ' ':
            case '\t':
            case '\n':
            case '\r':
                numberTokenStartEnable = true;
                normalized.append(ch);
                break;
            // http://msdn.microsoft.com/en-us/library/ms174986.aspx
            case '*':
            case '+':
            case '%':
            case '=':
            case '<':
            case '>':
            case '&':
            case '|':
            case '^':
            case '~':
            case '!':
                numberTokenStartEnable = true;
                normalized.append(ch);
                break;
            case '(':
            case ')':
            case ',':
            case ';':
                numberTokenStartEnable = true;
                normalized.append(ch);
                break;
            case '.':
            case '_':
            // Assignment Operator
            case '@':
            case // Oracle's bind variable is possible with :bindvalue
            ':':
                numberTokenStartEnable = false;
                normalized.append(ch);
                break;
            default:
                // what if it's in a different language??
                if (ch >= 'a' && ch <= 'z' || ch >= 'A' && ch <= 'Z') {
                    numberTokenStartEnable = false;
                } else {
                    numberTokenStartEnable = true;
                }
                normalized.append(ch);
                break;
        }
    }
    if (change) {
        parsingResult.setSql(normalized.toString());
        return parsingResult;
    } else {
        // Reuse if not modified.
        // 1. new strings are not generated
        // 2. reuse hashcodes
        parsingResult.setSql(sql);
        return parsingResult;
    }
}||||||||NormalizedSql normalizedSql(String sql);||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(SwitchStmt
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(CharLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(CharLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BreakStmt
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									(BreakStmt
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(ForStmt
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(CharLiteralExpr
												)
											)
											(BlockStmt
												(IfStmt
													(BinaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
														)
														(CharLiteralExpr
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(UnaryExpr
																NameExpr
																	SimpleName
															)
														)
														(BreakStmt
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
							LineComment
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(CharLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								(BreakStmt
								)
							)
							LineComment
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(CharLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ForStmt
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(CharLiteralExpr
												)
											)
											(BlockStmt
												(IfStmt
													(BinaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
														)
														(CharLiteralExpr
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(UnaryExpr
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(MethodCallExpr
																(CharLiteralExpr
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(BreakStmt
															LineComment
														)
													)
													(BlockStmt
														(ExpressionStmt
															(UnaryExpr
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ContinueStmt
														)
													)
													LineComment
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									LineComment
								)
								(BreakStmt
								)
							)
							LineComment
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(LabeledStmt
									SimpleName
									(ForStmt
										(BlockStmt
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(SwitchStmt
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
												)
												(SwitchEntryStmt
													(CharLiteralExpr
													)
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BreakStmt
													)
												)
												(SwitchEntryStmt
													(ExpressionStmt
														(UnaryExpr
															NameExpr
																SimpleName
														)
														LineComment
													)
													(BreakStmt
														SimpleName
													)
												)
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
								(BreakStmt
								)
							)
							LineComment
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						LineComment
					)
					(SwitchEntryStmt
						(CharLiteralExpr
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
								)
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
					NameExpr
						SimpleName
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

