@Override
public int hashCode() {
    int result = 1;
    for (T name : names()) {
        result = HASH_CODE_PRIME * result + name.hashCode();
        List<T> values = getAll(name);
        Collections.sort(values, valueComparator);
        for (int i = 0; i < values.size(); ++i) {
            result = HASH_CODE_PRIME * result + hashCodeGenerator.generateHashCode(values.get(i));
        }
    }
    return result;
}||||||||/**
 * This method is purposefully kept simple and returns {@link #size()} as the hash code.
 * There are two compelling reasons for keeping {@link #hashCode()} simple:
 * 1) It's difficult to get it right as the hash code mostly depends on the {@link Map}
 * implementation. Simply using {@link Map#hashCode()} doesn't work as for
 * example {@link TreeMap#hashCode()} does not fulfill the contract between {@link Object#hashCode()} and
 * {@link Object#equals(Object)} when it's used with a {@link Comparator} that is not consistent with
 * {@link Object#equals(Object)}.
 * 2) The {@link #hashCode()} function doesn't appear to be important for {@link Headers} implementations. It's
 * solely there because we override {@link Object#equals(Object)}, which makes it easier to use {@link Headers}
 * in tests, but also has little practical use outside of tests.
 */
@Override
public int hashCode() {
    return size();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ForStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

