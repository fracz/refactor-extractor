// @Nullable
// public Element findConcreteDynamicProperty(GrReferenceExpression referenceExpression, final String moduleName, final String containingClassName, final String propertyName) {
// final PsiClassType type = referenceExpression.getManager().getElementFactory().createTypeByFQClassName(containingClassName, referenceExpression.getResolveScope());
// 
// final PsiClass psiClass = type.resolve();
// if (psiClass == null) return null;
// 
// final Set<PsiClass> classes = new HashSet<PsiClass>();
// classes.addAll(Arrays.asList(psiClass.getSupers()));
// 
// Element result = findConcreteDynamicProperty(getRootElement(moduleName), psiClass.getQualifiedName(), propertyName);
// if (result != null) return result;
// 
// for (PsiClass aClass : classes) {
// result = findConcreteDynamicProperty(getRootElement(moduleName), aClass.getQualifiedName(), propertyName);
// 
// if (result != null) return result;
// }
// return null;
// }
// @Nullable
// public Element findConcreteDynamicElementWithSupers(String moduleName, final String conatainingClassName, final String propertyName) {
// 
// return findConcreteDynamicProperty(getRootElement(moduleName), conatainingClassName, propertyName);
// }
// @Nullable
// protected String getTypeOfDynamicProperty(String moduleName, String containingClassName, String propertyName) {
// if (containingClassName == null) return null;
// final Element dynamicProperty = findConcreteDynamicProperty(moduleName, containingClassName, propertyName);
// if (dynamicProperty == null) return null;
// 
// final List types = dynamicProperty.getContent(DynamicFiltersFactory.createPropertyTypeTagFilter());
// if (types == null || (types.size() != 1)) return null;
// 
// final Object type = types.get(0);
// if (!(type instanceof Element)) return null;
// 
// return ((Element) type).getText();
// }
@NotNull
public String[] findDynamicPropertiesOfClass(String moduleName, String className) {
    Document document = loadModuleDynXML(moduleName);
    final Element containingClassElement = findDynamicClassElement(document.getRootElement(), className);
    if (containingClassElement == null)
        return new String[0];
    final List propertiesTagsOfClass = containingClassElement.getContent(DynamicFiltersFactory.createPropertyTagFilter());
    List<String> result = new ArrayList<String>();
    for (Object o : propertiesTagsOfClass) {
        result.add(((Element) o).getAttributeValue(NAME_ATTRIBUTE));
    }
    return result.toArray(new String[result.size()]);
}||||||||@NotNull
public Collection<DPropertyElement> findDynamicPropertiesOfClass(String className) {
    final DClassElement classElement = findClassElement(getRootElement(), className);
    if (classElement != null) {
        return classElement.getProperties();
    }
    return new ArrayList<DPropertyElement>();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
				(ArrayCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
					(ArrayCreationLevel
						(IntegerLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(EnclosedExpr
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(ArrayCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
					(ArrayCreationLevel
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ArrayType
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

