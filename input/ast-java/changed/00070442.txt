/**
 * Returns a map from the name of a property to the method that sets it. If the property is
 * defined by an abstract method in the {@code @AutoValue} class called {@code foo()} or
 * {@code getFoo()} then the name of the property is {@code foo} and there will be an entry in
 * the map where the key is {@code "foo"} and the value is a method in the builder called
 * {@code foo} or {@code setFoo}.
 */
Map<String, ExecutableElement> propertyNameToSetter() {
    return settersPrefixed ? propertyNameToPrefixedSetter : propertyNameToUnprefixedSetter;
}||||||||/**
 * Returns a map from the name of a property to the method that sets it. If the property is
 * defined by an abstract method in the {@code @AutoValue} class called {@code foo()} or
 * {@code getFoo()} then the name of the property is {@code foo} and there will be an entry in
 * the map where the key is {@code "foo"} and the value is a method in the builder called
 * {@code foo} or {@code setFoo}.
 */
Map<String, ExecutableElement> propertyNameToSetter() {
    return ImmutableMap.copyOf(settersPrefixed ? propertyNameToPrefixedSetter : propertyNameToUnprefixedSetter);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ConditionalExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(ConditionalExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)

