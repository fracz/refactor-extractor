/**
 * Sets the maximum size of the prepared-statement cache for this database.
 * (size of the cache = number of compiled-sql-statements stored in the cache).
 * <p>
 * Maximum cache size can ONLY be increased from its current size (default = 10).
 * If this method is called with smaller size than the current maximum value,
 * then IllegalStateException is thrown.
 * <p>
 * This method is thread-safe.
 *
 * @param cacheSize the size of the cache. can be (0 to {@link #MAX_SQL_CACHE_SIZE})
 * @throws IllegalStateException if input cacheSize > {@link #MAX_SQL_CACHE_SIZE} or
 * the value set with previous setMaxSqlCacheSize() call.
 */
public void setMaxSqlCacheSize(int cacheSize) {
    synchronized (this) {
        LruCache<String, SQLiteCompiledSql> oldCompiledQueries = mCompiledQueries;
        if (cacheSize > MAX_SQL_CACHE_SIZE || cacheSize < 0) {
            throw new IllegalStateException("expected value between 0 and " + MAX_SQL_CACHE_SIZE);
        } else if (oldCompiledQueries != null && cacheSize < oldCompiledQueries.maxSize()) {
            throw new IllegalStateException("cannot set cacheSize to a value less than the " + "value set with previous setMaxSqlCacheSize() call.");
        }
        mCompiledQueries = new LruCache<String, SQLiteCompiledSql>(cacheSize) {

            @Override
            protected void entryRemoved(boolean evicted, String key, SQLiteCompiledSql oldValue, SQLiteCompiledSql newValue) {
                verifyLockOwner();
                oldValue.releaseIfNotInUse();
            }
        };
        if (oldCompiledQueries != null) {
            for (Map.Entry<String, SQLiteCompiledSql> entry : oldCompiledQueries.snapshot().entrySet()) {
                mCompiledQueries.put(entry.getKey(), entry.getValue());
            }
        }
    }
}||||||||/**
 * Sets the maximum size of the prepared-statement cache for this database.
 * (size of the cache = number of compiled-sql-statements stored in the cache).
 * <p>
 * Maximum cache size can ONLY be increased from its current size (default = 10).
 * If this method is called with smaller size than the current maximum value,
 * then IllegalStateException is thrown.
 * <p>
 * This method is thread-safe.
 *
 * @param cacheSize the size of the cache. can be (0 to {@link #MAX_SQL_CACHE_SIZE})
 * @throws IllegalStateException if input cacheSize > {@link #MAX_SQL_CACHE_SIZE}.
 */
public void setMaxSqlCacheSize(int cacheSize) {
    if (cacheSize > MAX_SQL_CACHE_SIZE || cacheSize < 0) {
        throw new IllegalStateException("expected value between 0 and " + MAX_SQL_CACHE_SIZE);
    }
    synchronized (mLock) {
        throwIfNotOpenLocked();
        mConfigurationLocked.maxSqlCacheSize = cacheSize;
        mConnectionPoolLocked.reconfigure(mConfigurationLocked);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(PrimitiveType
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ForeachStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
			(ThisExpr
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

