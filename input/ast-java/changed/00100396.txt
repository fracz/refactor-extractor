/**
 * Save this image to disk.
 * <p>
 * As of revision 0100, this function requires an absolute path,
 * in order to avoid confusion. To save inside the sketch folder,
 * use the function savePath() from PApplet, or use saveFrame() instead.
 * As of revision 0116, savePath() is not needed if this object has been
 * created (as recommended) via createImage() or createGraphics() or
 * one of its neighbors.
 * <p>
 * As of revision 0115, when using Java 1.4 and later, you can write
 * to several formats besides tga and tiff. If Java 1.4 is installed
 * and the extension used is supported (usually png, jpg, jpeg, bmp,
 * and tiff), then those methods will be used to write the image.
 * To get a list of the supported formats for writing, use: <BR>
 * <TT>println(javax.imageio.ImageIO.getReaderFormatNames())</TT>
 * <p>
 * To use the original built-in image writers, use .tga or .tif as the
 * extension, or don't include an extension. When no extension is used,
 * the extension .tif will be added to the file name.
 * <p>
 * The ImageIO API claims to support wbmp files, however they probably
 * require a black and white image. Basic testing produced a zero-length
 * file with no error.
 */
public void save(String path) {
    // ignore
    boolean success = false;
    // File file = new File(path);
    // if (!file.isAbsolute()) {
    // if (parent != null) {
    // //file = new File(parent.savePath(filename));
    // path = parent.savePath(path);
    // } else {
    // String msg = "PImage.save() requires an absolute path. " +
    // "Use createImage(), or pass savePath() to save().";
    // PGraphics.showException(msg);
    // }
    // }
    // Make sure the pixel data is ready to go
    loadPixels();
    try {
        OutputStream output = parent.createOutput(path);
        String lower = path.toLowerCase();
        String extension = lower.substring(lower.lastIndexOf('.') + 1);
        if (extension.equals("jpg") || extension.equals("jpeg")) {
            // TODO probably not necessary to create another bitmap
            Bitmap outgoing = Bitmap.createBitmap(pixels, width, height, Config.ARGB_8888);
            success = outgoing.compress(CompressFormat.JPEG, 100, output);
        } else if (extension.equals("png")) {
            Bitmap outgoing = Bitmap.createBitmap(pixels, width, height, Config.ARGB_8888);
            success = outgoing.compress(CompressFormat.PNG, 100, output);
        } else if (extension.equals("tga")) {
            // , pixels, width, height, format);
            success = saveTGA(output);
        } else {
            if (!extension.equals("tif") && !extension.equals("tiff")) {
                // if no .tif extension, add it..
                path += ".tif";
            }
            success = saveTIFF(output);
        }
        output.flush();
        output.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
    if (!success) {
        System.err.println("Could not write the image to " + path);
    }
// return success;
}||||||||/**
 * Save this image to disk.
 * <p>
 * As of revision 0100, this function requires an absolute path,
 * in order to avoid confusion. To save inside the sketch folder,
 * use the function savePath() from PApplet, or use saveFrame() instead.
 * As of revision 0116, savePath() is not needed if this object has been
 * created (as recommended) via createImage() or createGraphics() or
 * one of its neighbors.
 * <p>
 * As of revision 0115, when using Java 1.4 and later, you can write
 * to several formats besides tga and tiff. If Java 1.4 is installed
 * and the extension used is supported (usually png, jpg, jpeg, bmp,
 * and tiff), then those methods will be used to write the image.
 * To get a list of the supported formats for writing, use: <BR>
 * <TT>println(javax.imageio.ImageIO.getReaderFormatNames())</TT>
 * <p>
 * To use the original built-in image writers, use .tga or .tif as the
 * extension, or don't include an extension. When no extension is used,
 * the extension .tif will be added to the file name.
 * <p>
 * The ImageIO API claims to support wbmp files, however they probably
 * require a black and white image. Basic testing produced a zero-length
 * file with no error.
 */
public void save(String path) {
    // ignore
    boolean success = false;
    // File file = new File(path);
    // if (!file.isAbsolute()) {
    // if (parent != null) {
    // //file = new File(parent.savePath(filename));
    // path = parent.savePath(path);
    // } else {
    // String msg = "PImage.save() requires an absolute path. " +
    // "Use createImage(), or pass savePath() to save().";
    // PGraphics.showException(msg);
    // }
    // }
    // Make sure the pixel data is ready to go
    loadPixels();
    try {
        OutputStream output = new BufferedOutputStream(parent.createOutput(path), 16 * 1024);
        String lower = path.toLowerCase();
        String extension = lower.substring(lower.lastIndexOf('.') + 1);
        if (extension.equals("jpg") || extension.equals("jpeg")) {
            // TODO probably not necessary to create another bitmap
            Bitmap outgoing = Bitmap.createBitmap(pixels, width, height, Config.ARGB_8888);
            success = outgoing.compress(CompressFormat.JPEG, 100, output);
        } else if (extension.equals("png")) {
            Bitmap outgoing = Bitmap.createBitmap(pixels, width, height, Config.ARGB_8888);
            success = outgoing.compress(CompressFormat.PNG, 100, output);
        } else if (extension.equals("tga")) {
            // , pixels, width, height, format);
            success = saveTGA(output);
        } else {
            if (!extension.equals("tif") && !extension.equals("tiff")) {
                // if no .tif extension, add it..
                path += ".tif";
            }
            success = saveTIFF(output);
        }
        output.flush();
        output.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
    if (!success) {
        System.err.println("Could not write the image to " + path);
    }
// return success;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IfStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(UnaryExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
											LineComment
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
									LineComment
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								(BinaryExpr
									(IntegerLiteralExpr
									)
									(IntegerLiteralExpr
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									(MethodCallExpr
										(CharLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IfStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(UnaryExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
											LineComment
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
									LineComment
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

