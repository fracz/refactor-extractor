/**
 * To process a grammar, we load all of its imported grammars into
 * subordinate grammar objects. Then we merge the imported rules
 * into the root grammar. If a root grammar is a combined grammar,
 * we have to extract the implicit lexer. Once all this is done, we
 * process the lexer first, if present, and then the parser grammar
 */
public void process(Grammar g, boolean gencode) {
    g.loadImportedGrammars();
    GrammarTransformPipeline.integrateImportedGrammars(g);
    GrammarTransformPipeline transform = new GrammarTransformPipeline(g, this);
    transform.process();
    LexerGrammar lexerg = null;
    GrammarRootAST lexerAST = null;
    if (g.ast != null && g.ast.grammarType == ANTLRParser.COMBINED && !g.ast.hasErrors) {
        // alters g.ast
        lexerAST = GrammarTransformPipeline.extractImplicitLexer(g);
        if (lexerAST != null) {
            lexerg = new LexerGrammar(this, lexerAST);
            lexerg.fileName = g.fileName;
            g.implicitLexer = lexerg;
            lexerg.implicitLexerOwner = g;
            processNonCombinedGrammar(lexerg, gencode);
        // System.out.println("lexer tokens="+lexerg.tokenNameToTypeMap);
        // System.out.println("lexer strings="+lexerg.stringLiteralToTypeMap);
        }
    }
    if (g.implicitLexer != null)
        g.importVocab(g.implicitLexer);
    // System.out.println("tokens="+g.tokenNameToTypeMap);
    // System.out.println("strings="+g.stringLiteralToTypeMap);
    processNonCombinedGrammar(g, gencode);
}||||||||/**
 * To process a grammar, we load all of its imported grammars into
 * subordinate grammar objects. Then we merge the imported rules
 * into the root grammar. If a root grammar is a combined grammar,
 * we have to extract the implicit lexer. Once all this is done, we
 * process the lexer first, if present, and then the parser grammar
 */
public void process(Grammar g, boolean gencode) {
    g.loadImportedGrammars();
    GrammarTransformPipeline transform = new GrammarTransformPipeline(g, this);
    transform.process();
    LexerGrammar lexerg = null;
    GrammarRootAST lexerAST = null;
    if (g.ast != null && g.ast.grammarType == ANTLRParser.COMBINED && !g.ast.hasErrors) {
        // alters g.ast
        lexerAST = transform.extractImplicitLexer(g);
        if (lexerAST != null) {
            lexerg = new LexerGrammar(this, lexerAST);
            lexerg.fileName = g.fileName;
            g.implicitLexer = lexerg;
            lexerg.implicitLexerOwner = g;
            processNonCombinedGrammar(lexerg, gencode);
        // System.out.println("lexer tokens="+lexerg.tokenNameToTypeMap);
        // System.out.println("lexer strings="+lexerg.stringLiteralToTypeMap);
        }
    }
    if (g.implicitLexer != null)
        g.importVocab(g.implicitLexer);
    // System.out.println("tokens="+g.tokenNameToTypeMap);
    // System.out.println("strings="+g.stringLiteralToTypeMap);
    processNonCombinedGrammar(g, gencode);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ThisExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(UnaryExpr
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ThisExpr
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ExpressionStmt
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ThisExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(UnaryExpr
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ThisExpr
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(ExpressionStmt
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

