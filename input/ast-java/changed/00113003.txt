/**
 * Resolve the {@link ContextLoader} {@link Class class} to use for the
 * supplied {@link Class testClass} and then instantiate and return that
 * {@code ContextLoader}.
 *
 * <p>If the supplied <code>defaultContextLoaderClassName</code> is
 * <code>null</code> or <em>empty</em>, the <em>standard</em>
 * default context loader class name {@value #DEFAULT_CONTEXT_LOADER_CLASS_NAME}
 * will be used. For details on the class resolution process, see
 * {@link #resolveContextLoaderClass()}.
 *
 * @param testClass the test class for which the {@code ContextLoader}
 * should be resolved (must not be <code>null</code>)
 * @param defaultContextLoaderClassName the name of the default
 * {@code ContextLoader} class to use (may be <code>null</code>)
 * @return the resolved {@code ContextLoader} for the supplied
 * <code>testClass</code> (never <code>null</code>)
 * @see #resolveContextLoaderClass()
 */
static ContextLoader resolveContextLoader(Class<?> testClass, String defaultContextLoaderClassName) {
    Assert.notNull(testClass, "Test class must not be null");
    if (!StringUtils.hasText(defaultContextLoaderClassName)) {
        defaultContextLoaderClassName = DEFAULT_CONTEXT_LOADER_CLASS_NAME;
    }
    Class<? extends ContextLoader> contextLoaderClass = resolveContextLoaderClass(testClass, defaultContextLoaderClassName);
    return instantiateClass(contextLoaderClass, ContextLoader.class);
}||||||||/**
 * Resolve the {@link ContextLoader} {@link Class class} to use for the
 * supplied {@link Class testClass} and then instantiate and return that
 * {@code ContextLoader}.
 *
 * <p>If the supplied <code>defaultContextLoaderClassName</code> is
 * <code>null</code> or <em>empty</em>, the <em>standard</em>
 * default context loader class name {@value #DEFAULT_CONTEXT_LOADER_CLASS_NAME}
 * will be used. For details on the class resolution process, see
 * {@link #resolveContextLoaderClass()}.
 *
 * @param testClass the test class for which the {@code ContextLoader}
 * should be resolved (must not be <code>null</code>)
 * @param defaultContextLoaderClassName the name of the default
 * {@code ContextLoader} class to use (may be <code>null</code>)
 * @return the resolved {@code ContextLoader} for the supplied
 * <code>testClass</code> (never <code>null</code>)
 * @see #resolveContextLoaderClass()
 */
static ContextLoader resolveContextLoader(Class<?> testClass, String defaultContextLoaderClassName) {
    Assert.notNull(testClass, "Test class must not be null");
    if (!StringUtils.hasText(defaultContextLoaderClassName)) {
        defaultContextLoaderClassName = testClass.isAnnotationPresent(WebAppConfiguration.class) ? DEFAULT_WEB_CONTEXT_LOADER_CLASS_NAME : DEFAULT_CONTEXT_LOADER_CLASS_NAME;
    }
    Class<? extends ContextLoader> contextLoaderClass = resolveContextLoaderClass(testClass, defaultContextLoaderClassName);
    return instantiateClass(contextLoaderClass, ContextLoader.class);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ConditionalExpr
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

