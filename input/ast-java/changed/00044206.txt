protected void verifyPasswordAndUnlock() {
    // already verified but haven't been dismissed; don't do it again.
    if (mDismissing)
        return;
    final String entry = getPasswordText();
    setPasswordEntryInputEnabled(false);
    if (mPendingLockCheck != null) {
        mPendingLockCheck.cancel(false);
    }
    final int userId = KeyguardUpdateMonitor.getCurrentUser();
    if (entry.length() <= MINIMUM_PASSWORD_LENGTH_BEFORE_REPORT) {
        // to avoid accidental lockout, only count attempts that are long enough to be a
        // real password. This may require some tweaking.
        setPasswordEntryInputEnabled(true);
        onPasswordChecked(userId, false, /* matched */
        0, false);
        return;
    }
    if (LatencyTracker.isEnabled(mContext)) {
        LatencyTracker.getInstance(mContext).onActionStart(ACTION_CHECK_CREDENTIAL);
        LatencyTracker.getInstance(mContext).onActionStart(ACTION_CHECK_CREDENTIAL_UNLOCKED);
    }
    mPendingLockCheck = LockPatternChecker.checkPassword(mLockPatternUtils, entry, userId, new LockPatternChecker.OnCheckCallback() {

        @Override
        public void onEarlyMatched() {
            if (LatencyTracker.isEnabled(mContext)) {
                LatencyTracker.getInstance(mContext).onActionEnd(ACTION_CHECK_CREDENTIAL);
            }
            onPasswordChecked(userId, true, /* matched */
            0, /* timeoutMs */
            true);
        }

        @Override
        public void onChecked(boolean matched, int timeoutMs) {
            if (LatencyTracker.isEnabled(mContext)) {
                LatencyTracker.getInstance(mContext).onActionEnd(ACTION_CHECK_CREDENTIAL_UNLOCKED);
            }
            setPasswordEntryInputEnabled(true);
            mPendingLockCheck = null;
            if (!matched) {
                onPasswordChecked(userId, false, /* matched */
                timeoutMs, true);
            }
        }
    });
}||||||||protected void verifyPasswordAndUnlock() {
    // already verified but haven't been dismissed; don't do it again.
    if (mDismissing)
        return;
    final String entry = getPasswordText();
    setPasswordEntryInputEnabled(false);
    if (mPendingLockCheck != null) {
        mPendingLockCheck.cancel(false);
    }
    final int userId = KeyguardUpdateMonitor.getCurrentUser();
    if (entry.length() <= MINIMUM_PASSWORD_LENGTH_BEFORE_REPORT) {
        // to avoid accidental lockout, only count attempts that are long enough to be a
        // real password. This may require some tweaking.
        setPasswordEntryInputEnabled(true);
        onPasswordChecked(userId, false, /* matched */
        0, false);
        return;
    }
    if (LatencyTracker.isEnabled(mContext)) {
        LatencyTracker.getInstance(mContext).onActionStart(ACTION_CHECK_CREDENTIAL);
        LatencyTracker.getInstance(mContext).onActionStart(ACTION_CHECK_CREDENTIAL_UNLOCKED);
    }
    mPendingLockCheck = LockPatternChecker.checkPassword(mLockPatternUtils, entry, userId, new LockPatternChecker.OnCheckCallback() {

        @Override
        public void onEarlyMatched() {
            if (LatencyTracker.isEnabled(mContext)) {
                LatencyTracker.getInstance(mContext).onActionEnd(ACTION_CHECK_CREDENTIAL);
            }
            onPasswordChecked(userId, true, /* matched */
            0, /* timeoutMs */
            true);
        }

        @Override
        public void onChecked(boolean matched, int timeoutMs) {
            if (LatencyTracker.isEnabled(mContext)) {
                LatencyTracker.getInstance(mContext).onActionEnd(ACTION_CHECK_CREDENTIAL_UNLOCKED);
            }
            setPasswordEntryInputEnabled(true);
            mPendingLockCheck = null;
            if (!matched) {
                onPasswordChecked(userId, false, /* matched */
                timeoutMs, true);
            }
        }

        @Override
        public void onCancelled() {
            // the check. However, we still need to note down the latency.
            if (LatencyTracker.isEnabled(mContext)) {
                LatencyTracker.getInstance(mContext).onActionEnd(ACTION_CHECK_CREDENTIAL_UNLOCKED);
            }
        }
    });
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(ReturnStmt
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						(IntegerLiteralExpr
							(BlockComment
							)
						)
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
										(IntegerLiteralExpr
											(BlockComment
											)
										)
										(BooleanLiteralExpr
											(BlockComment
											)
										)
										SimpleName
									)
								)
							)
							(VoidType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
												NameExpr
													SimpleName
													(BlockComment
													)
												(BooleanLiteralExpr
												)
												SimpleName
											)
										)
									)
								)
							)
							(VoidType
							)
							SimpleName
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(ReturnStmt
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						(IntegerLiteralExpr
							(BlockComment
							)
						)
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
										(IntegerLiteralExpr
											(BlockComment
											)
										)
										(BooleanLiteralExpr
											(BlockComment
											)
										)
										SimpleName
									)
								)
							)
							(VoidType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
												NameExpr
													SimpleName
													(BlockComment
													)
												(BooleanLiteralExpr
												)
												SimpleName
											)
										)
									)
								)
							)
							(VoidType
							)
							SimpleName
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(Parameter
								SimpleName
								(PrimitiveType
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									LineComment
								)
							)
							(VoidType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)

