/**
 * Prepare to acquire the lock named by {@code lockID}
 * <p>
 * Returns on success and throws an exception on failure.
 *
 * @param lockID
 * The return values of the methods {@link Entry#getColumn()} and
 * {@link Entry#getValue()} together specify the target lock.
 * Each distinct pair of return values corresponds to a distinct
 * lock which can be acquired and released separate from the
 * rest.
 */
public void writeLock(KeyColumn lockID, StoreTransaction tx) throws StorageException;||||||||/**
 * Attempt to acquire/take/claim/write the lock named by {@code lockID}.
 * <p>
 * Returns on success and throws an exception on failure.
 *
 * @param lockID
 * the lock to acquire
 * @param tx
 * the transaction attempting to acquire the lock
 * @throws TemporaryLockingException
 * a failure likely to disappear if the call is retried
 * @throws PermanentLockingException
 * a failure unlikely to disappear if the call is retried
 */
public void writeLock(KeyColumn lockID, StoreTransaction tx) throws TemporaryLockingException, PermanentLockingException;||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

