/**
 * As parser or lexer class is loaded, it checks that the version used to generate the code
 * is compatible with the runtime version. ANTLR tool generates recognizers with a hardcoded string created by
 * the tool during code gen. That version is passed to checkVersion().
 */
public static void checkVersion(String toolVersion) {
    // being explicit. Later we can always build a more sophisticated versioning check.
    if ((toolVersion.startsWith("4.2.") || toolVersion.equals("4.2"))) {
        return;
    }
    if (!VERSION.equals(toolVersion)) {
        throw new ANTLRVersionMismatchException("ANTLR runtime and generated code versions disagree", toolVersion, VERSION);
    }
}||||||||/**
 * This method provides the ability to verify that the version of the ANTLR
 * 4 used to execute a parser is compatible with the Tool used to generate
 * the parser code and/or the version of the runtime the parser was compiled
 * against.
 *
 * <p>
 * Starting with ANTLR 4.2.3, the code generator emits two constants in each
 * generated parser: a hard-coded constant indicating the version of the
 * tool used to generate the parser and a reference to the compile-time
 * constant {@link #VERSION}. At runtime, this method is called to ensure
 * that, according to the version numbers, the semantics of the generated
 * code are known to be compatible with the version of the ANTLR runtime
 * used to execute code.</p>
 *
 * <p>
 * The definition of "semantic changes" which are considered by this method
 * depend on the value of {@code extendedSemantics}. When this value is
 * {@code false}, as is the case for calls to this method in generated code,
 * "semantic changes" means changes in the runtime that alter the behavior
 * of parsers that use only standardized language features, which does not
 * include the behavior of target-language-specific features such as
 * embedded actions, custom semantic predicates, and runtime methods that
 * are never called by the generated code but may be overridden in separate
 * user code. When this value is {@code true}, "semantic changes" indicates
 * a wider check across frequently used aspects of the runtime. The latter
 * case may or may not consider all breaking changes across releases; for
 * details on the specific methods in place see the release notes for the
 * affected version(s).</p>
 *
 * <p>
 * Note that if this method throws an exception when
 * {@code extendedSemantics} is {@code false}, the lexer or parser which
 * resulted in the exception will be prevented from executing, so this
 * behavior is reserved for changes that are true breaking changes in the
 * behavior. These changes, if any, are mentioned in the release notes for
 * the affected release.</p>
 *
 * <p>
 * Also note that some breaking changes between releases could result in
 * other types of runtime exceptions, such as a {@link LinkageError}, prior
 * to calling this method. This method is primarily intended to catch
 * semantic changes that do not result in binary compatibility problems
 * which would be detected by the class loader. As with semantic changes,
 * changes which break binary compatibility between releases are mentioned
 * in the release notes accompanying the affected release.</p>
 *
 * <p>
 * <strong>Additional note for target developers:</strong> The compatibility
 * check implemented by this class is designed to address specific
 * compatibility issues that may arise during the execution of Java
 * applications. Other targets should consider the implementation of this
 * method in the context of that target's known execution environment, which
 * may or may not resemble the design provided for the Java target.</p>
 *
 * @param toolVersion The version of the tool used to generate a parser.
 * This value may be null when called from user code that was not generated
 * by, and does not reference, the ANTLR 4 Tool itself.
 * @param compileTimeVersion The version of the runtime the parser was
 * compiled against. This should always be passed using a direct reference
 * to {@link #VERSION}.
 * @param extendedSemantics {@code false} to only check compatibility for
 * the API used in generated code, not counting embedded actions and
 * semantic predicates; otherwise, {@code true} to check compatibility
 * across a wider range of frequently-used features that are commonly used
 * in user-defined embedded actions and/or semantic predicates.
 *
 * @exception ANTLRVersionMismatchException if the version of the ANTLR
 * runtime used to execute a compiled parser contains semantic changes which
 * would alter the behavior of the generated code
 */
public static void checkVersion(@Nullable String toolVersion, @NotNull String compileTimeVersion, boolean extendedSemantics) throws ANTLRVersionMismatchException {
/* Currently there are no versions of the ANTLR runtime library which
		 * are incompatible with respect to this method.
		 *
		 *  * Prior to ANTLR 4.2.3, the ANTLR tool did not emit calls to this
		 *    method in the generated code, and did not expose the VERSION
		 *    field. For the specific purposes of this compatibility check, the
		 *    "first public release" of ANTLR 4 can be treated as 4.2.3.
		 *  * If an incompatibility is introduced in a version after 4.2.3,
		 *    specific handling for the affected versions can be added.
		 */
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(EnclosedExpr
				(BinaryExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

