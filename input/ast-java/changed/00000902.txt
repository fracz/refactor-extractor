/**
 * Returns the {@link FileInfo} for a given path. Called via RPC, as well as internal masters.
 *
 * @param fileId the file id to get the {@link FileInfo} for
 * @return the {@link FileInfo} for the given file id
 * @throws FileDoesNotExistException if the file does not exist
 */
public synchronized FileInfo getFileInfo(long fileId) throws FileDoesNotExistException {
    return mFileSystemMaster.getFileInfo(fileId);
}||||||||/**
 * Returns the {@link FileInfo} for a given path. Called via RPC, as well as internal masters.
 *
 * @param fileId the file id to get the {@link FileInfo} for
 * @return the {@link FileInfo} for the given file id
 * @throws FileDoesNotExistException if the file does not exist
 * @throws AccessControlException if permission denied
 */
public synchronized FileInfo getFileInfo(long fileId) throws FileDoesNotExistException, AccessControlException {
    return mFileSystemMaster.getFileInfo(fileId);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

