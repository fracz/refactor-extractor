/**
 * Encapsulates preparations for performing document dimension mapping (e.g. visual to logical position) and answers
 * if soft wraps-aware processing should be used (e.g. there is no need to consider soft wraps if user configured them
 * not to be used).
 *
 * @return      <code>true</code> if soft wraps-aware processing should be used; <code>false</code> otherwise
 */
private boolean prepareToMapping() {
    boolean useSoftWraps = myActive <= 0 && isSoftWrappingEnabled() && myEditor.getDocument().getTextLength() > 0 && myEditor.getFoldingModel().isFoldingEnabled();
    if (!useSoftWraps) {
        return useSoftWraps;
    }
    myApplianceManager.recalculateIfNecessary();
    return true;
// 
// Rectangle visibleArea = myEditor.getScrollingModel().getVisibleArea();
// if (visibleArea.width <= 0) {
// // We don't know visible area width, hence, can't calculate soft wraps positions.
// return false;
// }
// 
// myActive++;
// try {
// LogicalPosition logicalPosition = myEditor.xyToLogicalPosition(visibleArea.getLocation());
// int offset = myEditor.logicalPositionToOffset(logicalPosition);
// myApplianceManager.registerSoftWrapIfNecessary(visibleArea, offset);
// return true;
// }
// finally {
// myActive--;
// }
}||||||||/**
 * Encapsulates preparations for performing document dimension mapping (e.g. visual to logical position) and answers
 * if soft wraps-aware processing should be used (e.g. there is no need to consider soft wraps if user configured them
 * not to be used).
 *
 * @return      <code>true</code> if soft wraps-aware processing should be used; <code>false</code> otherwise
 */
private boolean prepareToMapping() {
    boolean useSoftWraps = myActive <= 0 && isSoftWrappingEnabled() && myEditor.getDocument().getTextLength() > 0 && myFoldBasedApplianceStrategy.processSoftWraps();
    if (!useSoftWraps) {
        return useSoftWraps;
    }
    myApplianceManager.recalculateIfNecessary();
    return true;
// 
// Rectangle visibleArea = myEditor.getScrollingModel().getVisibleArea();
// if (visibleArea.width <= 0) {
// // We don't know visible area width, hence, can't calculate soft wraps positions.
// return false;
// }
// 
// myActive++;
// try {
// LogicalPosition logicalPosition = myEditor.xyToLogicalPosition(visibleArea.getLocation());
// int offset = myEditor.logicalPositionToOffset(logicalPosition);
// myApplianceManager.registerSoftWrapIfNecessary(visibleArea, offset);
// return true;
// }
// finally {
// myActive--;
// }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(MethodCallExpr
									SimpleName
								)
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(MethodCallExpr
									SimpleName
								)
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

