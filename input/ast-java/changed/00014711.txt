/**
 * Asks the model to update its state according to the given state of the target external project.
 * <p/>
 * I.e. basically the processing looks as following:
 * <ol>
 * <li>This method is called;</li>
 * <li>
 * The model process given project state within the {@link #getChanges() registered changes} and calculates resulting difference
 * between external system and ide projects;
 * </li>
 * <li>
 * {@link #addListener(ProjectSystemId, ExternalProjectStructureChangeListener)}  Registered listeners} are notified
 * if any new change is detected;
 * </li>
 * </ol>
 * <p/>
 * <b>Note:</b> the listeners are notified <b>after</b> the actual state change, i.e. {@link #getChanges()} during the update
 * returns up-to-date data.
 *
 * @param externalProject              external project to sync with
 * @param ideProject                   target ide project
 * @param onIdeProjectStructureChange  a flag which identifies if current update is triggered by ide project structure
 * change (an alternative is a manual project structure changes refresh implied by a user)
 */
public void update(@NotNull ExternalProject externalProject, @NotNull Project ideProject, boolean onIdeProjectStructureChange) {
    ExternalProject externalProjectToUse = externalProject;
    for (ExternalProjectStructureChangesPreProcessor preProcessor : myCommonPreProcessors) {
        externalProjectToUse = preProcessor.preProcess(externalProjectToUse, ideProject);
    }
    ProjectSystemId externalSystemId = externalProject.getSystemId();
    Pair<ProjectSystemId, String> key = key(externalSystemId, ideProject);
    myExternalProjects.putIfAbsent(key, externalProjectToUse);
    final ExternalProjectChangesCalculationContext context = getCurrentChangesContext(externalProjectToUse, ideProject, onIdeProjectStructureChange);
    if (!context.hasNewChanges()) {
        return;
    }
    myChanges.put(key, context.getCurrentChanges());
    Set<ExternalProjectStructureChangeListener> listeners = myListeners.get(externalSystemId);
    if (listeners != null) {
        for (ExternalProjectStructureChangeListener listener : listeners) {
            listener.onChanges(ideProject, externalSystemId, context.getKnownChanges(), context.getCurrentChanges());
        }
    }
}||||||||/**
 * Asks the model to update its state according to the given state of the target external project.
 * <p/>
 * I.e. basically the processing looks as following:
 * <ol>
 * <li>This method is called;</li>
 * <li>
 * The model process given project state within the {@link #getChanges(ProjectSystemId, Project) registered changes} and calculates
 * resulting difference between external system and ide projects;
 * </li>
 * <li>
 * {@link #addListener(ExternalProjectStructureChangeListener) Registered listeners} are notified
 * if any new change is detected;
 * </li>
 * </ol>
 * <p/>
 * <b>Note:</b> the listeners are notified <b>after</b> the actual state change, i.e. {@link #getChanges(ProjectSystemId, Project)}
 * during the update returns up-to-date data.
 *
 * @param externalProject              external project to sync with
 * @param ideProject                   target ide project
 * @param onIdeProjectStructureChange  a flag which identifies if current update is triggered by ide project structure
 * change (an alternative is a manual project structure changes refresh implied by a user)
 */
public void update(@NotNull ExternalProject externalProject, @NotNull Project ideProject, boolean onIdeProjectStructureChange) {
    ExternalProject externalProjectToUse = externalProject;
    for (ExternalProjectStructureChangesPreProcessor preProcessor : myCommonPreProcessors) {
        externalProjectToUse = preProcessor.preProcess(externalProjectToUse, ideProject);
    }
    ProjectSystemId externalSystemId = externalProject.getOwner();
    IntegrationKey key = new IntegrationKey(ideProject, externalSystemId);
    myExternalProjects.putIfAbsent(key, externalProjectToUse);
    final ExternalProjectChangesCalculationContext context = getCurrentChangesContext(externalProjectToUse, ideProject, onIdeProjectStructureChange);
    if (!context.hasNewChanges()) {
        return;
    }
    myChanges.put(key, context.getCurrentChanges());
    for (ExternalProjectStructureChangeListener listener : myListeners) {
        listener.onChanges(ideProject, externalSystemId, context.getKnownChanges(), context.getCurrentChanges());
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

