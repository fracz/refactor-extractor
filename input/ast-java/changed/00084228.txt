/**
 * Looks at max amount of configured memory (in constructor) and figures out for how many nodes their groups
 * can be cached. Before the first call to this method all {@link #incrementGroupCount(long)} calls
 * must have been made. After a call to this there should be a sequence of {@link #put(RelationshipGroupRecord)}
 * calls to cache the groups. If this call returns a node id which is lower than the highest node id in the
 * store then more rounds of caching should be performed after completing this round.
 *
 * @param fromNodeId inclusive
 * @return toNodeId exclusive
 */
public long prepare(long fromNodeId) {
    // this will have all the "first" bytes set to 0, which means !inUse
    cache.clear();
    // keep for use in put later on
    this.fromNodeId = fromNodeId;
    highCacheId = 0;
    for (long nodeId = fromNodeId; nodeId < highNodeId; nodeId++) {
        int count = groupCount(nodeId);
        if (highCacheId + count > cache.length()) {
            // Cannot include this one, so up until the previous is good
            return this.toNodeId = nodeId;
        }
        offsets.set(rebase(nodeId), highCacheId);
        highCacheId += count;
    }
    return this.toNodeId = highNodeId;
}||||||||/**
 * Looks at max amount of configured memory (in constructor) and figures out for how many nodes their groups
 * can be cached. Before the first call to this method all {@link #incrementGroupCount(long)} calls
 * must have been made. After a call to this there should be a sequence of {@link #put(RelationshipGroupRecord)}
 * calls to cache the groups. If this call returns a node id which is lower than the highest node id in the
 * store then more rounds of caching should be performed after completing this round.
 *
 * @param fromNodeId inclusive
 * @return toNodeId exclusive
 */
public long prepare(long fromNodeId) {
    // this will have all the "first" bytes set to 0, which means !inUse
    cache.clear();
    // keep for use in put later on
    this.fromNodeId = fromNodeId;
    highCacheId = 0;
    for (long nodeId = fromNodeId; nodeId < highNodeId; nodeId++) {
        int count = groupCount(nodeId);
        if (highCacheId + count > maxCacheLength) {
            // Cannot include this one, so up until the previous is good
            return this.toNodeId = nodeId;
        }
        offsets.set(rebase(nodeId), highCacheId);
        highCacheId += count;
    }
    return this.toNodeId = highNodeId;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

