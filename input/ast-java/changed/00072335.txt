/**
 * Wraps DataFlow.dataflow and nullness propagation, and returns true if {@code tree} is a
 * non-null expression.
 */
public static boolean isDefinitelyNonNull(Tree tree, MethodTree enclosingMethod, TreePath path, Context context) {
    return backingShim.isDefinitelyNonNull(tree, enclosingMethod, path, context);
}||||||||/**
 * Returns true if the leaf of {@code exprPath} is non-null.
 * Note that returning false does not necessarily mean that the expression can be null.
 */
public static boolean isDefinitelyNonNull(TreePath exprPath, Context context) {
    return backingShim.isDefinitelyNonNull(exprPath, context);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

