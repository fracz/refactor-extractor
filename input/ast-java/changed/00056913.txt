/**
 * Updates already present in persistent layer user.
 *
 * @param user
 * POJO representation of user entity
 * @throws NotFoundException
 * when user is not found
 * @throws ConflictException
 * when given user cannot be updated
 * @throws ServerException
 * when any other error occurs
 */
public void update(User user) throws NotFoundException, ServerException, ConflictException {
    userDao.update(user);
}||||||||/**
 * Updates user by replacing an existing user entity with a new one.
 *
 * @param user
 * user update
 * @throws NullPointerException
 * when {@code user} is null
 * @throws NotFoundException
 * when user with id {@code user.getId()} is not found
 * @throws ConflictException
 * when user's new alias/email/name is not unique
 * @throws ServerException
 * when any other error occurs
 */
public void update(User user) throws NotFoundException, ServerException, ConflictException {
    requireNonNull(user, "Required non-null user");
    userDao.update(new UserImpl(user));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

