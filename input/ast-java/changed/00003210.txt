@Override
public void deleteRemoteBranch(@NotNull final String branchName, @NotNull final List<GitRepository> repositories) {
    final Collection<String> trackingBranches = findTrackingBranches(branchName, repositories);
    String currentBranch = getCurrentBranchOrRev(repositories);
    boolean currentBranchTracksBranchToDelete = false;
    if (trackingBranches.contains(currentBranch)) {
        currentBranchTracksBranchToDelete = true;
        trackingBranches.remove(currentBranch);
    }
    final DeleteRemoteBranchDecision decision = confirmBranchDeletion(branchName, trackingBranches, currentBranchTracksBranchToDelete, repositories);
    if (decision.delete()) {
        new CommonBackgroundTask(myProject, "Deleting " + branchName, null) {

            @Override
            public void execute(@NotNull ProgressIndicator indicator) {
                boolean deletedSuccessfully = doDeleteRemote(branchName, repositories);
                if (deletedSuccessfully) {
                    final Collection<String> successfullyDeletedLocalBranches = new ArrayList<String>(1);
                    if (decision.deleteTracking()) {
                        for (final String branch : trackingBranches) {
                            indicator.setText("Deleting " + branch);
                            new GitDeleteBranchOperation(myProject, myGit, repositories, branch, getCurrentBranchOrRev(repositories), indicator) {

                                @Override
                                protected void notifySuccess(@NotNull String message) {
                                    // do nothing - will display a combo notification for all deleted branches below
                                    successfullyDeletedLocalBranches.add(branch);
                                }
                            }.execute();
                        }
                    }
                    notifySuccessfulDeletion(branchName, successfullyDeletedLocalBranches);
                }
            }
        }.runInBackground();
    }
}||||||||@Override
public void deleteRemoteBranch(@NotNull final String branchName, @NotNull final List<GitRepository> repositories) {
    new CommonBackgroundTask(myProject, "Deleting " + branchName, null) {

        @Override
        public void execute(@NotNull ProgressIndicator indicator) {
            newWorker(indicator).deleteRemoteBranch(branchName, repositories);
        }
    }.runInBackground();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(ObjectCreationExpr
															(IntegerLiteralExpr
															)
															(ClassOrInterfaceType
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														SimpleName
														(ClassOrInterfaceType
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
											)
											(IfStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ForeachStmt
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	(BinaryExpr
																		StringLiteralExpr
																		NameExpr
																			SimpleName
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	SimpleName
																	(ObjectCreationExpr
																		(MethodDeclaration
																			(BlockStmt
																				(ExpressionStmt
																					(MethodCallExpr
																						NameExpr
																							SimpleName
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																					LineComment
																				)
																			)
																			(VoidType
																			)
																			SimpleName
																			(Parameter
																				(MarkerAnnotationExpr
																					Name
																				)
																				SimpleName
																				(ClassOrInterfaceType
																					SimpleName
																				)
																			)
																			(MarkerAnnotationExpr
																				Name
																			)
																		)
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																		)
																		NameExpr
																			SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
														)
														NameExpr
															SimpleName
														(VariableDeclarationExpr
															(VariableDeclarator
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
												)
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									(MarkerAnnotationExpr
										Name
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							NameExpr
								SimpleName
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							(MarkerAnnotationExpr
								Name
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					NameExpr
						SimpleName
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					NullLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

