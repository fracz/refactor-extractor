/**
 * Handles exceptions. In case of IO errors retries to reconnect until the configured retry times has reached.
 *
 * @param message
 * @param exception
 */
protected void handleException(final String message, final Exception exception) {
    if (exception instanceof OTimeoutException)
        // TIMEOUT, AVOID LOOP, RE-THROW IT
        throw (OTimeoutException) exception;
    else // throw new OStorageException("Cannot connect to remote database", exception);
    if (exception instanceof OException)
        // RE-THROW IT
        throw (OException) exception;
    else if (!(exception instanceof IOException))
        throw new OStorageException(message, exception);
    if (status != STATUS.OPEN)
        // STORAGE CLOSED: DON'T HANDLE RECONNECTION
        return;
    final long lostConnectionTime = System.currentTimeMillis();
    final int currentMaxRetry;
    final int currentRetryDelay;
    synchronized (clusterConfiguration) {
        if (!clusterConfiguration.isEmpty()) {
            // IN CLUSTER: NO RETRY AND 0 SLEEP TIME BETWEEN NODES
            currentMaxRetry = 1;
            currentRetryDelay = 0;
        } else {
            currentMaxRetry = connectionRetry;
            currentRetryDelay = connectionRetryDelay;
        }
    }
    for (int retry = 0; retry < currentMaxRetry; ++retry) {
        // WAIT THE DELAY BEFORE TO RETRY
        if (currentRetryDelay > 0)
            try {
                Thread.sleep(currentRetryDelay);
            } catch (InterruptedException e) {
                // THREAD INTERRUPTED: RETURN EXCEPTION
                Thread.currentThread().interrupt();
                break;
            }
        try {
            if (OLogManager.instance().isDebugEnabled())
                OLogManager.instance().debug(this, "Retrying to connect to remote server #" + (retry + 1) + "/" + currentMaxRetry + "...");
            openRemoteDatabase();
            OLogManager.instance().warn(this, "Connection re-acquired transparently after %dms and %d retries: no errors will be thrown at application level", System.currentTimeMillis() - lostConnectionTime, retry + 1);
            // RECONNECTED!
            return;
        } catch (Throwable t) {
        // DO NOTHING BUT CONTINUE IN THE LOOP
        }
    }
    // RECONNECTION FAILED: THROW+LOG THE ORIGINAL EXCEPTION
    throw new OStorageException(message, exception);
}||||||||/**
 * Handles exceptions. In case of IO errors retries to reconnect until the configured retry times has reached.
 *
 * @param message
 * @param exception
 */
protected void handleException(final OChannelBinaryClient iNetwork, final String message, final Exception exception) {
    if (exception instanceof OTimeoutException)
        // TIMEOUT, AVOID LOOP, RE-THROW IT
        throw (OTimeoutException) exception;
    else if (exception instanceof OException)
        // RE-THROW IT
        throw (OException) exception;
    else if (!(exception instanceof IOException))
        throw new OStorageException(message, exception);
    if (status != STATUS.OPEN)
        // STORAGE CLOSED: DON'T HANDLE RECONNECTION
        return;
    OLogManager.instance().warn(this, "Caught I/O errors from %s (local socket=%s), trying to reconnect (error: %s)", iNetwork, iNetwork.socket.getLocalSocketAddress(), exception);
    try {
        iNetwork.close();
    } catch (Exception e) {
    // IGNORE ANY EXCEPTION
    }
    final long lostConnectionTime = System.currentTimeMillis();
    final int currentMaxRetry;
    final int currentRetryDelay;
    synchronized (clusterConfiguration) {
        if (!clusterConfiguration.isEmpty()) {
            // IN CLUSTER: NO RETRY AND 0 SLEEP TIME BETWEEN NODES
            currentMaxRetry = 1;
            currentRetryDelay = 0;
        } else {
            currentMaxRetry = connectionRetry;
            currentRetryDelay = connectionRetryDelay;
        }
    }
    for (int retry = 0; retry < currentMaxRetry; ++retry) {
        // WAIT THE DELAY BEFORE TO RETRY
        if (currentRetryDelay > 0)
            try {
                Thread.sleep(currentRetryDelay);
            } catch (InterruptedException e) {
                // THREAD INTERRUPTED: RETURN EXCEPTION
                Thread.currentThread().interrupt();
                break;
            }
        try {
            if (OLogManager.instance().isDebugEnabled())
                OLogManager.instance().debug(this, "Retrying to connect to remote server #" + (retry + 1) + "/" + currentMaxRetry + "...");
            // FORCE RESET OF THREAD DATA (SERVER URL + SESSION ID)
            setSessionId(null, -1);
            if (createConnectionPool() == 0)
                // NO CONNECTION!
                break;
            // REACQUIRE DB SESSION ID
            openRemoteDatabase();
            OLogManager.instance().warn(this, "Connection re-acquired transparently after %dms and %d retries: no errors will be thrown at application level", System.currentTimeMillis() - lostConnectionTime, retry + 1);
            // RECONNECTED!
            return;
        } catch (Throwable t) {
        // DO NOTHING BUT CONTINUE IN THE LOOP
        }
    }
    // RECONNECTION FAILED: THROW+LOG THE ORIGINAL EXCEPTION
    throw new OStorageException(message, exception);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(IfStmt
					(UnaryExpr
						(EnclosedExpr
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ThrowStmt
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
				LineComment
			)
			(ThrowStmt
				(CastExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				LineComment
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				LineComment
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(BreakStmt
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					LineComment
				)
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(ThisExpr
									)
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(EnclosedExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								StringLiteralExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
							LineComment
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(IfStmt
					(UnaryExpr
						(EnclosedExpr
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ThrowStmt
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
			)
			(ThrowStmt
				(CastExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				LineComment
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				LineComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ThisExpr
				)
				StringLiteralExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(BreakStmt
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					LineComment
				)
				(TryStmt
					(CatchClause
						(BlockStmt
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(ThisExpr
									)
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(EnclosedExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NullLiteralExpr
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
								SimpleName
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							(BreakStmt
								LineComment
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(ThisExpr
								)
								StringLiteralExpr
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
							LineComment
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

