/**
 * @return the type
 * @throws java.lang.Exception - which could be:
 * LinkageError - if the linkage fails
 * ExceptionInInitializerError - if the initialization provoked by this method fails
 * ClassNotFoundException - if the class cannot be located
 */
public Class<?> getReactiveType() throws Exception {
    // live object is not supported in reactive client
    return Class.forName(type.replaceFirst("org.redisson", "org.redisson.reactive") + "Reactive");
}||||||||/**
 * @return the type
 * @throws java.lang.Exception - which could be:
 * LinkageError - if the linkage fails
 * ExceptionInInitializerError - if the initialization provoked by this method fails
 * ClassNotFoundException - if the class cannot be located
 */
public Class<?> getReactiveType() throws Exception {
    if (reactiveMap.containsValue(type)) {
        // live object is not supported in reactive client
        return Class.forName(reactiveMap.reverseGet(type));
    }
    throw new ClassNotFoundException("There is no Reactive compatible type for " + type);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

