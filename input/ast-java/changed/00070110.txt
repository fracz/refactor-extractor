/**
 * Whether samples are available for reading from {@link #getSample(int, SampleHolder)} for the
 * specified track.
 *
 * @return True if samples are available for reading from {@link #getSample(int, SampleHolder)}
 * for the specified track. False otherwise.
 */
public boolean hasSamples(int track) {
    Assertions.checkState(prepared);
    return sampleQueues.valueAt(track).peek() != null;
}||||||||/**
 * Whether samples are available for reading from {@link #getSample(int, SampleHolder)} for the
 * specified track.
 *
 * @return True if samples are available for reading from {@link #getSample(int, SampleHolder)}
 * for the specified track. False otherwise.
 */
public boolean hasSamples(int track) {
    Assertions.checkState(prepared);
    return !sampleQueues.valueAt(track).isEmpty();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				NullLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

