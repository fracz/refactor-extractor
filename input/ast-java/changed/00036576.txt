// @Override
// public int findInvokingState(int invokingState) {
// return Arrays.binarySearch(invokingStates, invokingState);
// }
/**
 * Find invokingState parameter (call it x) in this.invokingStates,
 * if present.  Call pop on all x's parent(s) and then pull other
 * elements from this context and merge into new context.
 */
@Override
public PredictionContext popAll(int invokingState, @NotNull PredictionContextCache contextCache, boolean fullCtx) {
    int index = Arrays.binarySearch(this.invokingStates, invokingState);
    if (index < 0) {
        return this;
    }
    PredictionContext newCtx = this.parents[index].popAll(invokingState, contextCache, fullCtx);
    for (int i = 0; i < this.invokingStates.length; i++) {
        if (i == index)
            continue;
        PredictionContext next;
        if (this.invokingStates[i] == EMPTY_FULL_CTX_INVOKING_STATE) {
            next = PredictionContext.EMPTY;
        } else {
            next = new SingletonPredictionContext(this.parents[i], this.invokingStates[i]);
            if (contextCache != null)
                next = contextCache.add(next);
        }
        boolean rootIsWildcard = fullCtx;
        newCtx = merge(newCtx, next, contextCache, rootIsWildcard);
    }
    return newCtx;
}||||||||// @Override
// public int findInvokingState(int invokingState) {
// return Arrays.binarySearch(invokingStates, invokingState);
// }
/**
 * Find invokingState parameter (call it x) in this.invokingStates,
 * if present.  Call pop on all x's parent(s) and then pull other
 * elements from this context and merge into new context.
 */
@Override
public PredictionContext popAll(int invokingState, boolean fullCtx) {
    int index = Arrays.binarySearch(this.invokingStates, invokingState);
    if (index < 0) {
        return this;
    }
    PredictionContext newCtx = this.parents[index].popAll(invokingState, fullCtx);
    for (int i = 0; i < this.invokingStates.length; i++) {
        if (i == index)
            continue;
        PredictionContext next;
        if (this.invokingStates[i] == EMPTY_FULL_CTX_INVOKING_STATE) {
            next = PredictionContext.EMPTY;
        } else {
            next = new SingletonPredictionContext(this.parents[i], this.invokingStates[i]);
        }
        boolean rootIsWildcard = fullCtx;
        newCtx = merge(newCtx, next, rootIsWildcard);
    }
    return newCtx;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(ThisExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(ContinueStmt
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							(ThisExpr
							)
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					(ThisExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(ContinueStmt
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

