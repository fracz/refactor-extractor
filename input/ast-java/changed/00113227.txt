/**
 * Reads and publishes data buffers from the input. Continues till either there is no
 * more demand, or till there is no more data to be read.
 * @return {@code true} if there is more data to be read; {@code false} otherwise
 */
private boolean readAndPublish() {
    try {
        while (hasDemand()) {
            DataBuffer dataBuffer = read();
            if (dataBuffer != null) {
                BackpressureUtils.getAndSub(this.demand, 1L);
                this.subscriber.onNext(dataBuffer);
            } else {
                return false;
            }
        }
        return true;
    } catch (IOException ex) {
        onError(ex);
        return false;
    }
}||||||||/**
 * Reads and publishes data buffers from the input. Continues till either there is no
 * more demand, or till there is no more data to be read.
 * @return {@code true} if there is more demand; {@code false} otherwise
 */
private boolean readAndPublish() throws IOException {
    while (hasDemand()) {
        DataBuffer dataBuffer = read();
        if (dataBuffer != null) {
            BackpressureUtils.getAndSub(this.demand, 1L);
            this.subscriber.onNext(dataBuffer);
        } else {
            return true;
        }
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
										(LongLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
									)
								)
							)
						)
					)
					(MethodCallExpr
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								(LongLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

