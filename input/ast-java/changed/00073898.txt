/**
 * Creates a new Gradle runner.
 * <p>
 * The runner requires a Gradle distribution (and therefore a specific version of Gradle) in order to execute builds.
 * This method will find a Gradle distribution, based on the filesystem location of this class.
 * That is, it is expected that this class is loaded from a Gradle distribution.
 * <p>
 * When using the GradleRunner as part of tests <i>being executed by Gradle</i> (i.e. a build using the {@code gradleTestKit()} dependency),
 * this means that the same distribution of Gradle that is executing the tests will be used by GradleRunner returned by this method.
 * <p>
 * When using the GradleRunner as part of tests <i>being executed by an IDE</i>,
 * this means that the same distribution of Gradle that was used when importing the project will be used.
 *
 * @return a new Gradle runner
 */
public static GradleRunner create() {
    GradleDistributionLocator gradleDistributionLocator = new DefaultGradleDistributionLocator(GradleRunner.class);
    return new DefaultGradleRunner(gradleDistributionLocator.getGradleHome());
}||||||||/**
 * Creates a new Gradle runner.
 * <p>
 * The runner requires a Gradle distribution (and therefore a specific version of Gradle) in order to execute builds.
 * This method will find a Gradle distribution, based on the filesystem location of this class.
 * That is, it is expected that this class is loaded from a Gradle distribution.
 * <p>
 * When using the GradleRunner as part of tests <i>being executed by Gradle</i> (i.e. a build using the {@code gradleTestKit()} dependency),
 * this means that the same distribution of Gradle that is executing the tests will be used by GradleRunner returned by this method.
 * <p>
 * When using the GradleRunner as part of tests <i>being executed by an IDE</i>,
 * this means that the same distribution of Gradle that was used when importing the project will be used.
 *
 * @return a new Gradle runner
 */
public static GradleRunner create() {
    GradleDistributionLocator gradleDistributionLocator = new DefaultGradleDistributionLocator(GradleRunner.class);
    final File gradleHome = gradleDistributionLocator.getGradleHome();
    if (gradleHome == null) {
        try {
            File classpathForClass = ClasspathUtil.getClasspathForClass(GradleRunner.class);
            throw new IllegalStateException("Could not create a GradleRunner, as the GradleRunner class was loaded from " + classpathForClass + " which is not a Gradle distribution");
        } catch (Exception e) {
            throw new IllegalStateException("Could not create a GradleRunner, as the GradleRunner class was not loaded from a Gradle distribution");
        }
    }
    return new DefaultGradleRunner(gradleHome);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									StringLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)

