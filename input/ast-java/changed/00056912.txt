/**
 * Removes user from persistent layer by his identifier.
 *
 * @param id
 * user identifier
 * @throws ConflictException
 * when given user cannot be deleted
 * @throws ServerException
 * when any other error occurs
 */
public void remove(String id) throws NotFoundException, ServerException, ConflictException {
    userDao.remove(id);
}||||||||/**
 * Removes user and his dependencies by given {@code id}.
 *
 * @param id
 * user identifier
 * @throws NullPointerException
 * when {@code id} is null
 * @throws ConflictException
 * when given user cannot be deleted
 * @throws ServerException
 * when any other error occurs
 */
public void remove(String id) throws ServerException, ConflictException {
    requireNonNull(id, "Required non-null id");
    profileDao.remove(id);
    preferencesDao.remove(id);
    userDao.remove(id);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

