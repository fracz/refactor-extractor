public void expand(final boolean animate) {
    if (!isFullyCollapsed() && !isCollapsing()) {
        return;
    }
    mInstantExpanding = true;
    mUpdateFlingOnLayout = false;
    abortAnimations();
    cancelPeek();
    if (mTracking) {
        // The panel is expanded after this call.
        onTrackingStopped(true);
    }
    if (mExpanding) {
        notifyExpandingFinished();
    }
    notifyBarPanelExpansionChanged();
    // Wait for window manager to pickup the change, so we know the maximum height of the panel
    // then.
    getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {

        @Override
        public void onGlobalLayout() {
            if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
                getViewTreeObserver().removeOnGlobalLayoutListener(this);
                if (animate) {
                    mBar.startOpeningPanel(PanelView.this);
                    notifyExpandingStarted();
                    fling(0, true);
                } else {
                    setExpandedFraction(1f);
                }
                mInstantExpanding = false;
            }
        }
    });
    // Make sure a layout really happens.
    requestLayout();
}||||||||public void expand(final boolean animate) {
    if (!isFullyCollapsed() && !isCollapsing()) {
        return;
    }
    mInstantExpanding = true;
    mUpdateFlingOnLayout = false;
    abortAnimations();
    cancelPeek();
    if (mTracking) {
        // The panel is expanded after this call.
        onTrackingStopped(true);
    }
    if (mExpanding) {
        notifyExpandingFinished();
    }
    notifyBarPanelExpansionChanged();
    // Wait for window manager to pickup the change, so we know the maximum height of the panel
    // then.
    getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {

        @Override
        public void onGlobalLayout() {
            if (mStatusBar.getStatusBarWindow().getHeight() != mStatusBar.getStatusBarHeight()) {
                getViewTreeObserver().removeOnGlobalLayoutListener(this);
                if (animate) {
                    notifyExpandingStarted();
                    fling(0, true);
                } else {
                    setExpandedFraction(1f);
                }
                mInstantExpanding = false;
            }
        }
    });
    // Make sure a layout really happens.
    requestLayout();
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
					LineComment
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(ThisExpr
											)
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
									)
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(DoubleLiteralExpr
													)
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(ThisExpr
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(IntegerLiteralExpr
													)
													(BooleanLiteralExpr
													)
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
					LineComment
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(ThisExpr
											)
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
									)
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(DoubleLiteralExpr
													)
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(IntegerLiteralExpr
													)
													(BooleanLiteralExpr
													)
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

