public void process(@NotNull JetScope outerScope, @NotNull NamespaceLike owner, @NotNull Collection<? extends PsiElement> declarations) {
    // namespaceScopes, classes
    collectNamespacesAndClassifiers(outerScope, outerScope, owner, declarations);
    importsResolver.processTypeImports();
    // create type constructors for classes and generic parameters, supertypes are not filled in
    createTypeConstructors();
    // Generic bounds and types in supertype lists (no expressions or constructor resolution)
    resolveTypesInClassHeaders();
    topologicalOrder = topologicallySortClassesAndObjects();
    // Detect and disconnect all loops in the hierarchy
    detectAndDisconnectLoops();
    // At this point, there are no loops in the type hierarchy
    checkSupertypesForConsistency();
    // computeSuperclasses();
    // Check bounds in the types used in generic bounds and supertype lists
    checkTypesInClassHeaders();
}||||||||public void process(@NotNull JetScope outerScope, @NotNull NamespaceLike owner, @NotNull Collection<? extends PsiElement> declarations) {
    // Create the default package
    createNamespaceDescriptorIfNeeded(null, owner, "");
    // namespaceScopes, classes
    collectNamespacesAndClassifiers(outerScope, outerScope, owner, declarations);
    importsResolver.processTypeImports();
    // create type constructors for classes and generic parameters, supertypes are not filled in
    createTypeConstructors();
    // Generic bounds and types in supertype lists (no expressions or constructor resolution)
    resolveTypesInClassHeaders();
    topologicalOrder = topologicallySortClassesAndObjects();
    // Detect and disconnect all loops in the hierarchy
    detectAndDisconnectLoops();
    // At this point, there are no loops in the type hierarchy
    checkSupertypesForConsistency();
    // computeSuperclasses();
    // Check bounds in the types used in generic bounds and supertype lists
    checkTypesInClassHeaders();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NullLiteralExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
)

