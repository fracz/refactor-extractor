/**
 * Takes care of tracking the parsed option's value in relation to other options.
 */
private void handleNewParsedOption(ParsedOptionDescription parsedOption) throws OptionsParsingException {
    OptionDefinition optionDefinition = parsedOption.getOptionDefinition();
    // All options can be deprecated; check and warn before doing any option-type specific work.
    maybeAddDeprecationWarning(optionDefinition);
    // Track the value, before any remaining option-type specific work that is done outside of
    // the OptionValueDescription.
    OptionValueDescription entry = optionValues.computeIfAbsent(optionDefinition, def -> OptionValueDescription.createOptionValueDescription(def, optionsData));
    ExpansionBundle expansionBundle = entry.addOptionInstance(parsedOption, warnings);
    @Nullable String unconvertedValue = parsedOption.getUnconvertedValue();
    // hidden from the reported lists of parsed options.
    if (parsedOption.getImplicitDependent() == null && !optionDefinition.isWrapperOption()) {
        // Log explicit options and expanded options in the order they are parsed (can be sorted
        // later). This information is needed to correctly canonicalize flags.
        parsedOptions.add(parsedOption);
        if (optionDefinition.allowsMultiple()) {
            canonicalizeValues.put(optionDefinition, parsedOption);
        } else {
            canonicalizeValues.replaceValues(optionDefinition, ImmutableList.of(parsedOption));
        }
    }
    if (expansionBundle != null) {
        List<String> unparsed = parse(parsedOption.getPriority(), o -> expansionBundle.sourceOfExpansionArgs, optionDefinition.hasImplicitRequirements() ? optionDefinition : null, optionDefinition.isExpansionOption() ? optionDefinition : null, expansionBundle.expansionArgs);
        if (!unparsed.isEmpty()) {
            if (optionDefinition.isWrapperOption()) {
                throw new OptionsParsingException("Unparsed options remain after unwrapping " + unconvertedValue + ": " + Joiner.on(' ').join(unparsed));
            } else {
                // option's expansion or requirements, not with the input as provided by the user.
                throw new AssertionError("Unparsed options remain after processing " + unconvertedValue + ": " + Joiner.on(' ').join(unparsed));
            }
        }
    }
}||||||||/**
 * Takes care of tracking the parsed option's value in relation to other options.
 */
private void handleNewParsedOption(ParsedOptionDescription parsedOption) throws OptionsParsingException {
    OptionDefinition optionDefinition = parsedOption.getOptionDefinition();
    // All options can be deprecated; check and warn before doing any option-type specific work.
    maybeAddDeprecationWarning(optionDefinition);
    // Track the value, before any remaining option-type specific work that is done outside of
    // the OptionValueDescription.
    OptionValueDescription entry = optionValues.computeIfAbsent(optionDefinition, def -> OptionValueDescription.createOptionValueDescription(def, optionsData));
    ExpansionBundle expansionBundle = entry.addOptionInstance(parsedOption, warnings);
    @Nullable String unconvertedValue = parsedOption.getUnconvertedValue();
    // hidden from the reported lists of parsed options.
    if (parsedOption.getImplicitDependent() == null && !optionDefinition.isWrapperOption()) {
        // Log explicit options and expanded options in the order they are parsed (can be sorted
        // later). This information is needed to correctly canonicalize flags.
        parsedOptions.add(parsedOption);
    }
    if (expansionBundle != null) {
        List<String> unparsed = parse(parsedOption.getPriority(), o -> expansionBundle.sourceOfExpansionArgs, optionDefinition.hasImplicitRequirements() ? optionDefinition : null, optionDefinition.isExpansionOption() ? optionDefinition : null, expansionBundle.expansionArgs);
        if (!unparsed.isEmpty()) {
            if (optionDefinition.isWrapperOption()) {
                throw new OptionsParsingException("Unparsed options remain after unwrapping " + unconvertedValue + ": " + Joiner.on(' ').join(unparsed));
            } else {
                // option's expansion or requirements, not with the input as provided by the user.
                throw new AssertionError("Unparsed options remain after processing " + unconvertedValue + ": " + Joiner.on(' ').join(unparsed));
            }
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(LambdaExpr
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(Parameter
								SimpleName
								(UnknownType
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(MarkerAnnotationExpr
					Name
				)
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(LambdaExpr
									(ExpressionStmt
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(Parameter
										SimpleName
										(UnknownType
										)
									)
								)
								(ConditionalExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
									NameExpr
										SimpleName
								)
								(ConditionalExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													(CharLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													(CharLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						(LambdaExpr
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(Parameter
								SimpleName
								(UnknownType
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(MarkerAnnotationExpr
					Name
				)
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(LambdaExpr
									(ExpressionStmt
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(Parameter
										SimpleName
										(UnknownType
										)
									)
								)
								(ConditionalExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
									NameExpr
										SimpleName
								)
								(ConditionalExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													(CharLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													(CharLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

