@Test
public void androidTest() throws Exception {
    writeBuildFile(buildFile, // language="Groovy"
    "buildscript {\n" + "    repositories {\n" + "        jcenter()\n" + "    }\n" + "    \n" + "    dependencies {\n" + "        classpath files($pluginClasspath)\n" + "        classpath 'com.android.tools.build:gradle:1.4.0-beta6'\n" + "    }\n" + "}\n" + "\n" + "apply plugin: 'com.android.library'\n" + "apply plugin: 'me.tatarka.retrolambda'\n" + "\n" + "repositories {\n" + "    mavenCentral()\n" + "}\n" + "\n" + "android {\n" + "    compileSdkVersion 23\n" + "    buildToolsVersion '23.0.1'\n" + "    \n" + "    defaultConfig {\n" + "        minSdkVersion 15\n" + "        targetSdkVersion 23\n" + "        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n" + "    }\n" + "}\n" + "\n" + "dependencies {\n" + "    androidTestCompile 'com.android.support.test:runner:0.4'\n" + "    androidTestCompile 'com.android.support.test:rules:0.4'\n" + "}");
    File manifestFile = new File(rootDir, "src/main/AndroidManifest.xml");
    writeFile(manifestFile, // language="XML"
    "<manifest package=\"test\">\n" + "    <application/>\n" + "</manifest>");
    File javaFile = new File(rootDir, "src/main/java/Main.java");
    writeFile(javaFile, "import java.util.concurrent.Callable;\n" + "\n" + "public class Main {\n" + "    public static Callable<String> f() {\n" + "        return () -> \"Hello, Lambda Test!\";\n" + "    }\n" + "}");
    File testJavaFile = new File(rootDir, "src/androidTest/java/Test.java");
    writeFile(testJavaFile, "import org.junit.Assert;\n" + "import org.junit.runner.RunWith;\n" + "import android.support.test.runner.AndroidJUnit4;\n" + "\n" + "import java.util.concurrent.Callable;\n" + "\n" + "@RunWith(AndroidJUnit4.class)\n" + "public class Test {\n" + "    @org.junit.Test\n" + "    public void test() throws Exception {\n" + "        Runnable lambda = () -> Assert.assertTrue(true);\n" + "        lambda.run();\n" + "        Assert.assertEquals(\"Hello, Lambda Test!\", Main.f().call());\n" + "    }\n" + "}");
    BuildResult result = GradleRunner.create().withProjectDir(testProjectDir.getRoot()).withArguments("connectedCheck").build();
    assertThat(result.getStandardError()).isNullOrEmpty();
}||||||||@Test
public void androidTest() throws Exception {
    writeBuildFile(buildFile, // language="Groovy"
    "buildscript {\n" + "    repositories {\n" + "        jcenter()\n" + "    }\n" + "    \n" + "    dependencies {\n" + "        classpath files($pluginClasspath)\n" + "        classpath 'com.android.tools.build:gradle:1.4.0-beta6'\n" + "    }\n" + "}\n" + "\n" + "apply plugin: 'com.android.library'\n" + "apply plugin: 'me.tatarka.retrolambda'\n" + "\n" + "repositories {\n" + "    mavenCentral()\n" + "}\n" + "\n" + "android {\n" + "    compileSdkVersion 23\n" + "    buildToolsVersion '23.0.1'\n" + "    \n" + "    defaultConfig {\n" + "        minSdkVersion 15\n" + "        targetSdkVersion 23\n" + "        testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\"\n" + "    }\n" + "}\n" + "\n" + "dependencies {\n" + "    androidTestCompile 'com.android.support.test:runner:0.4'\n" + "    androidTestCompile 'com.android.support.test:rules:0.4'\n" + "}");
    File manifestFile = new File(rootDir, "src/main/AndroidManifest.xml");
    writeFile(manifestFile, // language="XML"
    "<manifest package=\"test\">\n" + "    <application/>\n" + "</manifest>");
    File javaFile = new File(rootDir, "src/main/java/Main.java");
    writeFile(javaFile, "import java.util.concurrent.Callable;\n" + "\n" + "public class Main {\n" + "    public static Callable<String> f() {\n" + "        return () -> \"Hello, Lambda Test!\";\n" + "    }\n" + "}");
    File testJavaFile = new File(rootDir, "src/androidTest/java/Test.java");
    writeFile(testJavaFile, "import org.junit.Assert;\n" + "import org.junit.runner.RunWith;\n" + "import android.support.test.runner.AndroidJUnit4;\n" + "\n" + "import java.util.concurrent.Callable;\n" + "\n" + "@RunWith(AndroidJUnit4.class)\n" + "public class Test {\n" + "    @org.junit.Test\n" + "    public void test() throws Exception {\n" + "        Runnable lambda = () -> Assert.assertTrue(true);\n" + "        lambda.run();\n" + "        Assert.assertEquals(\"Hello, Lambda Test!\", Main.f().call());\n" + "    }\n" + "}");
    BuildResult result = GradleRunner.create().withProjectDir(testProjectDir.getRoot()).withArguments("connectedCheck", "--stacktrace").build();
    assertThat(result.getStandardError()).isNullOrEmpty();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						(BinaryExpr
																							(BinaryExpr
																								(BinaryExpr
																									(BinaryExpr
																										(BinaryExpr
																											(BinaryExpr
																												(BinaryExpr
																													(BinaryExpr
																														(BinaryExpr
																															(BinaryExpr
																																(BinaryExpr
																																	(BinaryExpr
																																		(BinaryExpr
																																			(BinaryExpr
																																				StringLiteralExpr
																																				StringLiteralExpr
																																			)
																																			StringLiteralExpr
																																		)
																																		StringLiteralExpr
																																	)
																																	StringLiteralExpr
																																)
																																StringLiteralExpr
																															)
																															StringLiteralExpr
																														)
																														StringLiteralExpr
																													)
																													StringLiteralExpr
																												)
																												StringLiteralExpr
																											)
																											StringLiteralExpr
																										)
																										StringLiteralExpr
																									)
																									StringLiteralExpr
																								)
																								StringLiteralExpr
																							)
																							StringLiteralExpr
																						)
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
					LineComment
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
					LineComment
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		StringLiteralExpr
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						(BinaryExpr
																							(BinaryExpr
																								(BinaryExpr
																									(BinaryExpr
																										(BinaryExpr
																											(BinaryExpr
																												(BinaryExpr
																													(BinaryExpr
																														(BinaryExpr
																															(BinaryExpr
																																(BinaryExpr
																																	(BinaryExpr
																																		(BinaryExpr
																																			(BinaryExpr
																																				StringLiteralExpr
																																				StringLiteralExpr
																																			)
																																			StringLiteralExpr
																																		)
																																		StringLiteralExpr
																																	)
																																	StringLiteralExpr
																																)
																																StringLiteralExpr
																															)
																															StringLiteralExpr
																														)
																														StringLiteralExpr
																													)
																													StringLiteralExpr
																												)
																												StringLiteralExpr
																											)
																											StringLiteralExpr
																										)
																										StringLiteralExpr
																									)
																									StringLiteralExpr
																								)
																								StringLiteralExpr
																							)
																							StringLiteralExpr
																						)
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
					LineComment
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
					LineComment
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		StringLiteralExpr
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

