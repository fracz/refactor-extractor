@Override
public void onStartTemporaryDetach() {
    super.onStartTemporaryDetach();
    // usually because this instance is an editable field in a list
    if (!mDispatchTemporaryDetach)
        mTemporaryDetach = true;
    // mode (if any) as soon as this TextView is recycled.
    if (mEditor != null)
        getEditor().hideControllers();
}||||||||@Override
public void onStartTemporaryDetach() {
    super.onStartTemporaryDetach();
    // usually because this instance is an editable field in a list
    if (!mDispatchTemporaryDetach)
        mTemporaryDetach = true;
    // mode (if any) as soon as this TextView is recycled.
    if (mEditor != null)
        mEditor.hideControllers();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(SuperExpr
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

