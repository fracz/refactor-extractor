@Override
public int length() {
    return 4 + /* label */
    1 + /* kind id */
    1 + /* the number of properties that form a unique tuple */
    8 * propertyKeyIds.length + /* the property keys themselves */
    8;
/* owned index rule */
}||||||||@Override
public int length() {
    // TODO: Change format to rather use short/int for length/propertyId, much like count store does
    int propertyCount = descriptor.isComposite() ? descriptor.getPropertyKeyIds().length : 1;
    return 4 + /* label */
    1 + /* kind id */
    1 + /* the number of properties that form a unique tuple */
    8 * propertyCount + /* the property keys themselves */
    8;
/* owned index rule */
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
								(BlockComment
								)
							)
						)
						(IntegerLiteralExpr
							(BlockComment
							)
						)
					)
					(BinaryExpr
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockComment
						)
					)
				)
				(IntegerLiteralExpr
					(BlockComment
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
								(BlockComment
								)
							)
						)
						(IntegerLiteralExpr
							(BlockComment
							)
						)
					)
					(BinaryExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
						(BlockComment
						)
					)
				)
				(IntegerLiteralExpr
					(BlockComment
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

