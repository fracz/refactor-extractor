@Test
public void testBasicIntp() {
    if (getSparkVersionNumber() > 11) {
        assertEquals(InterpreterResult.Code.SUCCESS, pySparkInterpreter.interpret("a = 1\n", context).code());
    }
    InterpreterResult result = pySparkInterpreter.interpret("from pyspark.streaming import StreamingContext\n" + "import time\n" + "ssc = StreamingContext(sc, 1)\n" + "rddQueue = []\n" + "for i in range(5):\n" + "    rddQueue += [ssc.sparkContext.parallelize([j for j in range(1, 1001)], 10)]\n" + "inputStream = ssc.queueStream(rddQueue)\n" + "mappedStream = inputStream.map(lambda x: (x % 10, 1))\n" + "reducedStream = mappedStream.reduceByKey(lambda a, b: a + b)\n" + "reducedStream.pprint()\n" + "ssc.start()\n" + "time.sleep(6)\n" + "ssc.stop(stopSparkContext=False, stopGraceFully=True)", context);
    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
}||||||||@Test
public void testBasicIntp() throws InterpreterException {
    if (getSparkVersionNumber() > 11) {
        assertEquals(InterpreterResult.Code.SUCCESS, pySparkInterpreter.interpret("a = 1\n", context).code());
    }
    InterpreterResult result = pySparkInterpreter.interpret("from pyspark.streaming import StreamingContext\n" + "import time\n" + "ssc = StreamingContext(sc, 1)\n" + "rddQueue = []\n" + "for i in range(5):\n" + "    rddQueue += [ssc.sparkContext.parallelize([j for j in range(1, 1001)], 10)]\n" + "inputStream = ssc.queueStream(rddQueue)\n" + "mappedStream = inputStream.map(lambda x: (x % 10, 1))\n" + "reducedStream = mappedStream.reduceByKey(lambda a, b: a + b)\n" + "reducedStream.pprint()\n" + "ssc.start()\n" + "time.sleep(6)\n" + "ssc.stop(stopSparkContext=False, stopGraceFully=True)", context);
    assertEquals(InterpreterResult.Code.SUCCESS, result.code());
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		StringLiteralExpr
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		StringLiteralExpr
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

