/* (non-Javadoc)
	 *
	 * @see
	 * org.zaproxy.zap.spider.parser.SpiderParser#parseResource(org.parosproxy.paros.network.HttpMessage
	 * , net.htmlparser.jericho.Source, int) */
@Override
public void parseResource(HttpMessage message, Source source, int depth) {
    // If form processing is disabled, don't parse anything
    if (!param.isProcessForm())
        return;
    // Prepare the source, if not provided
    if (source == null)
        source = new Source(message.getResponseBody().toString());
    // Get the context (base url)
    String baseURL;
    if (message == null)
        baseURL = "";
    else
        baseURL = message.getRequestHeader().getURI().toString();
    log.info("Base URL: " + baseURL);
    // Go through the forms
    List<Element> forms = source.getAllElements(HTMLElementName.FORM);
    for (Element form : forms) {
        // Get method and action
        String method = form.getAttributeValue("method");
        String action = form.getAttributeValue("action");
        log.info("Found new form with method: '" + method + "' and action: " + action);
        // If no action, skip the form
        if (action == null) {
            log.warn("Skipping form with no 'action' defined at: " + form.getDebugInfo());
            continue;
        }
        // If POSTing forms is not enabled, skip processing of forms with POST method
        if (!param.isPostForm() && method != null && method.trim().equalsIgnoreCase(METHOD_POST)) {
            log.warn("Skipping form with POST method because of user settings.");
            continue;
        }
        // Prepare data set
        List<HtmlParameter> formDataSet = prepareFormDataSet(form.getFormFields());
        // Process the case of a POST method
        if (method != null && method.trim().equalsIgnoreCase(METHOD_POST)) {
            String query = "";
            /* Ignore encoding, as we will not POST files anyway, so using
				 * "application/x-www-form-urlencoded" is adequate */
            // String encoding = form.getAttributeValue("enctype");
            // if (encoding != null && encoding.equals("multipart/form-data"))
            query = buildEncodedUrlQuery(formDataSet);
            log.info("Submiting form with POST method and message body with form parameters (normal encoding): " + query);
            // Build the absolute canonical URL
            String fullURL = URLCanonicalizer.getCanonicalURL(action, baseURL);
            if (fullURL == null)
                return;
            log.debug("Canonical URL constructed using '" + action + "': " + fullURL);
            notifyListenersPostResourceFound(message, depth + 1, fullURL, query);
        } else // Process anything else as a GET method
        {
            String query = buildEncodedUrlQuery(formDataSet);
            log.info("Submiting form with GET method and query with form parameters: " + query);
            if (action.contains("?"))
                if (action.endsWith("?"))
                    processURL(message, depth, action + query, baseURL);
                else
                    processURL(message, depth, action + "&" + query, baseURL);
            else
                processURL(message, depth, action + "?" + query, baseURL);
        }
    }
}||||||||/* (non-Javadoc)
	 *
	 * @see
	 * org.zaproxy.zap.spider.parser.SpiderParser#parseResource(org.parosproxy.paros.network.HttpMessage
	 * , net.htmlparser.jericho.Source, int) */
@Override
public void parseResource(HttpMessage message, Source source, int depth) {
    // If form processing is disabled, don't parse anything
    if (!param.isProcessForm())
        return;
    // Prepare the source, if not provided
    if (source == null)
        source = new Source(message.getResponseBody().toString());
    // Get the context (base url)
    String baseURL;
    if (message == null)
        baseURL = "";
    else
        baseURL = message.getRequestHeader().getURI().toString();
    // Go through the forms
    List<Element> forms = source.getAllElements(HTMLElementName.FORM);
    for (Element form : forms) {
        // Get method and action
        String method = form.getAttributeValue("method");
        String action = form.getAttributeValue("action");
        log.info("Found new form with method: '" + method + "' and action: " + action);
        // If no action, skip the form
        if (action == null) {
            log.info("Skipping form with no 'action' defined at: " + form.getDebugInfo());
            continue;
        }
        // If POSTing forms is not enabled, skip processing of forms with POST method
        if (!param.isPostForm() && method != null && method.trim().equalsIgnoreCase(METHOD_POST)) {
            log.info("Skipping form with POST method because of user settings.");
            continue;
        }
        // Prepare data set
        List<HtmlParameter> formDataSet = prepareFormDataSet(form.getFormFields());
        // Process the case of a POST method
        if (method != null && method.trim().equalsIgnoreCase(METHOD_POST)) {
            String query = "";
            /* Ignore encoding, as we will not POST files anyway, so using
				 * "application/x-www-form-urlencoded" is adequate */
            // String encoding = form.getAttributeValue("enctype");
            // if (encoding != null && encoding.equals("multipart/form-data"))
            query = buildEncodedUrlQuery(formDataSet);
            log.debug("Submiting form with POST method and message body with form parameters (normal encoding): " + query);
            // Build the absolute canonical URL
            String fullURL = URLCanonicalizer.getCanonicalURL(action, baseURL);
            if (fullURL == null)
                return;
            log.debug("Canonical URL constructed using '" + action + "': " + fullURL);
            notifyListenersPostResourceFound(message, depth + 1, fullURL, query);
        } else // Process anything else as a GET method
        {
            String query = buildEncodedUrlQuery(formDataSet);
            log.debug("Submiting form with GET method and query with form parameters: " + query);
            if (action.contains("?")) {
                if (action.endsWith("?"))
                    processURL(message, depth, action + query, baseURL);
                else
                    processURL(message, depth, action + "&" + query, baseURL);
            } else {
                processURL(message, depth, action + "?" + query, baseURL);
            }
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					StringLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(IfStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
						LineComment
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(ReturnStmt
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(BlockComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(ObjectCreationExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					StringLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
						)
						LineComment
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									StringLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(ReturnStmt
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(BlockComment
	)
)

