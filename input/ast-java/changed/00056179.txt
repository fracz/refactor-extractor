/**
 * Asynchronously stops the workspace.
 *
 * @param workspaceId
 * the id of the workspace to stop
 * @throws ServerException
 * when any server error occurs
 * @throws NullPointerException
 * when {@code workspaceId} is null
 * @throws NotFoundException
 * when workspace {@code workspaceId} doesn't have runtime
 */
public void stopWorkspace(String workspaceId) throws ServerException, NotFoundException, ConflictException {
    requireNonNull(workspaceId, "Required non-null workspace id");
    performAsyncStop(normalizeState(workspaceDao.get(workspaceId)));
}||||||||/**
 * Asynchronously stops the workspace.
 *
 * @param workspaceId
 * the id of the workspace to stop
 * @throws ServerException
 * when any server error occurs
 * @throws NullPointerException
 * when {@code workspaceId} is null
 * @throws NotFoundException
 * when workspace {@code workspaceId} doesn't have runtime
 */
public void stopWorkspace(String workspaceId) throws ServerException, NotFoundException, ConflictException {
    requireNonNull(workspaceId, "Required non-null workspace id");
    final WorkspaceImpl workspace = normalizeState(workspaceDao.get(workspaceId));
    checkWorkspaceIsRunning(workspace, "stop");
    performAsyncStop(workspace);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

