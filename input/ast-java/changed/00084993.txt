@Override
protected boolean doFetchNext() {
    while (relationshipId != NO_NEXT_RELATIONSHIP.intValue()) {
        RelationshipRecord record = relationshipStore.readRecord(relationshipId, relationshipRecord, FORCE, cursor);
        // to chase a used record down the line.
        try {
            if (record.inUse()) {
                // direction is checked while reading the group chain, no need to check it here again
                if (!isDense) {
                    // Direction check
                    switch(direction) {
                        case BOTH:
                            break;
                        case INCOMING:
                            {
                                if (record.getSecondNode() != fromNodeId) {
                                    continue;
                                }
                                break;
                            }
                        case OUTGOING:
                            {
                                if (record.getFirstNode() != fromNodeId) {
                                    continue;
                                }
                                break;
                            }
                        default:
                            throw new IllegalStateException("Unknown direction: " + direction);
                    }
                }
                // Type check, for dense nodes it is checked while traversing the group records
                if (isDense || checkType(record.getType())) {
                    return true;
                }
            }
        } finally {
            // Pick next relationship
            if (record.getFirstNode() == fromNodeId) {
                relationshipId = record.getFirstNextRel();
            } else if (record.getSecondNode() == fromNodeId) {
                relationshipId = record.getSecondNextRel();
            } else {
                throw new InvalidRecordException("While loading relationships for Node[" + fromNodeId + "] a Relationship[" + record.getId() + "] was encountered that had startNode:" + " " + record.getFirstNode() + " and endNode: " + record.getSecondNode() + ", i.e. which had neither start nor end node as the node we're loading relationships for");
            }
            // traverse the next group
            if (relationshipId == NO_NEXT_RELATIONSHIP.intValue() && isDense) {
                relationshipId = nextChainStart();
            }
        }
    }
    return false;
}||||||||@Override
protected boolean doFetchNext() {
    while (relationshipId != NO_NEXT_RELATIONSHIP.intValue()) {
        RelationshipRecord record = relationshipStore.readRecord(relationshipId, relationshipRecord, FORCE, cursor);
        // to chase a used record down the line.
        try {
            // Direction check
            if (record.inUse()) {
                if (direction != Direction.BOTH) {
                    switch(direction) {
                        case INCOMING:
                            {
                                if (record.getSecondNode() != fromNodeId) {
                                    continue;
                                }
                                break;
                            }
                        case OUTGOING:
                            {
                                if (record.getFirstNode() != fromNodeId) {
                                    continue;
                                }
                                break;
                            }
                        default:
                            throw new IllegalStateException("Unknown direction: " + direction);
                    }
                }
                // Type check
                if (!allowedTypes.test(record.getType())) {
                    continue;
                }
                return true;
            }
        } finally {
            // Pick next relationship
            if (record.getFirstNode() == fromNodeId) {
                relationshipId = record.getFirstNextRel();
            } else if (record.getSecondNode() == fromNodeId) {
                relationshipId = record.getSecondNextRel();
            } else {
                throw new InvalidRecordException("While loading relationships for Node[" + fromNodeId + "] a Relationship[" + record.getId() + "] was encountered that had startNode:" + " " + record.getFirstNode() + " and endNode: " + record.getSecondNode() + ", i.e. which had neither start nor end node as the node we're loading relationships for");
            }
            // traverse the next group
            if (relationshipId == NO_NEXT_RELATIONSHIP.intValue() && isDense) {
                relationshipId = nextChainStart();
            }
        }
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				StringLiteralExpr
																				NameExpr
																					SimpleName
																			)
																			StringLiteralExpr
																		)
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														StringLiteralExpr
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(SwitchStmt
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(BreakStmt
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(BlockStmt
													(IfStmt
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ContinueStmt
															)
														)
													)
													(BreakStmt
													)
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(BlockStmt
													(IfStmt
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ContinueStmt
															)
														)
													)
													(BreakStmt
													)
												)
											)
											(SwitchEntryStmt
												(ThrowStmt
													(ObjectCreationExpr
														(BinaryExpr
															StringLiteralExpr
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											NameExpr
												SimpleName
											LineComment
										)
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
									(BlockStmt
										(ReturnStmt
											(BooleanLiteralExpr
											)
										)
									)
									LineComment
								)
							)
						)
					)
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				StringLiteralExpr
																				NameExpr
																					SimpleName
																			)
																			StringLiteralExpr
																		)
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														StringLiteralExpr
													)
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(SwitchStmt
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(BlockStmt
													(IfStmt
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ContinueStmt
															)
														)
													)
													(BreakStmt
													)
												)
											)
											(SwitchEntryStmt
												NameExpr
													SimpleName
												(BlockStmt
													(IfStmt
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ContinueStmt
															)
														)
													)
													(BreakStmt
													)
												)
											)
											(SwitchEntryStmt
												(ThrowStmt
													(ObjectCreationExpr
														(BinaryExpr
															StringLiteralExpr
															NameExpr
																SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											NameExpr
												SimpleName
										)
									)
								)
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ContinueStmt
										)
									)
									LineComment
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
							LineComment
						)
					)
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

