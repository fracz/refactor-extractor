@NotNull
public GithubAuthData getAuthData() {
    if (!myCredentialsModified) {
        return mySettings.getAuthData();
    }
    Object selected = myAuthTypeComboBox.getSelectedItem();
    if (AUTH_PASSWORD.equals(selected))
        return GithubAuthData.createBasicAuth(getHost(), getLogin(), getPassword());
    if (AUTH_TOKEN.equals(selected))
        return GithubAuthData.createTokenAuth(getHost(), getLogin(), getPassword());
    LOG.error("GithubSettingsPanel: illegal selection: anonymous AuthData created");
    return GithubAuthData.createAnonymous(getHost());
}||||||||@NotNull
public GithubAuthData getAuthData() {
    if (!myCredentialsModified) {
        return mySettings.getAuthData();
    }
    Object selected = myAuthTypeComboBox.getSelectedItem();
    if (AUTH_PASSWORD.equals(selected))
        return GithubAuthData.createBasicAuth(getHost(), getLogin(), getPassword());
    if (AUTH_TOKEN.equals(selected))
        return GithubAuthData.createTokenAuth(getHost(), getPassword());
    LOG.error("GithubSettingsPanel: illegal selection: anonymous AuthData created");
    return GithubAuthData.createAnonymous(getHost());
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(ReturnStmt
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
					)
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

