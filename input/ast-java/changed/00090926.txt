/**
 * Processes change events from the {@link Ecosystem}. Sensor values from
 * {@link MSensor} are handled by
 * {@link #processSensorValue(MSensor, Notification) processSensorValue},
 * actor values from {@link MSwitchActore} are handled by
 * {@link #processSwitchActorValue(MSwitchActor, Notification)
 * processSwitchActorValue}. (no add or remove events, these are handled in
 * {@link #initializeTFDevices(Notification) initializeTFDevices}).
 *
 * @param notification
 * The {@link Notification} about changes to the
 * {@link Ecosystem}.
 */
private void processTFDeviceValues(Notification notification) {
    if (notification.getNotifier() instanceof MSensor) {
        MSensor<?> sensor = (MSensor<?>) notification.getNotifier();
        int featureID = notification.getFeatureID(MSensor.class);
        if (featureID == ModelPackage.MSENSOR__SENSOR_VALUE) {
            processSensorValue(sensor, notification);
        }
    } else if (notification.getNotifier() instanceof MSwitchActor) {
        MSwitchActor switchActor = (MSwitchActor) notification.getNotifier();
        int featureID = notification.getFeatureID(MSwitchActor.class);
        if (featureID == ModelPackage.MSWITCH_ACTOR__SWITCH_STATE) {
            processSwitchActorValue(switchActor, notification);
        }
    }
}||||||||/**
 * Processes change events from the {@link Ecosystem}. Sensor values from
 * {@link MSensor} are handled by
 * {@link #processSensorValue(MSensor, Notification) processSensorValue},
 * actor values from {@link MSwitchActore} are handled by
 * {@link #processSwitchActorValue(MSwitchActor, Notification)
 * processSwitchActorValue}. (no add or remove events, these are handled in
 * {@link #initializeTFDevices(Notification) initializeTFDevices}).
 *
 * @param notification
 * The {@link Notification} about changes to the
 * {@link Ecosystem}.
 */
private void processTFDeviceValues(Notification notification) {
    if (notification.getNotifier() instanceof MSensor) {
        MSensor<?> sensor = (MSensor<?>) notification.getNotifier();
        int featureID = notification.getFeatureID(MSensor.class);
        if (featureID == ModelPackage.MSENSOR__SENSOR_VALUE) {
            processValue((MBaseDevice) sensor, notification);
        }
    } else if (notification.getNotifier() instanceof MSwitchActor) {
        MSwitchActor switchActor = (MSwitchActor) notification.getNotifier();
        int featureID = notification.getFeatureID(MSwitchActor.class);
        if (featureID == ModelPackage.MSWITCH_ACTOR__SWITCH_STATE) {
            processValue((MBaseDevice) switchActor, notification);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(IfStmt
				(InstanceOfExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(InstanceOfExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(IfStmt
				(InstanceOfExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

