// @Test
// public void testFailWithSubAgg() throws Exception {
// String source = "{\n" +
// "  \"aggs\": {\n" +
// "    \"top-tags\": {\n" +
// "      \"terms\": {\n" +
// "        \"field\": \"tags\"\n" +
// "      },\n" +
// "      \"aggs\": {\n" +
// "        \"top_tags_hits\": {\n" +
// "          \"top_hits\": {},\n" +
// "          \"aggs\": {\n" +
// "            \"max\": {\n" +
// "              \"max\": {\n" +
// "                \"field\": \"age\"\n" +
// "              }\n" +
// "            }\n" +
// "          }\n" +
// "        }\n" +
// "      }\n" +
// "    }\n" +
// "  }\n" +
// "}";
// try {
// client().prepareSearch("idx").setTypes("type")
// .setSource(new BytesArray(source))
// .get();
// fail();
// } catch (SearchPhaseExecutionException e) {
// assertThat(e.toString(),
// containsString("Aggregator [top_tags_hits] of type [top_hits] cannot accept sub-aggregations"));
// }
// } NORELEASE this needs to be tested in a top_hits aggregations unit test
@Test
public void testEmptyIndex() throws Exception {
    SearchResponse response = client().prepareSearch("empty").setTypes("type").addAggregation(topHits("hits")).get();
    assertSearchResponse(response);
    TopHits hits = response.getAggregations().get("hits");
    assertThat(hits, notNullValue());
    assertThat(hits.getName(), equalTo("hits"));
    assertThat(hits.getHits().totalHits(), equalTo(0l));
}||||||||// public void testFailWithSubAgg() throws Exception {
// String source = "{\n" +
// "  \"aggs\": {\n" +
// "    \"top-tags\": {\n" +
// "      \"terms\": {\n" +
// "        \"field\": \"tags\"\n" +
// "      },\n" +
// "      \"aggs\": {\n" +
// "        \"top_tags_hits\": {\n" +
// "          \"top_hits\": {},\n" +
// "          \"aggs\": {\n" +
// "            \"max\": {\n" +
// "              \"max\": {\n" +
// "                \"field\": \"age\"\n" +
// "              }\n" +
// "            }\n" +
// "          }\n" +
// "        }\n" +
// "      }\n" +
// "    }\n" +
// "  }\n" +
// "}";
// try {
// client().prepareSearch("idx").setTypes("type")
// .setSource(new BytesArray(source))
// .get();
// fail();
// } catch (SearchPhaseExecutionException e) {
// assertThat(e.toString(),
// containsString("Aggregator [top_tags_hits] of type [top_hits] cannot accept sub-aggregations"));
// }
// } NORELEASE this needs to be tested in a top_hits aggregations unit test
public void testEmptyIndex() throws Exception {
    SearchResponse response = client().prepareSearch("empty").setTypes("type").addAggregation(topHits("hits")).get();
    assertSearchResponse(response);
    TopHits hits = response.getAggregations().get("hits");
    assertThat(hits, notNullValue());
    assertThat(hits.getName(), equalTo("hits"));
    assertThat(hits.getHits().totalHits(), equalTo(0l));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					(LongLiteralExpr
					)
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					(LongLiteralExpr
					)
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

