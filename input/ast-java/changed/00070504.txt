@Override
public void process(Node externs, Node root) {
    locationAbstraction = new DegenerateLocationAbstraction();
// Currently performs no analysis. In the future, this method
// will construct a callgraph and calculate side effects summaries
// for all functions.
// TODO(dcc): Add per-function side effects summaries.
}||||||||@Override
public void process(Node externs, Node root) {
    switch(locationAbstractionIdentifier) {
        case DEGENERATE:
            locationAbstraction = new DegenerateLocationAbstraction();
            break;
        case VISIBILITY_BASED:
            locationAbstraction = createVisibilityAbstraction(externs, root);
            break;
        default:
            throw new IllegalStateException("Unrecognized location abstraction " + "identifier: " + locationAbstractionIdentifier);
    }
// In the future, this method
// will construct a callgraph and calculate side effects summaries
// for all functions.
// TODO(dcc): Add per-function side effects summaries.
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

