// DCL on a volatile is safe as of Java 5, which we obviously require.
@SuppressWarnings("DoubleCheckedLocking")
public T get() {
    if (instance == null) {
        /*
                        * Use a pretty coarse lock. We don't want to run into deadlocks
                        * when two threads try to load circularly-dependent objects.
                        * Maybe one of these days we will identify independent graphs of
                        * objects and offer to load them in parallel.
                        */
        synchronized (InjectorImpl.class) {
            if (instance == null) {
                instance = creator.get();
            }
        }
    }
    return instance;
}||||||||// DCL on a volatile is safe as of Java 5, which we obviously require.
@Override
@SuppressWarnings("DoubleCheckedLocking")
public T get() {
    if (instance == null) {
        /*
                        * Use a pretty coarse lock. We don't want to run into deadlocks
                        * when two threads try to load circularly-dependent objects.
                        * Maybe one of these days we will identify independent graphs of
                        * objects and offer to load them in parallel.
                        */
        synchronized (InjectorImpl.class) {
            if (instance == null) {
                instance = creator.get();
            }
        }
    }
    return instance;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockComment
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockComment
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	LineComment
)

