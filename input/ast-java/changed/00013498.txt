/**
 * Checks out a new branch in background.
 * If there are unmerged files, proposes to resolve the conflicts and tries to check out again.
 * Doesn't check the name of new branch for validity - do this before calling this method, otherwise a standard error dialog will be shown.
 *
 * @param name Name of the new branch to check out.
 * @param reference
 */
public void checkoutNewBranch(@NotNull final String name, final String reference, final Runnable callInAwtAfterExecution) {
    new CommonBackgroundTask(myProject, "Checking out new branch " + name) {

        @Override
        public void execute(@NotNull ProgressIndicator indicator) {
            doCheckoutNewBranch(name, reference);
            if (callInAwtAfterExecution != null) {
                SwingUtilities.invokeLater(callInAwtAfterExecution);
            }
        }
    }.runInBackground();
}||||||||/**
 * Checks out a new branch in background.
 * If there are unmerged files, proposes to resolve the conflicts and tries to check out again.
 * Doesn't check the name of new branch for validity - do this before calling this method, otherwise a standard error dialog will be shown.
 *
 * @param name Name of the new branch to check out.
 */
public void checkoutNewBranch(@NotNull final String name) {
    new CommonBackgroundTask(myProject, "Checking out new branch " + name) {

        @Override
        public void execute(@NotNull ProgressIndicator indicator) {
            doCheckoutNewBranch(name);
        }
    }.runInBackground();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							(MarkerAnnotationExpr
								Name
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					NameExpr
						SimpleName
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							(MarkerAnnotationExpr
								Name
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					NameExpr
						SimpleName
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

