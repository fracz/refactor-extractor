/**
 * This generates the SQLite commands to create the DB
 *
 * @param database
 */
private void executeCreations(final SQLiteDatabase database) {
    TransactionManager.transact(database, new Runnable() {

        @Override
        public void run() {
            Set<ModelAdapter> modelAdapters = mManager.getModelAdapters();
            for (ModelAdapter modelAdapter : modelAdapters) {
                database.execSQL(modelAdapter.getCreationQuery());
            }
        /*Collection<TableStructure> tableStructures = mManager.getStructure().getModelAdapter().values();
                for (TableStructure tableStructure : tableStructures) {
                    if (!tableStructure.isModelView()) {
                        database.execSQL(tableStructure.getCreationQuery().getQuery());
                    }
                }*/
        /*Collection<ModelViewDefinition> modelViews = mManager.getStructure().getModelViews().values();

                for (ModelViewDefinition modelView : modelViews) {
                    QueryBuilder queryBuilder = new QueryBuilder()
                            .append("CREATE VIEW")
                            .appendSpaceSeparated(modelView.getName())
                            .append("AS ")
                            .append(modelView.getWhere().getQuery());
                    database.execSQL(queryBuilder.getQuery());
                }*/
        }
    });
}||||||||/**
 * This generates the SQLite commands to create the DB
 *
 * @param database
 */
private void executeCreations(final SQLiteDatabase database) {
    TransactionManager.transact(database, new Runnable() {

        @Override
        public void run() {
            List<ModelAdapter> modelAdapters = mManager.getModelAdapters();
            for (ModelAdapter modelAdapter : modelAdapters) {
                database.execSQL(modelAdapter.getCreationQuery());
            }
            /*Collection<TableStructure> tableStructures = mManager.getStructure().getModelAdapter().values();
                for (TableStructure tableStructure : tableStructures) {
                    if (!tableStructure.isModelView()) {
                        database.execSQL(tableStructure.getCreationQuery().getQuery());
                    }
                }*/
            // create our model views
            List<ModelViewAdapter> modelViews = mManager.getModelViewAdapters();
            for (ModelViewAdapter modelView : modelViews) {
                QueryBuilder queryBuilder = new QueryBuilder().append("CREATE VIEW").appendSpaceSeparated(modelView.getViewName()).append("AS ").append(modelView.getCreationQuery());
                database.execSQL(queryBuilder.getQuery());
            }
        }
    });
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ForeachStmt
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								NameExpr
									SimpleName
								(VariableDeclarationExpr
									(VariableDeclarator
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ForeachStmt
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								NameExpr
									SimpleName
								(VariableDeclarationExpr
									(VariableDeclarator
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								LineComment
							)
							(ForeachStmt
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																(ObjectCreationExpr
																	(ClassOrInterfaceType
																		SimpleName
																	)
																)
															)
														)
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								NameExpr
									SimpleName
								(VariableDeclarationExpr
									(VariableDeclarator
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

