/**
 * This verifies that the user can override the current stack trace level on a command line. The issue here is that
 * the UI defines a default stack trace level that will always be used for all commands, but there are time when you
 * want to override it. This is useful if someone enters something into the command line tab or just wants to make a
 * favorite that always uses a specific stack trace level. All they have to do is specify a stack trace level on
 * their command line and the won't append one. This verifies that the function that does the check if its already
 * defined is working.
 */
public void testOverridingStackTraceLevel() {
    // first try it with the stack trace level at the end
    String commandLine = ":build:something -" + LoggingCommandLineConverter.FULL_STACKTRACE;
    CommandLineAssistant commandLineAssistant = new CommandLineAssistant();
    String[] arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasShowStacktraceDefined(arguments));
    // now try it with the stack trace level in the middle
    commandLine = ":build:something -" + LoggingCommandLineConverter.FULL_STACKTRACE + " :clean";
    arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasShowStacktraceDefined(arguments));
    // now try it with the stack trace level at the beginning
    commandLine = "-" + LoggingCommandLineConverter.FULL_STACKTRACE + " :clean";
    arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasShowStacktraceDefined(arguments));
    // now try it with a different stack trace level
    commandLine = "-" + LoggingCommandLineConverter.STACKTRACE + " :clean";
    arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasShowStacktraceDefined(arguments));
    // lastly verify it doesn't inadvertantly detect a stack trace
    commandLine = ":clean";
    arguments = CommandLineAssistant.breakUpCommandLine(commandLine);
    assertFalse(commandLineAssistant.hasShowStacktraceDefined(arguments));
}||||||||/**
 * This verifies that the user can override the current stack trace level on a command line. The issue here is that
 * the UI defines a default stack trace level that will always be used for all commands, but there are time when you
 * want to override it. This is useful if someone enters something into the command line tab or just wants to make a
 * favorite that always uses a specific stack trace level. All they have to do is specify a stack trace level on
 * their command line and the won't append one. This verifies that the function that does the check if its already
 * defined is working.
 */
public void testOverridingStackTraceLevel() {
    // first try it with the stack trace level at the end
    String commandLine = ":build:something -" + LoggingCommandLineConverter.FULL_STACKTRACE;
    CommandLineAssistant commandLineAssistant = new CommandLineAssistant();
    String[] arguments = breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasShowStacktraceDefined(arguments));
    // now try it with the stack trace level in the middle
    commandLine = ":build:something -" + LoggingCommandLineConverter.FULL_STACKTRACE + " :clean";
    arguments = breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasShowStacktraceDefined(arguments));
    // now try it with the stack trace level at the beginning
    commandLine = "-" + LoggingCommandLineConverter.FULL_STACKTRACE + " :clean";
    arguments = breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasShowStacktraceDefined(arguments));
    // now try it with a different stack trace level
    commandLine = "-" + LoggingCommandLineConverter.STACKTRACE + " :clean";
    arguments = breakUpCommandLine(commandLine);
    assertTrue(commandLineAssistant.hasShowStacktraceDefined(arguments));
    // lastly verify it doesn't inadvertantly detect a stack trace
    commandLine = ":clean";
    arguments = breakUpCommandLine(commandLine);
    assertFalse(commandLineAssistant.hasShowStacktraceDefined(arguments));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				StringLiteralExpr
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

