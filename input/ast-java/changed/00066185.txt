/**
 * Traverses the json tree of the valid query provided as argument and mutates it one or more times by adding one object within each
 * object encountered.
 *
 * For instance given the following valid term query:
 * {
 * "term" : {
 * "field" : {
 * "value" : "foo"
 * }
 * }
 * }
 *
 * The following two mutations will be generated, and an exception is expected when trying to parse them:
 * {
 * "term" : {
 * "newField" : {
 * "field" : {
 * "value" : "foo"
 * }
 * }
 * }
 * }
 *
 * {
 * "term" : {
 * "field" : {
 * "newField" : {
 * "value" : "foo"
 * }
 * }
 * }
 * }
 *
 * Every mutation is then added to the list of results with a boolean flag indicating if a parsing exception is expected or not
 * for the mutation. Some specific objects do not cause any exception as they can hold arbitrary content; they are passed using the
 * arbitraryMarkers parameter.
 */
static List<Tuple<String, Boolean>> alterateQueries(Set<String> queries, Set<String> arbitraryMarkers) throws IOException {
    List<Tuple<String, Boolean>> results = new ArrayList<>();
    // Indicate if a part of the query can hold any arbitrary content
    boolean hasArbitraryContent = (arbitraryMarkers != null && arbitraryMarkers.isEmpty() == false);
    for (String query : queries) {
        // Track the number of query mutations
        int mutation = 0;
        while (true) {
            boolean expectException = true;
            BytesStreamOutput out = new BytesStreamOutput();
            try (XContentGenerator generator = XContentType.JSON.xContent().createGenerator(out);
                XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, query)) {
                int objectIndex = -1;
                Deque<String> levels = new LinkedList<>();
                // Parse the valid query and inserts a new object level called "newField"
                XContentParser.Token token;
                while ((token = parser.nextToken()) != null) {
                    if (token == XContentParser.Token.START_OBJECT) {
                        objectIndex++;
                        levels.addLast(parser.currentName());
                        if (objectIndex == mutation) {
                            // We reached the place in the object tree where we want to insert a new object level
                            generator.writeStartObject();
                            generator.writeFieldName("newField");
                            XContentHelper.copyCurrentStructure(generator, parser);
                            generator.writeEndObject();
                            if (hasArbitraryContent) {
                                // field is one (or a child) of those, no exception is expected when parsing the mutated query.
                                for (String marker : arbitraryMarkers) {
                                    if (levels.contains(marker)) {
                                        expectException = false;
                                        break;
                                    }
                                }
                            }
                            // Jump to next token
                            continue;
                        }
                    } else if (token == XContentParser.Token.END_OBJECT) {
                        levels.removeLast();
                    }
                    // We are walking through the object tree, so we can safely copy the current node
                    XContentHelper.copyCurrentEvent(generator, parser);
                }
                if (objectIndex < mutation) {
                    // We did not reach the insertion point, there's no more mutations to try
                    break;
                } else {
                    // We reached the expected insertion point, so next time we'll try one step further
                    mutation++;
                }
            }
            results.add(new Tuple<>(out.bytes().utf8ToString(), expectException));
        }
    }
    return results;
}||||||||/**
 * Traverses the json tree of the valid query provided as argument and mutates it one or more times by adding one object within each
 * object encountered.
 *
 * For instance given the following valid term query:
 * {
 * "term" : {
 * "field" : {
 * "value" : "foo"
 * }
 * }
 * }
 *
 * The following two mutations will be generated, and an exception is expected when trying to parse them:
 * {
 * "term" : {
 * "newField" : {
 * "field" : {
 * "value" : "foo"
 * }
 * }
 * }
 * }
 *
 * {
 * "term" : {
 * "field" : {
 * "newField" : {
 * "value" : "foo"
 * }
 * }
 * }
 * }
 *
 * Every mutation is then added to the list of results with a boolean flag indicating if a parsing exception is expected or not
 * for the mutation. Some specific objects do not cause any exception as they can hold arbitrary content; they are passed using the
 * arbitraryMarkers parameter.
 */
static List<Tuple<String, Boolean>> alterateQueries(Set<String> queries, Set<String> arbitraryMarkers) throws IOException {
    List<Tuple<String, Boolean>> results = new ArrayList<>();
    // Indicate if a part of the query can hold any arbitrary content
    boolean hasArbitraryContent = (arbitraryMarkers != null && arbitraryMarkers.isEmpty() == false);
    for (String query : queries) {
        // Track the number of query mutations
        int mutation = 0;
        while (true) {
            boolean expectException = true;
            BytesStreamOutput out = new BytesStreamOutput();
            try (XContentGenerator generator = XContentType.JSON.xContent().createGenerator(out);
                XContentParser parser = JsonXContent.jsonXContent.createParser(NamedXContentRegistry.EMPTY, query)) {
                int objectIndex = -1;
                Deque<String> levels = new LinkedList<>();
                // Parse the valid query and inserts a new object level called "newField"
                XContentParser.Token token;
                while ((token = parser.nextToken()) != null) {
                    if (token == XContentParser.Token.START_ARRAY) {
                        levels.addLast(parser.currentName());
                    } else if (token == XContentParser.Token.START_OBJECT) {
                        objectIndex++;
                        levels.addLast(parser.currentName());
                        if (objectIndex == mutation) {
                            // We reached the place in the object tree where we want to insert a new object level
                            generator.writeStartObject();
                            generator.writeFieldName("newField");
                            XContentHelper.copyCurrentStructure(generator, parser);
                            generator.writeEndObject();
                            if (hasArbitraryContent) {
                                // field is one (or a child) of those, no exception is expected when parsing the mutated query.
                                for (String marker : arbitraryMarkers) {
                                    if (levels.contains(marker)) {
                                        expectException = false;
                                        break;
                                    }
                                }
                            }
                            // Jump to next token
                            continue;
                        }
                    } else if (token == XContentParser.Token.END_OBJECT || token == XContentParser.Token.END_ARRAY) {
                        levels.removeLast();
                    }
                    // We are walking through the object tree, so we can safely copy the current node
                    XContentHelper.copyCurrentEvent(generator, parser);
                }
                if (objectIndex < mutation) {
                    // We did not reach the insertion point, there's no more mutations to try
                    break;
                } else {
                    // We reached the expected insertion point, so next time we'll try one step further
                    mutation++;
                }
            }
            results.add(new Tuple<>(out.bytes().utf8ToString(), expectException));
        }
    }
    return results;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(EnclosedExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(TryStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ObjectCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									LineComment
								)
								(WhileStmt
									(BlockStmt
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(IfStmt
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															LineComment
														)
														(ExpressionStmt
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(ExpressionStmt
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														(IfStmt
															NameExpr
																SimpleName
															(BlockStmt
																(ForeachStmt
																	(BlockStmt
																		(IfStmt
																			(MethodCallExpr
																				NameExpr
																					SimpleName
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			(BlockStmt
																				(ExpressionStmt
																					(AssignExpr
																						NameExpr
																							SimpleName
																						(BooleanLiteralExpr
																						)
																					)
																				)
																				(BreakStmt
																				)
																			)
																		)
																	)
																	NameExpr
																		SimpleName
																	(VariableDeclarationExpr
																		(VariableDeclarator
																			SimpleName
																			(ClassOrInterfaceType
																				SimpleName
																			)
																		)
																	)
																	LineComment
																)
															)
														)
														(ContinueStmt
															LineComment
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										NullLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
									(BlockStmt
										(BreakStmt
											LineComment
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BooleanLiteralExpr
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(EnclosedExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(BooleanLiteralExpr
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(TryStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ObjectCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									LineComment
								)
								(WhileStmt
									(BlockStmt
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(FieldAccessExpr
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(IfStmt
													(BinaryExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(FieldAccessExpr
																SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
														(BinaryExpr
															NameExpr
																SimpleName
															(FieldAccessExpr
																SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(UnaryExpr
															NameExpr
																SimpleName
														)
													)
													(ExpressionStmt
														(MethodCallExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(IfStmt
														(BinaryExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																LineComment
															)
															(ExpressionStmt
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(IfStmt
																NameExpr
																	SimpleName
																(BlockStmt
																	(ForeachStmt
																		(BlockStmt
																			(IfStmt
																				(MethodCallExpr
																					NameExpr
																						SimpleName
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				(BlockStmt
																					(ExpressionStmt
																						(AssignExpr
																							NameExpr
																								SimpleName
																							(BooleanLiteralExpr
																							)
																						)
																					)
																					(BreakStmt
																					)
																				)
																			)
																		)
																		NameExpr
																			SimpleName
																		(VariableDeclarationExpr
																			(VariableDeclarator
																				SimpleName
																				(ClassOrInterfaceType
																					SimpleName
																				)
																			)
																		)
																		LineComment
																	)
																)
															)
															(ContinueStmt
																LineComment
															)
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										NullLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
									(BlockStmt
										(BreakStmt
											LineComment
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BooleanLiteralExpr
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

