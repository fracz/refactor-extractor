/**
 * @param t  The traversal use to reach the call site.
 * @param callNode The CALL node.
 * @param fnNode The function to evaluate.
 * @param needAliases A set of function parameter names that can not be
 * used without aliasing. Returned by getUnsafeParameterNames().
 * @param mode  Inlining mode to be used.
 * @return Whether the inlining can occur.
 */
CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis) {
    // Allow direct function calls or "fn.call" style calls.
    if (!isSupportedCallType(callNode)) {
        return CanInlineResult.NO;
    }
    // TODO(johnlenz): Add support for 'apply'
    if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode)) {
        // global 'this' object.
        return CanInlineResult.NO;
    }
    if (mode == InliningMode.DIRECT) {
        return canInlineReferenceDirectly(callNode, fnNode);
    } else {
        return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
    }
}||||||||/**
 * @param t  The traversal use to reach the call site.
 * @param callNode The CALL node.
 * @param fnNode The function to evaluate for inlining.
 * @param needAliases A set of function parameter names that can not be
 * used without aliasing. Returned by getUnsafeParameterNames().
 * @param mode Inlining mode to be used.
 * @param referencesThis Whether fnNode contains references to its this
 * object.
 * @param containsFunctions Whether fnNode contains inner functions.
 * @return Whether the inlining can occur.
 */
CanInlineResult canInlineReferenceToFunction(NodeTraversal t, Node callNode, Node fnNode, Set<String> needAliases, InliningMode mode, boolean referencesThis, boolean containsFunctions) {
    // Allow direct function calls or "fn.call" style calls.
    if (!isSupportedCallType(callNode)) {
        return CanInlineResult.NO;
    }
    // last until explicitly cleared.
    if (containsFunctions && !t.inGlobalScope()) {
        // inner functions.
        return CanInlineResult.NO;
    }
    // TODO(johnlenz): Add support for 'apply'
    if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode)) {
        // global 'this' object.
        return CanInlineResult.NO;
    }
    if (mode == InliningMode.DIRECT) {
        return canInlineReferenceDirectly(callNode, fnNode);
    } else {
        return canInlineReferenceAsStatementBlock(t, callNode, fnNode, needAliases);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

