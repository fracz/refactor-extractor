@Override
public Iterable<TitanRelation> relations() {
    if (isAtomic())
        return super.relations();
    else
        return new DisjunctiveQueryIterable(this, TitanRelation.class);
}||||||||@Override
public Iterable<TitanRelation> relations() {
    return new DisjunctiveQueryIterable(flattenQuery(), TitanRelation.class);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(ReturnStmt
				(ObjectCreationExpr
					(ThisExpr
					)
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(ReturnStmt
				(MethodCallExpr
					SimpleName
					(SuperExpr
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodCallExpr
					SimpleName
				)
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

