/**
 * Sets the application restrictions for a given target application running in the calling user.
 * <p>
 * The caller must be a profile or device owner on that user, or the package allowed to manage
 * application restrictions via {@link #setApplicationRestrictionsManagingPackage}; otherwise a
 * security exception will be thrown.
 * <p>
 * The provided {@link Bundle} consists of key-value pairs, where the types of values may be:
 * <ul>
 * <li>{@code boolean}
 * <li>{@code int}
 * <li>{@code String} or {@code String[]}
 * <li>From {@link android.os.Build.VERSION_CODES#M}, {@code Bundle} or {@code Bundle[]}
 * </ul>
 * <p>
 * If the restrictions are not available yet, but may be applied in the near future, the caller
 * can notify the target application of that by adding
 * {@link UserManager#KEY_RESTRICTIONS_PENDING} to the settings parameter.
 * <p>
 * The application restrictions are only made visible to the target application via
 * {@link UserManager#getApplicationRestrictions(String)}, in addition to the profile or device
 * owner, and the application restrictions managing package via
 * {@link #getApplicationRestrictions}.
 *
 * <p>NOTE: The method performs disk I/O and shouldn't be called on the main thread
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with, or
 * {@code null} if called by the application restrictions managing package.
 * @param packageName The name of the package to update restricted settings for.
 * @param settings A {@link Bundle} to be parsed by the receiving application, conveying a new
 * set of active restrictions.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @see #setApplicationRestrictionsManagingPackage
 * @see UserManager#KEY_RESTRICTIONS_PENDING
 */
@WorkerThread
public void setApplicationRestrictions(@Nullable ComponentName admin, String packageName, Bundle settings) {
    throwIfParentInstance("setApplicationRestrictions");
    if (mService != null) {
        try {
            mService.setApplicationRestrictions(admin, packageName, settings);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}||||||||/**
 * Sets the application restrictions for a given target application running in the calling user.
 * <p>
 * The caller must be a profile or device owner on that user, or the package allowed to manage
 * application restrictions via {@link #setDelegatedScopes} with the
 * {@link #DELEGATION_APP_RESTRICTIONS} scope; otherwise a security exception will be thrown.
 * <p>
 * The provided {@link Bundle} consists of key-value pairs, where the types of values may be:
 * <ul>
 * <li>{@code boolean}
 * <li>{@code int}
 * <li>{@code String} or {@code String[]}
 * <li>From {@link android.os.Build.VERSION_CODES#M}, {@code Bundle} or {@code Bundle[]}
 * </ul>
 * <p>
 * If the restrictions are not available yet, but may be applied in the near future, the caller
 * can notify the target application of that by adding
 * {@link UserManager#KEY_RESTRICTIONS_PENDING} to the settings parameter.
 * <p>
 * The application restrictions are only made visible to the target application via
 * {@link UserManager#getApplicationRestrictions(String)}, in addition to the profile or device
 * owner, and the application restrictions managing package via
 * {@link #getApplicationRestrictions}.
 *
 * <p>NOTE: The method performs disk I/O and shouldn't be called on the main thread
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with, or
 * {@code null} if called by the application restrictions managing package.
 * @param packageName The name of the package to update restricted settings for.
 * @param settings A {@link Bundle} to be parsed by the receiving application, conveying a new
 * set of active restrictions.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 * @see #setDelegatedScopes
 * @see #DELEGATION_APP_RESTRICTIONS
 * @see UserManager#KEY_RESTRICTIONS_PENDING
 */
@WorkerThread
public void setApplicationRestrictions(@Nullable ComponentName admin, String packageName, Bundle settings) {
    throwIfParentInstance("setApplicationRestrictions");
    if (mService != null) {
        try {
            mService.setApplicationRestrictions(admin, mContext.getPackageName(), packageName, settings);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

