/**
 * Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter
 * because it doesn't support the concept of terms having a different weight based on position.
 * @param highlighterType highlighter to test
 */
private void phraseBoostTestCase(String highlighterType) {
    ensureGreen();
    StringBuilder text = new StringBuilder();
    text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n");
    for (int i = 0; i < 10; i++) {
        text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n");
    }
    text.append("highlight words together\n");
    for (int i = 0; i < 10; i++) {
        text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n");
    }
    index("test", "type1", "1", "field1", text.toString());
    refresh();
    // Match queries
    phraseBoostTestCaseForClauses(highlighterType, 100f, matchQuery("field1", "highlight words together"), matchPhraseQuery("field1", "highlight words together"));
    // Query string with a single field
    phraseBoostTestCaseForClauses(highlighterType, 100f, queryStringQuery("highlight words together").field("field1"), queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true));
    // Query string with a single field without dismax
    phraseBoostTestCaseForClauses(highlighterType, 100f, queryStringQuery("highlight words together").field("field1").useDisMax(false), queryStringQuery("\"highlight words together\"").field("field1").useDisMax(false).autoGeneratePhraseQueries(true));
    // Query string with more than one field
    phraseBoostTestCaseForClauses(highlighterType, 100f, queryStringQuery("highlight words together").field("field1").field("field2"), queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true));
    // Query string boosting the field
    phraseBoostTestCaseForClauses(highlighterType, 1f, queryStringQuery("highlight words together").field("field1"), queryStringQuery("\"highlight words together\"").field("field1^100").autoGeneratePhraseQueries(true));
}||||||||/**
 * Test phrase boosting over normal term matches.  Note that this will never pass with the plain highlighter
 * because it doesn't support the concept of terms having a different weight based on position.
 * @param highlighterType highlighter to test
 */
private void phraseBoostTestCase(String highlighterType) {
    ensureGreen();
    StringBuilder text = new StringBuilder();
    text.append("words words junk junk junk junk junk junk junk junk highlight junk junk junk junk together junk\n");
    for (int i = 0; i < 10; i++) {
        text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n");
    }
    text.append("highlight words together\n");
    for (int i = 0; i < 10; i++) {
        text.append("junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk junk\n");
    }
    index("test", "type1", "1", "field1", text.toString());
    refresh();
    // Match queries
    phraseBoostTestCaseForClauses(highlighterType, 100f, matchQuery("field1", "highlight words together"), matchPhraseQuery("field1", "highlight words together"));
    // Query string with a single field
    phraseBoostTestCaseForClauses(highlighterType, 100f, queryStringQuery("highlight words together").field("field1"), queryStringQuery("\"highlight words together\"").field("field1").autoGeneratePhraseQueries(true));
    // Query string with a single field without dismax
    phraseBoostTestCaseForClauses(highlighterType, 100f, queryStringQuery("highlight words together").field("field1").useDisMax(false), queryStringQuery("\"highlight words together\"").field("field1").useDisMax(false).autoGeneratePhraseQueries(true));
    // Query string with more than one field
    phraseBoostTestCaseForClauses(highlighterType, 100f, queryStringQuery("highlight words together").field("field1").field("field2"), queryStringQuery("\"highlight words together\"").field("field1").field("field2").autoGeneratePhraseQueries(true));
    // Query string boosting the field
    phraseBoostTestCaseForClauses(highlighterType, 1f, queryStringQuery("highlight words together").field("field1"), queryStringQuery("\"highlight words together\"").field("field1", 100).autoGeneratePhraseQueries(true));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(DoubleLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

