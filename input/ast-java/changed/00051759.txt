/**
 * Returns the value of the xcode version, if available. This is determined based on a combination
 * of the {@code --xcode_version} build flag and the {@code xcode_config} target defined in the
 * {@code --xcode_version_config} flag. Returns null if no xcode is available.
 */
@SkylarkCallable(name = "xcode_version")
@Nullable
public DottedVersion getXcodeVersion() {
    return xcodeVersion;
}||||||||/**
 * Returns the value of the xcode version, if available. This is determined based on a combination
 * of the {@code --xcode_version} build flag and the {@code xcode_config} target defined in the
 * {@code --xcode_version_config} flag. Returns null if no xcode is available.
 */
@SkylarkCallable(name = "xcode_version", doc = "Returns the Xcode version that is being used to build.<p>" + "This will return <code>None</code> if no Xcode versions are available.", allowReturnNones = true)
@Nullable
public DottedVersion getXcodeVersion() {
    return xcodeVersion;
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		(MemberValuePair
			SimpleName
			(BinaryExpr
				StringLiteralExpr
				StringLiteralExpr
			)
		)
		(MemberValuePair
			SimpleName
			(BooleanLiteralExpr
			)
		)
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

