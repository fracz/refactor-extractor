@Ignore
@Test
public void shouldDieNicelyIfWrongUrl() {
    new File("agent.jar").delete();
    try {
        new AgentBootstrapper() {

            @Override
            void jvmExit(int returnValue) {
            }
        }.go(false, "IShouldNotResolveAtAll", 9090);
        fail("Shouldn't work if wrong URL provided");
    } catch (Exception e) {
        assertThat(e.getMessage(), containsString("Please check the URL"));
    }
}||||||||@Ignore
@Test
public void shouldDieNicelyIfWrongUrl() {
    new File("agent.jar").delete();
    try {
        new AgentBootstrapper() {

            @Override
            void jvmExit(int returnValue) {
            }
        }.go(false, new AgentBootstrapperArgs(new URL("http://" + "IShouldNotResolveAtAll" + ":" + 9090 + "/go"), null, AgentBootstrapperArgs.SslMode.NONE));
        fail("Shouldn't work if wrong URL provided");
    } catch (Exception e) {
        assertThat(e.getMessage(), containsString("Please check the URL"));
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						StringLiteralExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(PrimitiveType
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						(ObjectCreationExpr
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(IntegerLiteralExpr
										)
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							NullLiteralExpr
							(FieldAccessExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(PrimitiveType
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
)

