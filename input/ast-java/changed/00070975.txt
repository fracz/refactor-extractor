/**
 * Eliminates the parameter from a function definition.
 *
 * @param function The function node
 * @param argIndex The index of the the argument to remove.
 * @param definitionFinder The definition and use sites index.
 * @return The Node of the argument removed.
 */
private Node eliminateFunctionParamAt(Node function, int argIndex, DefinitionUseSiteFinder definitionFinder) {
    checkArgument(function.isFunction(), "Node must be a function.");
    Node formalArgPtr = NodeUtil.getArgumentForFunction(function, argIndex);
    if (formalArgPtr != null) {
        compiler.reportChangeToEnclosingScope(formalArgPtr);
        definitionFinder.removeReferences(formalArgPtr);
        function.getSecondChild().removeChild(formalArgPtr);
    }
    return formalArgPtr;
}||||||||/**
 * Eliminates the parameter from a function definition.
 *
 * @param function The function node
 * @param argIndex The index of the argument to remove.
 * @param definitionFinder The definition and use sites index.
 * @return The Node of the argument removed.
 */
private Node eliminateFunctionParamAt(Node function, int argIndex) {
    checkArgument(function.isFunction(), "Node must be a function.");
    Node formalParamNode = NodeUtil.getArgumentForFunction(function, argIndex);
    if (formalParamNode != null) {
        NodeUtil.deleteNode(formalParamNode, compiler);
    }
    return formalParamNode;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

