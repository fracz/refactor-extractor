/**
 * List the statuses and block locations of the files in the given path.
 * Does not guarantee to return the iterator that traverses statuses
 * of the files in a sorted order.
 *
 * If the path is a directory,
 * if recursive is false, returns files in the directory;
 * if recursive is true, return files in the subtree rooted at the path.
 * If the path is a file, return the file's status and block locations.
 *
 * @param f is the path
 * @param recursive if the subdirectories need to be traversed recursively
 *
 * @return an iterator that traverses statuses of the files
 *
 * @throws FileNotFoundException when the path does not exist;
 * IOException see specific implementation
 */
public RemoteIterator<LocatedFileStatus> listFiles(final Path f, final boolean recursive) throws FileNotFoundException, IOException {
    return new RemoteIterator<LocatedFileStatus>() {

        private Stack<RemoteIterator<LocatedFileStatus>> itors = new Stack<RemoteIterator<LocatedFileStatus>>();

        private RemoteIterator<LocatedFileStatus> curItor = listLocatedStatus(f);

        private LocatedFileStatus curFile;

        @Override
        public boolean hasNext() throws IOException {
            while (curFile == null) {
                if (curItor.hasNext()) {
                    handleFileStat(curItor.next());
                } else if (!itors.empty()) {
                    curItor = itors.pop();
                } else {
                    return false;
                }
            }
            return true;
        }

        /**
         * Process the input stat.
         * If it is a file, return the file stat.
         * If it is a directory, traverse the directory if recursive is true;
         * ignore it if recursive is false.
         * @param stat input status
         * @throws IOException if any IO error occurs
         */
        private void handleFileStat(LocatedFileStatus stat) throws IOException {
            if (stat.isFile()) {
                // file
                curFile = stat;
            } else if (recursive) {
                // directory
                itors.push(curItor);
                curItor = listLocatedStatus(stat.getPath());
            }
        }

        @Override
        public LocatedFileStatus next() throws IOException {
            if (hasNext()) {
                LocatedFileStatus result = curFile;
                curFile = null;
                return result;
            }
            throw new java.util.NoSuchElementException("No more entry in " + f);
        }
    };
}||||||||/**
 * List the statuses and block locations of the files in the given path.
 * Does not guarantee to return the iterator that traverses statuses
 * of the files in a sorted order.
 * <pre>
 * If the path is a directory,
 * if recursive is false, returns files in the directory;
 * if recursive is true, return files in the subtree rooted at the path.
 * If the path is a file, return the file's status and block locations.
 * </pre>
 * @param f is the path
 * @param recursive if the subdirectories need to be traversed recursively
 *
 * @return an iterator that traverses statuses of the files
 *
 * @throws FileNotFoundException when the path does not exist;
 * @throws IOException see specific implementation
 */
public RemoteIterator<LocatedFileStatus> listFiles(final Path f, final boolean recursive) throws FileNotFoundException, IOException {
    return new RemoteIterator<LocatedFileStatus>() {

        private Stack<RemoteIterator<LocatedFileStatus>> itors = new Stack<>();

        private RemoteIterator<LocatedFileStatus> curItor = listLocatedStatus(f);

        private LocatedFileStatus curFile;

        @Override
        public boolean hasNext() throws IOException {
            while (curFile == null) {
                if (curItor.hasNext()) {
                    handleFileStat(curItor.next());
                } else if (!itors.empty()) {
                    curItor = itors.pop();
                } else {
                    return false;
                }
            }
            return true;
        }

        /**
         * Process the input stat.
         * If it is a file, return the file stat.
         * If it is a directory, traverse the directory if recursive is true;
         * ignore it if recursive is false.
         * @param stat input status
         * @throws IOException if any IO error occurs
         */
        private void handleFileStat(LocatedFileStatus stat) throws IOException {
            if (stat.isFile()) {
                // file
                curFile = stat;
            } else if (recursive) {
                // directory
                itors.push(curItor);
                curItor = listLocatedStatus(stat.getPath());
            }
        }

        @Override
        public LocatedFileStatus next() throws IOException {
            if (hasNext()) {
                LocatedFileStatus result = curFile;
                curFile = null;
                return result;
            }
            throw new java.util.NoSuchElementException("No more entry in " + f);
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(WhileStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IfStmt
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					(JavadocComment
					)
				)
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											NameExpr
												SimpleName
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(WhileStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IfStmt
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BlockStmt
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					(JavadocComment
					)
				)
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											NameExpr
												SimpleName
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

