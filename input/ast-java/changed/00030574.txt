/**
 * This is used internally by generated models to turn on validation checking when
 * "validateEpoxyModelUsage" is enabled and the model is used with an {@link EpoxyController}.
 */
protected final void addWithDebugValidation(EpoxyController controller) {
    if (controller == null) {
        throw new IllegalArgumentException("Controller cannot be null");
    }
    if (attachedController != null) {
        throw new IllegalEpoxyUsage("This model was already added to the controller at position " + controller.getIndexOfModelInBuildingList(this));
    }
    attachedController = controller;
    // We save the current hashCode so we can compare it to the hashCode at later points in time
    // in order to validate that it doesn't change and enforce mutability.
    hashCodeWhenAdded = hashCode();
    // The one time it is valid to change the model is during an interceptor callback. To support
    // that we need to update the hashCode after interceptors have been run.
    controller.addAfterInterceptorCallback(new AfterInterceptorCallback() {

        @Override
        public void afterInterceptorsRun() {
            hashCodeWhenAdded = EpoxyModel.this.hashCode();
        }
    });
}||||||||/**
 * This is used internally by generated models to turn on validation checking when
 * "validateEpoxyModelUsage" is enabled and the model is used with an {@link EpoxyController}.
 */
protected final void addWithDebugValidation(EpoxyController controller) {
    if (controller == null) {
        throw new IllegalArgumentException("Controller cannot be null");
    }
    if (controller.isModelAddedMultipleTimes(this)) {
        throw new IllegalEpoxyUsage("This model was already added to the controller at position " + controller.getFirstIndexOfModelInBuildingList(this));
    }
    if (firstControllerAddedTo == null) {
        firstControllerAddedTo = controller;
        // We save the current hashCode so we can compare it to the hashCode at later points in time
        // in order to validate that it doesn't change and enforce mutability.
        hashCodeWhenAdded = hashCode();
        // The one time it is valid to change the model is during an interceptor callback. To support
        // that we need to update the hashCode after interceptors have been run.
        // The model can be added to multiple controllers, but we only allow an interceptor change
        // the first time, since after that it will have been added to an adapter.
        controller.addAfterInterceptorCallback(new ModelInterceptorCallback() {

            @Override
            public void onInterceptorsStarted(EpoxyController controller) {
                currentlyInInterceptors = true;
            }

            @Override
            public void onInterceptorsFinished(EpoxyController controller) {
                hashCodeWhenAdded = EpoxyModel.this.hashCode();
                currentlyInInterceptors = false;
            }
        });
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								(ThisExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(ThisExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(ThisExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								(ThisExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(ThisExpr
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

