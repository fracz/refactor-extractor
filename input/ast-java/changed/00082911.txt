/*
    * netty io thread는 udp에서도 single뿐이 안됨.
    * worker를 multi로 돌려서 하라고 되있음.
    * */
@Test
public void server() throws IOException, InterruptedException {
    final ConnectionlessBootstrap udpServer = createUdpServer();
    Thread thread = new Thread(new Runnable() {

        @Override
        public void run() {
            udpServer.bind(new InetSocketAddress("127.0.0.1", PORT));
            try {
                logger.debug("server-await");
                latch.await();
            } catch (InterruptedException e) {
            }
        }
    });
    thread.start();
    Thread.sleep(1000);
    logger.debug("start--------");
    // ExecutorService executorService = Executors.newFixedThreadPool(10);
    // for (int i =0; i< 10; i++) {
    // executorService.execute(new Runnable() {
    // @Override
    // public void run() {
    // try {
    start();
    // } catch (IOException e) {
    // e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    // }
    // }
    // });
    // }
    // executorService.awaitTermination(120, TimeUnit.SECONDS) ;
    latch.countDown();
}||||||||/*
    * netty io thread는 udp에서도 single뿐이 안됨.
    * worker를 multi로 돌려서 하라고 되있음.
    * */
@Test
public void server() throws IOException, InterruptedException {
    final ConnectionlessBootstrap udpServer = createUdpServer();
    Thread thread = new Thread(new Runnable() {

        @Override
        public void run() {
            udpServer.bind(new InetSocketAddress("127.0.0.1", PORT));
            try {
                logger.debug("server-await");
                latch.await();
            } catch (InterruptedException e) {
            }
            logger.debug("server-shutdown");
            udpServer.shutdown();
        }
    });
    thread.start();
    Thread.sleep(1000);
    logger.debug("start--------");
    // ExecutorService executorService = Executors.newFixedThreadPool(10);
    // for (int i =0; i< 10; i++) {
    // executorService.execute(new Runnable() {
    // @Override
    // public void run() {
    // try {
    start();
    // } catch (IOException e) {
    // e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
    // }
    // }
    // });
    // }
    // executorService.awaitTermination(120, TimeUnit.SECONDS) ;
    latch.countDown();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(ObjectCreationExpr
												StringLiteralExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(TryStmt
										(CatchClause
											(BlockStmt
											)
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(BlockComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(ObjectCreationExpr
												StringLiteralExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(TryStmt
										(CatchClause
											(BlockStmt
											)
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(BlockComment
	)
)

