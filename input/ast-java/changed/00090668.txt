@Override
void epollInReady() {
    assert eventLoop().inEventLoop();
    final ChannelPipeline pipeline = pipeline();
    Throwable exception = null;
    try {
        try {
            for (; ; ) {
                int socketFd = Native.accept(fd().intValue());
                if (socketFd == -1) {
                    // this means everything was handled for now
                    break;
                }
                readPending = false;
                try {
                    pipeline.fireChannelRead(newChildChannel(socketFd));
                } catch (Throwable t) {
                    // keep on reading as we use epoll ET and need to consume everything from the socket
                    pipeline.fireChannelReadComplete();
                    pipeline.fireExceptionCaught(t);
                }
            }
        } catch (Throwable t) {
            exception = t;
        }
        pipeline.fireChannelReadComplete();
        if (exception != null) {
            pipeline.fireExceptionCaught(exception);
        }
    } finally {
        // See https://github.com/netty/netty/issues/2254
        if (!config().isAutoRead() && !readPending) {
            clearEpollIn0();
        }
    }
}||||||||@Override
void epollInReady() {
    assert eventLoop().inEventLoop();
    final ChannelPipeline pipeline = pipeline();
    Throwable exception = null;
    try {
        try {
            boolean edgeTriggered = isFlagSet(Native.EPOLLET);
            // if edgeTriggered is used we need to read all messages as we are not notified again otherwise.
            final int maxMessagesPerRead = edgeTriggered ? Integer.MAX_VALUE : config().getMaxMessagesPerRead();
            int messages = 0;
            do {
                int socketFd = Native.accept(fd().intValue());
                if (socketFd == -1) {
                    // this means everything was handled for now
                    break;
                }
                readPending = false;
                try {
                    pipeline.fireChannelRead(newChildChannel(socketFd));
                } catch (Throwable t) {
                    // keep on reading as we use epoll ET and need to consume everything from the socket
                    pipeline.fireChannelReadComplete();
                    pipeline.fireExceptionCaught(t);
                } finally {
                    if (!edgeTriggered && !config().isAutoRead()) {
                        // pending data
                        break;
                    }
                }
            } while (++messages < maxMessagesPerRead);
        } catch (Throwable t) {
            exception = t;
        }
        pipeline.fireChannelReadComplete();
        if (exception != null) {
            pipeline.fireExceptionCaught(exception);
        }
    } finally {
        // See https://github.com/netty/netty/issues/2254
        if (!config().isAutoRead() && !readPending) {
            clearEpollIn0();
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
									(BlockStmt
										(BreakStmt
											LineComment
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(TryStmt
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(AssertStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ConditionalExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(DoStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(UnaryExpr
											(IntegerLiteralExpr
											)
										)
									)
									(BlockStmt
										(BreakStmt
											LineComment
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
								(TryStmt
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(IfStmt
											(BinaryExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												(UnaryExpr
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
														)
													)
												)
											)
											(BlockStmt
												(BreakStmt
													LineComment
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BinaryExpr
								(UnaryExpr
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

