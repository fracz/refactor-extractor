/**
 * Create a {@link Slf4jReporter} attached to the Titan Metrics registry.
 * <p>
 * If {@code loggerName} is null, or if it is non-null but
 * {@link LoggerFactory#getLogger(loggerName)} returns null, then Metrics's
 * default Slf4j logger name is used instead.
 *
 * @param reportIntervalInMS
 * milliseconds to wait between writing metrics to the Slf4j
 * logger
 * @param loggerName
 * the name of the Slf4j logger that receives metrics
 */
public synchronized void addSlf4jReporter(long reportIntervalInMS, String loggerName) {
    if (null != slf4jReporter) {
        log.debug("Metrics Slf4jReporter already active; not creating another");
        return;
    }
    Slf4jReporter.Builder b = Slf4jReporter.forRegistry(getRegistry());
    if (null != loggerName) {
        Logger l = LoggerFactory.getLogger(loggerName);
        if (null != l) {
            b.outputTo(l);
        } else {
            log.error("Logger with name {} could not be obtained", loggerName);
        }
    }
    slf4jReporter = b.build();
    slf4jReporter.start(reportIntervalInMS, TimeUnit.MILLISECONDS);
}||||||||/**
 * Create a {@link Slf4jReporter} attached to the Titan Metrics registry.
 * <p>
 * If {@code loggerName} is null, or if it is non-null but
 * {@link LoggerFactory#getLogger(loggerName)} returns null, then Metrics's
 * default Slf4j logger name is used instead.
 *
 * @param reportInterval
 * time to wait between writing metrics to the Slf4j
 * logger
 * @param loggerName
 * the name of the Slf4j logger that receives metrics
 */
public synchronized void addSlf4jReporter(Duration reportInterval, String loggerName) {
    if (null != slf4jReporter) {
        log.debug("Metrics Slf4jReporter already active; not creating another");
        return;
    }
    Slf4jReporter.Builder b = Slf4jReporter.forRegistry(getRegistry());
    if (null != loggerName) {
        Logger l = LoggerFactory.getLogger(loggerName);
        if (null != l) {
            b.outputTo(l);
        } else {
            log.error("Logger with name {} could not be obtained", loggerName);
        }
    }
    slf4jReporter = b.build();
    slf4jReporter.start(reportInterval.getLength(SCHEDULING_TIME_UNIT), SCHEDULING_TIME_UNIT);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NullLiteralExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NullLiteralExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

