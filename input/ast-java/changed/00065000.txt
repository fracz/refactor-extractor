/**
 * A setting which contains a sensitive string, but which for legacy reasons must be found outside secure settings.
 * @see #secureString(String, Setting, Property...)
 */
public static Setting<SecureString> insecureString(String name) {
    return new Setting<SecureString>(name, "", SecureString::new, Property.Deprecated, Property.Filtered, Property.NodeScope) {

        @Override
        public SecureString get(Settings settings) {
            if (ALLOW_INSECURE_SETTINGS == false && exists(settings)) {
                throw new IllegalArgumentException("Setting [" + name + "] is insecure, " + "but property [allow_insecure_settings] is not set");
            }
            return super.get(settings);
        }
    };
}||||||||/**
 * A setting which contains a sensitive string, but which for legacy reasons must be found outside secure settings.
 * @see #secureString(String, Setting, Property...)
 */
public static Setting<SecureString> insecureString(String name) {
    return new InsecureStringSetting(name);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(SuperExpr
								)
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				NameExpr
					SimpleName
				StringLiteralExpr
				(MethodReferenceExpr
					(TypeExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

