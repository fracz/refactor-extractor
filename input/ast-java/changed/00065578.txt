@Test
public void testOmitTermFreqsAndPositions() throws Exception {
    // no randomized template for this test -- we are testing bwc compat and set version explicitly this might cause failures if an unsupported feature
    cluster().wipeTemplates();
    // is added randomly via an index template.
    Version version = Version.CURRENT;
    int iters = scaledRandomIntBetween(10, 20);
    for (int i = 0; i < iters; i++) {
        try {
            // backwards compat test!
            assertAcked(client().admin().indices().prepareCreate("test").addMapping("type1", "field1", "type=string,omit_term_freq_and_positions=true").setSettings(settings(version).put(SETTING_NUMBER_OF_SHARDS, 1)));
            assertThat(version.onOrAfter(Version.V_1_0_0_RC2), equalTo(false));
            indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "quick brown fox", "field2", "quick brown fox"), client().prepareIndex("test", "type1", "2").setSource("field1", "quick lazy huge brown fox", "field2", "quick lazy huge brown fox"));
            SearchResponse searchResponse = client().prepareSearch().setQuery(matchQuery("field2", "quick brown").type(MatchQueryBuilder.Type.PHRASE).slop(0)).get();
            assertHitCount(searchResponse, 1l);
            try {
                client().prepareSearch().setQuery(matchQuery("field1", "quick brown").type(MatchQueryBuilder.Type.PHRASE).slop(0)).get();
                fail("SearchPhaseExecutionException should have been thrown");
            } catch (SearchPhaseExecutionException e) {
                assertTrue(e.toString().contains("IllegalStateException[field \"field1\" was indexed without position data; cannot run PhraseQuery"));
            }
            cluster().wipeIndices("test");
        } catch (MapperParsingException ex) {
            assertThat(version.toString(), version.onOrAfter(Version.V_1_0_0_RC2), equalTo(true));
            assertThat(ex.getCause().getMessage(), equalTo("'omit_term_freq_and_positions' is not supported anymore - use ['index_options' : 'docs']  instead"));
        }
        version = randomVersion(random());
    }
}||||||||@Test
public void testOmitTermFreqsAndPositions() throws Exception {
    // no randomized template for this test -- we are testing bwc compat and set version explicitly this might cause failures if an unsupported feature
    cluster().wipeTemplates();
    // is added randomly via an index template.
    Version version = Version.CURRENT;
    int iters = scaledRandomIntBetween(10, 20);
    for (int i = 0; i < iters; i++) {
        try {
            // backwards compat test!
            assertAcked(client().admin().indices().prepareCreate("test").addMapping("type1", "field1", "type=string,omit_term_freq_and_positions=true").setSettings(settings(version).put(SETTING_NUMBER_OF_SHARDS, 1)));
            assertThat(version.onOrAfter(Version.V_1_0_0_RC2), equalTo(false));
            indexRandom(true, client().prepareIndex("test", "type1", "1").setSource("field1", "quick brown fox", "field2", "quick brown fox"), client().prepareIndex("test", "type1", "2").setSource("field1", "quick lazy huge brown fox", "field2", "quick lazy huge brown fox"));
            SearchResponse searchResponse = client().prepareSearch().setQuery(matchQuery("field2", "quick brown").type(Type.PHRASE).slop(0)).get();
            assertHitCount(searchResponse, 1l);
            try {
                client().prepareSearch().setQuery(matchQuery("field1", "quick brown").type(Type.PHRASE).slop(0)).get();
                fail("SearchPhaseExecutionException should have been thrown");
            } catch (SearchPhaseExecutionException e) {
                assertTrue(e.toString().contains("IllegalStateException[field \"field1\" was indexed without position data; cannot run PhraseQuery"));
            }
            cluster().wipeIndices("test");
        } catch (MapperParsingException ex) {
            assertThat(version.toString(), version.onOrAfter(Version.V_1_0_0_RC2), equalTo(true));
            assertThat(ex.getCause().getMessage(), equalTo("'omit_term_freq_and_positions' is not supported anymore - use ['index_options' : 'docs']  instead"));
        }
        version = randomVersion(random());
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										SimpleName
									)
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
									)
									SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
													)
												)
											)
										)
									)
								)
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									(BooleanLiteralExpr
									)
									SimpleName
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											(MethodCallExpr
												(IntegerLiteralExpr
												)
												SimpleName
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														StringLiteralExpr
														SimpleName
													)
												)
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
												)
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(LongLiteralExpr
								)
								SimpleName
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											(MethodCallExpr
												(IntegerLiteralExpr
												)
												SimpleName
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														StringLiteralExpr
														SimpleName
													)
												)
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
							)
							SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										SimpleName
									)
									SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
									)
									SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
													)
												)
											)
										)
									)
								)
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									(BooleanLiteralExpr
									)
									SimpleName
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
								(MethodCallExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										StringLiteralExpr
										StringLiteralExpr
										SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
								SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											(MethodCallExpr
												(IntegerLiteralExpr
												)
												SimpleName
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														StringLiteralExpr
														SimpleName
													)
												)
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
												)
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(LongLiteralExpr
								)
								SimpleName
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											(MethodCallExpr
												(IntegerLiteralExpr
												)
												SimpleName
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														StringLiteralExpr
														SimpleName
													)
												)
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
							)
							SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

