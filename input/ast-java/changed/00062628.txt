@Test
public void testFlags() throws Exception {
    initTestData();
    // check default flag
    String script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "position");
    // there should be no positions
    checkArrayValsInEachDoc(script, emptyArray, 3);
    script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "startOffset");
    // there should be no offsets
    checkArrayValsInEachDoc(script, emptyArray, 3);
    script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "endOffset");
    // there should be no offsets
    checkArrayValsInEachDoc(script, emptyArray, 3);
    script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "payloadAsInt(-1)");
    // there should be no payload
    checkArrayValsInEachDoc(script, emptyArray, 3);
    // check FLAG_FREQUENCIES flag
    script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "position");
    // there should be no positions
    checkArrayValsInEachDoc(script, emptyArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "startOffset");
    // there should be no offsets
    checkArrayValsInEachDoc(script, emptyArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "endOffset");
    // there should be no offsets
    checkArrayValsInEachDoc(script, emptyArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "payloadAsInt(-1)");
    // there should be no payloads
    checkArrayValsInEachDoc(script, emptyArray, 3);
    // check FLAG_POSITIONS flag
    script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "position");
    // there should be positions
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "startOffset");
    // there should be no offsets
    checkArrayValsInEachDoc(script, emptyArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "endOffset");
    // there should be no offsets
    checkArrayValsInEachDoc(script, emptyArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "payloadAsInt(-1)");
    // there should be no payloads
    checkArrayValsInEachDoc(script, emptyArray, 3);
    // check FLAG_OFFSETS flag
    script = createPositionsArrayScript("int_payload_field", "b", "_OFFSETS", "position");
    // there should be positions and s forth ...
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_OFFSETS", "startOffset");
    checkArrayValsInEachDoc(script, expectedStartOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_OFFSETS", "endOffset");
    checkArrayValsInEachDoc(script, expectedEndOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_OFFSETS", "payloadAsInt(-1)");
    checkArrayValsInEachDoc(script, expectedPayloadsArray, 3);
    // check FLAG_PAYLOADS flag
    script = createPositionsArrayScript("int_payload_field", "b", "_PAYLOADS", "position");
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_PAYLOADS", "startOffset");
    checkArrayValsInEachDoc(script, expectedStartOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_PAYLOADS", "endOffset");
    checkArrayValsInEachDoc(script, expectedEndOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_PAYLOADS", "payloadAsInt(-1)");
    checkArrayValsInEachDoc(script, expectedPayloadsArray, 3);
    // check all flags
    String allFlags = "_POSITIONS | _OFFSETS | _PAYLOADS";
    script = createPositionsArrayScript("int_payload_field", "b", allFlags, "position");
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", allFlags, "startOffset");
    checkArrayValsInEachDoc(script, expectedStartOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", allFlags, "endOffset");
    checkArrayValsInEachDoc(script, expectedEndOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", allFlags, "payloadAsInt(-1)");
    checkArrayValsInEachDoc(script, expectedPayloadsArray, 3);
    // check all flags without record
    script = createPositionsArrayScript("int_payload_field", "b", includeAllWithoutRecordFlag, "position");
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", includeAllWithoutRecordFlag, "startOffset");
    checkArrayValsInEachDoc(script, expectedStartOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", includeAllWithoutRecordFlag, "endOffset");
    checkArrayValsInEachDoc(script, expectedEndOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", includeAllWithoutRecordFlag, "payloadAsInt(-1)");
    checkArrayValsInEachDoc(script, expectedPayloadsArray, 3);
}||||||||@Test
public void testFlags() throws Exception {
    initTestData();
    // check default flag
    String script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "position");
    // there should be no positions
    /* TODO: the following tests fail with the new postings enum apis because of a bogus assert in BlockDocsEnum
        checkArrayValsInEachDoc(script, emptyArray, 3);
        script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "startOffset");
        // there should be no offsets
        checkArrayValsInEachDoc(script, emptyArray, 3);
        script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "endOffset");
        // there should be no offsets
        checkArrayValsInEachDoc(script, emptyArray, 3);
        script = createPositionsArrayScriptDefaultGet("int_payload_field", "b", "payloadAsInt(-1)");
        // there should be no payload
        checkArrayValsInEachDoc(script, emptyArray, 3);

        // check FLAG_FREQUENCIES flag
        script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "position");
        // there should be no positions
        checkArrayValsInEachDoc(script, emptyArray, 3);
        script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "startOffset");
        // there should be no offsets
        checkArrayValsInEachDoc(script, emptyArray, 3);
        script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "endOffset");
        // there should be no offsets
        checkArrayValsInEachDoc(script, emptyArray, 3);
        script = createPositionsArrayScript("int_payload_field", "b", "_FREQUENCIES", "payloadAsInt(-1)");
        // there should be no payloads
        checkArrayValsInEachDoc(script, emptyArray, 3);*/
    // check FLAG_POSITIONS flag
    script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "position");
    // there should be positions
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    /* TODO: these tests make a bogus assumption that asking for positions will return only positions
        script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "startOffset");
        // there should be no offsets
        checkArrayValsInEachDoc(script, emptyArray, 3);
        script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "endOffset");
        // there should be no offsets
        checkArrayValsInEachDoc(script, emptyArray, 3);
        script = createPositionsArrayScript("int_payload_field", "b", "_POSITIONS", "payloadAsInt(-1)");
        // there should be no payloads
        checkArrayValsInEachDoc(script, emptyArray, 3);*/
    // check FLAG_OFFSETS flag
    script = createPositionsArrayScript("int_payload_field", "b", "_OFFSETS", "position");
    // there should be positions and s forth ...
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_OFFSETS", "startOffset");
    checkArrayValsInEachDoc(script, expectedStartOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_OFFSETS", "endOffset");
    checkArrayValsInEachDoc(script, expectedEndOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_OFFSETS", "payloadAsInt(-1)");
    checkArrayValsInEachDoc(script, expectedPayloadsArray, 3);
    // check FLAG_PAYLOADS flag
    script = createPositionsArrayScript("int_payload_field", "b", "_PAYLOADS", "position");
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_PAYLOADS", "startOffset");
    checkArrayValsInEachDoc(script, expectedStartOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_PAYLOADS", "endOffset");
    checkArrayValsInEachDoc(script, expectedEndOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", "_PAYLOADS", "payloadAsInt(-1)");
    checkArrayValsInEachDoc(script, expectedPayloadsArray, 3);
    // check all flags
    String allFlags = "_POSITIONS | _OFFSETS | _PAYLOADS";
    script = createPositionsArrayScript("int_payload_field", "b", allFlags, "position");
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", allFlags, "startOffset");
    checkArrayValsInEachDoc(script, expectedStartOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", allFlags, "endOffset");
    checkArrayValsInEachDoc(script, expectedEndOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", allFlags, "payloadAsInt(-1)");
    checkArrayValsInEachDoc(script, expectedPayloadsArray, 3);
    // check all flags without record
    script = createPositionsArrayScript("int_payload_field", "b", includeAllWithoutRecordFlag, "position");
    checkArrayValsInEachDoc(script, expectedPositionsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", includeAllWithoutRecordFlag, "startOffset");
    checkArrayValsInEachDoc(script, expectedStartOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", includeAllWithoutRecordFlag, "endOffset");
    checkArrayValsInEachDoc(script, expectedEndOffsetsArray, 3);
    script = createPositionsArrayScript("int_payload_field", "b", includeAllWithoutRecordFlag, "payloadAsInt(-1)");
    checkArrayValsInEachDoc(script, expectedPayloadsArray, 3);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

