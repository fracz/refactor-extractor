@Test
public void exportTsvWithComma() {
    CreateGrid(3, 3);
    project.rows.get(1).cells.set(1, new Cell("with\t tab", null));
    try {
        SUT.export(project, options, engine, writer);
    } catch (IOException e) {
        Assert.fail();
    }
    Assert.assertEquals(writer.toString(), "column0\tcolumn1\tcolumn2\n" + "row0cell0\trow0cell1\trow0cell2\n" + "row1cell0\t\"with\t tab\"\trow1cell2\n" + "row2cell0\trow2cell1\trow2cell2\n");
}||||||||@Test(groups = { "broken" })
public void exportTsvWithComma() {
    CreateGrid(3, 3);
    project.rows.get(1).cells.set(1, new Cell("with\t tab", null));
    try {
        SUT.export(project, options, engine, writer);
    } catch (IOException e) {
        Assert.fail();
    }
    Assert.assertEquals(writer.toString(), "column0\tcolumn1\tcolumn2\n" + "row0cell0\trow0cell1\trow0cell2\n" + "row1cell0\t\"with\t tab\"\trow1cell2\n" + "row2cell0\trow2cell1\trow2cell2\n");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(ObjectCreationExpr
					StringLiteralExpr
					NullLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(ObjectCreationExpr
					StringLiteralExpr
					NullLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			(ArrayInitializerExpr
				StringLiteralExpr
			)
		)
		Name
	)
)

