/**
 * Put the Future in the cache if it does not already exist.
 * <p>
 * If this method returns a non-null value then another thread won the race and it should be returned instead of proceeding with execution of the new Future.
 *
 * @param cacheKey
 * key as defined by {@link HystrixCommand#getCacheKey()}
 * @param f
 * Future to be cached
 *
 * @return null if nothing else was in the cache (or this {@link HystrixCommand} does not have a cacheKey) or previous value if another thread beat us to adding to the cache
 */
// suppressing warnings because we are using a raw Future since it's in a heterogeneous ConcurrentHashMap cache
@SuppressWarnings({ "unchecked" })
public <T> Future<T> putIfAbsent(String cacheKey, Future<T> f) {
    ValueCacheKey key = getRequestCacheKey(cacheKey);
    if (key != null) {
        /* look for the stored value */
        Future<T> alreadySet = (Future<T>) requestVariableForCache.get(concurrencyStrategy).putIfAbsent(key, f);
        if (alreadySet != null) {
            // someone beat us so we didn't cache this
            return alreadySet;
        }
    }
    // we either set it in the cache or do not have a cache key
    return null;
}||||||||/**
 * Put the Future in the cache if it does not already exist.
 * <p>
 * If this method returns a non-null value then another thread won the race and it should be returned instead of proceeding with execution of the new Future.
 *
 * @param cacheKey
 * key as defined by {@link HystrixCommand#getCacheKey()}
 * @param f
 * Future to be cached
 *
 * @return null if nothing else was in the cache (or this {@link HystrixCommand} does not have a cacheKey) or previous value if another thread beat us to adding to the cache
 */
// suppressing warnings because we are using a raw Future since it's in a heterogeneous ConcurrentHashMap cache
@SuppressWarnings({ "unchecked" })
</* package */
T> Observable<T> putIfAbsent(String cacheKey, Observable<T> f) {
    ValueCacheKey key = getRequestCacheKey(cacheKey);
    if (key != null) {
        /* look for the stored value */
        Observable<T> alreadySet = (Observable<T>) requestVariableForCache.get(concurrencyStrategy).putIfAbsent(key, f);
        if (alreadySet != null) {
            // someone beat us so we didn't cache this
            return alreadySet;
        }
    }
    // we either set it in the cache or do not have a cache key
    return null;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockComment
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
							LineComment
						)
					)
				)
			)
		)
		(ReturnStmt
			NullLiteralExpr
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(SingleMemberAnnotationExpr
		(ArrayInitializerExpr
			StringLiteralExpr
		)
		Name
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockComment
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
							LineComment
						)
					)
				)
			)
		)
		(ReturnStmt
			NullLiteralExpr
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
		(BlockComment
		)
	)
	(SingleMemberAnnotationExpr
		(ArrayInitializerExpr
			StringLiteralExpr
		)
		Name
	)
	LineComment
)

