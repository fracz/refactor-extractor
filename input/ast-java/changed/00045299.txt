/**
 * flush the given memtable and swap in a new one for its CFS, if it hasn't been frozen already.  threadsafe.
 */
Future<?> maybeSwitchMemtable(Memtable oldMemtable, final boolean writeCommitLog) throws IOException {
    /**
     * If we can get the writelock, that means no new updates can come in and
     * all ongoing updates to memtables have completed. We can get the tail
     * of the log and use it as the starting position for log replay on recovery.
     */
    Table.flusherLock.writeLock().lock();
    try {
        if (oldMemtable.isFrozen()) {
            return null;
        }
        oldMemtable.freeze();
        final CommitLogSegment.CommitLogContext ctx = writeCommitLog ? CommitLog.instance().getContext() : null;
        logger_.info(columnFamily_ + " has reached its threshold; switching in a fresh Memtable at " + ctx);
        final Condition condition = submitFlush(oldMemtable);
        memtable_ = new Memtable(table_, columnFamily_);
        // while keeping the wait-for-flush (future.get) out of anything latency-sensitive.
        return commitLogUpdater_.submit(new WrappedRunnable() {

            public void runMayThrow() throws InterruptedException, IOException {
                condition.await();
                if (writeCommitLog) {
                    // if we're not writing to the commit log, we are replaying the log, so marking
                    // the log header with "you can discard anything written before the context" is not valid
                    CommitLog.instance().discardCompletedSegments(table_, columnFamily_, ctx);
                }
            }
        });
    } finally {
        Table.flusherLock.writeLock().unlock();
        if (memtableSwitchCount == Integer.MAX_VALUE) {
            memtableSwitchCount = 0;
        }
        memtableSwitchCount++;
    }
}||||||||/**
 * flush the given memtable and swap in a new one for its CFS, if it hasn't been frozen already.  threadsafe.
 */
Future<?> maybeSwitchMemtable(Memtable oldMemtable, final boolean writeCommitLog) throws IOException {
    /**
     * If we can get the writelock, that means no new updates can come in and
     * all ongoing updates to memtables have completed. We can get the tail
     * of the log and use it as the starting position for log replay on recovery.
     */
    Table.flusherLock.writeLock().lock();
    try {
        if (oldMemtable.isFrozen()) {
            return null;
        }
        oldMemtable.freeze();
        final CommitLogSegment.CommitLogContext ctx = writeCommitLog ? CommitLog.instance().getContext() : null;
        logger_.info(columnFamily_ + " has reached its threshold; switching in a fresh Memtable at " + ctx);
        final Condition condition = submitFlush(oldMemtable);
        memtable_ = new Memtable(this);
        // while keeping the wait-for-flush (future.get) out of anything latency-sensitive.
        return commitLogUpdater_.submit(new WrappedRunnable() {

            public void runMayThrow() throws InterruptedException, IOException {
                condition.await();
                if (writeCommitLog) {
                    // if we're not writing to the commit log, we are replaying the log, so marking
                    // the log header with "you can discard anything written before the context" is not valid
                    CommitLog.instance().discardCompletedSegments(table_, columnFamily_, ctx);
                }
            }
        });
    } finally {
        Table.flusherLock.writeLock().unlock();
        if (memtableSwitchCount == Integer.MAX_VALUE) {
            memtableSwitchCount = 0;
        }
        memtableSwitchCount++;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(JavadocComment
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
					)
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							NullLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								NameExpr
									SimpleName
								NullLiteralExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												LineComment
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(JavadocComment
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
					)
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
							NullLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								NameExpr
									SimpleName
								NullLiteralExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ThisExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ReturnStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IfStmt
										NameExpr
											SimpleName
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												LineComment
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

