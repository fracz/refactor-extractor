/**
 * Returns a stream consisting of the elements of this stream that matches the given filter.
 *
 * @param predicate the predicate to apply to each element to determine if it should be included
 * @return the new stream
 */
public Stream<T> filter(Predicate<? super T> predicate) {
    return new Stream<>(streamBuilder, addProcessorNode(new FilterProcessor<>(predicate), VALUE));
}||||||||/**
 * Returns a stream consisting of the elements of this stream that matches the given filter.
 *
 * @param predicate the predicate to apply to each element to determine if it should be included
 * @return the new stream
 */
public Stream<T> filter(Predicate<? super T> predicate) {
    return new Stream<>(streamBuilder, addProcessorNode(new FilterProcessor<>(predicate), VALUE, true));
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					NameExpr
						SimpleName
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(JavadocComment
	)
)

