public File getDirectoryForNewSSTables() {
    File path = getWriteableLocationAsFile();
    // Requesting GC has a chance to free space only if we're using mmap and a non SUN jvm
    if (path == null && (DatabaseDescriptor.getDiskAccessMode() == Config.DiskAccessMode.mmap || DatabaseDescriptor.getIndexAccessMode() == Config.DiskAccessMode.mmap) && !FileUtils.isCleanerAvailable()) {
        logger.info("Forcing GC to free up disk space.  Upgrade to the Oracle JVM to avoid this");
        StorageService.instance.requestGC();
        // retry after GCing has forced unmap of compacted SSTables so they can be deleted
        // Note: GCInspector will do this already, but only sun JVM supports GCInspector so far
        SSTableDeletingTask.rescheduleFailedTasks();
        Uninterruptibles.sleepUninterruptibly(10, TimeUnit.SECONDS);
        path = getWriteableLocationAsFile();
    }
    return path;
}||||||||/**
 * Basically the same as calling {@link #getWriteableLocationAsFile(long)} with an unknown size ({@code -1L}),
 * which may return any non-blacklisted directory - even a data directory that has no usable space.
 * Do not use this method in production code.
 *
 * @throws IOError if all directories are blacklisted.
 */
public File getDirectoryForNewSSTables() {
    return getWriteableLocationAsFile(-1L);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(EnclosedExpr
						(BinaryExpr
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				(UnaryExpr
					(LongLiteralExpr
					)
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)

