/**
 * Generate a new thumbnail for this activity.  This method is called before
 * pausing the activity, and should draw into <var>outBitmap</var> the
 * imagery for the desired thumbnail in the dimensions of that bitmap.  It
 * can use the given <var>canvas</var>, which is configured to draw into the
 * bitmap, for rendering if desired.
 *
 * <p>The default implementation renders the Screen's current view
 * hierarchy into the canvas to generate a thumbnail.
 *
 * <p>If you return false, the bitmap will be filled with a default
 * thumbnail.
 *
 * @param outBitmap The bitmap to contain the thumbnail.
 * @param canvas Can be used to render into the bitmap.
 *
 * @return Return true if you have drawn into the bitmap; otherwise after
 * you return it will be filled with a default thumbnail.
 *
 * @see #onCreateDescription
 * @see #onSaveInstanceState
 * @see #onPause
 */
public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
    final View view = mDecor;
    if (view == null) {
        return false;
    }
    final int vw = view.getWidth();
    final int vh = view.getHeight();
    final int dw = outBitmap.getWidth();
    final int dh = outBitmap.getHeight();
    canvas.save();
    canvas.scale(((float) dw) / vw, ((float) dh) / vh);
    view.draw(canvas);
    canvas.restore();
    return true;
}||||||||/**
 * Generate a new thumbnail for this activity.  This method is called before
 * pausing the activity, and should draw into <var>outBitmap</var> the
 * imagery for the desired thumbnail in the dimensions of that bitmap.  It
 * can use the given <var>canvas</var>, which is configured to draw into the
 * bitmap, for rendering if desired.
 *
 * <p>The default implementation renders the Screen's current view
 * hierarchy into the canvas to generate a thumbnail.
 *
 * <p>If you return false, the bitmap will be filled with a default
 * thumbnail.
 *
 * @param outBitmap The bitmap to contain the thumbnail.
 * @param canvas Can be used to render into the bitmap.
 *
 * @return Return true if you have drawn into the bitmap; otherwise after
 * you return it will be filled with a default thumbnail.
 *
 * @see #onCreateDescription
 * @see #onSaveInstanceState
 * @see #onPause
 */
public boolean onCreateThumbnail(Bitmap outBitmap, Canvas canvas) {
    if (mDecor == null) {
        return false;
    }
    int paddingLeft = 0;
    int paddingRight = 0;
    int paddingTop = 0;
    int paddingBottom = 0;
    // Find System window and use padding so we ignore space reserved for decorations
    // like the status bar and such.
    final FrameLayout top = (FrameLayout) mDecor;
    for (int i = 0; i < top.getChildCount(); i++) {
        View child = top.getChildAt(i);
        if (child.isFitsSystemWindowsFlagSet()) {
            paddingLeft = child.getPaddingLeft();
            paddingRight = child.getPaddingRight();
            paddingTop = child.getPaddingTop();
            paddingBottom = child.getPaddingBottom();
            break;
        }
    }
    final int visibleWidth = mDecor.getWidth() - paddingLeft - paddingRight;
    final int visibleHeight = mDecor.getHeight() - paddingTop - paddingBottom;
    canvas.save();
    canvas.scale((float) outBitmap.getWidth() / visibleWidth, (float) outBitmap.getHeight() / visibleHeight);
    canvas.translate(-paddingLeft, -paddingTop);
    mDecor.draw(canvas);
    canvas.restore();
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(EnclosedExpr
						(CastExpr
							NameExpr
								SimpleName
							(PrimitiveType
							)
						)
					)
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(EnclosedExpr
						(CastExpr
							NameExpr
								SimpleName
							(PrimitiveType
							)
						)
					)
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BreakStmt
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(CastExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(PrimitiveType
						)
					)
					NameExpr
						SimpleName
				)
				(BinaryExpr
					(CastExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(PrimitiveType
						)
					)
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(UnaryExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

