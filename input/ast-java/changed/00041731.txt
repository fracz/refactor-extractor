/**
 * Adds discovered printers. This method should be called during a
 * printer discovery period, i.e. after a call to
 * {@link #onStartPrinterDiscovery()} and before the corresponding
 * call to {@link #onStopPrinterDiscovery()}, otherwise it does nothing.
 * <p>
 * <strong>Note:</strong> For every printer discovery period all
 * printers have to be added. You can call this method as many times as
 * necessary during the discovery period but should not pass in already
 * added printers. If a printer is already added in the same printer
 * discovery period, it will be ignored.
 * </p>
 *
 * @param printers A list with discovered printers.
 *
 * @throws IllegalStateException If this service is not connected.
 *
 * @see #removeDiscoveredPrinters(List)
 * @see #onStartPrinterDiscovery()
 * @see #onStopPrinterDiscovery()
 */
public final void addDiscoveredPrinters(List<PrinterInfo> printers) {
    synchronized (mLock) {
        if (mClient == null) {
            throw new IllegalStateException("Print serivice not connected!");
        }
        if (mDiscoveringPrinters) {
            try {
                // Calling with a lock into the system is fine.
                mClient.addDiscoveredPrinters(printers);
            } catch (RemoteException re) {
                Log.e(LOG_TAG, "Error adding discovered printers!", re);
            }
        }
    }
}||||||||/**
 * Adds discovered printers. This method should be called during a
 * printer discovery period, i.e. after a call to
 * {@link #onStartPrinterDiscovery()} and before the corresponding
 * call to {@link #onStopPrinterDiscovery()}, otherwise it does nothing.
 * <p>
 * <strong>Note:</strong> For every printer discovery period all
 * printers have to be added. You can call this method as many times as
 * necessary during the discovery period but should not pass in already
 * added printers. If a printer is already added in the same printer
 * discovery period, it will be ignored. If you want to update an already
 * added printer, you should removed it and then re-add it.
 * </p>
 *
 * @param printers A list with discovered printers.
 *
 * @see #removeDiscoveredPrinters(List)
 * @see #onStartPrinterDiscovery()
 * @see #onStopPrinterDiscovery()
 *
 * @throws IllegalStateException If this service is not connected.
 */
public final void addDiscoveredPrinters(List<PrinterInfo> printers) {
    final IPrinterDiscoveryObserver observer;
    synchronized (mLock) {
        throwIfNotConnectedLocked();
        observer = mDiscoveryObserver;
    }
    if (observer != null) {
        try {
            observer.addDiscoveredPrinters(printers);
        } catch (RemoteException re) {
            Log.e(LOG_TAG, "Error adding discovered printers", re);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)

