/**
 * The streamId is out of scope for the HTTP message flow and will no longer be tracked
 * @param streamId The stream id to remove associated state with
 */
protected void removeMessage(int streamId) {
    messageMap.remove(streamId);
}||||||||/**
 * The stream is out of scope for the HTTP message flow and will no longer be tracked
 * @param stream The stream to remove associated state with
 * @param release {@code true} to call release on the value if it is present. {@code false} to not call release.
 */
protected final void removeMessage(Http2Stream stream, boolean release) {
    FullHttpMessage msg = stream.removeProperty(messageKey);
    if (release && msg != null) {
        msg.release();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

