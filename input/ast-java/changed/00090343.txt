/**
 * Compare two {@code byte} arrays for equality. For performance reasons no bounds checking on the
 * parameters is performed.
 *
 * @param bytes1 the first byte array.
 * @param startPos1 the position (inclusive) to start comparing in {@code bytes1}.
 * @param bytes2 the second byte array.
 * @param startPos2 the position (inclusive) to start comparing in {@code bytes2}.
 * @param length the amount of bytes to compare. This is assumed to be validated as not going out of bounds
 * by the caller.
 */
public static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
    if (!hasUnsafe() || !PlatformDependent0.unalignedAccess()) {
        return equalsSafe(bytes1, startPos1, bytes2, startPos2, length);
    }
    return PlatformDependent0.equals(bytes1, startPos1, bytes2, startPos2, length);
}||||||||/**
 * Compare two {@code byte} arrays for equality. For performance reasons no bounds checking on the
 * parameters is performed.
 *
 * @param bytes1 the first byte array.
 * @param startPos1 the position (inclusive) to start comparing in {@code bytes1}.
 * @param bytes2 the second byte array.
 * @param startPos2 the position (inclusive) to start comparing in {@code bytes2}.
 * @param length the amount of bytes to compare. This is assumed to be validated as not going out of bounds
 * by the caller.
 */
public static boolean equals(byte[] bytes1, int startPos1, byte[] bytes2, int startPos2, int length) {
    return !hasUnsafe() || !unalignedAccess() ? equalsSafe(bytes1, startPos1, bytes2, startPos2, length) : PlatformDependent0.equals(bytes1, startPos1, bytes2, startPos2, length);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ConditionalExpr
				(BinaryExpr
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

