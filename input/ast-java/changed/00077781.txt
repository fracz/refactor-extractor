/**
 * Returns a future for the active transport that will be used to create new streams.
 *
 * <p>Cancelling the return future has no effect. The future will never fail. If this {@code
 * TransportSet} has been shut down, the returned future will have {@code null} value.
 */
final ListenableFuture<ClientTransport> obtainActiveTransport() {
    UncancellableTransportFuture savedTransportFuture = activeTransportFuture;
    if (savedTransportFuture != null) {
        return savedTransportFuture;
    }
    synchronized (lock) {
        // Check again, since it could have changed before acquiring the lock
        if (activeTransportFuture == null) {
            // In shutdown(), activeTransportFuture is set to NULL_VALUE_FUTURE, thus if
            // activeTransportFuture is null, shutdown must be false.
            Preconditions.checkState(!shutdown, "already shutdown");
            Preconditions.checkState(activeTransportFuture == null || activeTransportFuture.isDone(), "activeTransportFuture is neither null nor done");
            activeTransportFuture = new UncancellableTransportFuture();
            scheduleConnection();
        }
        return activeTransportFuture;
    }
}||||||||/**
 * Returns a future for the active transport that will be used to create new streams.
 *
 * <p>Cancelling the return future has no effect. The future will never fail. If this {@code
 * TransportSet} has been shut down, the returned future will have {@code null} value.
 */
// TODO(zhangkun83): change it to return a ClientTransport directly
final ListenableFuture<ClientTransport> obtainActiveTransport() {
    ClientTransport savedTransport = activeTransport;
    if (savedTransport != null) {
        return Futures.<ClientTransport>immediateFuture(savedTransport);
    }
    synchronized (lock) {
        // Check again, since it could have changed before acquiring the lock
        if (activeTransport == null && !shutdown) {
            delayedTransport = new DelayedClientTransport();
            transports.add(delayedTransport);
            delayedTransport.start(new BaseTransportListener(delayedTransport));
            activeTransport = delayedTransport;
            scheduleConnection();
        }
        return Futures.<ClientTransport>immediateFuture(activeTransport);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(UnaryExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					LineComment
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
					LineComment
				)
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	LineComment
)

