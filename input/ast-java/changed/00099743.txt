private void parseArguments(Method method) {
    for (int i = 0; i < method.getParameterCount(); i++) {
        Parameter parameter = method.getParameters()[i];
        Class<?> parameterType = parameter.getType();
        // Skip injected parameters
        if (parameterType == ConnectorSession.class) {
            continue;
        }
        Optional<Annotation> implementationDependency = getImplementationDependencyAnnotation(parameter);
        if (implementationDependency.isPresent()) {
            // check if only declared typeParameters and literalParameters are used
            validateImplementationDependencyAnnotation(method, implementationDependency.get(), typeParameterNames, literalParameters);
            dependencies.add(createDependency(implementationDependency.get(), literalParameters));
        } else {
            Annotation[] annotations = parameter.getAnnotations();
            checkArgument(!Stream.of(annotations).anyMatch(IsNull.class::isInstance), "Method [%s] has @IsNull parameter that does not follow a @SqlType parameter", method);
            SqlType type = Stream.of(annotations).filter(SqlType.class::isInstance).map(SqlType.class::cast).findFirst().orElseThrow(() -> new IllegalArgumentException(format("Method [%s] is missing @SqlType annotation for parameter", method)));
            TypeSignature typeSignature = parseTypeSignature(type.value(), literalParameters);
            boolean nullableArgument = Stream.of(annotations).anyMatch(SqlNullable.class::isInstance);
            checkArgument(nullableArgument || !containsLegacyNullable(annotations), "Method [%s] has parameter annotated with @Nullable but not @SqlNullable", method);
            boolean hasNullFlag = false;
            if (method.getParameterCount() > (i + 1)) {
                Annotation[] parameterAnnotations = method.getParameterAnnotations()[i + 1];
                if (Stream.of(parameterAnnotations).anyMatch(IsNull.class::isInstance)) {
                    Class<?> isNullType = method.getParameterTypes()[i + 1];
                    checkArgument(Stream.of(parameterAnnotations).filter(FunctionsParserHelper::isPrestoAnnotation).allMatch(IsNull.class::isInstance), "Method [%s] has @IsNull parameter that has other annotations", method);
                    checkArgument(isNullType == boolean.class, "Method [%s] has non-boolean parameter with @IsNull", method);
                    checkArgument((parameterType == Void.class) || !Primitives.isWrapperType(parameterType), "Method [%s] uses @IsNull following a parameter with boxed primitive type: %s", method, parameterType.getSimpleName());
                    nullableArgument = true;
                    hasNullFlag = true;
                }
            }
            if (Primitives.isWrapperType(parameterType)) {
                checkArgument(nullableArgument, "Method [%s] has parameter with wrapper type %s that is missing @SqlNullable", method, parameterType.getSimpleName());
            } else if (parameterType.isPrimitive() && !hasNullFlag) {
                checkArgument(!nullableArgument, "Method [%s] has parameter with primitive type %s annotated with @SqlNullable", method, parameterType.getSimpleName());
            }
            if (typeParameterNames.contains(type.value()) && !(parameterType == Object.class && nullableArgument)) {
                // Infer specialization on this type parameter. We don't do this for @SqlNullable Object because it could match a type like BIGINT
                Class<?> specialization = specializedTypeParameters.get(type.value());
                Class<?> nativeParameterType = Primitives.unwrap(parameterType);
                checkArgument(specialization == null || specialization.equals(nativeParameterType), "Method [%s] type %s has conflicting specializations %s and %s", method, type.value(), specialization, nativeParameterType);
                specializedTypeParameters.put(type.value(), nativeParameterType);
            }
            argumentNativeContainerTypes.add(parameterType);
            argumentTypes.add(typeSignature);
            if (hasNullFlag) {
                // skip @IsNull parameter
                i++;
            }
            nullableArguments.add(nullableArgument);
            nullFlags.add(hasNullFlag);
            if (typeSignature.getBase().equals(FunctionType.NAME)) {
                checkCondition(parameterType.isAnnotationPresent(FunctionalInterface.class), FUNCTION_IMPLEMENTATION_ERROR, "argument %s is marked as lambda but the function interface class is not annotated: %s", i, methodHandle);
                lambdaInterface.add(Optional.of(parameterType));
            } else {
                lambdaInterface.add(Optional.empty());
            }
        }
    }
}||||||||private void parseArguments(Method method) {
    for (int i = 0; i < method.getParameterCount(); i++) {
        Parameter parameter = method.getParameters()[i];
        Class<?> parameterType = parameter.getType();
        // Skip injected parameters
        if (parameterType == ConnectorSession.class) {
            continue;
        }
        Optional<Annotation> implementationDependency = getImplementationDependencyAnnotation(parameter);
        if (implementationDependency.isPresent()) {
            // check if only declared typeParameters and literalParameters are used
            validateImplementationDependencyAnnotation(method, implementationDependency.get(), typeParameterNames, literalParameters);
            dependencies.add(createDependency(implementationDependency.get(), literalParameters));
        } else {
            Annotation[] annotations = parameter.getAnnotations();
            checkArgument(!Stream.of(annotations).anyMatch(IsNull.class::isInstance), "Method [%s] has @IsNull parameter that does not follow a @SqlType parameter", method);
            SqlType type = Stream.of(annotations).filter(SqlType.class::isInstance).map(SqlType.class::cast).findFirst().orElseThrow(() -> new IllegalArgumentException(format("Method [%s] is missing @SqlType annotation for parameter", method)));
            TypeSignature typeSignature = parseTypeSignature(type.value(), literalParameters);
            boolean nullableArgument = Stream.of(annotations).anyMatch(SqlNullable.class::isInstance);
            checkArgument(nullableArgument || !containsLegacyNullable(annotations), "Method [%s] has parameter annotated with @Nullable but not @SqlNullable", method);
            boolean hasNullFlag = false;
            if (method.getParameterCount() > (i + 1)) {
                Annotation[] parameterAnnotations = method.getParameterAnnotations()[i + 1];
                if (Stream.of(parameterAnnotations).anyMatch(IsNull.class::isInstance)) {
                    Class<?> isNullType = method.getParameterTypes()[i + 1];
                    checkArgument(Stream.of(parameterAnnotations).filter(FunctionsParserHelper::isPrestoAnnotation).allMatch(IsNull.class::isInstance), "Method [%s] has @IsNull parameter that has other annotations", method);
                    checkArgument(isNullType == boolean.class, "Method [%s] has non-boolean parameter with @IsNull", method);
                    checkArgument((parameterType == Void.class) || !Primitives.isWrapperType(parameterType), "Method [%s] uses @IsNull following a parameter with boxed primitive type: %s", method, parameterType.getSimpleName());
                    nullableArgument = true;
                    hasNullFlag = true;
                }
            }
            if (Primitives.isWrapperType(parameterType)) {
                checkArgument(nullableArgument, "Method [%s] has parameter with wrapper type %s that is missing @SqlNullable", method, parameterType.getSimpleName());
            } else if (parameterType.isPrimitive() && !hasNullFlag) {
                checkArgument(!nullableArgument, "Method [%s] has parameter with primitive type %s annotated with @SqlNullable", method, parameterType.getSimpleName());
            }
            if (typeParameterNames.contains(type.value()) && !(parameterType == Object.class && nullableArgument)) {
                // Infer specialization on this type parameter. We don't do this for @SqlNullable Object because it could match a type like BIGINT
                Class<?> specialization = specializedTypeParameters.get(type.value());
                Class<?> nativeParameterType = Primitives.unwrap(parameterType);
                checkArgument(specialization == null || specialization.equals(nativeParameterType), "Method [%s] type %s has conflicting specializations %s and %s", method, type.value(), specialization, nativeParameterType);
                specializedTypeParameters.put(type.value(), nativeParameterType);
            }
            argumentNativeContainerTypes.add(parameterType);
            argumentTypes.add(typeSignature);
            if (hasNullFlag) {
                // skip @IsNull parameter
                i++;
            }
            if (typeSignature.getBase().equals(FunctionType.NAME)) {
                checkCondition(parameterType.isAnnotationPresent(FunctionalInterface.class), FUNCTION_IMPLEMENTATION_ERROR, "argument %s is marked as lambda but the function interface class is not annotated: %s", i, methodHandle);
                argumentProperties.add(functionTypeArgumentProperty(parameterType));
            } else {
                NullConvention nullConvention;
                if (!nullableArgument) {
                    nullConvention = RETURN_NULL_ON_NULL;
                } else {
                    nullConvention = hasNullFlag ? USE_NULL_FLAG : USE_BOXED_TYPE;
                }
                argumentProperties.add(valueTypeArgumentProperty(nullConvention));
            }
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(UnaryExpr
									(MethodCallExpr
										(MethodReferenceExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(LambdaExpr
											(ExpressionStmt
												(ObjectCreationExpr
													(MethodCallExpr
														StringLiteralExpr
														NameExpr
															SimpleName
														SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												(MethodReferenceExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												SimpleName
												(MethodCallExpr
													(MethodReferenceExpr
														(ClassExpr
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
													SimpleName
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodReferenceExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(UnaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ArrayAccessExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											SimpleName
											(ArrayType
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
								(IfStmt
									(MethodCallExpr
										(MethodReferenceExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(ArrayAccessExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
														(WildcardType
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													(MethodReferenceExpr
														(ClassExpr
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
													SimpleName
													(MethodCallExpr
														(MethodReferenceExpr
															(TypeExpr
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														SimpleName
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												StringLiteralExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(ClassExpr
														(PrimitiveType
														)
													)
												)
												StringLiteralExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(EnclosedExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(ClassExpr
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
													(UnaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												StringLiteralExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(EnclosedExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(WildcardType
												)
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(WildcardType
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										StringLiteralExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(WildcardType
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ArrayType
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(UnaryExpr
									(MethodCallExpr
										(MethodReferenceExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(LambdaExpr
											(ExpressionStmt
												(ObjectCreationExpr
													(MethodCallExpr
														StringLiteralExpr
														NameExpr
															SimpleName
														SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												(MethodReferenceExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												SimpleName
												(MethodCallExpr
													(MethodReferenceExpr
														(ClassExpr
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
													SimpleName
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(MethodReferenceExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(UnaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ArrayAccessExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											SimpleName
											(ArrayType
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
								(IfStmt
									(MethodCallExpr
										(MethodReferenceExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(ArrayAccessExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
														(WildcardType
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													(MethodReferenceExpr
														(ClassExpr
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
													SimpleName
													(MethodCallExpr
														(MethodReferenceExpr
															(TypeExpr
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														SimpleName
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												StringLiteralExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(ClassExpr
														(PrimitiveType
														)
													)
												)
												StringLiteralExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(EnclosedExpr
														(BinaryExpr
															NameExpr
																SimpleName
															(ClassExpr
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
													(UnaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												StringLiteralExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								(UnaryExpr
									(EnclosedExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(WildcardType
												)
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(WildcardType
												)
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(ConditionalExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										StringLiteralExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

