@Test
public void shouldKeepNextGroupIdForNextRound() throws Exception {
    // GIVEN
    cache = new NodeRelationshipCache(NumberArrayFactory.HEAP, 1, 100, base);
    long nodeId = 0;
    cache.setHighNodeId(nodeId + 1);
    cache.incrementCount(nodeId);
    GroupVisitor groupVisitor = mock(GroupVisitor.class);
    when(groupVisitor.visit(anyLong(), anyLong(), anyLong(), anyLong(), anyLong())).thenReturn(1L, 2L, 3L);
    long firstRelationshipGroupId;
    {
        // WHEN importing the first type
        long relationshipId = 10;
        cache.getAndPutRelationship(nodeId, OUTGOING, relationshipId, true);
        firstRelationshipGroupId = cache.getFirstRel(nodeId, groupVisitor);
        // THEN
        assertEquals(1L, firstRelationshipGroupId);
        verify(groupVisitor).visit(nodeId, -1L, relationshipId, -1L, -1L);
        // Also simulate going back again ("clearing" of the cache requires this)
        cache.setForwardScan(false);
        cache.getAndPutRelationship(nodeId, OUTGOING, relationshipId, false);
        cache.setForwardScan(true);
    }
    long secondRelationshipGroupId;
    {
        // WHEN importing the second type
        long relationshipId = 11;
        cache.getAndPutRelationship(nodeId, INCOMING, relationshipId, true);
        secondRelationshipGroupId = cache.getFirstRel(nodeId, groupVisitor);
        // THEN
        assertEquals(2L, secondRelationshipGroupId);
        verify(groupVisitor).visit(nodeId, firstRelationshipGroupId, -1, relationshipId, -1L);
        // Also simulate going back again ("clearing" of the cache requires this)
        cache.setForwardScan(false);
        cache.getAndPutRelationship(nodeId, OUTGOING, relationshipId, false);
        cache.setForwardScan(true);
    }
    {
        // WHEN importing the third type
        long relationshipId = 10;
        cache.getAndPutRelationship(nodeId, BOTH, relationshipId, true);
        long thirdRelationshipGroupId = cache.getFirstRel(nodeId, groupVisitor);
        assertEquals(3L, thirdRelationshipGroupId);
        verify(groupVisitor).visit(nodeId, secondRelationshipGroupId, -1L, -1L, relationshipId);
    }
}||||||||@Test
public void shouldKeepNextGroupIdForNextRound() throws Exception {
    // GIVEN
    cache = new NodeRelationshipCache(NumberArrayFactory.HEAP, 1, 100, base);
    long nodeId = 0;
    int typeId = 10;
    cache.setHighNodeId(nodeId + 1);
    cache.incrementCount(nodeId);
    GroupVisitor groupVisitor = mock(GroupVisitor.class);
    when(groupVisitor.visit(anyLong(), anyInt(), anyLong(), anyLong(), anyLong())).thenReturn(1L, 2L, 3L);
    long firstRelationshipGroupId;
    {
        // WHEN importing the first type
        long relationshipId = 10;
        cache.getAndPutRelationship(nodeId, typeId, OUTGOING, relationshipId, true);
        firstRelationshipGroupId = cache.getFirstRel(nodeId, groupVisitor);
        // THEN
        assertEquals(1L, firstRelationshipGroupId);
        verify(groupVisitor).visit(nodeId, typeId, relationshipId, -1L, -1L);
        // Also simulate going back again ("clearing" of the cache requires this)
        cache.setForwardScan(false, true);
        cache.getAndPutRelationship(nodeId, typeId, OUTGOING, relationshipId, false);
        cache.setForwardScan(true, true);
    }
    long secondRelationshipGroupId;
    {
        // WHEN importing the second type
        long relationshipId = 11;
        cache.getAndPutRelationship(nodeId, typeId, INCOMING, relationshipId, true);
        secondRelationshipGroupId = cache.getFirstRel(nodeId, groupVisitor);
        // THEN
        assertEquals(2L, secondRelationshipGroupId);
        verify(groupVisitor).visit(nodeId, typeId, -1, relationshipId, -1L);
        // Also simulate going back again ("clearing" of the cache requires this)
        cache.setForwardScan(false, true);
        cache.getAndPutRelationship(nodeId, typeId, OUTGOING, relationshipId, false);
        cache.setForwardScan(true, true);
    }
    {
        // WHEN importing the third type
        long relationshipId = 10;
        cache.getAndPutRelationship(nodeId, typeId, BOTH, relationshipId, true);
        long thirdRelationshipGroupId = cache.getFirstRel(nodeId, groupVisitor);
        assertEquals(3L, thirdRelationshipGroupId);
        verify(groupVisitor).visit(nodeId, typeId, -1L, -1L, relationshipId);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(IntegerLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(LongLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					NameExpr
						SimpleName
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(IntegerLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(LongLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
					NameExpr
						SimpleName
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(IntegerLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(LongLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				(LongLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(IntegerLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(LongLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(IntegerLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(AssignExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(LongLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(UnaryExpr
						(IntegerLiteralExpr
						)
					)
					NameExpr
						SimpleName
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(IntegerLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				LineComment
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(LongLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					(UnaryExpr
						(LongLiteralExpr
						)
					)
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

