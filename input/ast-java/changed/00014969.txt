/**
 * There is a possible case that we don't know selection's direction. For example, a user might triple-click editor (select the
 * whole line). We can't say what selection end is a {@link #getLeadSelectionOffset() leading end} then. However, that matters
 * in a situation when a user clicks before or after that line holding Shift key. It's expected that the selection is expanded
 * up to that point than.
 * <p/>
 * That's why we allow to specify that the direction is unknown and {@link #isUnknownDirection() expose this information}
 * later.
 * <p/>
 * <b>Note:</b> when this method is called with <code>'true'</code>, subsequent calls are guaranteed to return <code>'true'</code>
 * until selection is changed. 'Unknown direction' flag is automatically reset then.
 *
 * @param unknownDirection
 */
public void setUnknownDirection(boolean unknownDirection) {
    myUnknownDirection = unknownDirection;
}||||||||/**
 * @see CaretImpl#setUnknownDirection(boolean)
 */
public void setUnknownDirection(boolean unknownDirection) {
    myEditor.getCaretModel().getCurrentCaret().setUnknownDirection(unknownDirection);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

