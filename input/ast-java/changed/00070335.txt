/**
 * Specifies that the {@link RepositoryAdapter} being built should present the given
 * {@code item} next (after all previously added repositories, items and static layouts),
 * using the given {@code presenter} for any presentation logic. Added items will be considered
 * static; any stable id added returned by the {@link RepositoryPresenter} will be ignored, and
 * the item will be kept stable by the {@link RepositoryAdapter}
 * <p>
 * NOTE: adding an item with this method (as with {@link #addLayout} below) will offset the
 * stable ID in other {@link RepositoryPresenter}s with the number of items and layouts added.
 *
 * @param item A static item. This can be the same as a previously added item; this makes the
 * resulting {@link RepositoryAdapter} present the same data in different positions and/or
 * different ways.
 * @param presenter The repository presenter associated with the {@code repository} at this
 * position.
 * @return This instance, for chaining.
 */
@NonNull
public <T> Builder addItem(@NonNull final T item, @NonNull final RepositoryPresenter<T> presenter) {
    suppliers.add(staticSupplier((Object) item));
    @SuppressWarnings("unchecked") final RepositoryPresenter<Object> untypedPresenter = (RepositoryPresenter<Object>) checkNotNull(presenter);
    staticPresenters.put(presenters.size(), TRUE);
    presenters.add(untypedPresenter);
    return this;
}||||||||/**
 * Specifies that the {@link RepositoryAdapter} being built should present the given static
 * {@code item} next (after all previously added repositories, static items and layouts),
 * using the given {@code presenter} for any presentation logic. Added items will be considered
 * static, in the following semantics:
 * <ul>
 * <li>The number of item views to be presented is decided immediately by calling
 * {@code presenter.getItemCount(item)}; if this method returns 0 then this item-presenter
 * pair is not added to the {@link RepositoryAdapter} at all.
 * <li>{@link RepositoryPresenter#getItemId} is not called; stable IDs of the presented item
 * views are generated by internal logic based on the position of this presenter and the
 * index of the item view within this presenter.
 * </ul>
 * <p>NOTE: adding an item with this method (as with {@link #addLayout}) will offset the stable
 * IDs in other {@link RepositoryPresenter}s.
 *
 * @param item A static item. This can be the same as a previously added item; this makes the
 * resulting {@link RepositoryAdapter} present the same data in different positions and/or
 * different ways.
 * @param presenter The repository presenter associated with the {@code item} at this position
 * of the {@link RepositoryAdapter}.
 * @return This instance, for chaining.
 */
@NonNull
public <T> Builder addItem(@NonNull final T item, @NonNull final RepositoryPresenter<T> presenter) {
    final int thisItemCount = presenter.getItemCount(item);
    if (thisItemCount > 0) {
        parts.add(new ItemPart(staticItemCount, thisItemCount, item, presenter));
        staticItemCount += thisItemCount;
    }
    return this;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(SingleMemberAnnotationExpr
					StringLiteralExpr
					Name
				)
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

