// todo: doc
public void runTask(PyTestTask testTask, String testName, @NotNull final String... tagsRequiedByTest) {
    boolean wasExecuted = false;
    List<String> passedRoots = Lists.newArrayList();
    for (String root : myRoots) {
        final Set<String> requredTags = Sets.union(testTask.getTags(), Sets.newHashSet(tagsRequiedByTest));
        if (!isSuitableForTask(PyEnvTestCase.loadEnvTags(root), requredTags) || !shouldRun(root, testTask)) {
            continue;
        }
        try {
            testTask.setUp(testName);
            wasExecuted = true;
            if (isJython(root)) {
                testTask.useLongTimeout();
            } else {
                testTask.useNormalTimeout();
            }
            final String executable = getExecutable(root, testTask);
            if (executable == null) {
                throw new RuntimeException("Cannot find Python interpreter in " + root);
            }
            final Sdk sdk = createSdkByExecutable(executable);
            /**
             * Skipping test if {@link PyTestTask} reports it does not support this language level
             */
            final LanguageLevel languageLevel = PythonSdkType.getLanguageLevelForSdk(sdk);
            if (testTask.isLanguageLevelSupported(languageLevel)) {
                testTask.runTestOn(executable);
                passedRoots.add(root);
            } else {
                System.err.println(String.format("Skipping root %s", root));
            }
        } catch (final Throwable e) {
            final Logger logger = Logger.getInstance(PyEnvTaskRunner.class);
            // Exception is thrown anyway, so we escape message before logging
            if (e.getMessage().contains("enteredTheMatrix")) {
                // .error( may lead to new exception with out of stacktrace.
                logger.warn(PyEnvTestCase.escapeTestMessage(e.getMessage()));
            } else {
                logger.error(e);
            }
            throw new RuntimeException(PyEnvTestCase.joinStrings(passedRoots, "Tests passed environments: ") + "Test failed on " + getEnvType() + " environment " + root, e);
        } finally {
            try {
                testTask.tearDown();
            } catch (Exception e) {
                throw new RuntimeException("Couldn't tear down task", e);
            }
        }
    }
    if (!wasExecuted) {
        throw new RuntimeException("test" + testName + " was not executed.\n" + PyEnvTestCase.joinStrings(myRoots, "All roots: ") + "\n" + PyEnvTestCase.joinStrings(testTask.getTags(), "Required tags in tags.txt in root: "));
    }
}||||||||// todo: doc
public void runTask(PyTestTask testTask, String testName, @NotNull final String... tagsRequiedByTest) {
    boolean wasExecuted = false;
    List<String> passedRoots = Lists.newArrayList();
    for (String root : myRoots) {
        LOG.warn(String.format("Running on root %s", root));
        final Set<String> requredTags = Sets.union(testTask.getTags(), Sets.newHashSet(tagsRequiedByTest));
        final boolean suitableForTask = isSuitableForTask(PyEnvTestCase.loadEnvTags(root), requredTags);
        final boolean shouldRun = shouldRun(root, testTask);
        if (!suitableForTask || !shouldRun) {
            LOG.warn(String.format("Skipping %s (compatible with tags: %s, should run:%s)", root, suitableForTask, shouldRun));
            continue;
        }
        try {
            testTask.setUp(testName);
            wasExecuted = true;
            if (isJython(root)) {
                testTask.useLongTimeout();
            } else {
                testTask.useNormalTimeout();
            }
            final String executable = getExecutable(root, testTask);
            if (executable == null) {
                throw new RuntimeException("Cannot find Python interpreter in " + root);
            }
            final Sdk sdk = createSdkByExecutable(executable);
            /**
             * Skipping test if {@link PyTestTask} reports it does not support this language level
             */
            final LanguageLevel languageLevel = PythonSdkType.getLanguageLevelForSdk(sdk);
            if (testTask.isLanguageLevelSupported(languageLevel)) {
                testTask.runTestOn(executable);
                passedRoots.add(root);
            } else {
                LOG.warn(String.format("Skipping root %s", root));
            }
        } catch (final Throwable e) {
            // Exception is thrown anyway, so we escape message before logging
            if (e.getMessage().contains("enteredTheMatrix")) {
                // .error( may lead to new exception with out of stacktrace.
                LOG.warn(PyEnvTestCase.escapeTestMessage(e.getMessage()));
            } else {
                LOG.error(e);
            }
            throw new RuntimeException(PyEnvTestCase.joinStrings(passedRoots, "Tests passed environments: ") + "Test failed on " + getEnvType() + " environment " + root, e);
        } finally {
            try {
                testTask.tearDown();
            } catch (Exception e) {
                throw new RuntimeException("Couldn't tear down task", e);
            }
        }
    }
    if (!wasExecuted) {
        throw new RuntimeException("test" + testName + " was not executed.\n" + PyEnvTestCase.joinStrings(myRoots, "All roots: ") + "\n" + PyEnvTestCase.joinStrings(testTask.getTags(), "Required tags in tags.txt in root: "));
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
								LineComment
							)
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													SimpleName
												)
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(JavadocComment
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ContinueStmt
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
								LineComment
							)
							(ThrowStmt
								(ObjectCreationExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													SimpleName
												)
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(TryStmt
							(CatchClause
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(JavadocComment
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										StringLiteralExpr
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)

