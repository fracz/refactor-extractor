/**
 * Returns all labels currently in the underlying store. Labels are added to the store the first
 * they are used. This method guarantees that it will return all labels currently in use. However,
 * it may also return <i>more</i> than that (e.g. it can return "historic" labels that are no longer used).
 *
 * If you call this operation outside of a transaction, please take care that the returned
 * {@link ResourceIterable} is closed correctly to avoid potential blocking of write operations.
 *
 * @return all labels in the underlying store.
 */
public ResourceIterable<Label> getAllLabels() {
    return new ResourceIterable<Label>() {

        @SuppressWarnings("resource")
        @Override
        public ResourceIterator<Label> iterator() {
            StatementOperations ctx = statementCtxProvider.getCtxForReading();
            StatementState state = statementCtxProvider.statementForReading();
            return cleanupService.resourceIterator(map(new Function<Token, Label>() {

                @Override
                public Label apply(Token labelToken) {
                    return label(labelToken.name());
                }
            }, ctx.labelsGetAllTokens(state)), state.closeable(ctx));
        }
    };
}||||||||/**
 * Returns all labels currently in the underlying store. Labels are added to the store the first
 * they are used. This method guarantees that it will return all labels currently in use. However,
 * it may also return <i>more</i> than that (e.g. it can return "historic" labels that are no longer used).
 *
 * If you call this operation outside of a transaction, please take care that the returned
 * {@link ResourceIterable} is closed correctly to avoid potential blocking of write operations.
 *
 * @return all labels in the underlying store.
 */
public ResourceIterable<Label> getAllLabels() {
    return new ResourceIterable<Label>() {

        @SuppressWarnings("resource")
        @Override
        public ResourceIterator<Label> iterator() {
            StatementOperationParts ctx = statementCtxProvider.getCtxForReading();
            StatementState state = statementCtxProvider.statementForReading();
            return cleanupService.resourceIterator(map(new Function<Token, Label>() {

                @Override
                public Label apply(Token labelToken) {
                    return label(labelToken.name());
                }
            }, ctx.keyReadOperations().labelsGetAllTokens(state)), state.closeable(ctx.lifecycleOperations()));
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(MethodCallExpr
								(MethodCallExpr
									(ObjectCreationExpr
										(MethodDeclaration
											(BlockStmt
												(ReturnStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
											(ClassOrInterfaceType
												SimpleName
											)
											SimpleName
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
											(MarkerAnnotationExpr
												Name
											)
										)
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(SingleMemberAnnotationExpr
						StringLiteralExpr
						Name
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(MethodCallExpr
								(MethodCallExpr
									(ObjectCreationExpr
										(MethodDeclaration
											(BlockStmt
												(ReturnStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
											(ClassOrInterfaceType
												SimpleName
											)
											SimpleName
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
											(MarkerAnnotationExpr
												Name
											)
										)
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
								)
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(SingleMemberAnnotationExpr
						StringLiteralExpr
						Name
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(JavadocComment
	)
)

