public boolean acceptDriverLicenses(DBRRunnableContext runnableContext) {
    // User must accept all licenses before actual drivers download
    for (final DriverLibraryDescriptor file : getDriverLibraries()) {
        if (file.getType() == DBPDriverLibrary.FileType.license) {
            final File libraryFile = file.getLocalFile();
            if (libraryFile == null || !libraryFile.exists()) {
                try {
                    runnableContext.run(true, true, new DBRRunnableWithProgress() {

                        @Override
                        public void run(DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                            try {
                                DriverFileManager.downloadLibraryFile(monitor, file, false);
                            } catch (final Exception e) {
                                log.warn("Can't obtain driver license", e);
                            }
                        }
                    });
                } catch (Exception e) {
                    log.warn(e);
                }
            }
        }
    }
    String licenseText = getLicense();
    if (!CommonUtils.isEmpty(licenseText)) {
        return acceptLicense(licenseText);
    }
    // No license
    return true;
}||||||||public boolean acceptDriverLicenses(DBRRunnableContext runnableContext) {
    // User must accept all licenses before actual drivers download
    for (final DriverLibraryDescriptor file : libraries) {
        if (file.getType() == DBPDriverLibrary.FileType.license) {
            final File libraryFile = file.getLocalFile();
            if (libraryFile == null || !libraryFile.exists()) {
                try {
                    runnableContext.run(true, true, new DBRRunnableWithProgress() {

                        @Override
                        public void run(DBRProgressMonitor monitor) throws InvocationTargetException, InterruptedException {
                            try {
                                DriverFileManager.downloadLibraryFile(monitor, file, false);
                            } catch (final Exception e) {
                                log.warn("Can't obtain driver license", e);
                            }
                        }
                    });
                } catch (Exception e) {
                    log.warn(e);
                }
            }
        }
    }
    String licenseText = getLicense();
    if (!CommonUtils.isEmpty(licenseText)) {
        return acceptLicense(licenseText);
    }
    // No license
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(TryStmt
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BooleanLiteralExpr
												)
												(BooleanLiteralExpr
												)
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(TryStmt
																(CatchClause
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				StringLiteralExpr
																				NameExpr
																					SimpleName
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(Parameter
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																			(BooleanLiteralExpr
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
														)
														(VoidType
														)
														SimpleName
														(Parameter
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
														(ClassOrInterfaceType
															SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(TryStmt
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BooleanLiteralExpr
												)
												(BooleanLiteralExpr
												)
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(TryStmt
																(CatchClause
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				StringLiteralExpr
																				NameExpr
																					SimpleName
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(Parameter
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																			(BooleanLiteralExpr
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
														)
														(VoidType
														)
														SimpleName
														(Parameter
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
														(ClassOrInterfaceType
															SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

