private static void checkUsageOfDeserializedScope(@NotNull NamespaceDescriptor namespaceFromClass) {
    JetScope scope = namespaceFromClass.getMemberScope();
    boolean hasOwnMembers = false;
    for (DeclarationDescriptor declarationDescriptor : scope.getAllDescriptors()) {
        if (declarationDescriptor instanceof CallableMemberDescriptor) {
            hasOwnMembers = true;
        }
    }
    if (hasOwnMembers) {
        assert scope instanceof DeserializedPackageMemberScope : "If namespace has members, members should be inside deserialized scope.";
    } else {
        // NOTE: should probably change
        assert !(scope instanceof DeserializedPackageMemberScope) : "We don't use deserialized scopes for namespaces without members.";
    }
}||||||||// TODO 2 do something
private static void checkUsageOfDeserializedScope(@NotNull PackageViewDescriptor packageFromBinary) {
// JetScope scope = packageFromBinary.getMemberScope();
// boolean hasOwnMembers = false;
// for (DeclarationDescriptor declarationDescriptor : scope.getAllDescriptors()) {
// if (declarationDescriptor instanceof CallableMemberDescriptor) {
// hasOwnMembers = true;
// }
// }
// if (hasOwnMembers) {
// assert scope instanceof DeserializedPackageMemberScope : "If namespace has members, members should be inside deserialized scope.";
// }
// else {
// //NOTE: should probably change
// assert !(scope instanceof DeserializedPackageMemberScope) : "We don't use deserialized scopes for namespaces without members.";
// }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(AssertStmt
					(UnaryExpr
						(EnclosedExpr
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					StringLiteralExpr
					LineComment
				)
			)
			(BlockStmt
				(AssertStmt
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					StringLiteralExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	LineComment
)

