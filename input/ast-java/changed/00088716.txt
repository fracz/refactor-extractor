@Test
public void shouldAllowAddingAndRemovingUserFromMultipleRoles() throws Exception {
    assertFalse("Should not have role publisher", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.PUBLISHER));
    assertFalse("Should not have role architect", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.ARCHITECT));
    testCallEmpty(db, adminSubject, "CALL dbms.addUserToRole('readSubject', '" + PredefinedRolesBuilder.PUBLISHER + "')", null);
    testCallEmpty(db, adminSubject, "CALL dbms.addUserToRole('readSubject', '" + PredefinedRolesBuilder.ARCHITECT + "')", null);
    assertTrue("Should have role publisher", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.PUBLISHER));
    assertTrue("Should have role architect", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.ARCHITECT));
    testCallEmpty(db, adminSubject, "CALL dbms.removeUserFromRole('readSubject', '" + PredefinedRolesBuilder.PUBLISHER + "')", null);
    testCallEmpty(db, adminSubject, "CALL dbms.removeUserFromRole('readSubject', '" + PredefinedRolesBuilder.ARCHITECT + "')", null);
    assertFalse("Should not have role publisher", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.PUBLISHER));
    assertFalse("Should not have role architect", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.ARCHITECT));
}||||||||@Test
public void shouldAllowAddingAndRemovingUserFromMultipleRoles() throws Exception {
    assertFalse("Should not have role publisher", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.PUBLISHER));
    assertFalse("Should not have role architect", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.ARCHITECT));
    testCallEmpty(db, adminSubject, "CALL dbms.addUserToRole('readSubject', '" + PredefinedRolesBuilder.PUBLISHER + "')");
    testCallEmpty(db, adminSubject, "CALL dbms.addUserToRole('readSubject', '" + PredefinedRolesBuilder.ARCHITECT + "')");
    assertTrue("Should have role publisher", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.PUBLISHER));
    assertTrue("Should have role architect", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.ARCHITECT));
    testCallEmpty(db, adminSubject, "CALL dbms.removeUserFromRole('readSubject', '" + PredefinedRolesBuilder.PUBLISHER + "')");
    testCallEmpty(db, adminSubject, "CALL dbms.removeUserFromRole('readSubject', '" + PredefinedRolesBuilder.ARCHITECT + "')");
    assertFalse("Should not have role publisher", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.PUBLISHER));
    assertFalse("Should not have role architect", ShiroAuthSubject.castOrFail(readSubject).getSubject().hasRole(PredefinedRolesBuilder.ARCHITECT));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				NullLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				NullLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				NullLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				NullLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

