@Override
public void visibleAreaChanged(VisibleAreaEvent e) {
    // There is a possible case that the console text is populated while the console is not shown (e.g. we're debugging and
    // 'Debugger' tab is active while 'Console' is not). It's also possible that newly added text contains long lines that
    // are soft wrapped. We want to update viewport position then when the console becomes visible.
    final Rectangle oldRectangle = e.getOldRectangle();
    if (oldRectangle == null) {
        return;
    }
    Editor myEditor = e.getEditor();
    if (oldRectangle.height <= 0 && e.getNewRectangle().height > 0 && myEditor.getSoftWrapModel().isSoftWrappingEnabled() && myEditor.getCaretModel().getOffset() == myEditor.getDocument().getTextLength()) {
        EditorUtil.scrollToTheEnd(myEditor);
    }
}||||||||@Override
public void visibleAreaChanged(VisibleAreaEvent e) {
    // There is a possible case that the console text is populated while the console is not shown (e.g. we're debugging and
    // 'Debugger' tab is active while 'Console' is not). It's also possible that newly added text contains long lines that
    // are soft wrapped. We want to update viewport position then when the console becomes visible.
    Rectangle oldR = e.getOldRectangle();
    if (!shouldPreserveCurrentVisualArea() && oldR != null && oldR.height <= 0 && e.getNewRectangle().height > 0) {
        scrollToEnd();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IntegerLiteralExpr
							)
						)
					)
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(UnaryExpr
							(MethodCallExpr
								SimpleName
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

