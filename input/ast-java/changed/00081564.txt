/**
 * If you want to provide your own implementation of {@code MockMaker} this method should:
 * <ul>
 * <li>Create a proxy object that implements {@code typeToMock} and potentially also {@code extraInterfaces}.</li>
 * <li>You may use the information from {@code settings} to configure your proxy object.</li>
 * <li>Your proxy object should carry the {@code hander} with it. For example, if you generate byte code
 * to create the proxy you could generate an extra field to keep the {@code hanlder} with the generated object.
 * Your implementation of {@code MockHandler} is required to provide this instance of {@code handler} when
 * {@link #getHandler(Object)} is called.
 * </li>
 * </ul>
 *
 * @param typeToMock The type of the mock, could be a <strong>class</strong> or an <strong>interface</strong>.
 * @param extraInterfaces Interfaces the mock should implements as well,
 * never <code>null</code>, interfaces only (no classes).
 * @param handler See {@link MockitoInvocationHandler}.
 * <b>Do not</b> provide your own implementation at this time. Make sure your implementation of
 * {@link #getHandler(Object)} will return this instance.
 * @param settings Mock creation settings.
 * @param <T> Type of the mock to return, actually the <code>typeToMock</code>.
 * @return The mock instance.
 * @since 1.9.5
 */
<T> T createMock(Class<T> typeToMock, Set<Class> extraInterfaces, MockitoInvocationHandler handler, MockSettingsInfo settings);||||||||/**
 * If you want to provide your own implementation of {@code MockMaker} this method should:
 * <ul>
 * <li>Create a proxy object that implements {@code settings.typeToMock} and potentially also {@code settings.extraInterfaces}.</li>
 * <li>You may use the information from {@code settings} to create/configure your proxy object.</li>
 * <li>Your proxy object should carry the {@code hander} with it. For example, if you generate byte code
 * to create the proxy you could generate an extra field to keep the {@code hanlder} with the generated object.
 * Your implementation of {@code MockHandler} is required to provide this instance of {@code handler} when
 * {@link #getHandler(Object)} is called.
 * </li>
 * </ul>
 *
 * @param settings - mock creation settings like type to mock, extra interfaces and so on.
 * @param handler See {@link MockitoInvocationHandler}.
 * <b>Do not</b> provide your own implementation at this time. Make sure your implementation of
 * {@link #getHandler(Object)} will return this instance.
 * @param <T> Type of the mock to return, actually the <code>settings.getTypeToMock</code>.
 * @return The mock instance.
 * @since 1.9.5
 */
<T> T createMock(MockCreationSettings<T> settings, MockitoInvocationHandler handler);||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

