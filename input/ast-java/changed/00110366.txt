// public static void enumerateSVars(MethodNode mth) {
// List<SSAVar> vars = mth.getSVars();
// int varsSize = vars.size();
// Deque<SSAVar> workList = new LinkedList<SSAVar>();
// for (int i = 0; i < varsSize; i++) {
// SSAVar ssaVar = vars.get(i);
// ssaVar.setVarId(i);
// if (ssaVar.isUsedInPhi()) {
// workList.add(ssaVar);
// }
// }
// 
// int k = 0;
// while (!workList.isEmpty()) {
// SSAVar var = workList.pop();
// RegisterArg assignVar = var.getUsedInPhi().getResult();
// // set same name and variable ID
// var.mergeName(assignVar);
// SSAVar assignSVar = assignVar.getSVar();
// int varId = assignSVar.getVarId();
// var.setVarId(varId);
// 
// if (assignSVar.isUsedInPhi()) {
// PhiInsn assignPhi = assignSVar.getUsedInPhi();
// SSAVar asVar = assignPhi.getResult().getSVar();
// if (asVar.getVarId() != varId) {
// asVar.setVarId(varId);
// for (int i = 0; i < assignPhi.getArgsCount(); i++) {
// workList.push(assignPhi.getArg(i).getSVar());
// }
// }
// }
// if (k++ > 1000) {
// throw new JadxRuntimeException("Can't calculate variable id");
// }
// }
// }
private static void removePhiInstructions(MethodNode mth) {
    for (BlockNode block : mth.getBasicBlocks()) {
        PhiListAttr phiList = (PhiListAttr) block.getAttributes().get(AttributeType.PHI_LIST);
        if (phiList == null) {
            continue;
        }
        List<PhiInsn> list = phiList.getList();
        for (PhiInsn phiInsn : list) {
            for (Iterator<InsnNode> iterator = block.getInstructions().iterator(); iterator.hasNext(); ) {
                InsnNode insn = iterator.next();
                if (insn == phiInsn) {
                    iterator.remove();
                }
            }
        }
    }
}||||||||// public static void enumerateSVars(MethodNode mth) {
// List<SSAVar> vars = mth.getSVars();
// int varsSize = vars.size();
// Deque<SSAVar> workList = new LinkedList<SSAVar>();
// for (int i = 0; i < varsSize; i++) {
// SSAVar ssaVar = vars.get(i);
// ssaVar.setVarId(i);
// if (ssaVar.isUsedInPhi()) {
// workList.add(ssaVar);
// }
// }
// 
// int k = 0;
// while (!workList.isEmpty()) {
// SSAVar var = workList.pop();
// RegisterArg assignVar = var.getUsedInPhi().getResult();
// // set same name and variable ID
// var.mergeName(assignVar);
// SSAVar assignSVar = assignVar.getSVar();
// int varId = assignSVar.getVarId();
// var.setVarId(varId);
// 
// if (assignSVar.isUsedInPhi()) {
// PhiInsn assignPhi = assignSVar.getUsedInPhi();
// SSAVar asVar = assignPhi.getResult().getSVar();
// if (asVar.getVarId() != varId) {
// asVar.setVarId(varId);
// for (int i = 0; i < assignPhi.getArgsCount(); i++) {
// workList.push(assignPhi.getArg(i).getSVar());
// }
// }
// }
// if (k++ > 1000) {
// throw new JadxRuntimeException("Can't calculate variable id");
// }
// }
// }
private static void removePhiInstructions(MethodNode mth) {
    for (BlockNode block : mth.getBasicBlocks()) {
        PhiListAttr phiList = block.get(AType.PHI_LIST);
        if (phiList == null) {
            continue;
        }
        List<PhiInsn> list = phiList.getList();
        for (PhiInsn phiInsn : list) {
            for (Iterator<InsnNode> iterator = block.getInstructions().iterator(); iterator.hasNext(); ) {
                InsnNode insn = iterator.next();
                if (insn == phiInsn) {
                    iterator.remove();
                }
            }
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ForStmt
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

