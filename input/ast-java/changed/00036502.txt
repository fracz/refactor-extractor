// $ANTLR end "rulelNamedAction"
// $ANTLR start "ruleAction"
// CollectSymbols.g:159:1: ruleAction : {...}? ACTION ;
public final void ruleAction() throws RecognitionException {
    GrammarAST ACTION8 = null;
    try {
        // CollectSymbols.g:160:2: ({...}? ACTION )
        // CollectSymbols.g:160:4: {...}? ACTION
        {
            if (!((inContext("RULE ...")))) {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return;
                }
                throw new FailedPredicateException(input, "ruleAction", "inContext(\"RULE ...\")");
            }
            ACTION8 = (GrammarAST) match(input, ACTION, FOLLOW_ACTION_in_ruleAction430);
            if (state.failed)
                return;
            if (state.backtracking == 1) {
                currentRule.alt[currentAlt].actions.add(ACTION8);
            }
        }
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
    } finally {
    }
    return;
}||||||||// $ANTLR end "rulelNamedAction"
// $ANTLR start "ruleAction"
// CollectSymbols.g:162:1: ruleAction : {...}? ACTION ;
public final void ruleAction() throws RecognitionException {
    GrammarAST ACTION8 = null;
    try {
        // CollectSymbols.g:163:2: ({...}? ACTION )
        // CollectSymbols.g:163:4: {...}? ACTION
        {
            if (!((inContext("RULE ...") && !inContext("SCOPE") && !inContext("CATCH") && !inContext("FINALLY")))) {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return;
                }
                throw new FailedPredicateException(input, "ruleAction", "inContext(\"RULE ...\")&&!inContext(\"SCOPE\")&&\n\t\t !inContext(\"CATCH\")&&!inContext(\"FINALLY\")");
            }
            ACTION8 = (GrammarAST) match(input, ACTION, FOLLOW_ACTION_in_ruleAction432);
            if (state.failed)
                return;
            if (state.backtracking == 1) {
                currentRule.alt[currentAlt].actions.add((ActionAST) ACTION8);
                ((ActionAST) ACTION8).space = currentRule.alt[currentAlt];
            }
        }
    } catch (RecognitionException re) {
        reportError(re);
        recover(input, re);
    } finally {
    }
    return;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
			)
			(BlockStmt
				(BlockStmt
					(IfStmt
						(UnaryExpr
							(EnclosedExpr
								(EnclosedExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
									)
								)
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(BooleanLiteralExpr
											)
										)
									)
									(ReturnStmt
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									StringLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(FieldAccessExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(ReturnStmt
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
			)
			(BlockStmt
				(BlockStmt
					(IfStmt
						(UnaryExpr
							(EnclosedExpr
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
												)
												(UnaryExpr
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
													)
												)
											)
											(UnaryExpr
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
												)
											)
										)
										(UnaryExpr
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
											)
										)
									)
								)
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(BooleanLiteralExpr
											)
										)
									)
									(ReturnStmt
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									StringLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ReturnStmt
						)
					)
					(IfStmt
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									(FieldAccessExpr
										SimpleName
										(EnclosedExpr
											(CastExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ArrayAccessExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(ReturnStmt
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)

