private void switchToSlave() {
    for (int tries = 5; tries-- > 0; ) {
        try {
            URI masterUri = availableMasterId;
            console.log("ServerId " + config.get(ClusterSettings.server_id) + ", moving to slave for master " + masterUri);
            // since we are here it must already have been set from outside
            assert masterUri != null;
            DependencyResolver resolver = graphDb.getDependencyResolver();
            HaXaDataSourceManager xaDataSourceManager = resolver.resolveDependency(HaXaDataSourceManager.class);
            idGeneratorFactory.switchToSlave();
            synchronized (xaDataSourceManager) {
                if (!isStorePresent(resolver.resolveDependency(FileSystemAbstraction.class), config)) {
                    if (!copyStoreFromMaster(masterUri))
                        // to the outer loop for a retry
                        continue;
                }
                /*
                     * We get here either with a fresh store from the master copy above so we need to start the ds
                     * or we already had a store, so we have already started the ds. Either way, make sure it's there.
                     */
                NeoStoreXaDataSource nioneoDataSource = ensureDataSourceStarted(xaDataSourceManager, resolver);
                if (!checkDataConsistency(xaDataSourceManager, nioneoDataSource, masterUri))
                    // to the outer loop for a retry
                    continue;
                if (!startHaCommunication(xaDataSourceManager, nioneoDataSource, masterUri))
                    // to the outer loop for a retry
                    continue;
                console.log("ServerId " + config.get(ClusterSettings.server_id) + ", successfully moved to slave for master " + masterUri);
                // from the retry loop
                break;
            }
        } catch (Throwable t) {
            msgLog.logMessage("Unable to switch to slave", t);
        }
    }
}||||||||private void switchToSlave() {
    for (int tries = 5; tries-- > 0; ) {
        try {
            URI masterUri = availableMasterId;
            console.log("ServerId " + config.get(ClusterSettings.server_id) + ", moving to slave for master " + masterUri);
            // since we are here it must already have been set from outside
            assert masterUri != null;
            DependencyResolver resolver = graphDb.getDependencyResolver();
            HaXaDataSourceManager xaDataSourceManager = resolver.resolveDependency(HaXaDataSourceManager.class);
            idGeneratorFactory.switchToSlave();
            synchronized (xaDataSourceManager) {
                if (!isStorePresent(resolver.resolveDependency(FileSystemAbstraction.class), config) && !copyStoreFromMaster(masterUri)) {
                    // to the outer loop for a retry
                    continue;
                }
                /*
                     * We get here either with a fresh store from the master copy above so we need to start the ds
                     * or we already had a store, so we have already started the ds. Either way, make sure it's there.
                     */
                NeoStoreXaDataSource nioneoDataSource = ensureDataSourceStarted(xaDataSourceManager, resolver);
                if (!checkDataConsistency(xaDataSourceManager, nioneoDataSource, masterUri))
                    // to the outer loop for a retry
                    continue;
                if (!startHaCommunication(xaDataSourceManager, nioneoDataSource, masterUri))
                    // to the outer loop for a retry
                    continue;
                console.log("ServerId " + config.get(ClusterSettings.server_id) + ", successfully moved to slave for master " + masterUri);
                // from the retry loop
                break;
            }
        } catch (Throwable t) {
            msgLog.logMessage("Unable to switch to slave", t);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(AssertStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(SynchronizedStmt
							(BlockStmt
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											(MethodCallExpr
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(BlockStmt
										(IfStmt
											(UnaryExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
											(ContinueStmt
												LineComment
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockComment
									)
								)
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(ContinueStmt
										LineComment
									)
								)
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(ContinueStmt
										LineComment
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
									LineComment
								)
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NameExpr
										SimpleName
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										StringLiteralExpr
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(AssertStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(SynchronizedStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												(MethodCallExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(UnaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									(BlockStmt
										(ContinueStmt
											LineComment
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockComment
									)
								)
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(ContinueStmt
										LineComment
									)
								)
								(IfStmt
									(UnaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
									)
									(ContinueStmt
										LineComment
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BreakStmt
									LineComment
								)
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)

