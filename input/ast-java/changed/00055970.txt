@Test
public void testSerde() throws Exception {
    String jsonStr = "{\n" + "  \"millisToWaitBeforeDeleting\": 1,\n" + "  \"mergeBytesLimit\": 1,\n" + "  \"mergeSegmentsLimit\" : 1,\n" + "  \"maxSegmentsToMove\": 1,\n" + "  \"replicantLifetime\": 1,\n" + "  \"replicationThrottleLimit\": 1,\n" + "  \"balancerComputeThreads\": 2, \n" + "  \"emitBalancingStats\": true,\n" + "  \"killDataSourceWhitelist\": [\"test1\",\"test2\"]\n" + "}\n";
    CoordinatorDynamicConfig actual = mapper.readValue(mapper.writeValueAsString(mapper.readValue(jsonStr, CoordinatorDynamicConfig.class)), CoordinatorDynamicConfig.class);
    Assert.assertEquals(new CoordinatorDynamicConfig(1, 1, 1, 1, 1, 1, 2, true, ImmutableSet.of("test1", "test2"), false), actual);
}||||||||@Test
public void testSerde() throws Exception {
    String jsonStr = "{\n" + "  \"millisToWaitBeforeDeleting\": 1,\n" + "  \"mergeBytesLimit\": 1,\n" + "  \"mergeSegmentsLimit\" : 1,\n" + "  \"maxSegmentsToMove\": 1,\n" + "  \"replicantLifetime\": 1,\n" + "  \"replicationThrottleLimit\": 1,\n" + "  \"balancerComputeThreads\": 2, \n" + "  \"emitBalancingStats\": true,\n" + "  \"killDataSourceWhitelist\": [\"test1\",\"test2\"],\n" + "  \"maxSegmentsInNodeLoadingQueue\": 1\n" + "}\n";
    CoordinatorDynamicConfig actual = mapper.readValue(mapper.writeValueAsString(mapper.readValue(jsonStr, CoordinatorDynamicConfig.class)), CoordinatorDynamicConfig.class);
    assertConfig(actual, 1, 1, 1, 1, 1, 1, 2, true, ImmutableSet.of("test1", "test2"), false, 1);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
					(BooleanLiteralExpr
					)
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BooleanLiteralExpr
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				(BooleanLiteralExpr
				)
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BooleanLiteralExpr
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

