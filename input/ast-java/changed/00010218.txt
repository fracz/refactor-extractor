public void testConfiguringModuleDependencies() throws Exception {
    VirtualFile m1 = createModulePom("m1", "<groupId>test</groupId>" + "<artifactId>m1</artifactId>" + "<version>1</version>" + "<dependencies>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>m2</artifactId>" + "    <version>1</version>" + "  </dependency>" + "</dependencies>");
    VirtualFile m2 = createModulePom("m2", "<groupId>test</groupId>" + "<artifactId>m2</artifactId>" + "<version>1</version>" + "<dependencies>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>m3</artifactId>" + "    <version>1</version>" + "  </dependency>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>m4</artifactId>" + "    <version>1</version>" + "    <optional>true</optional>" + "  </dependency>" + "</dependencies>");
    VirtualFile m3 = createModulePom("m3", "<groupId>test</groupId>" + "<artifactId>m3</artifactId>" + "<version>1</version>");
    VirtualFile m4 = createModulePom("m4", "<groupId>test</groupId>" + "<artifactId>m4</artifactId>" + "<version>1</version>");
    importProjects(m1, m2, m3, m4);
    assertModules("m1", "m2", "m3", "m4");
    assertModuleModuleDeps("m1", "m2", "m3");
    assertModuleModuleDeps("m2", "m3", "m4");
    setupJdkForModule("m1");
    setupJdkForModule("m2");
    setupJdkForModule("m3");
    setupJdkForModule("m4");
    assertModuleClasspath("m1", getProjectPath() + "/m1/target/classes", getProjectPath() + "/m2/target/classes", getProjectPath() + "/m3/target/classes");
    assertModuleClasspath("m2", getProjectPath() + "/m2/target/classes", getProjectPath() + "/m3/target/classes", getProjectPath() + "/m4/target/classes");
}||||||||public void testConfiguringModuleDependencies() throws Exception {
    VirtualFile m1 = createModulePom("m1", "<groupId>test</groupId>" + "<artifactId>m1</artifactId>" + "<version>1</version>" + "<dependencies>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>m2</artifactId>" + "    <version>1</version>" + "  </dependency>" + "</dependencies>");
    VirtualFile m2 = createModulePom("m2", "<groupId>test</groupId>" + "<artifactId>m2</artifactId>" + "<version>1</version>" + "<dependencies>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>m3</artifactId>" + "    <version>1</version>" + "  </dependency>" + "  <dependency>" + "    <groupId>test</groupId>" + "    <artifactId>m4</artifactId>" + "    <version>1</version>" + "    <optional>true</optional>" + "  </dependency>" + "</dependencies>");
    VirtualFile m3 = createModulePom("m3", "<groupId>test</groupId>" + "<artifactId>m3</artifactId>" + "<version>1</version>");
    VirtualFile m4 = createModulePom("m4", "<groupId>test</groupId>" + "<artifactId>m4</artifactId>" + "<version>1</version>");
    importProjects(m1, m2, m3, m4);
    assertModules("m1", "m2", "m3", "m4");
    assertModuleModuleDeps("m1", "m2", "m3");
    assertModuleModuleDeps("m2", "m3", "m4");
    setupJdkForModules("m1", "m2", "m3", "m4");
    assertModuleClasspath("m1", getProjectPath() + "/m1/target/classes", getProjectPath() + "/m2/target/classes", getProjectPath() + "/m3/target/classes");
    assertModuleClasspath("m2", getProjectPath() + "/m2/target/classes", getProjectPath() + "/m3/target/classes", getProjectPath() + "/m4/target/classes");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					StringLiteralExpr
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					StringLiteralExpr
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

