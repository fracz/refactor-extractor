private void doCheckPoint() throws IOException {
    long[] lastCommittedTransaction = transactionIdStore.getLastCommittedTransaction();
    long lastCommittedTransactionId = lastCommittedTransaction[0];
    LogPosition logPosition = new LogPosition(lastCommittedTransaction[2], lastCommittedTransaction[3]);
    msgLog.info(prefix(lastCommittedTransactionId) + "Starting check pointing...");
    /*
         * Check kernel health before going into waiting for transactions to be closed, to avoid
         * getting into a scenario where we would await a condition that would potentially never
         * happen.
         */
    kernelHealth.assertHealthy(IOException.class);
    /*
         * First we flush the store. If we fail now or during the flush, on recovery we'll find the
         * earlier check point and replay from there all the log entries. Everything will be ok.
         */
    msgLog.info(prefix(lastCommittedTransactionId) + " Starting store flush...");
    storeFlusher.forceEverything();
    synchronized (logFile) {
        synchronized (channel) {
            /*
                 * Check kernel health before going to write the next check point.  In case of a panic this check point
                 * will be aborted, which is the safest alternative so that the next recovery will have a chance to
                 * repair the damages.
                 */
            kernelHealth.assertHealthy(IOException.class);
            try {
                transactionLogWriter.checkPoint(logPosition);
                channel.emptyBufferIntoChannelAndClearIt();
                channel.force();
            } catch (Throwable t) {
                kernelHealth.panic(t);
                throw t;
            }
        }
    }
    threshold.checkPointHappened(lastCommittedTransactionId);
    msgLog.info(prefix(lastCommittedTransactionId) + "Check pointing completed");
    /*
         * prune up to the version pointed from the latest check point,
         * since it might be an earlier version than the current log version
         */
    logPruning.pruneLogs(logPosition.getLogVersion());
}||||||||private void doCheckPoint(LogCheckPointEvent logCheckPointEvent) throws IOException {
    long[] lastCommittedTransaction = transactionIdStore.getLastCommittedTransaction();
    long lastCommittedTransactionId = lastCommittedTransaction[0];
    LogPosition logPosition = new LogPosition(lastCommittedTransaction[2], lastCommittedTransaction[3]);
    msgLog.info(prefix(lastCommittedTransactionId) + "Starting check pointing...");
    /*
         * Check kernel health before going into waiting for transactions to be closed, to avoid
         * getting into a scenario where we would await a condition that would potentially never
         * happen.
         */
    kernelHealth.assertHealthy(IOException.class);
    /*
         * First we flush the store. If we fail now or during the flush, on recovery we'll find the
         * earlier check point and replay from there all the log entries. Everything will be ok.
         */
    msgLog.info(prefix(lastCommittedTransactionId) + " Starting store flush...");
    storeFlusher.forceEverything();
    /*
         * Check kernel health before going to write the next check point.  In case of a panic this check point
         * will be aborted, which is the safest alternative so that the next recovery will have a chance to
         * repair the damages.
         */
    kernelHealth.assertHealthy(IOException.class);
    appender.checkPoint(logPosition, logCheckPointEvent);
    threshold.checkPointHappened(lastCommittedTransactionId);
    msgLog.info(prefix(lastCommittedTransactionId) + "Check pointing completed");
    /*
         * Prune up to the version pointed from the latest check point,
         * since it might be an earlier version than the current log version.
         */
    logPruning.pruneLogs(logPosition.getLogVersion());
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayAccessExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ClassExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockComment
							)
						)
						(TryStmt
							(CatchClause
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ThrowStmt
										NameExpr
											SimpleName
									)
								)
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockComment
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayAccessExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ArrayAccessExpr
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ClassExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockComment
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

