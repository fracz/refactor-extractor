/**
 * Returns the current enabled/disabled status of the given provider. If the
 * user has enabled this provider in the Settings menu, true is returned
 * otherwise false is returned
 *
 * @param provider the name of the provider
 * @return true if the provider is enabled
 *
 * @throws SecurityException if no suitable permission is present for the provider.
 * @throws IllegalArgumentException if provider is null
 */
public boolean isProviderEnabled(String provider) {
    if (provider == null) {
        throw new IllegalArgumentException("provider==null");
    }
    try {
        return mService.isProviderEnabled(provider);
    } catch (RemoteException ex) {
        Log.e(TAG, "isProviderEnabled: RemoteException", ex);
        return false;
    }
}||||||||/**
 * Returns the current enabled/disabled status of the given provider. If the
 * user has enabled this provider in the Settings menu, true is returned
 * otherwise false is returned
 *
 * @param provider the name of the provider
 * @return true if the provider is enabled
 *
 * @throws SecurityException if no suitable permission is present for the provider.
 * @throws IllegalArgumentException if provider is null
 * @deprecated use the {@link LocationRequest} class instead
 */
@Deprecated
public boolean isProviderEnabled(String provider) {
    checkProvider(provider);
    try {
        return mService.isProviderEnabled(provider);
    } catch (RemoteException e) {
        Log.e(TAG, "RemoteException", e);
        return false;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

