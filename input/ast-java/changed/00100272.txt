public void endShape() {
    shape = 0;
    switch(shape) {
        case LINE_STRIP:
            stroke_shape(path);
            break;
        case LINE_LOOP:
            path.closePath();
            stroke_shape(path);
            break;
        case POLYGON:
            path.closePath();
            draw_shape(path);
            break;
    }
}||||||||/*
  protected void bezier_vertex(float x, float y) {
    vertexCount = 0;

    if (splineVertices == null) {
      splineVertices = new float[DEFAULT_SPLINE_VERTICES][VERTEX_FIELD_COUNT];
    }

    // if more than 128 points, shift everything back to the beginning
    if (splineVertexCount == DEFAULT_SPLINE_VERTICES) {
      System.arraycopy(splineVertices[DEFAULT_SPLINE_VERTICES - 3], 0,
                       splineVertices[0], 0, VERTEX_FIELD_COUNT);
      System.arraycopy(splineVertices[DEFAULT_SPLINE_VERTICES - 2], 0,
                       splineVertices[1], 0, VERTEX_FIELD_COUNT);
      splineVertexCount = 3;
    }
    splineVertices[splineVertexCount][MX] = x;
    splineVertices[splineVertexCount][MY] = y;
    splineVertexCount++;

    switch (shape) {
    case LINE_LOOP:
    case LINE_STRIP:
    case POLYGON:
      if (splineVertexCount == 1) {
        path.moveTo(x, y);

      } else if (splineVertexCount >= 4) {
        path.curveTo(splineVertices[splineVertexCount-3][MX],
                     splineVertices[splineVertexCount-3][MY],
                     splineVertices[splineVertexCount-2][MX],
                     splineVertices[splineVertexCount-2][MY],
                     x, y);
      }
      break;

    default:
      throw new RuntimeException("bezierVertex() can only be used with " +
                                 "LINE_LOOP and POLYGON shapes");
    }
  }
  */
/*
  public void bezierVertex(float x1, float y1, float z1,
                           float x2, float y2, float z2,
                           float x3, float y3, float z3) {
    depthErrorXYZ("bezierVertex");
  }
  */
/**
 * See notes with the curve() function.
 */
/*
  public void curveVertex(float x, float y) {
    //throw new RuntimeException("curveVertex() temporarily disabled");
    // TODO get matrix setup happening
  }
  */
/**
 * See notes with the curve() function.
 */
/*
  public void curveVertex(float x, float y, float z) {
    depthErrorXYZ("curveVertex");
  }
  */
public abstract void endShape();||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(BreakStmt
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
)

