/**
 * When linking a shared library fully or mostly static then we need to link in *all* dependent
 * files, not just what the shared library needs for its own code. This is done by wrapping all
 * objects/libraries with -Wl,-whole-archive and -Wl,-no-whole-archive. For this case the
 * globalNeedWholeArchive parameter must be set to true. Otherwise only library objects (.lo)
 * need to be wrapped with -Wl,-whole-archive and -Wl,-no-whole-archive.
 *
 * <p>TODO: Factor out of the bazel binary into build variables for crosstool action_configs.
 */
private void addInputFileLinkOptions(LinkArgCollector linkArgCollector) {
    // Used to collect -L and -Wl,-rpath options, ensuring that each used only once.
    Set<String> libOpts = new LinkedHashSet<>();
    // List of command line parameters that need to be placed *outside* of
    // --whole-archive ... --no-whole-archive.
    List<String> noWholeArchiveInputs = new ArrayList<>();
    PathFragment solibDir = configuration.getBinDirectory(ruleContext.getRule().getRepository()).getExecPath().getRelative(cppConfiguration.getSolibDirectory());
    String runtimeSolibName = runtimeSolibDir != null ? runtimeSolibDir.getBaseName() : null;
    boolean runtimeRpath = runtimeSolibDir != null && (linkType == LinkTargetType.DYNAMIC_LIBRARY || (linkType == LinkTargetType.EXECUTABLE && linkStaticness == LinkStaticness.DYNAMIC));
    String rpathRoot = null;
    List<String> runtimeRpathEntries = new ArrayList<>();
    if (output != null) {
        String origin = useTestOnlyFlags && cppConfiguration.supportsExecOrigin() ? "$EXEC_ORIGIN/" : "$ORIGIN/";
        if (runtimeRpath) {
            runtimeRpathEntries.add("-Wl,-rpath," + origin + runtimeSolibName + "/");
        }
        // the search path for finding shared libraries).
        if (isSharedNativeLibrary()) {
            // For shared native libraries, special symlinking is applied to ensure C++
            // runtimes are available under $ORIGIN/_solib_[arch]. So we set the RPATH to find
            // them.
            // 
            // Note that we have to do this because $ORIGIN points to different paths for
            // different targets. In other words, blaze-bin/d1/d2/d3/a_shareddeps.so and
            // blaze-bin/d4/b_shareddeps.so have different path depths. The first could
            // reference a standard blaze-bin/_solib_[arch] via $ORIGIN/../../../_solib[arch],
            // and the second could use $ORIGIN/../_solib_[arch]. But since this is a shared
            // artifact, both are symlinks to the same place, so
            // there's no *one* RPATH setting that fits all targets involved in the sharing.
            rpathRoot = "-Wl,-rpath," + origin + ":" + origin + cppConfiguration.getSolibDirectory() + "/";
            if (runtimeRpath) {
                runtimeRpathEntries.add("-Wl,-rpath," + origin + "../" + runtimeSolibName + "/");
            }
        } else {
            // "../../_solib_[arch]".
            if (runtimeRpath) {
                runtimeRpathEntries.add("-Wl,-rpath," + origin + Strings.repeat("../", output.getRootRelativePath().segmentCount() - 1) + runtimeSolibName + "/");
            }
            rpathRoot = "-Wl,-rpath," + origin + Strings.repeat("../", output.getRootRelativePath().segmentCount() - 1) + cppConfiguration.getSolibDirectory() + "/";
            if (isNativeDeps) {
                // the package directory)
                if (runtimeRpath) {
                    runtimeRpathEntries.add("-Wl,-rpath," + origin + "../" + runtimeSolibName + "/");
                }
                rpathRoot += ":" + origin;
            }
        }
    }
    boolean includeSolibDir = false;
    Map<Artifact, Artifact> ltoMap = null;
    if (!isLTOIndexing && (allLTOArtifacts != null)) {
        // TODO(bazel-team): The LTO final link can only work if there are individual .o files on
        // the command line. Rather than crashing, this should issue a nice error. We will get
        // this by
        // 1) moving supports_start_end_lib to a toolchain feature
        // 2) having thin_lto require start_end_lib
        // As a bonus, we can rephrase --nostart_end_lib as --features=-start_end_lib and get rid
        // of a command line option.
        Preconditions.checkState(cppConfiguration.useStartEndLib());
        ltoMap = new HashMap<>();
        for (LTOBackendArtifacts l : allLTOArtifacts) {
            ltoMap.put(l.getBitcodeFile(), l.getObjectFile());
        }
    }
    List<String> wholeArchiveInputParams = new ArrayList<>();
    List<String> standardArchiveInputParams = new ArrayList<>();
    for (LinkerInput input : linkerInputs) {
        if (input.getArtifactCategory() == ArtifactCategory.DYNAMIC_LIBRARY) {
            PathFragment libDir = input.getArtifact().getExecPath().getParentDirectory();
            Preconditions.checkState(libDir.startsWith(solibDir), "Artifact '%s' is not under directory '%s'.", input.getArtifact(), solibDir);
            if (libDir.equals(solibDir)) {
                includeSolibDir = true;
            }
            addDynamicInputLinkOptions(input, standardArchiveInputParams, libOpts, solibDir, rpathRoot);
        } else {
            addStaticInputLinkOptions(input, wholeArchiveInputParams, standardArchiveInputParams, ltoMap);
        }
    }
    boolean includeRuntimeSolibDir = false;
    for (LinkerInput input : runtimeLinkerInputs) {
        List<String> optionsList = needWholeArchive ? noWholeArchiveInputs : standardArchiveInputParams;
        if (input.getArtifactCategory() == ArtifactCategory.DYNAMIC_LIBRARY) {
            PathFragment libDir = input.getArtifact().getExecPath().getParentDirectory();
            Preconditions.checkState(runtimeSolibDir != null && libDir.equals(runtimeSolibDir), "Artifact '%s' is not under directory '%s'.", input.getArtifact(), solibDir);
            includeRuntimeSolibDir = true;
            addDynamicInputLinkOptions(input, optionsList, libOpts, solibDir, rpathRoot);
        } else {
            addStaticInputLinkOptions(input, needWholeArchive ? noWholeArchiveInputs : wholeArchiveInputParams, needWholeArchive ? noWholeArchiveInputs : standardArchiveInputParams, ltoMap);
        }
    }
    if (linkerParamsFile != null && ltoOutputRootPrefix.equals(PathFragment.EMPTY_FRAGMENT)) {
        standardArchiveInputParams.add("-Wl,@" + linkerParamsFile.getExecPathString());
    }
    // rpath ordering matters for performance; first add the one where most libraries are found.
    if (includeSolibDir && rpathRoot != null) {
        linkArgCollector.setRpathRoot(rpathRoot);
    }
    if (includeRuntimeSolibDir) {
        linkArgCollector.setRpathEntries(runtimeRpathEntries);
    }
    linkArgCollector.setLibopts(libOpts);
    linkArgCollector.setLinkerInputParams(standardArchiveInputParams);
    linkArgCollector.setWholeArchiveLinkerInputParams(wholeArchiveInputParams);
    linkArgCollector.setNoWholeArchiveInputs(noWholeArchiveInputs);
    if (ltoMap != null) {
        Preconditions.checkState(ltoMap.isEmpty(), "Still have LTO objects left: %s", ltoMap);
    }
}||||||||/**
 * When linking a shared library fully or mostly static then we need to link in *all* dependent
 * files, not just what the shared library needs for its own code. This is done by wrapping all
 * objects/libraries with -Wl,-whole-archive and -Wl,-no-whole-archive. For this case the
 * globalNeedWholeArchive parameter must be set to true. Otherwise only library objects (.lo)
 * need to be wrapped with -Wl,-whole-archive and -Wl,-no-whole-archive.
 *
 * <p>TODO: Factor out of the bazel binary into build variables for crosstool action_configs.
 */
private void addInputFileLinkOptions(LinkArgCollector linkArgCollector) {
    // Used to collect -L and -Wl,-rpath options, ensuring that each used only once.
    ImmutableSet.Builder<String> libOpts = ImmutableSet.builder();
    // List of command line parameters that need to be placed *outside* of
    // --whole-archive ... --no-whole-archive.
    ImmutableList.Builder<String> noWholeArchiveInputs = ImmutableList.builder();
    PathFragment solibDir = configuration.getBinDirectory(ruleContext.getRule().getRepository()).getExecPath().getRelative(cppConfiguration.getSolibDirectory());
    String runtimeSolibName = runtimeSolibDir != null ? runtimeSolibDir.getBaseName() : null;
    boolean runtimeRpath = runtimeSolibDir != null && (linkType == LinkTargetType.DYNAMIC_LIBRARY || (linkType == LinkTargetType.EXECUTABLE && linkStaticness == LinkStaticness.DYNAMIC));
    String rpathRoot = null;
    ImmutableList.Builder<String> runtimeRpathEntries = ImmutableList.builder();
    if (output != null) {
        String origin = useTestOnlyFlags && cppConfiguration.supportsExecOrigin() ? "$EXEC_ORIGIN/" : "$ORIGIN/";
        if (runtimeRpath) {
            runtimeRpathEntries.add("-Wl,-rpath," + origin + runtimeSolibName + "/");
        }
        // the search path for finding shared libraries).
        if (isSharedNativeLibrary()) {
            // For shared native libraries, special symlinking is applied to ensure C++
            // runtimes are available under $ORIGIN/_solib_[arch]. So we set the RPATH to find
            // them.
            // 
            // Note that we have to do this because $ORIGIN points to different paths for
            // different targets. In other words, blaze-bin/d1/d2/d3/a_shareddeps.so and
            // blaze-bin/d4/b_shareddeps.so have different path depths. The first could
            // reference a standard blaze-bin/_solib_[arch] via $ORIGIN/../../../_solib[arch],
            // and the second could use $ORIGIN/../_solib_[arch]. But since this is a shared
            // artifact, both are symlinks to the same place, so
            // there's no *one* RPATH setting that fits all targets involved in the sharing.
            rpathRoot = "-Wl,-rpath," + origin + ":" + origin + cppConfiguration.getSolibDirectory() + "/";
            if (runtimeRpath) {
                runtimeRpathEntries.add("-Wl,-rpath," + origin + "../" + runtimeSolibName + "/");
            }
        } else {
            // "../../_solib_[arch]".
            if (runtimeRpath) {
                runtimeRpathEntries.add("-Wl,-rpath," + origin + Strings.repeat("../", output.getRootRelativePath().segmentCount() - 1) + runtimeSolibName + "/");
            }
            rpathRoot = "-Wl,-rpath," + origin + Strings.repeat("../", output.getRootRelativePath().segmentCount() - 1) + cppConfiguration.getSolibDirectory() + "/";
            if (isNativeDeps) {
                // the package directory)
                if (runtimeRpath) {
                    runtimeRpathEntries.add("-Wl,-rpath," + origin + "../" + runtimeSolibName + "/");
                }
                rpathRoot += ":" + origin;
            }
        }
    }
    boolean includeSolibDir = false;
    Map<Artifact, Artifact> ltoMap = null;
    if (!isLTOIndexing && (allLTOArtifacts != null)) {
        // TODO(bazel-team): The LTO final link can only work if there are individual .o files on
        // the command line. Rather than crashing, this should issue a nice error. We will get
        // this by
        // 1) moving supports_start_end_lib to a toolchain feature
        // 2) having thin_lto require start_end_lib
        // As a bonus, we can rephrase --nostart_end_lib as --features=-start_end_lib and get rid
        // of a command line option.
        Preconditions.checkState(cppConfiguration.useStartEndLib());
        ltoMap = new HashMap<>();
        for (LTOBackendArtifacts l : allLTOArtifacts) {
            ltoMap.put(l.getBitcodeFile(), l.getObjectFile());
        }
    }
    ImmutableList.Builder<String> wholeArchiveInputParams = ImmutableList.builder();
    ImmutableList.Builder<String> standardArchiveInputParams = ImmutableList.builder();
    for (LinkerInput input : linkerInputs) {
        if (input.getArtifactCategory() == ArtifactCategory.DYNAMIC_LIBRARY) {
            PathFragment libDir = input.getArtifact().getExecPath().getParentDirectory();
            Preconditions.checkState(libDir.startsWith(solibDir), "Artifact '%s' is not under directory '%s'.", input.getArtifact(), solibDir);
            if (libDir.equals(solibDir)) {
                includeSolibDir = true;
            }
            addDynamicInputLinkOptions(input, standardArchiveInputParams, libOpts, solibDir, rpathRoot);
        } else {
            addStaticInputLinkOptions(input, wholeArchiveInputParams, standardArchiveInputParams, ltoMap);
        }
    }
    boolean includeRuntimeSolibDir = false;
    for (LinkerInput input : runtimeLinkerInputs) {
        ImmutableList.Builder<String> optionsList = needWholeArchive ? noWholeArchiveInputs : standardArchiveInputParams;
        if (input.getArtifactCategory() == ArtifactCategory.DYNAMIC_LIBRARY) {
            PathFragment libDir = input.getArtifact().getExecPath().getParentDirectory();
            Preconditions.checkState(runtimeSolibDir != null && libDir.equals(runtimeSolibDir), "Artifact '%s' is not under directory '%s'.", input.getArtifact(), solibDir);
            includeRuntimeSolibDir = true;
            addDynamicInputLinkOptions(input, optionsList, libOpts, solibDir, rpathRoot);
        } else {
            addStaticInputLinkOptions(input, needWholeArchive ? noWholeArchiveInputs : wholeArchiveInputParams, needWholeArchive ? noWholeArchiveInputs : standardArchiveInputParams, ltoMap);
        }
    }
    if (linkerParamsFile != null && ltoOutputRootPrefix.equals(PathFragment.EMPTY_FRAGMENT)) {
        standardArchiveInputParams.add("-Wl,@" + linkerParamsFile.getExecPathString());
    }
    // rpath ordering matters for performance; first add the one where most libraries are found.
    if (includeSolibDir && rpathRoot != null) {
        linkArgCollector.setRpathRoot(rpathRoot);
    }
    if (includeRuntimeSolibDir) {
        linkArgCollector.setRpathEntries(runtimeRpathEntries.build());
    }
    linkArgCollector.setLibopts(libOpts.build());
    linkArgCollector.setLinkerInputParams(standardArchiveInputParams.build());
    linkArgCollector.setWholeArchiveLinkerInputParams(wholeArchiveInputParams.build());
    linkArgCollector.setNoWholeArchiveInputs(noWholeArchiveInputs.build());
    if (ltoMap != null) {
        Preconditions.checkState(ltoMap.isEmpty(), "Still have LTO objects left: %s", ltoMap);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						NullLiteralExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														StringLiteralExpr
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(IntegerLiteralExpr
															)
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(MethodCallExpr
												StringLiteralExpr
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(IntegerLiteralExpr
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
															)
															StringLiteralExpr
														)
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ConditionalExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(ConditionalExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						NullLiteralExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														StringLiteralExpr
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(IntegerLiteralExpr
															)
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(MethodCallExpr
												StringLiteralExpr
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(IntegerLiteralExpr
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
															)
															StringLiteralExpr
														)
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											NameExpr
												SimpleName
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ConditionalExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(ConditionalExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

