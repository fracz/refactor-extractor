// TODO(user): support try-with-resources
// (This currently passes because the analysis ignores try-with-resources, not because it
// understands why this example is safe.)
@Ignore
@Test
public void tryWithResources() throws Exception {
    compilationHelper.assertCompileSucceeds(compilationHelper.fileManager().forSourceLines("threadsafety/Test.java", "package threadsafety;", "import javax.annotation.concurrent.GuardedBy;", "import java.util.concurrent.locks.Lock;", "class Test {", "  Lock lock;", "  @GuardedBy(\"lock\")", "  int x;", "  static class LockCloser implements AutoCloseable {", "    Lock lock;", "    LockCloser(Lock lock) {", "      this.lock = lock;", "      this.lock.lock();", "    }", "    @Override", "    public void close() throws Exception {", "      lock.unlock();", "    }", "  }", "  void m() throws Exception {", "    try (LockCloser _ = new LockCloser(lock)) {", "      x++;", "    }", "  }", "}"));
}||||||||// (This currently passes because the analysis ignores try-with-resources, not because it
// understands why this example is safe.)
// TODO(user): support try-with-resources
@Ignore
@Test
public void tryWithResources() throws Exception {
    compilationHelper.assertCompileSucceeds(compilationHelper.fileManager().forSourceLines("threadsafety/Test.java", "package threadsafety;", "import javax.annotation.concurrent.GuardedBy;", "import java.util.concurrent.locks.Lock;", "class Test {", "  Lock lock;", "  @GuardedBy(\"lock\")", "  int x;", "  static class LockCloser implements AutoCloseable {", "    Lock lock;", "    LockCloser(Lock lock) {", "      this.lock = lock;", "      this.lock.lock();", "    }", "    @Override", "    public void close() throws Exception {", "      lock.unlock();", "    }", "  }", "  void m() throws Exception {", "    try (LockCloser _ = new LockCloser(lock)) {", "      x++;", "    }", "  }", "}"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
		LineComment
	)
	(MarkerAnnotationExpr
		Name
	)
	LineComment
)

