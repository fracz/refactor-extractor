@Override
public void moveMigratedFiles(FileSystemAbstraction fileSystem, File migrationDir, File storeDir, File leftOversDir) throws IOException {
    // The batch importer will create a whole store. so
    // Disregard the new and empty node/relationship".id" files, i.e. reuse the existing id files
    StoreFile20.deleteIdFile(fileSystem, migrationDir, allExcept(StoreFile20.RELATIONSHIP_GROUP_STORE));
    Iterable<StoreFile20> filesToMove;
    if (versionToUpgradeFrom.equals(Legacy19Store.LEGACY_VERSION)) {
        filesToMove = Arrays.asList(StoreFile20.NODE_STORE, StoreFile20.RELATIONSHIP_STORE, StoreFile20.RELATIONSHIP_GROUP_STORE, StoreFile20.LABEL_TOKEN_STORE, StoreFile20.NODE_LABEL_STORE, StoreFile20.LABEL_TOKEN_NAMES_STORE, StoreFile20.PROPERTY_STORE, StoreFile20.PROPERTY_KEY_TOKEN_STORE, StoreFile20.PROPERTY_KEY_TOKEN_NAMES_STORE, StoreFile20.SCHEMA_STORE);
    } else {
        // Note: We don't overwrite the label stores in 2.0
        filesToMove = Arrays.asList(StoreFile20.NODE_STORE, StoreFile20.RELATIONSHIP_STORE, StoreFile20.RELATIONSHIP_GROUP_STORE);
    }
    // Move the current ones into the leftovers directory
    StoreFile20.move(fileSystem, storeDir, leftOversDir, filesToMove, // allow to skip non existent source files
    true, // not allow to overwrite target files
    false, StoreFileType.STORE);
    // Move the migrated ones into the store directory
    StoreFile20.move(fileSystem, migrationDir, storeDir, filesToMove, // allow to skip non existent source files
    true, // allow to overwrite target files
    true, StoreFileType.values());
    StoreFile20.ensureStoreVersion(fileSystem, storeDir, StoreFile20.currentStoreFiles());
    if (versionToUpgradeFrom.equals(Legacy19Store.LEGACY_VERSION)) {
        Legacy19Store.moveRewrittenTransactionLogs(migrationDir, storeDir);
        Legacy19Store.moveRewrittenLuceneLogs(migrationDir, storeDir);
    }
}||||||||@Override
public void moveMigratedFiles(FileSystemAbstraction fileSystem, File migrationDir, File storeDir, File leftOversDir) throws IOException {
    // The batch importer will create a whole store. so
    // Disregard the new and empty node/relationship".id" files, i.e. reuse the existing id files
    StoreFile20.deleteIdFile(fileSystem, migrationDir, allExcept(StoreFile20.RELATIONSHIP_GROUP_STORE));
    Iterable<StoreFile20> filesToMove;
    if (versionToUpgradeFrom.equals(Legacy19Store.LEGACY_VERSION)) {
        filesToMove = Arrays.asList(StoreFile20.NODE_STORE, StoreFile20.RELATIONSHIP_STORE, StoreFile20.RELATIONSHIP_GROUP_STORE, StoreFile20.LABEL_TOKEN_STORE, StoreFile20.NODE_LABEL_STORE, StoreFile20.LABEL_TOKEN_NAMES_STORE, StoreFile20.PROPERTY_STORE, StoreFile20.PROPERTY_KEY_TOKEN_STORE, StoreFile20.PROPERTY_KEY_TOKEN_NAMES_STORE, StoreFile20.SCHEMA_STORE);
    } else {
        // Note: We don't overwrite the label stores in 2.0
        filesToMove = Arrays.asList(StoreFile20.NODE_STORE, StoreFile20.RELATIONSHIP_STORE, StoreFile20.RELATIONSHIP_GROUP_STORE);
    }
    // Move the current ones into the leftovers directory
    StoreFile20.move(fileSystem, storeDir, leftOversDir, filesToMove, // allow to skip non existent source files
    true, // not allow to overwrite target files
    false, StoreFileType.STORE);
    // Move the migrated ones into the store directory
    StoreFile20.move(fileSystem, migrationDir, storeDir, filesToMove, // allow to skip non existent source files
    true, // allow to overwrite target files
    true, StoreFileType.values());
    StoreFile20.ensureStoreVersion(fileSystem, storeDir, StoreFile20.currentStoreFiles());
    legacyLogFiles.moveRewrittenNeoLogs(migrationDir, storeDir);
    legacyLogFiles.moveRewrittenLuceneLogs(migrationDir, storeDir);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BooleanLiteralExpr
					LineComment
				)
				(BooleanLiteralExpr
					LineComment
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BooleanLiteralExpr
					LineComment
				)
				(BooleanLiteralExpr
					LineComment
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BooleanLiteralExpr
					LineComment
				)
				(BooleanLiteralExpr
					LineComment
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BooleanLiteralExpr
					LineComment
				)
				(BooleanLiteralExpr
					LineComment
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

