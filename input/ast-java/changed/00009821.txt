/**
 * For each root check that the repository is on branch, and this branch is tracking a remote branch,
 * and the remote branch exists.
 * If it is not true for at least one of roots, notify and return false.
 * If branch configuration is OK for all roots, return true.
 */
private boolean checkTrackedBranchesConfigured() {
    for (VirtualFile root : myRoots) {
        try {
            final GitBranch branch = GitBranch.current(myProject, root);
            if (branch == null) {
                LOG.info("checkTrackedBranchesConfigured current branch is null");
                notifyImportantError(myProject, "Can't update: no current branch", "You are in 'detached HEAD' state, which means that you're not on any branch" + rootStringIfNeeded(root) + "Checkout a branch to make update possible.");
                return false;
            }
            final GitBranch tracked = branch.tracked(myProject, root);
            if (tracked == null) {
                final String branchName = branch.getName();
                LOG.info("checkTrackedBranchesConfigured tracked branch is null for current branch " + branch);
                notifyImportantError(myProject, "Can't update: no tracked branch", "No tracked branch configured for branch " + GitUIUtil.code(branchName) + rootStringIfNeeded(root) + "To make your branch track a remote branch call, for example,<br/>" + "<code>git branch --set-upstream " + branchName + " origin/" + branchName + "</code>");
                return false;
            }
            if (!tracked.exists(root)) {
                LOG.info("checkTrackedBranchesConfigured tracked branch " + tracked + "  doesn't exist.");
                notifyMessage(myProject, "Can't update: tracked branch doesn't exist.", "Tracked branch <code>" + tracked.getName() + "</code> doesn't exist, so there is nothing to update" + rootStringIfNeeded(root) + "The branch will be automatically created when you push to it.", NotificationType.WARNING, true, null);
                return false;
            }
            myTrackedBranches.put(root, new GitBranchPair(branch, tracked));
        } catch (VcsException e) {
            LOG.info("checkTrackedBranchesConfigured ", e);
            notifyImportantError(myProject, "Can't update: error identifying tracked branch", e.getLocalizedMessage());
            return false;
        }
    }
    return true;
}||||||||/**
 * For each root check that the repository is on branch, and this branch is tracking a remote branch,
 * and the remote branch exists.
 * If it is not true for at least one of roots, notify and return false.
 * If branch configuration is OK for all roots, return true.
 */
private boolean checkTrackedBranchesConfigured() {
    for (GitRepository repository : myRepositories) {
        VirtualFile root = repository.getRoot();
        try {
            final GitBranch branch = GitBranch.current(myProject, root);
            if (branch == null) {
                LOG.info("checkTrackedBranchesConfigured current branch is null");
                notifyImportantError(myProject, "Can't update: no current branch", "You are in 'detached HEAD' state, which means that you're not on any branch" + rootStringIfNeeded(root) + "Checkout a branch to make update possible.");
                return false;
            }
            final GitBranch tracked = branch.tracked(myProject, root);
            if (tracked == null) {
                final String branchName = branch.getName();
                LOG.info("checkTrackedBranchesConfigured tracked branch is null for current branch " + branch);
                notifyImportantError(myProject, "Can't update: no tracked branch", "No tracked branch configured for branch " + code(branchName) + rootStringIfNeeded(root) + "To make your branch track a remote branch call, for example,<br/>" + "<code>git branch --set-upstream " + branchName + " origin/" + branchName + "</code>");
                return false;
            }
            if (!tracked.exists(root)) {
                LOG.info("checkTrackedBranchesConfigured tracked branch " + tracked + "  doesn't exist.");
                notifyMessage(myProject, "Can't update: tracked branch doesn't exist.", "Tracked branch <code>" + tracked.getName() + "</code> doesn't exist, so there is nothing to update" + rootStringIfNeeded(root) + "The branch will be automatically created when you push to it.", NotificationType.WARNING, true, null);
                return false;
            }
            myTrackedBranches.put(root, new GitBranchPair(branch, tracked));
        } catch (VcsException e) {
            LOG.info("checkTrackedBranchesConfigured ", e);
            notifyImportantError(myProject, "Can't update: error identifying tracked branch", e.getLocalizedMessage());
            return false;
        }
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
											StringLiteralExpr
										)
										SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		StringLiteralExpr
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		SimpleName
																	)
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BooleanLiteralExpr
										)
										NullLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									StringLiteralExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
											StringLiteralExpr
										)
										SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		StringLiteralExpr
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																		)
																	)
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		SimpleName
																	)
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										StringLiteralExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
												)
											)
											StringLiteralExpr
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BooleanLiteralExpr
										)
										NullLiteralExpr
										SimpleName
									)
								)
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

