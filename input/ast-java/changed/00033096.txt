@Test
public void test_one() throws Exception {
    String sql = "CREATE TABLE t1 ( a INT NOT NULL, PRIMARY KEY (a))" + " ENGINE=InnoDB TABLESPACE ts1                            " + " PARTITION BY RANGE (a) PARTITIONS 3 (" + " PARTITION P1 VALUES LESS THAN (2)," + " PARTITION P2 VALUES LESS THAN (4) TABLESPACE ts2," + " PARTITION P3 VALUES LESS THAN (6) TABLESPACE ts3);";
    MySqlStatementParser parser = new MySqlStatementParser(sql);
    SQLStatement stmt = parser.parseCreateTable();
    MySqlSchemaStatVisitor visitor = new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    {
        String output = SQLUtils.toMySqlString(stmt);
        Assert.assertEquals("CREATE TABLE t1 (" + "\n\ta INT NOT NULL, " + "\n\tPRIMARY KEY (a)" + "\n) ENGINE = InnoDB TABLESPACE ts1" + "\nPARTITION BY RANGE (a) PARTITIONS 3" + "\n(" + "\n\tPARTITION P1 VALUES LESS THAN (2)," + "\n\tPARTITION P2 VALUES LESS THAN (4) TABLESPACE ts2," + "\n\tPARTITION P3 VALUES LESS THAN (6) TABLESPACE ts3" + "\n)", output);
    }
    {
        String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
        Assert.assertEquals("create table t1 (" + "\n\ta INT not null, " + "\n\tprimary key (a)" + "\n) engine = InnoDB tablespace ts1" + "\npartition by range (a) partitions 3" + "\n(" + "\n\tpartition P1 values less than (2)," + "\n\tpartition P2 values less than (4) tablespace ts2," + "\n\tpartition P3 values less than (6) tablespace ts3" + "\n)", output);
    }
}||||||||@Test
public void test_one() throws Exception {
    String sql = "CREATE TABLE t1 ( a INT NOT NULL, PRIMARY KEY (a))" + " ENGINE=InnoDB TABLESPACE ts1                            " + " PARTITION BY RANGE (a) PARTITIONS 3 (" + " PARTITION P1 VALUES LESS THAN (2)," + " PARTITION P2 VALUES LESS THAN (4) TABLESPACE ts2," + " PARTITION P3 VALUES LESS THAN (6) TABLESPACE ts3);";
    MySqlStatementParser parser = new MySqlStatementParser(sql);
    SQLStatement stmt = parser.parseCreateTable();
    MySqlSchemaStatVisitor visitor = new MySqlSchemaStatVisitor();
    stmt.accept(visitor);
    {
        String output = SQLUtils.toMySqlString(stmt);
        Assert.assertEquals("CREATE TABLE t1 (\n" + "\ta INT NOT NULL,\n" + "\tPRIMARY KEY (a)\n" + ") ENGINE = InnoDB TABLESPACE ts1\n" + "PARTITION BY RANGE (a) PARTITIONS 3\n" + "(\n" + "\tPARTITION P1 VALUES LESS THAN (2),\n" + "\tPARTITION P2 VALUES LESS THAN (4)\n" + "\t\tTABLESPACE ts2,\n" + "\tPARTITION P3 VALUES LESS THAN (6)\n" + "\t\tTABLESPACE ts3\n" + ")", output);
    }
    {
        String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
        Assert.assertEquals("create table t1 (\n" + "\ta INT not null,\n" + "\tprimary key (a)\n" + ") engine = InnoDB tablespace ts1\n" + "partition by range (a) partitions 3\n" + "(\n" + "\tpartition P1 values less than (2),\n" + "\tpartition P2 values less than (4)\n" + "\t\ttablespace ts2,\n" + "\tpartition P3 values less than (6)\n" + "\t\ttablespace ts3\n" + ")", output);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(BlockStmt
			(ExpressionStmt
				(VariableDeclarationExpr
					(VariableDeclarator
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(ExpressionStmt
				(MethodCallExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

