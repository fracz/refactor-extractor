/**
 * Returns a new action instance. The parameter {@code i} is used to vary the parameters used to
 * create the action. Implementations should do something like this: <code>
 * <pre>
 * return new MyAction(owner, inputs, outputs, configuration,
 * (i & 1) == 0 ? a1 : a2,
 * (i & 2) == 0 ? b1 : b2,
 * (i & 4) == 0 ? c1 : c2);
 * (i & 16) == 0 ? d1 : d2);
 * </pre>
 * </code>
 *
 * <p>The wrap-around (in this case at 32) is intentional and is checked for by the testing
 * method.
 *
 * <p>To reduce the combinatorial complexity of testing an action class, all elements that are
 * only used to change the executed command line should go into a single parameter, and the key
 * computation should take the generated command line into account.
 *
 * <p>Furthermore, when called with identical parameters, this method should return different
 * instances (i.e. according to {@code ==}), but they should have the same key.
 */
Action generate(int i) throws InterruptedException;||||||||/**
 * Returns a new action instance. The parameter {@code attributesToFlip} is used to vary the
 * parameters used to create the action. Implementations should do something like this: <code>
 * <pre>
 * private enum KeyAttributes { ATTR_1, ATTR_2, ATTR_3, ATTR_4 }
 * return new MyAction(owner, inputs, outputs, configuration,
 * attributesToFlip.contains(ATTR_0) ? a1 : a2,
 * attributesToFlip.contains(ATTR_1) ? b1 : b2,
 * attributesToFlip.contains(ATTR_2) ? c1 : c2,
 * attributesToFlip.contains(ATTR_3) ? d1 : d2);
 * </pre>
 * </code>
 *
 * <p>To reduce the combinatorial complexity of testing an action class, all elements that are
 * only used to change the executed command line should go into a single parameter, and the key
 * computation should take the generated command line into account.
 *
 * <p>Furthermore, when called with identical parameters, this method should return different
 * instances (i.e. according to {@code ==}), but they should have the same key.
 *
 * @param attributesToFlip
 */
Action generate(ImmutableSet<E> attributesToFlip) throws InterruptedException;||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

