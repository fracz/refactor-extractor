/**
 * Restricts the key to being used only with the provided digests when generating signatures
 * or HMACs. Attempts to use the key with any other digest will be rejected.
 *
 * <p>For HMAC keys, the default is to restrict to the digest specified in
 * {@link Key#getAlgorithm()}. For asymmetric signing keys this constraint must be specified
 * because there is no default.
 *
 * @hide
 */
public Builder setDigests(@KeyStoreKeyConstraints.DigestEnum int digests) {
    mDigests = digests;
    return this;
}||||||||/**
 * Sets the set of digests with which the key can be used when signing/verifying or
 * generating MACs. Attempts to use the key with any other digest will be rejected.
 *
 * <p>For HMAC keys, the default is the digest specified in {@link Key#getAlgorithm()}. For
 * asymmetric signing keys this constraint must be specified.
 *
 * @hide
 */
public Builder setDigests(String... digests) {
    mDigests = ArrayUtils.cloneIfNotEmpty(digests);
    return this;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
				Name
		)
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

