public void testOptimizationOrder() {
    /*
     * We need to make sure that: 1) We are only traversing the AST once 2) For
     * each node, we visit the optimizations in the client-supplied order
     *
     * To test this, we create two fake optimizations that each make an entry in
     * the visitationLog when they are passed a name node to optimize.
     *
     * Each entry is of the form nameX where 'name' is the name of the name node
     * visited and X is the identity of the optimization (1 or 2 in this case).
     * After the pass is run, we verify the correct ordering by querying the
     * log.
     *
     * Using a log, rather than, say, transforming nodes, allows us to ensure
     * not only that we are visiting each node but that our visits occur in the
     * right order (i.e. we need to make sure we're not traversing the entire
     * AST for the first optimization and then a second time for the second).
     */
    final List<String> visitationLog = new ArrayList<>();
    AbstractPeepholeOptimization note1Applied = new AbstractPeepholeOptimization() {

        @Override
        public Node optimizeSubtree(Node node) {
            if (node.isName()) {
                visitationLog.add(node.getString() + "1");
            }
            return node;
        }
    };
    AbstractPeepholeOptimization note2Applied = new AbstractPeepholeOptimization() {

        @Override
        public Node optimizeSubtree(Node node) {
            if (node.isName()) {
                visitationLog.add(node.getString() + "2");
            }
            return node;
        }
    };
    currentPeepholePasses = ImmutableList.of(note1Applied, note2Applied);
    test("var x; var y", "var x; var y");
    /*
     * We expect the optimization order to be: "x" visited by optimization1 "x"
     * visited by optimization2 "y" visited by optimization1 "y" visited by
     * optimization2
     */
    assertThat(visitationLog).containsExactly("x1", "x2", "y1", "y2").inOrder();
}||||||||public void testOptimizationOrder() {
    /*
     * We need to make sure that: 1) We are only traversing the AST once 2) For
     * each node, we visit the optimizations in the client-supplied order
     *
     * To test this, we create two fake optimizations that each make an entry in
     * the visitationLog when they are passed a name node to optimize.
     *
     * Each entry is of the form nameX where 'name' is the name of the name node
     * visited and X is the identity of the optimization (1 or 2 in this case).
     * After the pass is run, we verify the correct ordering by querying the
     * log.
     *
     * Using a log, rather than, say, transforming nodes, allows us to ensure
     * not only that we are visiting each node but that our visits occur in the
     * right order (i.e. we need to make sure we're not traversing the entire
     * AST for the first optimization and then a second time for the second).
     */
    final List<String> visitationLog = new ArrayList<>();
    AbstractPeepholeOptimization note1Applied = new AbstractPeepholeOptimization() {

        @Override
        public Node optimizeSubtree(Node node) {
            if (node.isName()) {
                visitationLog.add(node.getString() + "1");
            }
            return node;
        }
    };
    AbstractPeepholeOptimization note2Applied = new AbstractPeepholeOptimization() {

        @Override
        public Node optimizeSubtree(Node node) {
            if (node.isName()) {
                visitationLog.add(node.getString() + "2");
            }
            return node;
        }
    };
    currentPeepholePasses = ImmutableList.of(note1Applied, note2Applied);
    testSame("var x; var y");
    /*
     * We expect the optimization order to be: "x" visited by optimization1 "x"
     * visited by optimization2 "y" visited by optimization1 "y" visited by
     * optimization2
     */
    assertThat(visitationLog).containsExactly("x1", "x2", "y1", "y2").inOrder();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
							SimpleName
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
							SimpleName
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockComment
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
							SimpleName
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													StringLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
							SimpleName
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(MarkerAnnotationExpr
								Name
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockComment
			)
		)
	)
	(VoidType
	)
	SimpleName
)

