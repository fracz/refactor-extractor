/**
 * Unify {@code this}, which may contain free type variables,
 * with {@code other}, a concrete type, modifying the supplied
 * {@code typeMultimap} to add any new template variable type bindings.
 * @return Whether unification succeeded
 */
public boolean unifyWith(JSType other, List<String> typeParameters, Multimap<String, JSType> typeMultimap) {
    if (this.isUnknown()) {
        return true;
    } else if (this.isTop()) {
        return other.isTop();
    } else if (getMask() == TYPEVAR_MASK && typeParameters.contains(getTypeVar())) {
        updateTypemap(typeMultimap, getTypeVar(), makeType(promoteBoolean(other.getMask()), null, other.getObjs(), other.getTypeVar(), other.getEnums()));
        return true;
    } else if (other.isTop()) {
        return false;
    } else if (other.isUnknown()) {
        return true;
    }
    Set<EnumType> ununifiedEnums = null;
    if (getEnums() == null) {
        ununifiedEnums = other.getEnums();
    } else if (other.getEnums() == null) {
        return false;
    } else {
        ununifiedEnums = Sets.newHashSet();
        for (EnumType e : getEnums()) {
            if (!other.getEnums().contains(e)) {
                return false;
            }
        }
        for (EnumType e : other.getEnums()) {
            if (!getEnums().contains(e)) {
                ununifiedEnums.add(e);
            }
        }
        if (ununifiedEnums.isEmpty()) {
            ununifiedEnums = null;
        }
    }
    Set<ObjectType> ununified = ImmutableSet.of();
    if (other.getObjs() != null) {
        ununified = Sets.newHashSet(other.getObjs());
    }
    // with the same other type.
    if (getObjs() != null) {
        if (other.getObjs() == null) {
            return false;
        }
        for (ObjectType targetObj : getObjs()) {
            boolean hasUnified = false;
            for (ObjectType sourceObj : other.getObjs()) {
                if (targetObj.unifyWith(sourceObj, typeParameters, typeMultimap)) {
                    ununified.remove(sourceObj);
                    hasUnified = true;
                }
            }
            if (!hasUnified) {
                return false;
            }
        }
    }
    String thisTypevar = getTypeVar();
    String otherTypevar = other.getTypeVar();
    if (thisTypevar == null) {
        return otherTypevar == null && getMask() == other.getMask();
    } else if (!typeParameters.contains(thisTypevar)) {
        return thisTypevar.equals(otherTypevar) && getMask() == other.getMask();
    } else {
        // this is (T | ...)
        int templateMask = 0;
        int thisScalarBits = getMask() & ~NON_SCALAR_MASK & ~TYPEVAR_MASK;
        int otherScalarBits = other.getMask() & ~NON_SCALAR_MASK & ~TYPEVAR_MASK;
        templateMask |= otherScalarBits & ~thisScalarBits;
        if (templateMask == BOTTOM_MASK) {
            // nothing left in other to assign to thisTypevar
            return false;
        }
        JSType templateType = makeType(promoteBoolean(templateMask), null, ImmutableSet.copyOf(ununified), otherTypevar, ununifiedEnums == null ? null : ImmutableSet.copyOf(ununifiedEnums));
        updateTypemap(typeMultimap, getTypeVar(), templateType);
        // Foo<number>|Foo<string> doesn't unify with Foo<T>|Foo<string>
        return true;
    }
}||||||||/**
 * Unify {@code this}, which may contain free type variables,
 * with {@code other}, a concrete type, modifying the supplied
 * {@code typeMultimap} to add any new template variable type bindings.
 * @return Whether unification succeeded
 */
public boolean unifyWith(JSType other, List<String> typeParameters, Multimap<String, JSType> typeMultimap) {
    if (this.isUnknown()) {
        return true;
    } else if (this.isTop()) {
        return other.isTop();
    } else if (getMask() == TYPEVAR_MASK && typeParameters.contains(getTypeVar())) {
        updateTypemap(typeMultimap, getTypeVar(), makeType(promoteBoolean(other.getMask()), other.getObjs(), other.getTypeVar(), other.getEnums()));
        return true;
    } else if (other.isTop()) {
        return false;
    } else if (other.isUnknown()) {
        return true;
    }
    Set<EnumType> ununifiedEnums = null;
    if (getEnums() == null) {
        ununifiedEnums = other.getEnums();
    } else if (other.getEnums() == null) {
        return false;
    } else {
        ununifiedEnums = Sets.newHashSet();
        for (EnumType e : getEnums()) {
            if (!other.getEnums().contains(e)) {
                return false;
            }
        }
        for (EnumType e : other.getEnums()) {
            if (!getEnums().contains(e)) {
                ununifiedEnums.add(e);
            }
        }
        if (ununifiedEnums.isEmpty()) {
            ununifiedEnums = null;
        }
    }
    Set<ObjectType> ununified = ImmutableSet.of();
    if (other.getObjs() != null) {
        ununified = Sets.newHashSet(other.getObjs());
    }
    // with the same other type.
    if (getObjs() != null) {
        if (other.getObjs() == null) {
            return false;
        }
        for (ObjectType targetObj : getObjs()) {
            boolean hasUnified = false;
            for (ObjectType sourceObj : other.getObjs()) {
                if (targetObj.unifyWith(sourceObj, typeParameters, typeMultimap)) {
                    ununified.remove(sourceObj);
                    hasUnified = true;
                }
            }
            if (!hasUnified) {
                return false;
            }
        }
    }
    String thisTypevar = getTypeVar();
    String otherTypevar = other.getTypeVar();
    if (thisTypevar == null) {
        return otherTypevar == null && getMask() == other.getMask();
    } else if (!typeParameters.contains(thisTypevar)) {
        return thisTypevar.equals(otherTypevar) && getMask() == other.getMask();
    } else {
        // this is (T | ...)
        int templateMask = 0;
        int thisScalarBits = getMask() & ~NON_SCALAR_MASK & ~TYPEVAR_MASK;
        int otherScalarBits = other.getMask() & ~NON_SCALAR_MASK & ~TYPEVAR_MASK;
        templateMask |= otherScalarBits & ~thisScalarBits;
        if (templateMask == BOTTOM_MASK) {
            // nothing left in other to assign to thisTypevar
            return false;
        }
        JSType templateType = makeType(promoteBoolean(templateMask), ImmutableSet.copyOf(ununified), otherTypevar, ununifiedEnums == null ? null : ImmutableSet.copyOf(ununifiedEnums));
        updateTypemap(typeMultimap, getTypeVar(), templateType);
        // Foo<number>|Foo<string> doesn't unify with Foo<T>|Foo<string>
        return true;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
				(ThisExpr
				)
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
					(ThisExpr
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
									NullLiteralExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				NullLiteralExpr
			)
			(IfStmt
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ForeachStmt
						(BlockStmt
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(MethodCallExpr
							SimpleName
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ForeachStmt
						(BlockStmt
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
							)
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ForeachStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
					)
					(MethodCallExpr
						SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(IfStmt
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
										)
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
								LineComment
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									NullLiteralExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									(ConditionalExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										NullLiteralExpr
									)
									SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
						LineComment
					)
				)
				(BlockStmt
					(ReturnStmt
						(BinaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
				(ThisExpr
				)
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
					(ThisExpr
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IfStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				NullLiteralExpr
			)
			(IfStmt
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ForeachStmt
						(BlockStmt
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(MethodCallExpr
							SimpleName
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ForeachStmt
						(BlockStmt
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
							)
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(BooleanLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ForeachStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
						)
					)
					(MethodCallExpr
						SimpleName
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(IfStmt
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(IntegerLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
										)
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
								LineComment
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									(ConditionalExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										NullLiteralExpr
									)
									SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
						LineComment
					)
				)
				(BlockStmt
					(ReturnStmt
						(BinaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)

