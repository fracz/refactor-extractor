private DirtyOutcome maybeHandleDirtyNode(NodeEntry state) {
    if (!state.isDirty()) {
        return DirtyOutcome.NEEDS_EVALUATION;
    }
    switch(state.getDirtyState()) {
        case CHECK_DEPENDENCIES:
            // Evaluating a dirty node for the first time, and checking its children to see if any
            // of them have changed. Note that there must be dirty children for this to happen.
            // Check the children group by group -- we don't want to evaluate a value that is no
            // longer needed because an earlier dependency changed. For example, //foo:foo depends
            // on target //bar:bar and is built. Then foo/BUILD is modified to remove the dependence
            // on bar, and bar/BUILD is deleted. Reloading //bar:bar would incorrectly throw an
            // exception. To avoid this, we must reload foo/BUILD first, at which point we will
            // discover that it has changed, and re-evaluate target //foo:foo from scratch.
            // On the other hand, when an action requests all of its inputs, we can safely check all
            // of them in parallel on a subsequent build. So we allow checking an entire group in
            // parallel here, if the node builder requested a group last build.
            // Note: every dep returned here must either have this node re-registered for it (using
            // checkIfDoneForDirtyReverseDep) and be registered as a direct dep of this node, or have
            // its reverse dep on this node removed. Failing to do either one of these would result in
            // a graph inconsistency, where the child had a reverse dep on this node, but this node
            // had no kind of dependency on the child.
            Collection<SkyKey> directDepsToCheck = state.getNextDirtyDirectDeps();
            if (invalidatedByErrorTransience(directDepsToCheck, state)) {
                // If this dep is the ErrorTransienceValue and the ErrorTransienceValue has been
                // updated then we need to force a rebuild. We would like to just signal the entry as
                // usual, but we can't, because then the ErrorTransienceValue would remain as a dep,
                // which would be incorrect if, for instance, the value re-evaluated to a non-error.
                state.forceRebuild();
                graph.get(skyKey, Reason.RDEP_REMOVAL, ErrorTransienceValue.KEY).removeReverseDep(skyKey);
                return DirtyOutcome.NEEDS_EVALUATION;
            }
            if (!keepGoing) {
                // This check ensures that we maintain the invariant that if a node with an error is
                // reached during a no-keep-going build, none of its currently building parents
                // finishes building. If the child isn't done building yet, it will detect on its own
                // that it has an error (see the VERIFIED_CLEAN case below). On the other hand, if it
                // is done, then it is the parent's responsibility to notice that, which we do here.
                // We check the deps for errors so that we don't continue building this node if it has
                // a child error.
                Map<SkyKey, NodeEntry> entriesToCheck = graph.getBatchWithFieldHints(skyKey, Reason.EVALUATION, directDepsToCheck, EnumSet.of(NodeEntryField.VALUE, NodeEntryField.INDIVIDUAL_REVERSE_DEPS));
                for (Map.Entry<SkyKey, NodeEntry> entry : entriesToCheck.entrySet()) {
                    if (entry.getValue().isDone() && entry.getValue().getErrorInfo() != null) {
                        // If any child has an error, we arbitrarily add a dep on the first one (needed
                        // for error bubbling) and throw an exception coming from it.
                        SkyKey errorKey = entry.getKey();
                        NodeEntry errorEntry = entry.getValue();
                        state.addTemporaryDirectDeps(GroupedListHelper.create(ImmutableList.of(errorKey)));
                        errorEntry.checkIfDoneForDirtyReverseDep(skyKey);
                        // Perform the necessary bookkeeping for any deps that are not being used.
                        for (Map.Entry<SkyKey, NodeEntry> depEntry : entriesToCheck.entrySet()) {
                            if (!depEntry.getKey().equals(errorKey)) {
                                depEntry.getValue().removeReverseDep(skyKey);
                            }
                        }
                        if (!visitor.preventNewEvaluations()) {
                            // An error was already thrown in the evaluator. Don't do anything here.
                            return DirtyOutcome.ALREADY_PROCESSED;
                        }
                        throw SchedulerException.ofError(errorEntry.getErrorInfo(), entry.getKey());
                    }
                }
            }
            // It is safe to add these deps back to the node -- even if one of them has changed, the
            // contract of pruning is that the node will request these deps again when it rebuilds.
            // We must add these deps before enqueuing them, so that the node knows that it depends
            // on them. If one of these deps is the error transience node, the check we did above
            // in #invalidatedByErrorTransience means that the error transience node is not newer
            // than this node, so we are going to mark it clean (since the error transience node is
            // always the last dep).
            state.addTemporaryDirectDepsGroupToDirtyEntry(directDepsToCheck);
            // VERIFIED_CLEAN case below directly, without scheduling a new Evaluate().
            for (Map.Entry<SkyKey, NodeEntry> e : graph.createIfAbsentBatch(skyKey, Reason.ENQUEUING_CHILD, directDepsToCheck).entrySet()) {
                SkyKey directDep = e.getKey();
                NodeEntry directDepEntry = e.getValue();
                enqueueChild(skyKey, state, directDep, directDepEntry, /*depAlreadyExists=*/
                true);
            }
            return DirtyOutcome.ALREADY_PROCESSED;
        case VERIFIED_CLEAN:
            // No child has a changed value. This node can be marked done and its parents signaled
            // without any re-evaluation.
            visitor.notifyDone(skyKey);
            Set<SkyKey> reverseDeps = state.markClean();
            if (progressReceiver != null) {
                // Tell the receiver that the value was not actually changed this run.
                progressReceiver.evaluated(skyKey, new SkyValueSupplier(state), EvaluationState.CLEAN);
            }
            if (!keepGoing && state.getErrorInfo() != null) {
                if (!visitor.preventNewEvaluations()) {
                    return DirtyOutcome.ALREADY_PROCESSED;
                }
                throw SchedulerException.ofError(state.getErrorInfo(), skyKey);
            }
            signalValuesAndEnqueueIfReady(visitor, skyKey, reverseDeps, state.getVersion());
            return DirtyOutcome.ALREADY_PROCESSED;
        case NEEDS_REBUILDING:
            maybeMarkRebuilding(state);
        // Fall through to REBUILDING case.
        case REBUILDING:
            return DirtyOutcome.NEEDS_EVALUATION;
        default:
            throw new IllegalStateException("key: " + skyKey + ", entry: " + state);
    }
}||||||||private DirtyOutcome maybeHandleDirtyNode(NodeEntry state) {
    if (!state.isDirty()) {
        return DirtyOutcome.NEEDS_EVALUATION;
    }
    switch(state.getDirtyState()) {
        case CHECK_DEPENDENCIES:
            // Evaluating a dirty node for the first time, and checking its children to see if any
            // of them have changed. Note that there must be dirty children for this to happen.
            // Check the children group by group -- we don't want to evaluate a value that is no
            // longer needed because an earlier dependency changed. For example, //foo:foo depends
            // on target //bar:bar and is built. Then foo/BUILD is modified to remove the dependence
            // on bar, and bar/BUILD is deleted. Reloading //bar:bar would incorrectly throw an
            // exception. To avoid this, we must reload foo/BUILD first, at which point we will
            // discover that it has changed, and re-evaluate target //foo:foo from scratch.
            // On the other hand, when an action requests all of its inputs, we can safely check all
            // of them in parallel on a subsequent build. So we allow checking an entire group in
            // parallel here, if the node builder requested a group last build.
            // Note: every dep returned here must either have this node re-registered for it (using
            // checkIfDoneForDirtyReverseDep) and be registered as a direct dep of this node, or have
            // its reverse dep on this node removed. Failing to do either one of these would result in
            // a graph inconsistency, where the child had a reverse dep on this node, but this node
            // had no kind of dependency on the child.
            Collection<SkyKey> directDepsToCheck = state.getNextDirtyDirectDeps();
            if (invalidatedByErrorTransience(directDepsToCheck, state)) {
                // If this dep is the ErrorTransienceValue and the ErrorTransienceValue has been
                // updated then we need to force a rebuild. We would like to just signal the entry as
                // usual, but we can't, because then the ErrorTransienceValue would remain as a dep,
                // which would be incorrect if, for instance, the value re-evaluated to a non-error.
                state.forceRebuild();
                graph.get(skyKey, Reason.RDEP_REMOVAL, ErrorTransienceValue.KEY).removeReverseDep(skyKey);
                return DirtyOutcome.NEEDS_EVALUATION;
            }
            if (!keepGoing) {
                // This check ensures that we maintain the invariant that if a node with an error is
                // reached during a no-keep-going build, none of its currently building parents
                // finishes building. If the child isn't done building yet, it will detect on its own
                // that it has an error (see the VERIFIED_CLEAN case below). On the other hand, if it
                // is done, then it is the parent's responsibility to notice that, which we do here.
                // We check the deps for errors so that we don't continue building this node if it has
                // a child error.
                Map<SkyKey, NodeEntry> entriesToCheck = graph.getBatch(skyKey, Reason.OTHER, directDepsToCheck);
                for (Map.Entry<SkyKey, NodeEntry> entry : entriesToCheck.entrySet()) {
                    if (entry.getValue().isDone() && entry.getValue().getErrorInfo() != null) {
                        // If any child has an error, we arbitrarily add a dep on the first one (needed
                        // for error bubbling) and throw an exception coming from it.
                        SkyKey errorKey = entry.getKey();
                        NodeEntry errorEntry = entry.getValue();
                        state.addTemporaryDirectDeps(GroupedListHelper.create(ImmutableList.of(errorKey)));
                        errorEntry.checkIfDoneForDirtyReverseDep(skyKey);
                        // Perform the necessary bookkeeping for any deps that are not being used.
                        for (Map.Entry<SkyKey, NodeEntry> depEntry : entriesToCheck.entrySet()) {
                            if (!depEntry.getKey().equals(errorKey)) {
                                depEntry.getValue().removeReverseDep(skyKey);
                            }
                        }
                        if (!visitor.preventNewEvaluations()) {
                            // An error was already thrown in the evaluator. Don't do anything here.
                            return DirtyOutcome.ALREADY_PROCESSED;
                        }
                        throw SchedulerException.ofError(errorEntry.getErrorInfo(), entry.getKey());
                    }
                }
            }
            // It is safe to add these deps back to the node -- even if one of them has changed, the
            // contract of pruning is that the node will request these deps again when it rebuilds.
            // We must add these deps before enqueuing them, so that the node knows that it depends
            // on them. If one of these deps is the error transience node, the check we did above
            // in #invalidatedByErrorTransience means that the error transience node is not newer
            // than this node, so we are going to mark it clean (since the error transience node is
            // always the last dep).
            state.addTemporaryDirectDepsGroupToDirtyEntry(directDepsToCheck);
            // VERIFIED_CLEAN case below directly, without scheduling a new Evaluate().
            for (Map.Entry<SkyKey, NodeEntry> e : graph.createIfAbsentBatch(skyKey, Reason.ENQUEUING_CHILD, directDepsToCheck).entrySet()) {
                SkyKey directDep = e.getKey();
                NodeEntry directDepEntry = e.getValue();
                enqueueChild(skyKey, state, directDep, directDepEntry, /*depAlreadyExists=*/
                true);
            }
            return DirtyOutcome.ALREADY_PROCESSED;
        case VERIFIED_CLEAN:
            // No child has a changed value. This node can be marked done and its parents signaled
            // without any re-evaluation.
            visitor.notifyDone(skyKey);
            Set<SkyKey> reverseDeps = state.markClean();
            if (progressReceiver != null) {
                // Tell the receiver that the value was not actually changed this run.
                progressReceiver.evaluated(skyKey, new SkyValueSupplier(state), EvaluationState.CLEAN);
            }
            if (!keepGoing && state.getErrorInfo() != null) {
                if (!visitor.preventNewEvaluations()) {
                    return DirtyOutcome.ALREADY_PROCESSED;
                }
                throw SchedulerException.ofError(state.getErrorInfo(), skyKey);
            }
            signalValuesAndEnqueueIfReady(visitor, skyKey, reverseDeps, state.getVersion());
            return DirtyOutcome.ALREADY_PROCESSED;
        case NEEDS_REBUILDING:
            maybeMarkRebuilding(state);
        // Fall through to REBUILDING case.
        case REBUILDING:
            return DirtyOutcome.NEEDS_EVALUATION;
        default:
            throw new IllegalStateException("key: " + skyKey + ", entry: " + state);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(ForeachStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NullLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ForeachStmt
											(BlockStmt
												(IfStmt
													(UnaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
												)
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(VariableDeclarationExpr
												(VariableDeclarator
													SimpleName
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											LineComment
										)
										(IfStmt
											(UnaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ReturnStmt
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
										)
										(ThrowStmt
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BooleanLiteralExpr
									(BlockComment
									)
								)
								SimpleName
							)
						)
					)
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ReturnStmt
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ThrowStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				LineComment
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ReturnStmt
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(ForeachStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											NullLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ForeachStmt
											(BlockStmt
												(IfStmt
													(UnaryExpr
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
												)
											)
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(VariableDeclarationExpr
												(VariableDeclarator
													SimpleName
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											LineComment
										)
										(IfStmt
											(UnaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ReturnStmt
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
										)
										(ThrowStmt
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BooleanLiteralExpr
									(BlockComment
									)
								)
								SimpleName
							)
						)
					)
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
						)
					)
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ReturnStmt
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ThrowStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				LineComment
			)
			(SwitchEntryStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

