public void testPackageInfoPrefixAnnotation() throws IOException {
    addSourceFile("@ObjectiveCName(\"FBM\")\n" + "package foo.bar.mumble;\n" + "import com.google.j2objc.annotations.ObjectiveCName;", "foo/bar/mumble/package-info.java");
    String translation = translateSourceFile("package foo.bar.mumble;\n" + "public class Test {}", "foo.bar.mumble.Test", "foo/bar/mumble/Test.h");
    assertTranslation(translation, "@interface FBMTest");
    assertTranslation(translation, "typedef FBMTest FooBarMumbleTest;");
    translation = getTranslatedFile("foo/bar/mumble/Test.m");
    assertTranslation(translation, "@implementation FBMTest");
    assertNotInTranslation(translation, "FooBarMumbleTest");
}||||||||public void testPackageInfoPrefixAnnotation() throws IOException {
    addSourcesToSourcepaths();
    addSourceFile("@ObjectiveCName(\"FBM\")\n" + "package foo.bar.mumble;\n" + "import com.google.j2objc.annotations.ObjectiveCName;", "foo/bar/mumble/package-info.java");
    String translation = translateSourceFile("package foo.bar.mumble;\n" + "public class Test {}", "foo.bar.mumble.Test", "foo/bar/mumble/Test.h");
    assertTranslation(translation, "@interface FBMTest");
    assertTranslation(translation, "typedef FBMTest FooBarMumbleTest;");
    translation = getTranslatedFile("foo/bar/mumble/Test.m");
    assertTranslation(translation, "@implementation FBMTest");
    assertNotInTranslation(translation, "FooBarMumbleTest");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

