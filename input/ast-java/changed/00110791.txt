@Override
protected void preParse(ThreadContext context, IRubyObject handlerRuby, NokogiriHandler handler) {
    final String path = "Nokogiri::XML::FragmentHandler";
    final String docFrag = "http://cyberneko.org/html/features/balance-tags/document-fragment";
    RubyObjectAdapter adapter = JavaEmbedUtils.newObjectAdapter();
    IRubyObject doc = adapter.getInstanceVariable(handlerRuby, "@document");
    RubyModule mod = context.getRuntime().getClassFromPath(path);
    try {
        if (doc != null && !doc.isNil() && adapter.isKindOf(doc, mod))
            parser.setFeature(docFrag, true);
    } catch (Exception e) {
    // ignore
    }
}||||||||@Override
protected void preParse(ThreadContext context, IRubyObject handlerRuby, NokogiriHandler handler) {
// final String path = "Nokogiri::XML::FragmentHandler";
// final String docFrag =
// "http://cyberneko.org/html/features/balance-tags/document-fragment";
// RubyObjectAdapter adapter = JavaEmbedUtils.newObjectAdapter();
// IRubyObject doc = adapter.getInstanceVariable(handlerRuby, "@document");
// RubyModule mod =
// context.getRuntime().getClassFromPath(path);
// try {
// if (doc != null && !doc.isNil() && adapter.isKindOf(doc, mod))
// parser.setFeature(docFrag, true);
// } catch (Exception e) {
// // ignore
// }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							(BooleanLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

