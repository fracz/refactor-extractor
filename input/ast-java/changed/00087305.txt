@Override
public boolean nodeAddLabel(KernelStatement state, long nodeId, int labelId) throws EntityNotFoundException, ConstraintValidationKernelException {
    // TODO (BBC, 22/11/13):
    // In order to enforce constraints we need to check whether this change violates constraints; we therefore need
    // the schema lock to ensure that our view of constraints is consistent.
    // 
    // We would like this locking to be done naturally when ConstraintEnforcingEntityOperations calls
    // SchemaReadOperations#constraintsGetForLabel, but the SchemaReadOperations object that
    // ConstraintEnforcingEntityOperations has a reference to does not lock because of the way the cake is
    // constructed.
    // 
    // It would be cleaner if the schema and data cakes were separated so that the SchemaReadOperations object used
    // by ConstraintEnforcingEntityOperations included the full cake, with locking included.
    state.locks().acquireSchemaReadLock();
    state.locks().acquireNodeWriteLock(nodeId);
    return entityWriteDelegate.nodeAddLabel(state, nodeId, labelId);
}||||||||@Override
public boolean nodeAddLabel(KernelStatement state, long nodeId, int labelId) throws EntityNotFoundException, ConstraintValidationKernelException {
    // TODO (BBC, 22/11/13):
    // In order to enforce constraints we need to check whether this change violates constraints; we therefore need
    // the schema lock to ensure that our view of constraints is consistent.
    // 
    // We would like this locking to be done naturally when ConstraintEnforcingEntityOperations calls
    // SchemaReadOperations#constraintsGetForLabel, but the SchemaReadOperations object that
    // ConstraintEnforcingEntityOperations has a reference to does not lock because of the way the cake is
    // constructed.
    // 
    // It would be cleaner if the schema and data cakes were separated so that the SchemaReadOperations object used
    // by ConstraintEnforcingEntityOperations included the full cake, with locking included.
    state.locks().acquireShared(ResourceTypes.SCHEMA, schemaResource());
    state.locks().acquireExclusive(ResourceTypes.NODE, nodeId);
    return entityWriteDelegate.nodeAddLabel(state, nodeId, labelId);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

