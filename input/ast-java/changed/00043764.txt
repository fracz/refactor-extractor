/**
 * Performs an accessibility action after it has been offered to the
 * delegate.
 *
 * @hide
 */
@Override
public boolean performAccessibilityActionInternal(int action, Bundle arguments) {
    switch(action) {
        case AccessibilityNodeInfo.ACTION_CLICK:
            {
                boolean handled = false;
                // Simulate View.onTouchEvent for an ACTION_UP event.
                if (isClickable() || isLongClickable()) {
                    if (isFocusable() && !isFocused()) {
                        requestFocus();
                    }
                    performClick();
                    handled = true;
                }
                // Simulate TextView.onTouchEvent for an ACTION_UP event.
                if ((mMovement != null || onCheckIsTextEditor()) && isEnabled() && mText instanceof Spannable && mLayout != null && (isTextEditable() || isTextSelectable()) && isFocused()) {
                    // Show the IME, except when selecting in read-only text.
                    final InputMethodManager imm = InputMethodManager.peekInstance();
                    viewClicked(imm);
                    if (!isTextSelectable() && mEditor.mShowSoftInputOnFocus && imm != null) {
                        handled |= imm.showSoftInput(this, 0);
                    }
                }
                return handled;
            }
        case AccessibilityNodeInfo.ACTION_COPY:
            {
                if (isFocused() && canCopy()) {
                    if (onTextContextMenuItem(ID_COPY)) {
                        return true;
                    }
                }
            }
            return false;
        case AccessibilityNodeInfo.ACTION_PASTE:
            {
                if (isFocused() && canPaste()) {
                    if (onTextContextMenuItem(ID_PASTE)) {
                        return true;
                    }
                }
            }
            return false;
        case AccessibilityNodeInfo.ACTION_CUT:
            {
                if (isFocused() && canCut()) {
                    if (onTextContextMenuItem(ID_CUT)) {
                        return true;
                    }
                }
            }
            return false;
        case AccessibilityNodeInfo.ACTION_SET_SELECTION:
            {
                if (isFocused() && canSelectText()) {
                    ensureIterableTextForAccessibilitySelectable();
                    CharSequence text = getIterableTextForAccessibility();
                    if (text == null) {
                        return false;
                    }
                    final int start = (arguments != null) ? arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT, -1) : -1;
                    final int end = (arguments != null) ? arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT, -1) : -1;
                    if ((getSelectionStart() != start || getSelectionEnd() != end)) {
                        // No arguments clears the selection.
                        if (start == end && end == -1) {
                            Selection.removeSelection((Spannable) text);
                            return true;
                        }
                        if (start >= 0 && start <= end && end <= text.length()) {
                            Selection.setSelection((Spannable) text, start, end);
                            // Make sure selection mode is engaged.
                            if (mEditor != null) {
                                mEditor.startSelectionActionMode();
                            }
                            return true;
                        }
                    }
                }
            }
            return false;
        case AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
        case AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
            {
                ensureIterableTextForAccessibilitySelectable();
                return super.performAccessibilityActionInternal(action, arguments);
            }
        case ACCESSIBILITY_ACTION_SHARE:
            {
                if (isFocused() && canShare()) {
                    if (onTextContextMenuItem(ID_SHARE)) {
                        return true;
                    }
                }
            }
            return false;
        default:
            {
                return super.performAccessibilityActionInternal(action, arguments);
            }
    }
}||||||||/**
 * Performs an accessibility action after it has been offered to the
 * delegate.
 *
 * @hide
 */
@Override
public boolean performAccessibilityActionInternal(int action, Bundle arguments) {
    if (mEditor != null && mEditor.mProcessTextIntentActionsHandler.performAccessibilityAction(action)) {
        return true;
    }
    switch(action) {
        case AccessibilityNodeInfo.ACTION_CLICK:
            {
                boolean handled = false;
                // Simulate View.onTouchEvent for an ACTION_UP event.
                if (isClickable() || isLongClickable()) {
                    if (isFocusable() && !isFocused()) {
                        requestFocus();
                    }
                    performClick();
                    handled = true;
                }
                // Simulate TextView.onTouchEvent for an ACTION_UP event.
                if ((mMovement != null || onCheckIsTextEditor()) && isEnabled() && mText instanceof Spannable && mLayout != null && (isTextEditable() || isTextSelectable()) && isFocused()) {
                    // Show the IME, except when selecting in read-only text.
                    final InputMethodManager imm = InputMethodManager.peekInstance();
                    viewClicked(imm);
                    if (!isTextSelectable() && mEditor.mShowSoftInputOnFocus && imm != null) {
                        handled |= imm.showSoftInput(this, 0);
                    }
                }
                return handled;
            }
        case AccessibilityNodeInfo.ACTION_COPY:
            {
                if (isFocused() && canCopy()) {
                    if (onTextContextMenuItem(ID_COPY)) {
                        return true;
                    }
                }
            }
            return false;
        case AccessibilityNodeInfo.ACTION_PASTE:
            {
                if (isFocused() && canPaste()) {
                    if (onTextContextMenuItem(ID_PASTE)) {
                        return true;
                    }
                }
            }
            return false;
        case AccessibilityNodeInfo.ACTION_CUT:
            {
                if (isFocused() && canCut()) {
                    if (onTextContextMenuItem(ID_CUT)) {
                        return true;
                    }
                }
            }
            return false;
        case AccessibilityNodeInfo.ACTION_SET_SELECTION:
            {
                if (isFocused() && canSelectText()) {
                    ensureIterableTextForAccessibilitySelectable();
                    CharSequence text = getIterableTextForAccessibility();
                    if (text == null) {
                        return false;
                    }
                    final int start = (arguments != null) ? arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_START_INT, -1) : -1;
                    final int end = (arguments != null) ? arguments.getInt(AccessibilityNodeInfo.ACTION_ARGUMENT_SELECTION_END_INT, -1) : -1;
                    if ((getSelectionStart() != start || getSelectionEnd() != end)) {
                        // No arguments clears the selection.
                        if (start == end && end == -1) {
                            Selection.removeSelection((Spannable) text);
                            return true;
                        }
                        if (start >= 0 && start <= end && end <= text.length()) {
                            Selection.setSelection((Spannable) text, start, end);
                            // Make sure selection mode is engaged.
                            if (mEditor != null) {
                                mEditor.startSelectionActionMode();
                            }
                            return true;
                        }
                    }
                }
            }
            return false;
        case AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
        case AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
            {
                ensureIterableTextForAccessibilitySelectable();
                return super.performAccessibilityActionInternal(action, arguments);
            }
        case ACCESSIBILITY_ACTION_SHARE:
            {
                if (isFocused() && canShare()) {
                    if (onTextContextMenuItem(ID_SHARE)) {
                        return true;
                    }
                }
            }
            return false;
        default:
            {
                return super.performAccessibilityActionInternal(action, arguments);
            }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BooleanLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
									)
									(UnaryExpr
										(MethodCallExpr
											SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
						)
						LineComment
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(EnclosedExpr
												(BinaryExpr
													(BinaryExpr
														NameExpr
															SimpleName
														NullLiteralExpr
													)
													(MethodCallExpr
														SimpleName
													)
												)
											)
											(MethodCallExpr
												SimpleName
											)
										)
										(InstanceOfExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
										)
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												SimpleName
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												(ThisExpr
												)
												(IntegerLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						LineComment
					)
					(ReturnStmt
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
											)
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(UnaryExpr
													(IntegerLiteralExpr
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
											)
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(UnaryExpr
													(IntegerLiteralExpr
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(IfStmt
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
											)
											NameExpr
												SimpleName
										)
										(BinaryExpr
											(MethodCallExpr
												SimpleName
											)
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(IfStmt
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(BinaryExpr
												NameExpr
													SimpleName
												(UnaryExpr
													(IntegerLiteralExpr
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(CastExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											(BinaryExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(CastExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												LineComment
											)
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
						)
					)
					(ReturnStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(SuperExpr
							)
						)
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(SuperExpr
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BooleanLiteralExpr
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
									)
									(UnaryExpr
										(MethodCallExpr
											SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
						)
						LineComment
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(EnclosedExpr
												(BinaryExpr
													(BinaryExpr
														NameExpr
															SimpleName
														NullLiteralExpr
													)
													(MethodCallExpr
														SimpleName
													)
												)
											)
											(MethodCallExpr
												SimpleName
											)
										)
										(InstanceOfExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
										)
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												SimpleName
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												(ThisExpr
												)
												(IntegerLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						LineComment
					)
					(ReturnStmt
						NameExpr
							SimpleName
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											SimpleName
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
											)
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(UnaryExpr
													(IntegerLiteralExpr
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ConditionalExpr
											(EnclosedExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
											)
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(UnaryExpr
													(IntegerLiteralExpr
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(IfStmt
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
											)
											NameExpr
												SimpleName
										)
										(BinaryExpr
											(MethodCallExpr
												SimpleName
											)
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(IfStmt
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(BinaryExpr
												NameExpr
													SimpleName
												(UnaryExpr
													(IntegerLiteralExpr
													)
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(CastExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											(BinaryExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(CastExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NullLiteralExpr
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												LineComment
											)
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
						)
					)
					(ReturnStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(SuperExpr
							)
						)
					)
				)
			)
			(SwitchEntryStmt
				NameExpr
					SimpleName
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							(SuperExpr
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

