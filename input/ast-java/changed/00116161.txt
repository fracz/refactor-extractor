@Override
public List<CoreLabel> classify(List<CoreLabel> document) {
    // We could gain by compiling into disjunctions patterns for the same class with the same priorities and restrictions?
    for (Entry entry : entries) {
        // the index of the token from which we begin our search each iteration
        int start = 0;
        while (true) {
            // only search the part of the document that we haven't yet considered
            // System.err.println("REGEX FIND MATCH FOR " + entry.regex.toString());
            start = findStartIndex(entry, document, start, myLabels, this.ignoreCase);
            // no match found
            if (start < 0)
                break;
            // make sure we annotate only valid POS tags
            if (containsValidPos(document, start, start + entry.regex.size())) {
                // annotate each matching token
                for (int i = start; i < start + entry.regex.size(); i++) {
                    CoreLabel token = document.get(i);
                    token.set(CoreAnnotations.AnswerAnnotation.class, entry.type);
                }
            }
            start++;
        }
    }
    return document;
}||||||||@Override
public List<CoreLabel> classify(List<CoreLabel> document) {
    // We could gain by compiling into disjunctions patterns for the same class with the same priorities and restrictions?
    for (Entry entry : entries) {
        // the index of the token from which we begin our search each iteration
        int start = 0;
        while (true) {
            // only search the part of the document that we haven't yet considered
            start = findStartIndex(entry, document, start, myLabels);
            // no match found
            if (start < 0)
                break;
            // make sure we annotate only valid POS tags
            if (containsValidPos(document, start, start + entry.regex.size())) {
                // annotate each matching token
                for (int i = start; i < start + entry.regex.size(); i++) {
                    CoreLabel token = document.get(i);
                    token.set(CoreAnnotations.AnswerAnnotation.class, entry.type);
                }
            }
            start++;
        }
    }
    return document;
}||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										(ThisExpr
										)
									)
									SimpleName
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BreakStmt
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								SimpleName
							)
							(BlockStmt
								(ForStmt
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(VariableDeclarationExpr
										(VariableDeclarator
											NameExpr
												SimpleName
											SimpleName
											(PrimitiveType
											)
										)
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
							LineComment
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(BooleanLiteralExpr
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					LineComment
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BreakStmt
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								SimpleName
							)
							(BlockStmt
								(ForStmt
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(VariableDeclarationExpr
										(VariableDeclarator
											NameExpr
												SimpleName
											SimpleName
											(PrimitiveType
											)
										)
									)
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
							LineComment
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(BooleanLiteralExpr
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

