/**
 * Unescapes the character identified by the character or characters that
 * immediately follow a backslash. The backslash '\' should have already
 * been read. This supports both unicode escapes "u000A" and two-character
 * escapes "\n".
 *
 * @throws NumberFormatException if any unicode escape sequences are
 * malformed.
 */
private char readEscapeCharacter() throws IOException {
    if (pos == limit && !fillBuffer(1)) {
        throw syntaxError("Unterminated escape sequence");
    }
    char escaped = buffer[pos++];
    switch(escaped) {
        case 'u':
            if (pos + 4 > limit && !fillBuffer(4)) {
                throw syntaxError("Unterminated escape sequence");
            }
            String hex = new String(buffer, pos, 4);
            pos += 4;
            return (char) Integer.parseInt(hex, 16);
        case 't':
            return '\t';
        case 'b':
            return '\b';
        case 'n':
            return '\n';
        case 'r':
            return '\r';
        case 'f':
            return '\f';
        case '\'':
        case '"':
        case '\\':
        default:
            return escaped;
    }
}||||||||/**
 * Unescapes the character identified by the character or characters that
 * immediately follow a backslash. The backslash '\' should have already
 * been read. This supports both unicode escapes "u000A" and two-character
 * escapes "\n".
 *
 * @throws NumberFormatException if any unicode escape sequences are
 * malformed.
 */
private char readEscapeCharacter() throws IOException {
    if (pos == limit && !fillBuffer(1)) {
        throw syntaxError("Unterminated escape sequence");
    }
    char escaped = buffer[pos++];
    switch(escaped) {
        case 'u':
            if (pos + 4 > limit && !fillBuffer(4)) {
                throw syntaxError("Unterminated escape sequence");
            }
            String hex = stringPool.get(buffer, pos, 4);
            pos += 4;
            return (char) Integer.parseInt(hex, 16);
        case 't':
            return '\t';
        case 'b':
            return '\b';
        case 'n':
            return '\n';
        case 'r':
            return '\r';
        case 'f':
            return '\f';
        case '\'':
        case '"':
        case '\\':
        default:
            return escaped;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayAccessExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(ReturnStmt
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(PrimitiveType
						)
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(UnaryExpr
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayAccessExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(ReturnStmt
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(PrimitiveType
						)
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
				(ReturnStmt
					(CharLiteralExpr
					)
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
			)
			(SwitchEntryStmt
				(CharLiteralExpr
				)
			)
			(SwitchEntryStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

