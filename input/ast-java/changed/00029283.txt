/**
 * Creates a time-bounded replay subject.
 * <p>
 * In this setting, the {@code ReplaySubject} internally tags each observed item with a timestamp value
 * supplied by the {@link Scheduler} and keeps only those whose age is less than the supplied time value
 * converted to milliseconds. For example, an item arrives at T=0 and the max age is set to 5; at T&gt;=5
 * this first item is then evicted by any subsequent item or termination event, leaving the buffer empty.
 * <p>
 * Once the subject is terminated, observers subscribing to it will receive items that remained in the
 * buffer after the terminal event, regardless of their age.
 * <p>
 * If an observer subscribes while the {@code ReplaySubject} is active, it will observe only those items
 * from within the buffer that have an age less than the specified time, and each item observed thereafter,
 * even if the buffer evicts items due to the time constraint in the mean time. In other words, once an
 * observer subscribes, it observes items without gaps in the sequence except for any outdated items at the
 * beginning of the sequence.
 * <p>
 * Note that terminal notifications ({@code onError} and {@code onCompleted}) trigger eviction as well. For
 * example, with a max age of 5, the first item is observed at T=0, then an {@code onCompleted} notification
 * arrives at T=10. If an observer subscribes at T=11, it will find an empty {@code ReplaySubject} with just
 * an {@code onCompleted} notification.
 *
 * @param <T>
 * the type of items observed and emitted by the Subject
 * @param maxAge
 * the maximum age of the contained items
 * @param unit
 * the time unit of {@code time}
 * @param scheduler
 * the {@link Scheduler} that provides the current time
 * @return the created subject
 */
public static <T> ReplayProcessor<T> createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler) {
    return createWithTimeAndSize(maxAge, unit, scheduler, Integer.MAX_VALUE);
}||||||||/**
 * Creates a time-bounded ReplayProcessor.
 * <p>
 * In this setting, the {@code ReplayProcessor} internally tags each observed item with a timestamp value
 * supplied by the {@link Scheduler} and keeps only those whose age is less than the supplied time value
 * converted to milliseconds. For example, an item arrives at T=0 and the max age is set to 5; at T&gt;=5
 * this first item is then evicted by any subsequent item or termination event, leaving the buffer empty.
 * <p>
 * Once the subject is terminated, observers subscribing to it will receive items that remained in the
 * buffer after the terminal event, regardless of their age.
 * <p>
 * If an observer subscribes while the {@code ReplayProcessor} is active, it will observe only those items
 * from within the buffer that have an age less than the specified time, and each item observed thereafter,
 * even if the buffer evicts items due to the time constraint in the mean time. In other words, once an
 * observer subscribes, it observes items without gaps in the sequence except for any outdated items at the
 * beginning of the sequence.
 * <p>
 * Note that terminal notifications ({@code onError} and {@code onCompleted}) trigger eviction as well. For
 * example, with a max age of 5, the first item is observed at T=0, then an {@code onCompleted} notification
 * arrives at T=10. If an observer subscribes at T=11, it will find an empty {@code ReplayProcessor} with just
 * an {@code onCompleted} notification.
 *
 * @param <T>
 * the type of items observed and emitted by the Subject
 * @param maxAge
 * the maximum age of the contained items
 * @param unit
 * the time unit of {@code time}
 * @param scheduler
 * the {@link Scheduler} that provides the current time
 * @return the created subject
 */
public static <T> ReplayProcessor<T> createWithTime(long maxAge, TimeUnit unit, Scheduler scheduler) {
    return new ReplayProcessor<T>(new SizeAndTimeBoundReplayBuffer<T>(Integer.MAX_VALUE, maxAge, unit, scheduler));
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(ObjectCreationExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

