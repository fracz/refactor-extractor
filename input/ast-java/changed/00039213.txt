/**
 * Ensure that we are connected to an APN of the specified type.
 * @param type the APN type (currently the only valid values
 * are {@link Phone#APN_TYPE_MMS} and {@link Phone#APN_TYPE_SUPL})
 * @return the result of the operation. Success is indicated by
 * a return value of either {@code Phone.APN_ALREADY_ACTIVE} or
 * {@code Phone.APN_REQUEST_STARTED}. In the latter case, a broadcast
 * will be sent by the ConnectivityManager when a connection to
 * the APN has been established.
 */
protected int enableApnType(String type) {
    if (!TextUtils.equals(type, Phone.APN_TYPE_MMS) && !TextUtils.equals(type, Phone.APN_TYPE_SUPL)) {
        return Phone.APN_REQUEST_FAILED;
    }
    // If already active, return
    Log.d(LOG_TAG, "enableApnType(" + type + ")");
    if (isApnTypeActive(type)) {
        setEnabled(type, true);
        removeMessages(EVENT_RESTORE_DEFAULT_APN);
        /**
         * We're being asked to enable a non-default APN that's already in use.
         * This means we should restart the timer that will automatically
         * switch back to the default APN and disable the non-default APN
         * when it expires.
         */
        sendMessageDelayed(obtainMessage(EVENT_RESTORE_DEFAULT_APN), getRestoreDefaultApnDelay());
        if (state == State.INITING)
            return Phone.APN_REQUEST_STARTED;
        else if (state == State.CONNECTED)
            return Phone.APN_ALREADY_ACTIVE;
    }
    if (!isApnTypeAvailable(type)) {
        return Phone.APN_TYPE_NOT_AVAILABLE;
    }
    setEnabled(type, true);
    mRequestedApnType = type;
    sendMessage(obtainMessage(EVENT_ENABLE_NEW_APN));
    return Phone.APN_REQUEST_STARTED;
}||||||||/**
 * Ensure that we are connected to an APN of the specified type.
 * @param type the APN type (currently the only valid values
 * are {@link Phone#APN_TYPE_MMS} and {@link Phone#APN_TYPE_SUPL})
 * @return the result of the operation. Success is indicated by
 * a return value of either {@code Phone.APN_ALREADY_ACTIVE} or
 * {@code Phone.APN_REQUEST_STARTED}. In the latter case, a broadcast
 * will be sent by the ConnectivityManager when a connection to
 * the APN has been established.
 */
protected int enableApnType(String type) {
    int id = apnTypeToId(type);
    if (id == APN_INVALID_ID) {
        return Phone.APN_REQUEST_FAILED;
    }
    // If already active, return
    if (DBG)
        Log.d(LOG_TAG, "enableApnType(" + type + "), isApnTypeActive = " + isApnTypeActive(type) + " and state = " + state);
    if (isApnTypeActive(type)) {
        if (state == State.INITING)
            return Phone.APN_REQUEST_STARTED;
        else if (state == State.CONNECTED)
            return Phone.APN_ALREADY_ACTIVE;
    }
    if (!isApnTypeAvailable(type)) {
        return Phone.APN_TYPE_NOT_AVAILABLE;
    }
    setEnabled(id, true);
    mRequestedApnType = type;
    sendMessage(obtainMessage(EVENT_ENABLE_NEW_APN));
    return Phone.APN_REQUEST_STARTED;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						(MethodCallExpr
							SimpleName
						)
						SimpleName
					)
					(JavadocComment
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ReturnStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
		)
		(ReturnStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(ExpressionStmt
				(MethodCallExpr
					NameExpr
						SimpleName
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
							StringLiteralExpr
						)
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(ReturnStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
		)
		(ReturnStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

