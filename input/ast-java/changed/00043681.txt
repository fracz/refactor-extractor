/**
 * <p>
 * Abort the Images that were dequeued from this ImageWriter, and return
 * them to this writer for reuse.
 * </p>
 * <p>
 * This method is used for the cases where the application dequeued the
 * Image, may have filled the data, but does not want the downstream
 * component to consume it. The Image will be returned to this ImageWriter
 * for reuse after this call, and the ImageWriter will immediately have an
 * Image available to be dequeued. This aborted Image will be invisible to
 * the downstream consumer, as if nothing happened.
 * </p>
 *
 * @param image The Image to be aborted.
 * @see #dequeueInputImage()
 * @see Image#close()
 */
private void abortImage(Image image) {
    if (image == null) {
        throw new IllegalArgumentException("image shouldn't be null");
    }
    if (!mDequeuedImages.contains(image)) {
        throw new IllegalStateException("It is illegal to abort some image that is not" + " dequeued yet");
    }
    WriterSurfaceImage wi = (WriterSurfaceImage) image;
    if (!wi.mIsImageValid) {
        throw new IllegalStateException("Image is invalid");
    }
    /**
     * We only need abort Images that are owned and dequeued by ImageWriter.
     * For attached Images, no need to abort, as there are only two cases:
     * attached + queued successfully, and attach failed. Neither of the
     * cases need abort.
     */
    cancelImage(mNativeContext, image);
    mDequeuedImages.remove(image);
    wi.clearSurfacePlanes();
    wi.mIsImageValid = false;
}||||||||/**
 * <p>
 * Abort the Images that were dequeued from this ImageWriter, and return
 * them to this writer for reuse.
 * </p>
 * <p>
 * This method is used for the cases where the application dequeued the
 * Image, may have filled the data, but does not want the downstream
 * component to consume it. The Image will be returned to this ImageWriter
 * for reuse after this call, and the ImageWriter will immediately have an
 * Image available to be dequeued. This aborted Image will be invisible to
 * the downstream consumer, as if nothing happened.
 * </p>
 *
 * @param image The Image to be aborted.
 * @see #dequeueInputImage()
 * @see Image#close()
 */
private void abortImage(Image image) {
    if (image == null) {
        throw new IllegalArgumentException("image shouldn't be null");
    }
    if (!mDequeuedImages.contains(image)) {
        throw new IllegalStateException("It is illegal to abort some image that is not" + " dequeued yet");
    }
    WriterSurfaceImage wi = (WriterSurfaceImage) image;
    if (!wi.mIsImageValid) {
        return;
    }
    /**
     * We only need abort Images that are owned and dequeued by ImageWriter.
     * For attached Images, no need to abort, as there are only two cases:
     * attached + queued successfully, and attach failed. Neither of the
     * cases need abort.
     */
    cancelImage(mNativeContext, image);
    mDequeuedImages.remove(image);
    wi.clearSurfacePlanes();
    wi.mIsImageValid = false;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			(JavadocComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BooleanLiteralExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
			(JavadocComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(BooleanLiteralExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

