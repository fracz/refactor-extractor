// 
// META OPERATIONS
// 
@Override
public void close() {
    if (delegateToClose != null) {
        delegateToClose.close();
    } else {
        throw new IllegalStateException("Asked to close, but was not given a full implementation of statement " + "context. Please either override this close method, or give CompositeStatementContext a full " + "implementation of the statement context interface.");
    }
}||||||||// 
// META OPERATIONS
// 
@Override
public void close() {
    if (delegateToClose != null) {
        try {
            delegateToClose.close();
        } catch (Exception e) {
            throw launderedException("Failed to close " + this, e);
        }
    } else {
        throw new IllegalStateException("Asked to close, but was not given a full implementation of statement " + "context. Please either override this close method, or give CompositeStatementContext a full " + "implementation of the statement context interface.");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									(BinaryExpr
										StringLiteralExpr
										(ThisExpr
										)
									)
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

