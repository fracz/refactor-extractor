/**
 * This is used for argument parsing in arch variable.
 * It can extract a comma separated argument.
 * Assumes the input format is "name(arg,arg,arg)", with possible
 * spaces around the parentheses and comma(s).
 *
 * @param str arch variable component input
 * @param num Number of argument
 * @return The int value of the arg or 0 if missing or empty
 */
static int getParenthesizedNum(String str, int num) {
    String[] args = str.split("\\s*[,()]\\s*");
    int ans = 0;
    try {
        ans = Integer.parseInt(args[num]);
    } catch (NumberFormatException nfe) {
    // just leave ans as 0
    } catch (ArrayIndexOutOfBoundsException aioobe) {
    // just leave ans as 0
    }
    return ans;
}||||||||/**
 * This is used for argument parsing in arch variable.
 * It can extract a comma separated argument.
 * Assumes the input format is "name(arg,arg,arg)", with possible
 * spaces around the parentheses and comma(s).
 *
 * @param str arch variable component input
 * @param num Number of argument
 * @return The int value of the arg or 0 if missing or empty
 */
static int getParenthesizedNum(String str, int num) {
    String[] args = str.split("\\s*[,()]\\s*");
    int ans = 0;
    try {
        ans = Integer.parseInt(args[num]);
    } catch (NumberFormatException | ArrayIndexOutOfBoundsException nfe) {
    // just leave ans as 0
    }
    return ans;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(UnionType
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

