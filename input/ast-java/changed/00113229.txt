/**
 * Prepare the {@link ConfigurableApplicationContext} created by this
 * {@code SmartContextLoader} <i>before</i> bean definitions are read.
 * <p>The default implementation:
 * <ul>
 * <li>Sets the <em>active bean definition profiles</em> from the supplied
 * {@code MergedContextConfiguration} in the
 * {@link org.springframework.core.env.Environment Environment} of the
 * context.</li>
 * <li>Adds {@link PropertySource PropertySources} for all
 * {@linkplain MergedContextConfiguration#getPropertySourceLocations()
 * resource locations} and
 * {@linkplain MergedContextConfiguration#getPropertySourceProperties()
 * inlined properties} from the supplied {@code MergedContextConfiguration}
 * to the {@code Environment} of the context.</li>
 * <li>Determines what (if any) context initializer classes have been supplied
 * via the {@code MergedContextConfiguration} and instantiates and
 * {@linkplain ApplicationContextInitializer#initialize invokes} each with the
 * given application context.</li>
 * <ul>
 * <li>Any {@code ApplicationContextInitializers} implementing
 * {@link org.springframework.core.Ordered Ordered} or annotated with {@link
 * org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>
 * </ul>
 * </ul>
 * @param context the newly created application context
 * @param mergedConfig the merged context configuration
 * @since 3.2
 * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)
 * @see #loadContext(MergedContextConfiguration)
 * @see ConfigurableApplicationContext#setId
 */
protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {
    context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles());
    addResourcePropertySourcesToEnvironment(context, mergedConfig);
    addInlinedPropertiesToEnvironment(context, mergedConfig);
    invokeApplicationContextInitializers(context, mergedConfig);
}||||||||/**
 * Prepare the {@link ConfigurableApplicationContext} created by this
 * {@code SmartContextLoader} <i>before</i> bean definitions are read.
 * <p>The default implementation:
 * <ul>
 * <li>Sets the <em>active bean definition profiles</em> from the supplied
 * {@code MergedContextConfiguration} in the
 * {@link org.springframework.core.env.Environment Environment} of the
 * context.</li>
 * <li>Adds {@link PropertySource PropertySources} for all
 * {@linkplain MergedContextConfiguration#getPropertySourceLocations()
 * resource locations} and
 * {@linkplain MergedContextConfiguration#getPropertySourceProperties()
 * inlined properties} from the supplied {@code MergedContextConfiguration}
 * to the {@code Environment} of the context.</li>
 * <li>Determines what (if any) context initializer classes have been supplied
 * via the {@code MergedContextConfiguration} and instantiates and
 * {@linkplain ApplicationContextInitializer#initialize invokes} each with the
 * given application context.</li>
 * <ul>
 * <li>Any {@code ApplicationContextInitializers} implementing
 * {@link org.springframework.core.Ordered Ordered} or annotated with {@link
 * org.springframework.core.annotation.Order @Order} will be sorted appropriately.</li>
 * </ul>
 * </ul>
 * @param context the newly created application context
 * @param mergedConfig the merged context configuration
 * @since 3.2
 * @see ApplicationContextInitializer#initialize(ConfigurableApplicationContext)
 * @see #loadContext(MergedContextConfiguration)
 * @see ConfigurableApplicationContext#setId
 */
protected void prepareContext(ConfigurableApplicationContext context, MergedContextConfiguration mergedConfig) {
    context.getEnvironment().setActiveProfiles(mergedConfig.getActiveProfiles());
    TestPropertySourceUtils.addResourcePropertySourcesToEnvironment(context, mergedConfig.getPropertySourceLocations());
    TestPropertySourceUtils.addInlinedPropertiesToEnvironment(context, mergedConfig.getPropertySourceProperties());
    invokeApplicationContextInitializers(context, mergedConfig);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

