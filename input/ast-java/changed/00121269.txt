/**
 * Installs all the (dynamically installable) components ({@code Extension}s, {@code Plugin}s, {@code PassiveScanner}s and
 * files) of the given {@code addOn}.
 * <p>
 * It's also responsible to notify the installed extensions when the installation has finished by calling the method
 * {@code Extension#postInstall()}.
 * <p>
 * The components are installed in the following order:
 * <ol>
 * <li>Files;</li>
 * <li>Extensions;</li>
 * <li>Active scanners;</li>
 * <li>Passive scanners.</li>
 * </ol>
 * The files are installed first as they might be required by extensions and scanners.
 *
 * @param addOnClassLoader the class loader of the given {@code addOn}
 * @param addOn the add-on that will be installed
 * @see Extension
 * @see PassiveScanner
 * @see org.parosproxy.paros.core.scanner.Plugin
 * @see Extension#postInstall()
 */
public static void install(AddOnClassLoader addOnClassLoader, AddOn addOn) {
    installAddOnFiles(addOnClassLoader, addOn, true);
    List<Extension> listExts = installAddOnExtensions(addOn);
    installAddOnActiveScanRules(addOn);
    installAddOnPassiveScanRules(addOn);
    // postInstall actions
    for (Extension ext : listExts) {
        try {
            ext.postInstall();
        } catch (Exception e) {
            logger.error("Post install method failed for add-on " + addOn.getId() + " extension " + ext.getName());
        }
    }
}||||||||/**
 * Installs all the (dynamically installable) components ({@code Extension}s, {@code Plugin}s, {@code PassiveScanner}s and
 * files) of the given {@code addOn}.
 * <p>
 * It's also responsible to notify the installed extensions when the installation has finished by calling the method
 * {@code Extension#postInstall()}.
 * <p>
 * The components are installed in the following order:
 * <ol>
 * <li>Files;</li>
 * <li>Extensions;</li>
 * <li>Active scanners;</li>
 * <li>Passive scanners.</li>
 * </ol>
 * The files are installed first as they might be required by extensions and scanners.
 *
 * @param addOnClassLoader the class loader of the given {@code addOn}
 * @param addOn the add-on that will be installed
 * @see Extension
 * @see PassiveScanner
 * @see org.parosproxy.paros.core.scanner.Plugin
 * @see Extension#postInstall()
 */
public static void install(AddOnClassLoader addOnClassLoader, AddOn addOn) {
    installAddOnFiles(addOnClassLoader, addOn, true);
    List<Extension> listExts = installAddOnExtensions(addOn);
    installAddOnActiveScanRules(addOn, addOnClassLoader);
    installAddOnPassiveScanRules(addOn, addOnClassLoader);
    // postInstall actions
    for (Extension ext : listExts) {
        try {
            ext.postInstall();
        } catch (Exception e) {
            logger.error("Post install method failed for add-on " + addOn.getId() + " extension " + ext.getName());
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

