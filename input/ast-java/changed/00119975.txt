/**
 * Create a {@link CsvReporter} attached to the Titan Metrics registry.
 * <p>
 * The {@code output} argument must be non-null but need not exist. If it
 * doesn't already exist, this method attempts to create it by calling
 * {@link File#mkdirs()}.
 *
 * @param reportIntervalInMS
 * milliseconds to wait between dumping metrics to CSV files in
 * the configured directory
 * @param output
 * the path to a directory into which Metrics will periodically
 * write CSV data
 */
public synchronized void addCsvReporter(long reportIntervalInMS, String output) {
    File outputDir = new File(output);
    if (null != csvReporter) {
        log.debug("Metrics CsvReporter already active; not creating another");
        return;
    }
    if (!outputDir.exists()) {
        if (!outputDir.mkdirs()) {
            log.warn("Failed to create CSV metrics dir {}", outputDir);
        }
    }
    csvReporter = CsvReporter.forRegistry(getRegistry()).build(outputDir);
    csvReporter.start(reportIntervalInMS, TimeUnit.MILLISECONDS);
}||||||||/**
 * Create a {@link CsvReporter} attached to the Titan Metrics registry.
 * <p>
 * The {@code output} argument must be non-null but need not exist. If it
 * doesn't already exist, this method attempts to create it by calling
 * {@link File#mkdirs()}.
 *
 * @param reportInterval
 * time to wait between dumping metrics to CSV files in
 * the configured directory
 * @param output
 * the path to a directory into which Metrics will periodically
 * write CSV data
 */
public synchronized void addCsvReporter(Duration reportInterval, String output) {
    File outputDir = new File(output);
    if (null != csvReporter) {
        log.debug("Metrics CsvReporter already active; not creating another");
        return;
    }
    if (!outputDir.exists()) {
        if (!outputDir.mkdirs()) {
            log.warn("Failed to create CSV metrics dir {}", outputDir);
        }
    }
    csvReporter = CsvReporter.forRegistry(getRegistry()).build(outputDir);
    csvReporter.start(reportInterval.getLength(SCHEDULING_TIME_UNIT), SCHEDULING_TIME_UNIT);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

