@Override
public void open() {
    // try IPythonInterpreter first. If it is not available, we will fallback to the original
    // python interpreter implementation.
    iPythonInterpreter = getIPythonInterpreter();
    if (getProperty().getProperty("zeppelin.python.useIPython", "true").equals("true") && iPythonInterpreter.checkIPythonPrerequisite()) {
        try {
            iPythonInterpreter.open();
            if (InterpreterContext.get() != null) {
                InterpreterContext.get().out.write(("IPython is available, " + "use IPython for PythonInterpreter\n").getBytes());
            }
            LOG.info("Use IPythonInterpreter to replace PythonInterpreter");
            return;
        } catch (Exception e) {
            iPythonInterpreter = null;
        }
    }
    // reset iPythonInterpreter to null
    iPythonInterpreter = null;
    try {
        if (InterpreterContext.get() != null) {
            InterpreterContext.get().out.write(("IPython is not available, " + "use the native PythonInterpreter\n").getBytes());
        }
    } catch (IOException e) {
        LOG.warn("Fail to write InterpreterOutput", e.getMessage());
    }
    // Add matplotlib display hook
    InterpreterGroup intpGroup = getInterpreterGroup();
    if (intpGroup != null && intpGroup.getInterpreterHookRegistry() != null) {
        registerHook(HookType.POST_EXEC_DEV, "__zeppelin__._displayhook()");
    }
    // Add matplotlib display hook
    try {
        createGatewayServerAndStartScript();
    } catch (UnknownHostException e) {
        throw new InterpreterException(e);
    }
}||||||||@Override
public void open() throws InterpreterException {
    // try IPythonInterpreter first. If it is not available, we will fallback to the original
    // python interpreter implementation.
    iPythonInterpreter = getIPythonInterpreter();
    if (getProperty("zeppelin.python.useIPython", "true").equals("true") && iPythonInterpreter.checkIPythonPrerequisite()) {
        try {
            iPythonInterpreter.open();
            if (InterpreterContext.get() != null) {
                InterpreterContext.get().out.write(("IPython is available, " + "use IPython for PythonInterpreter\n").getBytes());
            }
            LOG.info("Use IPythonInterpreter to replace PythonInterpreter");
            return;
        } catch (Exception e) {
            iPythonInterpreter = null;
        }
    }
    // reset iPythonInterpreter to null
    iPythonInterpreter = null;
    try {
        if (InterpreterContext.get() != null) {
            InterpreterContext.get().out.write(("IPython is not available, " + "use the native PythonInterpreter\n").getBytes());
        }
    } catch (IOException e) {
        LOG.warn("Fail to write InterpreterOutput", e.getMessage());
    }
    // Add matplotlib display hook
    InterpreterGroup intpGroup = getInterpreterGroup();
    if (intpGroup != null && intpGroup.getInterpreterHookRegistry() != null) {
        registerHook(HookType.POST_EXEC_DEV, "__zeppelin__._displayhook()");
    }
    // Add matplotlib display hook
    try {
        createGatewayServerAndStartScript();
    } catch (UnknownHostException e) {
        throw new InterpreterException(e);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											(EnclosedExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									(EnclosedExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
									)
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NullLiteralExpr
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											(EnclosedExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									(EnclosedExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
									)
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

