/**
 * Returns a bit representation as boolean values in a reversed manner.
 * A bit string <code>0001 0010</code> would be returnd as <code>0100 1000</code>.
 * That way, the least significant bit can be addressed by bits[0], the second by bits[1] and so on.
 * The most significant bit will be
 * @param value
 * the integer value to be converted in a bit array
 * @return
 * the bit array of the input value in a reversed manner.
 */
public static boolean[] getBits(int value) {
    String zeroBitString = String.format("%0" + 8 + 'd', 0);
    String binaryString = Integer.toBinaryString(value);
    binaryString = zeroBitString.substring(binaryString.length()) + binaryString;
    boolean[] bits = new boolean[8];
    for (int pos = 7; pos > 0; pos--) {
        bits[7 - pos] = binaryString.substring(pos, pos + 1).equalsIgnoreCase("1") ? true : false;
    }
    // e.g. string "0001 0010" is bits[0] -> 0100 1000 <- bits[7]
    for (boolean bit : bits) {
        String b = bit == true ? "1" : "0";
    }
    return bits;
}||||||||/**
 * Returns a bit representation as boolean values in a reversed manner.
 * A bit string <code>0001 0010</code> would be returnd as <code>0100 1000</code>.
 * That way, the least significant bit can be addressed by bits[0], the second by bits[1] and so on.
 * The most significant bit will be
 * @param value
 * the integer value to be converted in a bit array
 * @return
 * the bit array of the input value in a reversed manner.
 */
public static boolean[] getBits(int value) {
    boolean[] bits = new boolean[8];
    for (int i = 0; i < 8; i++) {
        bits[i] = (((value >> i) & 0x1) == 1);
    }
    return bits;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(IntegerLiteralExpr
								)
							)
							(CharLiteralExpr
							)
						)
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(PrimitiveType
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							(BinaryExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(ConditionalExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BooleanLiteralExpr
							)
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
								StringLiteralExpr
								StringLiteralExpr
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ArrayType
		(PrimitiveType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(PrimitiveType
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(EnclosedExpr
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(IntegerLiteralExpr
										)
									)
								)
								(IntegerLiteralExpr
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ArrayType
		(PrimitiveType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

