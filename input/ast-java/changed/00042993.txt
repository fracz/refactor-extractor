/**
 * Revoke a permission that was previously granted by {@link #grantPermission}.
 * @hide
 *
 * @param packageName The name of the package that the permission will be
 * granted to.
 * @param permissionName The name of the permission.
 */
public abstract void revokePermission(String packageName, String permissionName);||||||||/**
 * Revoke a runtime permission that was previously granted by {@link
 * #grantPermission(String, String, android.os.UserHandle)}. The permission
 * must have been requested by and granted to the application. If the
 * application is not allowed to hold the permission, a {@link
 * java.lang.SecurityException} is thrown.
 * <p>
 * <strong>Note: </strong>Using this API requires holding
 * android.permission.GRANT_REVOKE_PERMISSIONS and if the user id is
 * not the current user android.permission.INTERACT_ACROSS_USERS_FULL.
 * </p>
 *
 * @param packageName The package from which to revoke the permission.
 * @param permissionName The permission name to revoke.
 * @param user The user for which to revoke the permission.
 *
 * @see #grantPermission(String, String, android.os.UserHandle)
 *
 * @hide
 */
@SystemApi
public abstract void revokePermission(@NonNull String packageName, @NonNull String permissionName, @NonNull UserHandle user);||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

