/**
 * Check if the given window overlaps with this window.
 *
 * @param other  another window
 * @return       {@code true} if {@code other} overlaps with this window&mdash;{@code false} otherwise
 * @throws IllegalArgumentException if the {@code other} window has a different type than {@link this} window
 */
public boolean overlap(final Window other) throws IllegalArgumentException {
    if (getClass() != other.getClass()) {
        throw new IllegalArgumentException("Cannot compare windows of different type. Other window has type " + other.getClass());
    }
    final SessionWindow otherWindow = (SessionWindow) other;
    return !(otherWindow.endMs < startMs || endMs < otherWindow.startMs);
}||||||||/**
 * Check if the given window overlaps with this window.
 *
 * @param other another window
 * @return {@code true} if {@code other} overlaps with this window&mdash;{@code false} otherwise
 * @throws IllegalArgumentException if the {@code other} window has a different type than {@link this} window
 */
public boolean overlap(final Window other) throws IllegalArgumentException {
    if (getClass() != other.getClass()) {
        throw new IllegalArgumentException("Cannot compare windows of different type. Other window has type " + other.getClass() + ".");
    }
    final SessionWindow otherWindow = (SessionWindow) other;
    return !(otherWindow.endMs < startMs || endMs < otherWindow.startMs);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(UnaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(UnaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

