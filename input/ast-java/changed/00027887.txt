/**
 * @param arg
 * @return
 */
public Future<ResponseType> submitRequest(RequestArgumentType arg) {
    CollapsedRequestFutureImpl<ResponseType, RequestArgumentType> request = new CollapsedRequestFutureImpl<ResponseType, RequestArgumentType>(arg);
    while (!requests.offer(request)) {
        // the request was rejected which means it has hit max size and we need to trigger a batch execution since
        // we're receiving requests faster than the background timer is taking them off
        executeRequestsFromQueue();
    }
    return request;
}||||||||/**
 * Submit a request to a batch. If the batch maxSize is hit trigger the batch immediately.
 *
 * @param arg
 * @return
 */
public Future<ResponseType> submitRequest(RequestArgumentType arg) {
    /*
             * We only want the timer ticking if there are actually things to do so we register it the first time something is added.
             */
    if (!timerListenerRegistered.get() && timerListenerRegistered.compareAndSet(false, true)) {
        /* schedule the collapsing task to be executed every x milliseconds (x defined inside CollapsedTask) */
        timerListenerReference.set(timer.addListener(new CollapsedTask()));
    }
    // loop until succeed (compare-and-set spin-loop)
    while (true) {
        RequestBatch<BatchReturnType, ResponseType, RequestArgumentType> b = batch.get();
        Future<ResponseType> f = b.offer(arg);
        // it will always get a Future unless we hit the max batch size
        if (f != null) {
            return f;
        } else {
            // we hit max batch size so create a new batch and set it if another thread doesn't beat us
            executeBatchAndCreateNew(b);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
					LineComment
				)
			)
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockComment
					)
				)
			)
			(BlockComment
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(BooleanLiteralExpr
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

