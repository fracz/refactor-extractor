/**
 * If this MultiLayerNetwork contains one or more RNN layers: conduct forward pass (prediction)
 * but using previous stored state for any RNN layers. The activations for the final step are
 * also stored in the RNN layers for use next time rnnTimeStep() is called.<br>
 * If no previous state is present in RNN layers, the default value (typically 0) is used.<br>
 * This can be used to generate output one or a few step/s at a time instead of always having to do
 * forward pass from t=0
 * @param input Input to lowest layer. May be for one or multiple time steps.
 * @return Output activations.
 */
public INDArray rnnTimeStep(INDArray input) {
    // Necessary for preprocessors/reshaping
    this.setInputMiniBatchSize(input.size(0));
    for (int i = 0; i < layers.length; i++) {
        if (getLayerWiseConfigurations().getInputPreProcess(i) != null)
            input = getLayerWiseConfigurations().getInputPreProcess(i).preProcess(input, layers[i]);
        if (layers[i] instanceof BaseRecurrentLayer) {
            input = ((BaseRecurrentLayer<?>) layers[i]).rnnTimeStep(input);
        } else {
            input = layers[i].activate(input, false);
        }
    }
    return input;
}||||||||/**
 * If this MultiLayerNetwork contains one or more RNN layers: conduct forward pass (prediction)
 * but using previous stored state for any RNN layers. The activations for the final step are
 * also stored in the RNN layers for use next time rnnTimeStep() is called.<br>
 * This method can be used to generate output one or more steps at a time instead of always having to do
 * forward pass from t=0. Example uses are for streaming data, and for generating samples from network output
 * one step at a time (where samples are then fed back into the network as input)<br>
 * If no previous state is present in RNN layers (i.e., initially or after calling rnnClearPreviousState()),
 * the default initialization (usually 0) is used.<br>
 * Supports mini-batch (i.e., multiple predictions/forward pass in parallel) as well as for single examples.<br>
 * @param input Input to network. May be for one or multiple time steps. For single time step:
 * input has shape [miniBatchSize,inputSize] or [miniBatchSize,inputSize,1]. miniBatchSize=1 for single example.<br>
 * For multiple time steps: [miniBatchSize,inputSize,inputTimeSeriesLength]
 * @return Output activations. If output is RNN layer (such as RnnOutputLayer): if input has shape [miniBatchSize,inputSize]
 * i.e., is 2d, output has shape [miniBatchSize,outputSize] (i.e., also 2d).<br>
 * Otherwise output is 3d [miniBatchSize,outputSize,inputTimeSeriesLength] when using RnnOutputLayer.
 * @see rnnClearPreviousState
 */
public INDArray rnnTimeStep(INDArray input) {
    // Necessary for preprocessors/reshaping
    this.setInputMiniBatchSize(input.size(0));
    boolean inputIs2d = input.rank() == 2;
    for (int i = 0; i < layers.length; i++) {
        if (getLayerWiseConfigurations().getInputPreProcess(i) != null)
            input = getLayerWiseConfigurations().getInputPreProcess(i).preProcess(input, layers[i]);
        if (layers[i] instanceof BaseRecurrentLayer) {
            input = ((BaseRecurrentLayer<?>) layers[i]).rnnTimeStep(input);
        } else {
            input = layers[i].activate(input, false);
        }
    }
    if (inputIs2d && input.rank() == 3 && layers[layers.length - 1].type() == Type.RECURRENT) {
        // instead of 3d output with shape [miniBatchSize,nOut,1]
        return input.tensorAlongDimension(0, 1, 0);
    }
    return input;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(ThisExpr
				)
			)
			LineComment
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
						NullLiteralExpr
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(InstanceOfExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(EnclosedExpr
										(CastExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
												(WildcardType
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				(ThisExpr
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
						NullLiteralExpr
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(InstanceOfExpr
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(EnclosedExpr
										(CastExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(ClassOrInterfaceType
												SimpleName
												(WildcardType
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(ArrayAccessExpr
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(IntegerLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

