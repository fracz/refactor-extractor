/**
 * Test for #7890
 */
@Test
public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception {
    String pluginName = "plugin-test";
    Tuple<Settings, Environment> initialSettings = buildInitialSettings();
    Environment env = initialSettings.v2();
    Path configDir = env.configFile();
    if (!Files.exists(configDir)) {
        Files.createDirectories(configDir);
    }
    Path pluginConfigDir = configDir.resolve(pluginName);
    try {
        PluginManager pluginManager = pluginManager(getPluginUrlForResource("plugin_with_config_v1.zip"), initialSettings);
        pluginManager.downloadAndExtract(pluginName);
        Path[] plugins = pluginManager.getListInstalledPlugins();
        assertThat(plugins, arrayWithSize(1));
        /*
            First time, our plugin contains:
            - config/test.txt (version1)
             */
        assertFileContent(pluginConfigDir, "test.txt", "version1\n");
        // We now remove the plugin
        pluginManager.removePlugin(pluginName);
        // We should still have test.txt
        assertFileContent(pluginConfigDir, "test.txt", "version1\n");
        // Installing a new plugin version
        /*
            Second time, our plugin contains:
            - config/test.txt (version2)
            - config/dir/testdir.txt (version1)
            - config/dir/subdir/testsubdir.txt (version1)
             */
        pluginManager = pluginManager(getPluginUrlForResource("plugin_with_config_v2.zip"), initialSettings);
        pluginManager.downloadAndExtract(pluginName);
        assertFileContent(pluginConfigDir, "test.txt", "version1\n");
        assertFileContent(pluginConfigDir, "test.txt.new", "version2\n");
        assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1\n");
        assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1\n");
        // Removing
        pluginManager.removePlugin(pluginName);
        assertFileContent(pluginConfigDir, "test.txt", "version1\n");
        assertFileContent(pluginConfigDir, "test.txt.new", "version2\n");
        assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1\n");
        assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1\n");
        // Installing a new plugin version
        /*
            Third time, our plugin contains:
            - config/test.txt (version3)
            - config/test2.txt (version1)
            - config/dir/testdir.txt (version2)
            - config/dir/testdir2.txt (version1)
            - config/dir/subdir/testsubdir.txt (version2)
             */
        pluginManager = pluginManager(getPluginUrlForResource("plugin_with_config_v3.zip"), initialSettings);
        pluginManager.downloadAndExtract(pluginName);
        assertFileContent(pluginConfigDir, "test.txt", "version1\n");
        assertFileContent(pluginConfigDir, "test2.txt", "version1\n");
        assertFileContent(pluginConfigDir, "test.txt.new", "version3\n");
        assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1\n");
        assertFileContent(pluginConfigDir, "dir/testdir.txt.new", "version2\n");
        assertFileContent(pluginConfigDir, "dir/testdir2.txt", "version1\n");
        assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1\n");
        assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt.new", "version2\n");
    } finally {
        // we need to clean up the copied dirs
        IOUtils.rm(pluginConfigDir);
    }
}||||||||/**
 * Test for #7890
 */
@Test
public void testLocalPluginInstallWithBinAndConfigInAlreadyExistingConfigDir_7890() throws Exception {
    String pluginName = "plugin-test";
    Environment env = initialSettings.v2();
    Path pluginConfigDir = env.configFile().resolve(pluginName);
    assertStatusOk(String.format(Locale.ROOT, "install %s --url %s --verbose", pluginName, getPluginUrlForResource("plugin_with_config_v1.zip")));
    /*
        First time, our plugin contains:
        - config/test.txt (version1)
         */
    assertFileContent(pluginConfigDir, "test.txt", "version1\n");
    // We now remove the plugin
    assertStatusOk("remove " + pluginName);
    // We should still have test.txt
    assertFileContent(pluginConfigDir, "test.txt", "version1\n");
    // Installing a new plugin version
    /*
        Second time, our plugin contains:
        - config/test.txt (version2)
        - config/dir/testdir.txt (version1)
        - config/dir/subdir/testsubdir.txt (version1)
         */
    assertStatusOk(String.format(Locale.ROOT, "install %s --url %s --verbose", pluginName, getPluginUrlForResource("plugin_with_config_v2.zip")));
    assertFileContent(pluginConfigDir, "test.txt", "version1\n");
    assertFileContent(pluginConfigDir, "test.txt.new", "version2\n");
    assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1\n");
    assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1\n");
    // Removing
    assertStatusOk("remove " + pluginName);
    assertFileContent(pluginConfigDir, "test.txt", "version1\n");
    assertFileContent(pluginConfigDir, "test.txt.new", "version2\n");
    assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1\n");
    assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1\n");
    // Installing a new plugin version
    /*
        Third time, our plugin contains:
        - config/test.txt (version3)
        - config/test2.txt (version1)
        - config/dir/testdir.txt (version2)
        - config/dir/testdir2.txt (version1)
        - config/dir/subdir/testsubdir.txt (version2)
         */
    assertStatusOk(String.format(Locale.ROOT, "install %s --url %s --verbose", pluginName, getPluginUrlForResource("plugin_with_config_v3.zip")));
    assertFileContent(pluginConfigDir, "test.txt", "version1\n");
    assertFileContent(pluginConfigDir, "test2.txt", "version1\n");
    assertFileContent(pluginConfigDir, "test.txt.new", "version3\n");
    assertFileContent(pluginConfigDir, "dir/testdir.txt", "version1\n");
    assertFileContent(pluginConfigDir, "dir/testdir.txt.new", "version2\n");
    assertFileContent(pluginConfigDir, "dir/testdir2.txt", "version1\n");
    assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt", "version1\n");
    assertFileContent(pluginConfigDir, "dir/subdir/testsubdir.txt.new", "version2\n");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							SimpleName
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					(BlockComment
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockComment
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
					(BlockComment
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					StringLiteralExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					StringLiteralExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					StringLiteralExpr
					NameExpr
						SimpleName
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			(BlockComment
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

