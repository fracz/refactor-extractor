@Override
protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {
    if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG, "MT focusChanged " + focused + ", " + direction);
    }
    if (focused) {
        // the cursor ring
        if (hasWindowFocus()) {
            mDrawCursorRing = true;
            if (mNativeClass != 0) {
                nativeRecordButtons(true, false, true);
            }
            setFocusControllerActive(true);
        // } else {
        // The WebView has gained focus while we do not have
        // windowfocus.  When our window lost focus, we should have
        // called nativeRecordButtons(false...)
        }
    } else {
        // true if we are in editing mode), stop drawing the cursor ring.
        if (!inEditingMode()) {
            mDrawCursorRing = false;
            if (mNativeClass != 0) {
                nativeRecordButtons(false, false, true);
            }
            setFocusControllerActive(false);
        }
        mGotKeyDown = false;
    }
    super.onFocusChanged(focused, direction, previouslyFocusedRect);
}||||||||@Override
protected void onFocusChanged(boolean focused, int direction, Rect previouslyFocusedRect) {
    if (DebugFlags.WEB_VIEW) {
        Log.v(LOGTAG, "MT focusChanged " + focused + ", " + direction);
    }
    if (focused) {
        // the cursor ring
        if (hasWindowFocus()) {
            mDrawCursorRing = true;
            if (mNativeClass != 0) {
                nativeRecordButtons(true, false, true);
            }
            setFocusControllerActive(true);
        // } else {
        // The WebView has gained focus while we do not have
        // windowfocus.  When our window lost focus, we should have
        // called nativeRecordButtons(false...)
        }
    } else {
        // true if we are in editing mode), stop drawing the cursor ring.
        if (!inEditingMode()) {
            mDrawCursorRing = false;
            if (mNativeClass != 0) {
                nativeRecordButtons(false, false, true);
            }
        }
        mGotKeyDown = false;
    }
    super.onFocusChanged(focused, direction, previouslyFocusedRect);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				(SuperExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(FieldAccessExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
									)
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										(BooleanLiteralExpr
										)
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BooleanLiteralExpr
								)
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				(SuperExpr
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

