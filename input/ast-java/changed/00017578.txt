public void testHandleResolutionRecursion() throws Exception {
    createProjectPom("<groupId>test</groupId" + "<artifactId>project</artifactId>" + "<version>1</version>" + "<parent>" + "  <groupId>test</groupId" + "  <artifactId>parent</artifactId>" + "  <version>1</version>" + "  <relativePath>./parent/pom.xml</version>" + "</parent>" + "<name>${<caret>project.build.directory}</name>");
    VirtualFile parent = createModulePom("parent", "<groupId>test</groupId" + "<artifactId>parent</artifactId>" + "<version>1</version>" + "<parent>" + "  <groupId>test</groupId" + "  <artifactId>project</artifactId>" + "  <version>1</version>" + "  <relativePath>../pom.xml</version>" + "</parent>");
    assertResolved(myProjectPom, null);
}||||||||public void testHandleResolutionRecursion() throws Exception {
    createProjectPom("<groupId>test</groupId" + "<artifactId>project</artifactId>" + "<version>1</version>" + "<parent>" + "  <groupId>test</groupId" + "  <artifactId>parent</artifactId>" + "  <version>1</version>" + "  <relativePath>./parent/pom.xml</version>" + "</parent>" + "<name>${<caret>project.build.directory}</name>");
    createModulePom("parent", "<groupId>test</groupId" + "<artifactId>parent</artifactId>" + "<version>1</version>" + "<parent>" + "  <groupId>test</groupId" + "  <artifactId>project</artifactId>" + "  <version>1</version>" + "  <relativePath>../pom.xml</version>" + "</parent>");
    assertUnresolved(myProjectPom);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NullLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

