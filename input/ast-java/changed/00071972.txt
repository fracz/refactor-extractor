@Override
public CompilerPass getProcessor(final Compiler compiler) {
    return new CompilerPass() {

        public void process(Node externs, Node js) {
            NodeTraversal.traverse(compiler, js, new FoldConstants(compiler));
            /* TODO(dcc): For now we run all remaining FoldConstants tests under
         * both the FoldConstants pass and the new PeepholeOptimizationPass,
         * since many remaining FoldConstants tests rely on functionality
         * that used to be in FoldConstants but is now in some
         * PeepholeOptimization (e.g. PeepholeSubstituteAlternateSyntax).
         *
         * As we continue with refactoring FoldConstants, more and more of
         * these tests will be moved to their own PeepholeFooTest files.
         *
         * Those that genuinely need to test combinations of different
         * Peephole passes will be moved to AbstractPeepholeOptimizationTest.
         */
            ImmutableSet<AbstractPeepholeOptimization> peepholeOptimizations = ImmutableSet.<AbstractPeepholeOptimization>of(new PeepholeSubstituteAlternateSyntax());
            PeepholeOptimizationsPass peepholePass = new PeepholeOptimizationsPass(compiler, peepholeOptimizations);
            peepholePass.process(externs, js);
        }
    };
}||||||||@Override
public CompilerPass getProcessor(final Compiler compiler) {
    return new CompilerPass() {

        public void process(Node externs, Node js) {
            if (runFoldConstantsFirst) {
                runFoldConstants(externs, js);
                runPeepholePasses(externs, js);
            } else {
                runPeepholePasses(externs, js);
                runFoldConstants(externs, js);
            }
        }

        private void runFoldConstants(Node externs, Node js) {
            NodeTraversal.traverse(compiler, js, new FoldConstants(compiler));
        }

        private void runPeepholePasses(Node externs, Node js) {
            /* TODO(dcc): For now we run all remaining FoldConstants tests under
         * both the FoldConstants pass and the new PeepholeOptimizationPass,
         * since many remaining FoldConstants tests rely on functionality
         * that used to be in FoldConstants but is now in some
         * PeepholeOptimization (e.g. PeepholeSubstituteAlternateSyntax).
         *
         * As we continue with refactoring FoldConstants, more and more of
         * these tests will be moved to their own PeepholeFooTest files.
         *
         * Those that genuinely need to test combinations of different
         * Peephole passes will be moved to AbstractPeepholeOptimizationTest.
         */
            PeepholeOptimizationsPass peepholePass = new PeepholeOptimizationsPass(compiler, new PeepholeSubstituteAlternateSyntax(), new PeepholeRemoveDeadCode());
            peepholePass.process(externs, js);
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockComment
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

