public void testEvilGroovyScripts() throws Exception {
    int nodes = randomIntBetween(1, 3);
    Settings nodeSettings = Settings.builder().put("script.inline", true).put("script.indexed", true).build();
    internalCluster().startNodesAsync(nodes, nodeSettings).get();
    client().admin().cluster().prepareHealth().setWaitForNodes(nodes + "").get();
    client().prepareIndex("test", "doc", "1").setSource("foo", 5, "bar", "baz").setRefresh(true).get();
    // Plain test
    assertSuccess("");
    // numeric field access
    assertSuccess("def foo = doc['foo'].value; if (foo == null) { return 5; }");
    // string field access
    assertSuccess("def bar = doc['bar'].value; if (bar == null) { return 5; }");
    // List
    assertSuccess("def list = [doc['foo'].value, 3, 4]; def v = list.get(1); list.add(10)");
    // Ranges
    assertSuccess("def range = 1..doc['foo'].value; def v = range.get(0)");
    // Maps
    assertSuccess("def v = doc['foo'].value; def m = [:]; m.put(\"value\", v)");
    // Times
    assertSuccess("def t = Instant.now().getMillis()");
    // GroovyCollections
    assertSuccess("def n = [1,2,3]; GroovyCollections.max(n)");
    // Fail cases:
    // AccessControlException[access denied ("java.io.FilePermission" "<<ALL FILES>>" "execute")]
    assertFailure("pr = Runtime.getRuntime().exec(\"touch /tmp/gotcha\"); pr.waitFor()");
    // AccessControlException[access denied ("java.lang.RuntimePermission" "accessClassInPackage.sun.reflect")]
    assertFailure("d = new DateTime(); d.getClass().getDeclaredMethod(\"year\").setAccessible(true)");
    assertFailure("d = new DateTime(); d.\"${'get' + 'Class'}\"()." + "\"${'getDeclared' + 'Method'}\"(\"year\").\"${'set' + 'Accessible'}\"(false)");
    assertFailure("Class.forName(\"org.joda.time.DateTime\").getDeclaredMethod(\"year\").setAccessible(true)");
    // AccessControlException[access denied ("groovy.security.GroovyCodeSourcePermission" "/groovy/shell")]
    assertFailure("Eval.me('2 + 2')");
    assertFailure("Eval.x(5, 'x + 2')");
    // AccessControlException[access denied ("java.lang.RuntimePermission" "accessDeclaredMembers")]
    assertFailure("d = new Date(); java.lang.reflect.Field f = Date.class.getDeclaredField(\"fastTime\");" + " f.setAccessible(true); f.get(\"fastTime\")");
    // AccessControlException[access denied ("java.io.FilePermission" "<<ALL FILES>>" "execute")]
    assertFailure("def methodName = 'ex'; Runtime.\"${'get' + 'Runtime'}\"().\"${methodName}ec\"(\"touch /tmp/gotcha2\")");
    // AccessControlException[access denied ("java.lang.RuntimePermission" "modifyThreadGroup")]
    assertFailure("t = new Thread({ println 3 });");
    // test a directory we normally have access to, but the groovy script does not.
    Path dir = createTempDir();
    // TODO: figure out the necessary escaping for windows paths here :)
    if (!Constants.WINDOWS) {
        // access denied ("java.io.FilePermission" ".../tempDir-00N" "read")
        assertFailure("new File(\"" + dir + "\").exists()");
    }
}||||||||public void testEvilGroovyScripts() throws Exception {
    // Plain test
    assertSuccess("");
    // field access
    assertSuccess("def foo = doc['foo'].value; if (foo == null) { return 5; }");
    // List
    assertSuccess("def list = [doc['foo'].value, 3, 4]; def v = list.get(1); list.add(10)");
    // Ranges
    assertSuccess("def range = 1..doc['foo'].value; def v = range.get(0)");
    // Maps
    assertSuccess("def v = doc['foo'].value; def m = [:]; m.put(\"value\", v)");
    // Times
    assertSuccess("def t = Instant.now().getMillis()");
    // GroovyCollections
    assertSuccess("def n = [1,2,3]; GroovyCollections.max(n)");
    // Fail cases:
    // AccessControlException[access denied ("java.io.FilePermission" "<<ALL FILES>>" "execute")]
    assertFailure("pr = Runtime.getRuntime().exec(\"touch /tmp/gotcha\"); pr.waitFor()");
    // AccessControlException[access denied ("java.lang.RuntimePermission" "accessClassInPackage.sun.reflect")]
    assertFailure("d = new DateTime(); d.getClass().getDeclaredMethod(\"year\").setAccessible(true)");
    assertFailure("d = new DateTime(); d.\"${'get' + 'Class'}\"()." + "\"${'getDeclared' + 'Method'}\"(\"year\").\"${'set' + 'Accessible'}\"(false)");
    assertFailure("Class.forName(\"org.joda.time.DateTime\").getDeclaredMethod(\"year\").setAccessible(true)");
    // AccessControlException[access denied ("groovy.security.GroovyCodeSourcePermission" "/groovy/shell")]
    assertFailure("Eval.me('2 + 2')");
    assertFailure("Eval.x(5, 'x + 2')");
    // AccessControlException[access denied ("java.lang.RuntimePermission" "accessDeclaredMembers")]
    assertFailure("d = new Date(); java.lang.reflect.Field f = Date.class.getDeclaredField(\"fastTime\");" + " f.setAccessible(true); f.get(\"fastTime\")");
    // AccessControlException[access denied ("java.io.FilePermission" "<<ALL FILES>>" "execute")]
    assertFailure("def methodName = 'ex'; Runtime.\"${'get' + 'Runtime'}\"().\"${methodName}ec\"(\"touch /tmp/gotcha2\")");
    // AccessControlException[access denied ("java.lang.RuntimePermission" "modifyThreadGroup")]
    assertFailure("t = new Thread({ println 3 });");
    // test a directory we normally have access to, but the groovy script does not.
    Path dir = createTempDir();
    // TODO: figure out the necessary escaping for windows paths here :)
    if (!Constants.WINDOWS) {
        // access denied ("java.io.FilePermission" ".../tempDir-00N" "read")
        assertFailure("new File(\"" + dir + "\").exists()");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							(BooleanLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(BooleanLiteralExpr
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(BinaryExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								NameExpr
									SimpleName
							)
							StringLiteralExpr
						)
						SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

