public String transformIn(String value) throws TransformationException {
    TransformationService ts = getInTransformationService();
    if (ts != null) {
        return ts.transform(getInTransformParam(), value);
    } else {
        return value;
    }
}||||||||/**
 * Transform data from a MiOS Unit into a form suitable for use in an
 * openHAB Item.
 * <p>
 *
 * Data received from a MiOS unit is in a number of different formats
 * (String, Boolean, DataTime, etc). These values may need to be transformed
 * from their original format prior to being pushed into the corresponding
 * openHAB Item.
 * <p>
 * This method is used internally within the MiOS Binding to perform that
 * transformation.
 * <p>
 * This method is responsible for transforming the inbound value from the
 * MiOS Unit, into the form required by the openHAB Item.
 * <p>
 * metadata supplied by the user, via the <code>in:</code> parameter, in the
 * Binding Configuration is used to define the transformation that must be
 * performed.
 * <p>
 * If the <code>in:</code> parameter is missing, then no transformation will
 * occur, and the source-value will be returned (as a
 * <code>StringType</code>).
 * <p>
 * If the <code>in:</code> parameter is present, then it's value is used to
 * determine which openHAB TransformationService should be used to transform
 * the value.
 *
 * @return the transformed value, or the input (<code>value</code>) if no
 * transformation has been specified in the Binding Configuration.
 *
 * @throws TransformationException
 * if the underlying Transformation fails in any manner.
 */
public State transformIn(State value) throws TransformationException {
    TransformationService ts = getInTransformationService();
    if (ts != null) {
        return createState(ts.transform(getInTransformParam(), value.toString()));
    } else {
        if (value instanceof StringType) {
            value = createState(value.toString());
            logger.trace("transformIn: Converted value '{}' from StringType to more scoped type '{}'", value, value.getClass());
        }
        return value;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(InstanceOfExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

