private MethodSpec buildPreBindMethod(GeneratedModelInfo modelInfo, ParameterSpec viewHolderParam, ParameterSpec boundObjectParam) {
    String positionParamName = "position";
    Builder preBindBuilder = MethodSpec.methodBuilder("handlePreBind").addModifiers(PUBLIC).addAnnotation(Override.class).addParameter(viewHolderParam).addParameter(boundObjectParam).addParameter(TypeName.INT, positionParamName);
    addHashCodeValidationIfNecessary(preBindBuilder, "The model was changed between being added to the controller and being bound.");
    if (modelInfo.isStyleable() && configManager.shouldValidateModelUsage()) {
        // We validate that the style attributes are the same as in the default, otherwise
        // recycling will not work correctly. It is done in the background since it is fairly slow
        // and can noticeably add jank to scrolling in dev
        preBindBuilder.beginControlFlow("$T.THREAD_POOL_EXECUTOR.execute(new $T()", ANDROID_ASYNC_TASK, Runnable.class).beginControlFlow("public void run()").beginControlFlow("try").addStatement("$T.assertSameAttributes(new $T($L), $L, $L)", ClassNames.PARIS_STYLE_UTILS, modelInfo.getStyleBuilderInfo().getStyleApplierClass(), boundObjectParam.name, PARIS_STYLE_ATTR_NAME, PARIS_DEFAULT_STYLE_CONSTANT_NAME).endControlFlow().beginControlFlow("catch($T e)", AssertionError.class).addStatement("throw new $T(\"$L model at position \" + $L + \" has an invalid style:\\n\\n\" + e" + ".getMessage())", IllegalStateException.class, modelInfo.generatedClassName.simpleName(), positionParamName).endControlFlow().endControlFlow().endControlFlow(")");
    }
    ClassName clickWrapperType = getClassName(WRAPPED_LISTENER_TYPE);
    for (AttributeInfo attribute : modelInfo.getAttributeInfo()) {
        if (!attribute.isViewClickListener()) {
            continue;
        }
        // Pass the view holder and bound object on to the wrapped click listener
        preBindBuilder.beginControlFlow("if ($L instanceof $T)", attribute.superGetterCode(), clickWrapperType).addStatement("(($L) $L).bind($L, $L)", clickWrapperType, attribute.superGetterCode(), viewHolderParam.name, boundObjectParam.name).endControlFlow();
    }
    return preBindBuilder.build();
}||||||||private MethodSpec buildPreBindMethod(GeneratedModelInfo modelInfo, ParameterSpec viewHolderParam, ParameterSpec boundObjectParam) {
    String positionParamName = "position";
    Builder preBindBuilder = MethodSpec.methodBuilder("handlePreBind").addModifiers(PUBLIC).addAnnotation(Override.class).addParameter(viewHolderParam).addParameter(boundObjectParam).addParameter(TypeName.INT, positionParamName);
    addHashCodeValidationIfNecessary(preBindBuilder, "The model was changed between being added to the controller and being bound.");
    if (modelInfo.isStyleable() && configManager.shouldValidateModelUsage()) {
        // We validate that the style attributes are the same as in the default, otherwise
        // recycling will not work correctly. It is done in the background since it is fairly slow
        // and can noticeably add jank to scrolling in dev
        preBindBuilder.beginControlFlow("if ($L != $L.getTag($T.id.epoxy_saved_view_style))", PARIS_STYLE_ATTR_NAME, boundObjectParam.name, ClassNames.EPOXY_R).beginControlFlow("$T.THREAD_POOL_EXECUTOR.execute(new $T()", ANDROID_ASYNC_TASK, Runnable.class).beginControlFlow("public void run()").beginControlFlow("try").addStatement("$T.assertSameAttributes(new $T($L), $L, $L)", ClassNames.PARIS_STYLE_UTILS, modelInfo.getStyleBuilderInfo().getStyleApplierClass(), boundObjectParam.name, PARIS_STYLE_ATTR_NAME, PARIS_DEFAULT_STYLE_CONSTANT_NAME).endControlFlow().beginControlFlow("catch($T e)", AssertionError.class).addStatement("throw new $T(\"$L model at position \" + $L + \" has an invalid style:\\n\\n\" + e" + ".getMessage())", IllegalStateException.class, modelInfo.generatedClassName.simpleName(), positionParamName).endControlFlow().endControlFlow().endControlFlow(")").endControlFlow();
    }
    ClassName clickWrapperType = getClassName(WRAPPED_LISTENER_TYPE);
    for (AttributeInfo attribute : modelInfo.getAttributeInfo()) {
        if (!attribute.isViewClickListener()) {
            continue;
        }
        // Pass the view holder and bound object on to the wrapped click listener
        preBindBuilder.beginControlFlow("if ($L instanceof $T)", attribute.superGetterCode(), clickWrapperType).addStatement("(($L) $L).bind($L, $L)", clickWrapperType, attribute.superGetterCode(), viewHolderParam.name, boundObjectParam.name).endControlFlow();
    }
    return preBindBuilder.build();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															NameExpr
																SimpleName
															(ClassExpr
																(ClassOrInterfaceType
																	SimpleName
																)
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										(ClassExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(MethodCallExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(MethodCallExpr
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
													NameExpr
														SimpleName
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(MethodCallExpr
																StringLiteralExpr
																NameExpr
																	SimpleName
																(ClassExpr
																	(ClassOrInterfaceType
																		SimpleName
																	)
																)
																SimpleName
																(MethodCallExpr
																	StringLiteralExpr
																	NameExpr
																		SimpleName
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

