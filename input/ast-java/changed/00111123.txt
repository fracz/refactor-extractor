/**
 * Specifies the maximum number of active transactions. Defaults to {@literal 50}. A
 * negative value means infinite amount. You will get an {@code IllegalStateException}
 * with error message "Max number of active transactions reached" if you call
 * {@code UserTransaction.begin()} while there are already n concurrent transactions
 * running, n being this value.
 * @param maxActivities the max activities
 */
public void setMaxActives(int maxActivities) {
    set("max_actives", maxActivities);
}||||||||/**
 * Specifies the maximum number of active transactions. Defaults to {@literal 50}. A
 * negative value means infinite amount. You will get an {@code IllegalStateException}
 * with error message "Max number of active transactions reached" if you call
 * {@code UserTransaction.begin()} while there are already n concurrent transactions
 * running, n being this value.
 * @param maxActives the max activities
 */
public void setMaxActives(int maxActives) {
    this.maxActives = maxActives;
    set("max_actives", maxActives);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

