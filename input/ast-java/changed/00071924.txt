/**
 * Infer the type of a qualified name.
 *
 * When traversing the control flow of a function, simple names are
 * declared at the bottom of the flow lattice. But there are far too many
 * qualified names to be able to do this and be performant. So the bottoms
 * of qualified names are declared lazily.
 *
 * Therefore, when inferring a qualified slot, we need both the "bottom"
 * type of the slot when we enter the scope, and the current type being
 * inferred.
 */
void inferQualifiedSlot(Node node, String symbol, JSType bottomType, JSType inferredType);||||||||/**
 * Infer the type of a qualified name.
 *
 * When traversing the control flow of a function, simple names are
 * declared at the bottom of the flow lattice. But there are far too many
 * qualified names to be able to do this and be performant. So the bottoms
 * of qualified names are declared lazily.
 *
 * Therefore, when inferring a qualified slot, we need both the "bottom"
 * type of the slot when we enter the scope, and the current type being
 * inferred.
 */
void inferQualifiedSlot(Node node, String symbol, JSType bottomType, JSType inferredType, boolean declare);||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

