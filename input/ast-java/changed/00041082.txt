// ----- IBackupManager binder interface -----
public void dataChanged(String packageName) throws RemoteException {
    // Record that we need a backup pass for the caller.  Since multiple callers
    // may share a uid, we need to note all candidates within that uid and schedule
    // a backup pass for each of them.
    Log.d(TAG, "dataChanged packageName=" + packageName);
    HashSet<ServiceInfo> targets = mBackupParticipants.get(Binder.getCallingUid());
    Log.d(TAG, "targets=" + targets);
    if (targets != null) {
        synchronized (mQueueLock) {
            // Note that this client has made data changes that need to be backed up
            for (ServiceInfo service : targets) {
                // packages associated with this uid
                if (service.packageName.equals(packageName)) {
                    // add the caller to the set of pending backups
                    if (mPendingBackups.add(new BackupRequest(service, false))) {
                    // !!! TODO: write to the pending-backup journal file in case of crash
                    }
                }
            }
            Log.d(TAG, "Scheduling backup for " + mPendingBackups.size() + " participants");
            // Schedule a backup pass in a few minutes.  As backup-eligible data
            // keeps changing, continue to defer the backup pass until things
            // settle down, to avoid extra overhead.
            mBackupHandler.sendEmptyMessageDelayed(MSG_RUN_BACKUP, COLLECTION_INTERVAL);
        }
    }
}||||||||// ----- IBackupManager binder interface -----
public void dataChanged(String packageName) throws RemoteException {
    // Record that we need a backup pass for the caller.  Since multiple callers
    // may share a uid, we need to note all candidates within that uid and schedule
    // a backup pass for each of them.
    Log.d(TAG, "dataChanged packageName=" + packageName);
    HashSet<ServiceInfo> targets = mBackupParticipants.get(Binder.getCallingUid());
    Log.d(TAG, "targets=" + targets);
    if (targets != null) {
        synchronized (mQueueLock) {
            // Note that this client has made data changes that need to be backed up
            for (ServiceInfo service : targets) {
                // packages associated with this uid
                if (service.packageName.equals(packageName)) {
                    // Add the caller to the set of pending backups.  If there is
                    // one already there, then overwrite it, but no harm done.
                    mPendingBackups.put(new ComponentName(service.packageName, service.name), new BackupRequest(service, true));
                // !!! TODO: write to the pending-backup journal file in case of crash
                }
            }
            Log.d(TAG, "Scheduling backup for " + mPendingBackups.size() + " participants");
            // Schedule a backup pass in a few minutes.  As backup-eligible data
            // keeps changing, continue to defer the backup pass until things
            // settle down, to avoid extra overhead.
            mBackupHandler.sendEmptyMessageDelayed(MSG_RUN_BACKUP, COLLECTION_INTERVAL);
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(ForeachStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(IfStmt
											(MethodCallExpr
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											(BlockStmt
											)
											LineComment
										)
									)
									LineComment
								)
							)
							NameExpr
								SimpleName
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(ForeachStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(ObjectCreationExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
									LineComment
								)
							)
							NameExpr
								SimpleName
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

