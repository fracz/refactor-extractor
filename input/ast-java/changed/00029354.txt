/**
 * Call a given action when a sequence completes (with or without an
 * exception).  The returned observable is exactly as threadsafe as the
 * source observable.
 * <p/>
 * Note that "finally" is a Java reserved word and cannot be an identifier,
 * so we use "finallyDo".
 *
 * @param sequence An observable sequence of elements
 * @param action An action to be taken when the sequence is complete or throws an exception
 * @return An observable sequence with the same elements as the input.
 * After the last element is consumed (and {@link Observer#onCompleted} has been called),
 * or after an exception is thrown (and {@link Observer#onError} has been called),
 * the given action will be called.
 * @see <a href="http://msdn.microsoft.com/en-us/library/hh212133(v=vs.103).aspx">MSDN Observable.Finally method</a>
 */
public static <T> Func1<Observer<? super T>, Subscription> finallyDo(final Observable<? extends T> sequence, final Action0 action) {
    return new Func1<Observer<? super T>, Subscription>() {

        @Override
        public Subscription call(Observer<? super T> observer) {
            return new Finally<T>(sequence, action).call(observer);
        }
    };
}||||||||/**
 * Call a given action when a sequence completes (with or without an
 * exception).  The returned observable is exactly as threadsafe as the
 * source observable.
 * <p/>
 * Note that "finally" is a Java reserved word and cannot be an identifier,
 * so we use "finallyDo".
 *
 * @param sequence An observable sequence of elements
 * @param action An action to be taken when the sequence is complete or throws an exception
 * @return An observable sequence with the same elements as the input.
 * After the last element is consumed (and {@link Observer#onCompleted} has been called),
 * or after an exception is thrown (and {@link Observer#onError} has been called),
 * the given action will be called.
 * @see <a href="http://msdn.microsoft.com/en-us/library/hh212133(v=vs.103).aspx">MSDN Observable.Finally method</a>
 */
public static <T> OnSubscribeFunc<T> finallyDo(final Observable<? extends T> sequence, final Action0 action) {
    return new OnSubscribeFunc<T>() {

        @Override
        public Subscription call(Observer<? super T> observer) {
            return new Finally<T>(sequence, action).call(observer);
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

