/**
 * Returns the classes files to scan for test classes.
 *
 * @return The candidate class files.
 */
@InputFiles
// Also marked as input to force tests to run when the set of candidate class files changes
@Input
public FileTree getCandidateClassFiles() {
    return getProject().fileTree(getTestClassesDir()).matching(patternSet);
}||||||||/**
 * Returns the classes files to scan for test classes.
 *
 * @return The candidate class files.
 */
@InputFiles
@SkipWhenEmpty
public FileTree getCandidateClassFiles() {
    return getProject().fileTree(getTestClassesDir()).matching(patternSet);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
		LineComment
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

