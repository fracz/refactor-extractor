@Override
public KernelTransaction newTransaction() {
    checkIfShutdown();
    /* The StatementContext cake produced from the TransactionContext returned here (MP 2013-07-01):
         *
         * x  = implements parts of that interface
         * xx = implements the whole interface
         *
         *                                  | KR | ER | SR | KW | EW | SW | SS |
         * Ref counting                     |    |    |    |    |    |    |    |   state
         * Locking                          |    |    | xx |    | xx | xx | xx |   state
         * Constraint checking              |    |    |    | xx |    | x  |    |   no state
         * Tx state                         |    | x  | x  |    | xx | xx |    |   state
         * Cache                            |    | x  | x  |    |    |    |    |   no state
         * Store                            | xx | xx | xx | xx | x  |    |    |   state
         *                                  |----------------------------------|
         */
    // I/O
    // TODO The store layer should depend on a clean abstraction of the data, not on all the XXXManagers from the
    // old code base
    StoreTransactionContext storeTransactionContext = new StoreTransactionContext(transactionManager, persistenceManager, propertyKeyTokenHolder, labelTokenHolder, neoStore, indexService);
    // + Transaction state and Caching
    KernelTransaction result = new StateHandlingTransactionContext(storeTransactionContext, new SchemaStorage(neoStore.getSchemaStore()), newTxState(), providerMap, persistenceCache, schemaCache, persistenceManager, schemaState, new ConstraintIndexCreator(new Transactor(transactionManager), indexService), propertyKeyTokenHolder, nodeManager);
    // + Constraint evaluation
    result = new ConstraintValidatingTransactionContext(result);
    // + Locking
    result = new LockingTransactionContext(result, lockManager, transactionManager, nodeManager);
    if (highlyAvailableInstance) {
        // + Stop HA from creating constraints
        result = new UniquenessConstraintStoppingTransactionContext(result);
    }
    // + Single statement at a time
    // TODO statementLogic is null the first call (since we're building the cake), but that's OK.
    // This is an artifact of KernelTransaction having too many responsibilities (i.e. being a transaction,
    // as well as being able to construct the layered StatementOperations cake).
    result = new ReferenceCountingTransactionContext(result, statementLogic);
    // done
    return result;
}||||||||@Override
public KernelTransaction newTransaction() {
    checkIfShutdown();
    /* The StatementContext cake produced from the TransactionContext returned here (MP 2013-07-01):
         *
         * x  = implements parts of that interface
         * xx = implements the whole interface
         *
         *                                  | KR | ER | SR | KW | EW | SW | SS |
         * Ref counting                     |    |    |    |    |    |    |    |   state
         * Locking                          |    |    | xx |    | xx | xx | xx |   state
         * Constraint checking              |    |    |    | xx |    | x  |    |   no state
         * Tx state                         |    | x  | x  |    | xx | xx |    |   state
         * Cache                            |    | x  | x  |    |    |    |    |   no state
         * Store                            | xx | xx | xx | xx | x  |    |    |   state
         *                                  |----------------------------------|
         */
    // I/O
    // TODO The store layer should depend on a clean abstraction of the data, not on all the XXXManagers from the
    // old code base
    StoreTransactionContext storeTransactionContext = new StoreTransactionContext(transactionManager, persistenceManager, propertyKeyTokenHolder, labelTokenHolder, neoStore, indexService);
    // + Transaction state and Caching
    KernelTransaction result = new StateHandlingTransactionContext(storeTransactionContext, new SchemaStorage(neoStore.getSchemaStore()), newTxState(), providerMap, persistenceCache, schemaCache, persistenceManager, schemaState, new ConstraintIndexCreator(new Transactor(transactionManager), indexService), propertyKeyTokenHolder, nodeManager);
    // + Constraint evaluation
    result = new ConstraintValidatingTransactionContext(result);
    // + Locking
    result = new LockingTransactionContext(result, lockManager, transactionManager, nodeManager);
    if (highlyAvailableInstance) {
        // + Stop HA from creating constraints
        result = new UniquenessConstraintStoppingTransactionContext(result);
    }
    // + Single statement at a time
    // TODO statementLogic is null the first call (since we're building the cake), but that's OK.
    // This is an artifact of KernelTransaction having too many responsibilities (i.e. being a transaction,
    // as well as being able to construct the layered StatementOperations cake).
    result = new ReferenceCountingTransactionContext(result, statementLogic != null ? statementLogic.lifecycleOperations() : null);
    // done
    return result;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MethodCallExpr
							SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(ConditionalExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						NullLiteralExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

