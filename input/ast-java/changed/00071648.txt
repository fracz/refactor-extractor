public void testDeclaredGenericArrayTypes() {
    typeCheck("/** @type {Array<string>} */\n" + "var arr = ['str'];\n" + "arr[0]++;", NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck("var arr = ['str'];\n" + "arr[0]++;", NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck("function foo (/** Array<string> */ a) {}\n" + "/** @type {Array<number>} */\n" + "var b = [1];\n" + "foo(b);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("function foo (/** Array<string> */ a) {}\n" + "foo([1]);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("/** @type {Array<number>} */\n" + "var arr = [1, 2, 3];\n" + "arr[0] = 'str';", NewTypeInference.MISTYPED_ASSIGN_RHS);
    typeCheck("/** @const */\n" + "var arr = [1, 2, 3];\n" + "arr[0] = 'str';", NewTypeInference.MISTYPED_ASSIGN_RHS);
    // TODO(blickly): Distinguish between declared and inferred
    // array types so that this test has no warnings
    typeCheck("var arr = [1, 2, 3];\n" + "arr[0] = 'str';", NewTypeInference.MISTYPED_ASSIGN_RHS);
    typeCheck("/** @type {Array<number>} */ var arr = [];\n" + "arr[0] = 'str';", NewTypeInference.MISTYPED_ASSIGN_RHS);
    typeCheck("/** @type {Array<number>} */ var arr = [];\n" + "(function (/** Array<string> */ x){})(arr);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("function /** string */ f(/** !Array<number> */ arr) {\n" + "  return arr[0];\n" + "}", NewTypeInference.RETURN_NONDECLARED_TYPE);
    // TODO(blickly): Would be nice if we caught the MISTYPED_ASSIGN_RHS here
    checkNoWarnings("var arr = [];\n" + "arr[0] = 5;\n" + "var /** Array<string> */ as = arr;");
}||||||||public void testDeclaredGenericArrayTypes() {
    typeCheck("/** @type {Array<string>} */\n" + "var arr = ['str'];\n" + "arr[0]++;", NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck("var arr = ['str'];\n" + "arr[0]++;", NewTypeInference.INVALID_OPERAND_TYPE);
    typeCheck("function foo (/** Array<string> */ a) {}\n" + "/** @type {Array<number>} */\n" + "var b = [1];\n" + "foo(b);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("function foo (/** Array<string> */ a) {}\n" + "foo([1]);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("/** @type {!Array<number>} */\n" + "var arr = [1, 2, 3];\n" + "arr[0] = 'str';", NewTypeInference.MISTYPED_ASSIGN_RHS);
    checkNoWarnings("/** @type {!Array<number>} */\n" + "var arr = [1, 2, 3];\n" + "arr['0'] = 'str';");
    // We warn here even though the declared type of the lvalue includes null.
    typeCheck("/** @type {Array<number>} */\n" + "var arr = [1, 2, 3];\n" + "arr[0] = 'str';", NewTypeInference.MISTYPED_ASSIGN_RHS);
    typeCheck("function f(/** Array<number> */ arr) {\n" + "  arr[0] = 'str';\n" + "}", NewTypeInference.PROPERTY_ACCESS_ON_NONOBJECT);
    typeCheck("/** @const */\n" + "var arr = [1, 2, 3];\n" + "arr[0] = 'str';", NewTypeInference.MISTYPED_ASSIGN_RHS);
    checkNoWarnings("var arr = [1, 2, 3];\n" + "arr[0] = 'str';");
    checkNoWarnings("/** @constructor */ function Super(){}\n" + "/** @constructor @extends {Super} */ function Sub(){}\n" + "/** @type {!Array<Super>} */ var arr = [new Sub];\n" + "arr[0] = new Super;");
    typeCheck("/** @type {Array<number>} */ var arr = [];\n" + "arr[0] = 'str';", NewTypeInference.MISTYPED_ASSIGN_RHS);
    typeCheck("/** @type {Array<number>} */ var arr = [];\n" + "(function (/** Array<string> */ x){})(arr);", NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck("function /** string */ f(/** !Array<number> */ arr) {\n" + "  return arr[0];\n" + "}", NewTypeInference.RETURN_NONDECLARED_TYPE);
    // TODO(blickly): Would be nice if we caught the MISTYPED_ASSIGN_RHS here
    checkNoWarnings("var arr = [];\n" + "arr[0] = 5;\n" + "var /** Array<string> */ as = arr;");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
)

