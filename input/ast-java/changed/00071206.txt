public void testCallFunctionThatModifiesThis() throws Exception {
    String source = "/**@constructor*/function A(){}\n" + "A.prototype.foo = function(){this.data=24};\n" + "function f(){var a = new A; return a}\n" + "function g(){var a = new A; a.foo(); return a}\n" + "f(); g()";
    checkMarkedCalls(source, ImmutableList.of("A", "A", "f"));
}||||||||public void testCallFunctionThatModifiesThis() throws Exception {
    String source = LINE_JOINER.join("/**@constructor*/function A(){}", "A.prototype.foo = function(){this.data=24};", "function f(){var a = new A; return a}", "function g(){var a = new A; a.foo(); return a}", "f(); g()");
    assertPureCallsMarked(source, ImmutableList.of("A", "A", "f"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

