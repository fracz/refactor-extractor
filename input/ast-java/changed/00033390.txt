public void test_0() throws Exception {
    String sql = "SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( SELECT M.*, A.*\n" + "\t\tFROM T_EW_MERCHANT M LEFT JOIN LP_ADDRESS A\n" + "\t\tON\n" + "\t\tM.ADDRESS_KEY = A.KEY\n" + "\t\t \n" + "\t\t\tWHERE M.MERCHANT_CODE LIKE '%'||?||'%'\n" + "\t\t\tOR\n" + "\t\t\tM.MERCHANT_NAME LIKE '%'||?||'%'\n" + "\t\t\tOR M.MERCHANT_NAME LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR M.CERTIFICATE LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR M.OWNER\n" + "\t\t\tLIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.COUNTRY LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR\n" + "\t\t\tA.PROVINCE LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.CITY LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.COUNTY LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.STREET_AREA LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.DETAILE LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.ZIPCODE\n" + "\t\t\tLIKE\n" + "\t\t\t'%'||?||'%' ) TMP_PAGE WHERE ROWNUM <= 10";
    List<SQLStatement> stmtList = SQLUtils.parseStatements(sql, dbType);
    SQLStatement stmt = stmtList.get(0);
    assertEquals("SELECT TMP_PAGE.*, ROWNUM AS ROW_ID\n" + "FROM (\n" + "\tSELECT M.*, A.*\n" + "\tFROM T_EW_MERCHANT M\n" + "\t\tLEFT JOIN LP_ADDRESS A ON M.ADDRESS_KEY = A.KEY\n" + "\tWHERE M.MERCHANT_CODE LIKE ('%' || ? || '%')\n" + "\t\tOR M.MERCHANT_NAME LIKE ('%' || ? || '%')\n" + "\t\tOR M.MERCHANT_NAME LIKE ('%' || ? || '%')\n" + "\t\tOR M.CERTIFICATE LIKE ('%' || ? || '%')\n" + "\t\tOR M.OWNER LIKE ('%' || ? || '%')\n" + "\t\tOR A.COUNTRY LIKE ('%' || ? || '%')\n" + "\t\tOR A.PROVINCE LIKE ('%' || ? || '%')\n" + "\t\tOR A.CITY LIKE ('%' || ? || '%')\n" + "\t\tOR A.COUNTY LIKE ('%' || ? || '%')\n" + "\t\tOR A.STREET_AREA LIKE ('%' || ? || '%')\n" + "\t\tOR A.DETAILE LIKE ('%' || ? || '%')\n" + "\t\tOR A.ZIPCODE LIKE ('%' || ? || '%')\n" + ") TMP_PAGE\n" + "WHERE ROWNUM <= 10", SQLUtils.toPGString(stmt));
    assertEquals("select TMP_PAGE.*, ROWNUM as ROW_ID\n" + "from (\n" + "\tselect M.*, A.*\n" + "\tfrom T_EW_MERCHANT M\n" + "\t\tleft join LP_ADDRESS A on M.ADDRESS_KEY = A.KEY\n" + "\twhere M.MERCHANT_CODE like ('%' || ? || '%')\n" + "\t\tor M.MERCHANT_NAME like ('%' || ? || '%')\n" + "\t\tor M.MERCHANT_NAME like ('%' || ? || '%')\n" + "\t\tor M.CERTIFICATE like ('%' || ? || '%')\n" + "\t\tor M.OWNER like ('%' || ? || '%')\n" + "\t\tor A.COUNTRY like ('%' || ? || '%')\n" + "\t\tor A.PROVINCE like ('%' || ? || '%')\n" + "\t\tor A.CITY like ('%' || ? || '%')\n" + "\t\tor A.COUNTY like ('%' || ? || '%')\n" + "\t\tor A.STREET_AREA like ('%' || ? || '%')\n" + "\t\tor A.DETAILE like ('%' || ? || '%')\n" + "\t\tor A.ZIPCODE like ('%' || ? || '%')\n" + ") TMP_PAGE\n" + "where ROWNUM <= 10", SQLUtils.toPGString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
    assertEquals(1, stmtList.size());
    SchemaStatVisitor visitor = SQLUtils.createSchemaStatVisitor(dbType);
    stmt.accept(visitor);
    // System.out.println("Tables : " + visitor.getTables());
    // System.out.println("fields : " + visitor.getColumns());
    // System.out.println("coditions : " + visitor.getConditions());
    assertEquals(15, visitor.getColumns().size());
    assertEquals(2, visitor.getTables().size());
}||||||||public void test_0() throws Exception {
    String sql = "SELECT TMP_PAGE.*, ROWNUM ROW_ID FROM ( SELECT M.*, A.*\n" + "\t\tFROM T_EW_MERCHANT M LEFT JOIN LP_ADDRESS A\n" + "\t\tON\n" + "\t\tM.ADDRESS_KEY = A.KEY\n" + "\t\t \n" + "\t\t\tWHERE M.MERCHANT_CODE LIKE '%'||?||'%'\n" + "\t\t\tOR\n" + "\t\t\tM.MERCHANT_NAME LIKE '%'||?||'%'\n" + "\t\t\tOR M.MERCHANT_NAME LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR M.CERTIFICATE LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR M.OWNER\n" + "\t\t\tLIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.COUNTRY LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR\n" + "\t\t\tA.PROVINCE LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.CITY LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.COUNTY LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.STREET_AREA LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.DETAILE LIKE\n" + "\t\t\t'%'||?||'%'\n" + "\t\t\tOR A.ZIPCODE\n" + "\t\t\tLIKE\n" + "\t\t\t'%'||?||'%' ) TMP_PAGE WHERE ROWNUM <= 10";
    List<SQLStatement> stmtList = SQLUtils.parseStatements(sql, dbType);
    SQLStatement stmt = stmtList.get(0);
    assertEquals("SELECT TMP_PAGE.*, ROWNUM AS ROW_ID\n" + "FROM (\n" + "\tSELECT M.*, A.*\n" + "\tFROM T_EW_MERCHANT M\n" + "\t\tLEFT JOIN LP_ADDRESS A ON M.ADDRESS_KEY = A.KEY\n" + "\tWHERE M.MERCHANT_CODE LIKE ('%' || ? || '%')\n" + "\t\tOR M.MERCHANT_NAME LIKE ('%' || ? || '%')\n" + "\t\tOR M.MERCHANT_NAME LIKE ('%' || ? || '%')\n" + "\t\tOR M.CERTIFICATE LIKE ('%' || ? || '%')\n" + "\t\tOR M.OWNER LIKE ('%' || ? || '%')\n" + "\t\tOR A.COUNTRY LIKE ('%' || ? || '%')\n" + "\t\tOR A.PROVINCE LIKE ('%' || ? || '%')\n" + "\t\tOR A.CITY LIKE ('%' || ? || '%')\n" + "\t\tOR A.COUNTY LIKE ('%' || ? || '%')\n" + "\t\tOR A.STREET_AREA LIKE ('%' || ? || '%')\n" + "\t\tOR A.DETAILE LIKE ('%' || ? || '%')\n" + "\t\tOR A.ZIPCODE LIKE ('%' || ? || '%')\n" + ") TMP_PAGE\n" + "WHERE ROWNUM <= 10", SQLUtils.toPGString(stmt));
    assertEquals("select TMP_PAGE.*, ROWNUM as ROW_ID\n" + "from (\n" + "\tselect M.*, A.*\n" + "\tfrom T_EW_MERCHANT M\n" + "\t\tleft join LP_ADDRESS A on M.ADDRESS_KEY = A.KEY\n" + "\twhere M.MERCHANT_CODE like ('%' || ? || '%')\n" + "\t\tor M.MERCHANT_NAME like ('%' || ? || '%')\n" + "\t\tor M.MERCHANT_NAME like ('%' || ? || '%')\n" + "\t\tor M.CERTIFICATE like ('%' || ? || '%')\n" + "\t\tor M.OWNER like ('%' || ? || '%')\n" + "\t\tor A.COUNTRY like ('%' || ? || '%')\n" + "\t\tor A.PROVINCE like ('%' || ? || '%')\n" + "\t\tor A.CITY like ('%' || ? || '%')\n" + "\t\tor A.COUNTY like ('%' || ? || '%')\n" + "\t\tor A.STREET_AREA like ('%' || ? || '%')\n" + "\t\tor A.DETAILE like ('%' || ? || '%')\n" + "\t\tor A.ZIPCODE like ('%' || ? || '%')\n" + ") TMP_PAGE\n" + "where ROWNUM <= 10", SQLUtils.toPGString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
    assertEquals(1, stmtList.size());
    SchemaStatVisitor visitor = SQLUtils.createSchemaStatVisitor(dbType);
    stmt.accept(visitor);
    System.out.println("Tables : " + visitor.getTables());
    System.out.println("fields : " + visitor.getColumns());
    System.out.println("coditions : " + visitor.getConditions());
    assertEquals(15, visitor.getColumns().size());
    assertEquals(2, visitor.getTables().size());
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						(BinaryExpr
																							(BinaryExpr
																								(BinaryExpr
																									(BinaryExpr
																										(BinaryExpr
																											(BinaryExpr
																												(BinaryExpr
																													(BinaryExpr
																														(BinaryExpr
																															(BinaryExpr
																																(BinaryExpr
																																	(BinaryExpr
																																		(BinaryExpr
																																			StringLiteralExpr
																																			StringLiteralExpr
																																		)
																																		StringLiteralExpr
																																	)
																																	StringLiteralExpr
																																)
																																StringLiteralExpr
																															)
																															StringLiteralExpr
																														)
																														StringLiteralExpr
																													)
																													StringLiteralExpr
																												)
																												StringLiteralExpr
																											)
																											StringLiteralExpr
																										)
																										StringLiteralExpr
																									)
																									StringLiteralExpr
																								)
																								StringLiteralExpr
																							)
																							StringLiteralExpr
																						)
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						StringLiteralExpr
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						StringLiteralExpr
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						(BinaryExpr
																							(BinaryExpr
																								(BinaryExpr
																									(BinaryExpr
																										(BinaryExpr
																											(BinaryExpr
																												(BinaryExpr
																													(BinaryExpr
																														(BinaryExpr
																															(BinaryExpr
																																(BinaryExpr
																																	(BinaryExpr
																																		(BinaryExpr
																																			StringLiteralExpr
																																			StringLiteralExpr
																																		)
																																		StringLiteralExpr
																																	)
																																	StringLiteralExpr
																																)
																																StringLiteralExpr
																															)
																															StringLiteralExpr
																														)
																														StringLiteralExpr
																													)
																													StringLiteralExpr
																												)
																												StringLiteralExpr
																											)
																											StringLiteralExpr
																										)
																										StringLiteralExpr
																									)
																									StringLiteralExpr
																								)
																								StringLiteralExpr
																							)
																							StringLiteralExpr
																						)
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						StringLiteralExpr
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			(BinaryExpr
																				(BinaryExpr
																					(BinaryExpr
																						StringLiteralExpr
																						StringLiteralExpr
																					)
																					StringLiteralExpr
																				)
																				StringLiteralExpr
																			)
																			StringLiteralExpr
																		)
																		StringLiteralExpr
																	)
																	StringLiteralExpr
																)
																StringLiteralExpr
															)
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

