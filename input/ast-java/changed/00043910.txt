/**
 * This method enables parallel execution of queries from multiple threads on the same database.
 * It does this by opening multiple handles to the database and using a different
 * database handle for each query.
 * <p>
 * If a transaction is in progress on one connection handle and say, a table is updated in the
 * transaction, then query on the same table on another connection handle will block for the
 * transaction to complete. But this method enables such queries to execute by having them
 * return old version of the data from the table. Most often it is the data that existed in the
 * table prior to the above transaction updates on that table.
 * <p>
 * Maximum number of simultaneous handles used to execute queries in parallel is
 * dependent upon the device memory and possibly other properties.
 * <p>
 * After calling this method, execution of queries in parallel is enabled as long as this
 * database handle is open. To disable execution of queries in parallel, database should
 * be closed and reopened.
 * <p>
 * If a query is part of a transaction, then it is executed on the same database handle the
 * transaction was begun.
 * <p>
 * If the database has any attached databases, then execution of queries in paralel is NOT
 * possible. In such cases, a message is printed to logcat and false is returned.
 * <p>
 * This feature is not available for :memory: databases. In such cases,
 * a message is printed to logcat and false is returned.
 * <p>
 * A typical way to use this method is the following:
 * <pre>
 * SQLiteDatabase db = SQLiteDatabase.openDatabase("db_filename", cursorFactory,
 * CREATE_IF_NECESSARY, myDatabaseErrorHandler);
 * db.enableWriteAheadLogging();
 * </pre>
 * <p>
 * Writers should use {@link #beginTransactionNonExclusive()} or
 * {@link #beginTransactionWithListenerNonExclusive(SQLiteTransactionListener)}
 * to start a trsnsaction.
 * Non-exclusive mode allows database file to be in readable by threads executing queries.
 * </p>
 *
 * @return true if write-ahead-logging is set. false otherwise
 */
public boolean enableWriteAheadLogging() {
    // make sure the database is not READONLY. WAL doesn't make sense for readonly-databases.
    if (isReadOnly()) {
        return false;
    }
    // acquire lock - no that no other thread is enabling WAL at the same time
    lock();
    try {
        if (mConnectionPool != null) {
            // already enabled
            return true;
        }
        if (mPath.equalsIgnoreCase(MEMORY_DB_PATH)) {
            Log.i(TAG, "can't enable WAL for memory databases.");
            return false;
        }
        // doesn't work for databases with attached databases
        if (mHasAttachedDbs) {
            if (Log.isLoggable(TAG, Log.DEBUG)) {
                Log.d(TAG, "this database: " + mPath + " has attached databases. can't  enable WAL.");
            }
            return false;
        }
        mConnectionPool = new DatabaseConnectionPool(this);
        setJournalMode(mPath, "WAL");
        return true;
    } finally {
        unlock();
    }
}||||||||/**
 * This method enables parallel execution of queries from multiple threads on the same database.
 * It does this by opening multiple handles to the database and using a different
 * database handle for each query.
 * <p>
 * If a transaction is in progress on one connection handle and say, a table is updated in the
 * transaction, then query on the same table on another connection handle will block for the
 * transaction to complete. But this method enables such queries to execute by having them
 * return old version of the data from the table. Most often it is the data that existed in the
 * table prior to the above transaction updates on that table.
 * <p>
 * Maximum number of simultaneous handles used to execute queries in parallel is
 * dependent upon the device memory and possibly other properties.
 * <p>
 * After calling this method, execution of queries in parallel is enabled as long as this
 * database handle is open. To disable execution of queries in parallel, database should
 * be closed and reopened.
 * <p>
 * If a query is part of a transaction, then it is executed on the same database handle the
 * transaction was begun.
 * <p>
 * If the database has any attached databases, then execution of queries in paralel is NOT
 * possible. In such cases, a message is printed to logcat and false is returned.
 * <p>
 * This feature is not available for :memory: databases. In such cases,
 * a message is printed to logcat and false is returned.
 * <p>
 * A typical way to use this method is the following:
 * <pre>
 * SQLiteDatabase db = SQLiteDatabase.openDatabase("db_filename", cursorFactory,
 * CREATE_IF_NECESSARY, myDatabaseErrorHandler);
 * db.enableWriteAheadLogging();
 * </pre>
 * <p>
 * Writers should use {@link #beginTransactionNonExclusive()} or
 * {@link #beginTransactionWithListenerNonExclusive(SQLiteTransactionListener)}
 * to start a trsnsaction.
 * Non-exclusive mode allows database file to be in readable by threads executing queries.
 * </p>
 *
 * @return true if write-ahead-logging is set. false otherwise
 */
public boolean enableWriteAheadLogging() {
    synchronized (mLock) {
        throwIfNotOpenLocked();
        if (mIsWALEnabledLocked) {
            return true;
        }
        if (isReadOnlyLocked()) {
            // TODO: True, but connection pooling does still make sense...
            return false;
        }
        if (mConfigurationLocked.isInMemoryDb()) {
            Log.i(TAG, "can't enable WAL for memory databases.");
            return false;
        }
        // doesn't work for databases with attached databases
        if (mHasAttachedDbsLocked) {
            if (Log.isLoggable(TAG, Log.DEBUG)) {
                Log.d(TAG, "this database: " + mConfigurationLocked.label + " has attached databases. can't  enable WAL.");
            }
            return false;
        }
        mIsWALEnabledLocked = true;
        mConfigurationLocked.maxConnectionPoolSize = Math.max(2, Resources.getSystem().getInteger(com.android.internal.R.integer.db_connection_pool_size));
        mConnectionPoolLocked.reconfigure(mConfigurationLocked);
    }
    setJournalMode("WAL");
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
							LineComment
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(ThisExpr
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						StringLiteralExpr
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
							LineComment
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

