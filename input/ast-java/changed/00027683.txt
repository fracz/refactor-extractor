@Override
protected void doAction() {
    KotlinMoveTarget target = selectMoveTarget();
    if (target == null)
        return;
    saveRefactoringSettings();
    List<JetNamedDeclaration> elementsToMove = getSelectedElementsToMove();
    for (PsiElement element : elementsToMove) {
        String message = target.verify(element.getContainingFile());
        if (message != null) {
            CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"), message, null, myProject);
            return;
        }
    }
    try {
        boolean deleteSourceFile = false;
        if (elementsToMove.size() == sourceFile.getDeclarations().size()) {
            if (isMoveToPackage()) {
                final MoveDestination moveDestination = selectPackageBasedMoveDestination();
                // noinspection ConstantConditions
                PsiDirectory targetDir = moveDestination.getTargetIfExists(sourceFile);
                final String targetFileName = tfFileNameInPackage.getText();
                if (targetDir == null || targetDir.findFile(targetFileName) == null) {
                    PsiDirectory targetDirectory = ApplicationPackage.runWriteAction(new Function0<PsiDirectory>() {

                        @Override
                        public PsiDirectory invoke() {
                            return moveDestination.getTargetDirectory(sourceFile);
                        }
                    });
                    MovePackage.setUpdatePackageDirective(sourceFile, cbUpdatePackageDirective.isSelected());
                    invokeRefactoring(new MoveFilesOrDirectoriesProcessor(myProject, new PsiElement[] { sourceFile }, targetDirectory, RefactoringSettings.getInstance().MOVE_SEARCH_FOR_REFERENCES_FOR_FILE, isSearchInComments(), isSearchInNonJavaFiles(), new MoveCallback() {

                        @Override
                        public void refactoringCompleted() {
                            try {
                                sourceFile.setName(targetFileName);
                            } finally {
                                if (moveCallback != null) {
                                    moveCallback.refactoringCompleted();
                                }
                            }
                        }
                    }, EmptyRunnable.INSTANCE) {

                        @Override
                        protected String getCommandName() {
                            return "Move " + sourceFile.getName();
                        }

                        @Override
                        protected void performRefactoring(UsageInfo[] usages) {
                            // noinspection ConstantConditions
                            String temporaryName = UniqueNameGenerator.generateUniqueName("temp", "", ".kt", KotlinPackage.map(sourceFile.getContainingDirectory().getFiles(), new Function1<PsiFile, String>() {

                                @Override
                                public String invoke(PsiFile file) {
                                    return file.getName();
                                }
                            }));
                            sourceFile.setName(temporaryName);
                            super.performRefactoring(usages);
                        }
                    });
                    return;
                }
                int ret = Messages.showYesNoCancelDialog(myProject, "You are going to move all declarations out of '" + sourceFile.getVirtualFile().getPath() + "'. Do you want to delete this file?", RefactoringBundle.message("move.title"), Messages.getQuestionIcon());
                if (ret == Messages.CANCEL)
                    return;
                deleteSourceFile = ret == Messages.YES;
            }
        }
        MoveKotlinTopLevelDeclarationsOptions options = new MoveKotlinTopLevelDeclarationsOptions(sourceFile, elementsToMove, target, isSearchInComments(), isSearchInNonJavaFiles(), true, deleteSourceFile, moveCallback);
        invokeRefactoring(new MoveKotlinTopLevelDeclarationsProcessor(myProject, options, Mover.Default.INSTANCE$));
    } catch (IncorrectOperationException e) {
        CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"), e.getMessage(), null, myProject);
    }
}||||||||@Override
protected void doAction() {
    KotlinMoveTarget target = selectMoveTarget();
    if (target == null)
        return;
    saveRefactoringSettings();
    List<JetNamedDeclaration> elementsToMove = getSelectedElementsToMove();
    for (PsiElement element : elementsToMove) {
        String message = target.verify(element.getContainingFile());
        if (message != null) {
            CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"), message, null, myProject);
            return;
        }
    }
    try {
        boolean deleteSourceFile = false;
        if (elementsToMove.size() == sourceFile.getDeclarations().size()) {
            if (isMoveToPackage()) {
                final MoveDestination moveDestination = selectPackageBasedMoveDestination();
                // noinspection ConstantConditions
                PsiDirectory targetDir = moveDestination.getTargetIfExists(sourceFile);
                final String targetFileName = tfFileNameInPackage.getText();
                if (targetDir == null || targetDir.findFile(targetFileName) == null) {
                    PsiDirectory targetDirectory = ApplicationPackage.runWriteAction(new Function0<PsiDirectory>() {

                        @Override
                        public PsiDirectory invoke() {
                            return moveDestination.getTargetDirectory(sourceFile);
                        }
                    });
                    MovePackage.setUpdatePackageDirective(sourceFile, cbUpdatePackageDirective.isSelected());
                    invokeRefactoring(new MoveFilesOrDirectoriesProcessor(myProject, new PsiElement[] { sourceFile }, targetDirectory, true, isSearchInComments(), isSearchInNonJavaFiles(), new MoveCallback() {

                        @Override
                        public void refactoringCompleted() {
                            try {
                                sourceFile.setName(targetFileName);
                            } finally {
                                if (moveCallback != null) {
                                    moveCallback.refactoringCompleted();
                                }
                            }
                        }
                    }, EmptyRunnable.INSTANCE) {

                        @Override
                        protected String getCommandName() {
                            return "Move " + sourceFile.getName();
                        }

                        @Override
                        protected void performRefactoring(UsageInfo[] usages) {
                            // noinspection ConstantConditions
                            String temporaryName = UniqueNameGenerator.generateUniqueName("temp", "", ".kt", KotlinPackage.map(sourceFile.getContainingDirectory().getFiles(), new Function1<PsiFile, String>() {

                                @Override
                                public String invoke(PsiFile file) {
                                    return file.getName();
                                }
                            }));
                            sourceFile.setName(temporaryName);
                            super.performRefactoring(usages);
                        }
                    });
                    return;
                }
                int ret = Messages.showYesNoCancelDialog(myProject, "You are going to move all declarations out of '" + sourceFile.getVirtualFile().getPath() + "'. Do you want to delete this file?", RefactoringBundle.message("move.title"), Messages.getQuestionIcon());
                if (ret == Messages.CANCEL)
                    return;
                deleteSourceFile = ret == Messages.YES;
            }
        }
        MoveKotlinTopLevelDeclarationsOptions options = new MoveKotlinTopLevelDeclarationsOptions(sourceFile, elementsToMove, target, isSearchInComments(), isSearchInNonJavaFiles(), true, deleteSourceFile, moveCallback);
        invokeRefactoring(new MoveKotlinTopLevelDeclarationsProcessor(myProject, options, Mover.Default.INSTANCE$));
    } catch (IncorrectOperationException e) {
        CommonRefactoringUtil.showErrorMessage(RefactoringBundle.message("error.title"), e.getMessage(), null, myProject);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NullLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(BinaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											NullLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(ObjectCreationExpr
															(MethodDeclaration
																(BlockStmt
																	(ReturnStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(ClassOrInterfaceType
																	SimpleName
																)
																SimpleName
																(MarkerAnnotationExpr
																	Name
																)
															)
															(ClassOrInterfaceType
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(ReturnStmt
																(BinaryExpr
																	StringLiteralExpr
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
															)
														)
														(ClassOrInterfaceType
															SimpleName
														)
														SimpleName
														(MarkerAnnotationExpr
															Name
														)
													)
													(MethodDeclaration
														(BlockStmt
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			(MethodCallExpr
																				(MethodCallExpr
																					SimpleName
																					(MethodCallExpr
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																				)
																				(ObjectCreationExpr
																					(MethodDeclaration
																						(BlockStmt
																							(ReturnStmt
																								(MethodCallExpr
																									SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																						(ClassOrInterfaceType
																							SimpleName
																						)
																						SimpleName
																						(Parameter
																							SimpleName
																							(ClassOrInterfaceType
																								SimpleName
																							)
																						)
																						(MarkerAnnotationExpr
																							Name
																						)
																					)
																					(ClassOrInterfaceType
																						SimpleName
																						(ClassOrInterfaceType
																							SimpleName
																						)
																						(ClassOrInterfaceType
																							SimpleName
																						)
																					)
																				)
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
																LineComment
															)
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	(SuperExpr
																	)
																)
															)
														)
														(VoidType
														)
														SimpleName
														(Parameter
															SimpleName
															(ArrayType
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													NameExpr
														SimpleName
													(ArrayCreationExpr
														(ClassOrInterfaceType
															SimpleName
														)
														(ArrayInitializerExpr
															NameExpr
																SimpleName
														)
														(ArrayCreationLevel
														)
													)
													NameExpr
														SimpleName
													(FieldAccessExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(MethodCallExpr
														SimpleName
													)
													(MethodCallExpr
														SimpleName
													)
													(ObjectCreationExpr
														(MethodDeclaration
															(BlockStmt
																(TryStmt
																	(BlockStmt
																		(IfStmt
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				NullLiteralExpr
																			)
																			(BlockStmt
																				(ExpressionStmt
																					(MethodCallExpr
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																				)
																			)
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				NameExpr
																					SimpleName
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																)
															)
															(VoidType
															)
															SimpleName
															(MarkerAnnotationExpr
																Name
															)
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
								(BooleanLiteralExpr
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								NullLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(BinaryExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											NullLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(ObjectCreationExpr
															(MethodDeclaration
																(BlockStmt
																	(ReturnStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(ClassOrInterfaceType
																	SimpleName
																)
																SimpleName
																(MarkerAnnotationExpr
																	Name
																)
															)
															(ClassOrInterfaceType
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(ReturnStmt
																(BinaryExpr
																	StringLiteralExpr
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
															)
														)
														(ClassOrInterfaceType
															SimpleName
														)
														SimpleName
														(MarkerAnnotationExpr
															Name
														)
													)
													(MethodDeclaration
														(BlockStmt
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			StringLiteralExpr
																			(MethodCallExpr
																				(MethodCallExpr
																					SimpleName
																					(MethodCallExpr
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																				)
																				(ObjectCreationExpr
																					(MethodDeclaration
																						(BlockStmt
																							(ReturnStmt
																								(MethodCallExpr
																									SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																						(ClassOrInterfaceType
																							SimpleName
																						)
																						SimpleName
																						(Parameter
																							SimpleName
																							(ClassOrInterfaceType
																								SimpleName
																							)
																						)
																						(MarkerAnnotationExpr
																							Name
																						)
																					)
																					(ClassOrInterfaceType
																						SimpleName
																						(ClassOrInterfaceType
																							SimpleName
																						)
																						(ClassOrInterfaceType
																							SimpleName
																						)
																					)
																				)
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
																LineComment
															)
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(ExpressionStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	(SuperExpr
																	)
																)
															)
														)
														(VoidType
														)
														SimpleName
														(Parameter
															SimpleName
															(ArrayType
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													NameExpr
														SimpleName
													(ArrayCreationExpr
														(ClassOrInterfaceType
															SimpleName
														)
														(ArrayInitializerExpr
															NameExpr
																SimpleName
														)
														(ArrayCreationLevel
														)
													)
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
													(MethodCallExpr
														SimpleName
													)
													(MethodCallExpr
														SimpleName
													)
													(ObjectCreationExpr
														(MethodDeclaration
															(BlockStmt
																(TryStmt
																	(BlockStmt
																		(IfStmt
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				NullLiteralExpr
																			)
																			(BlockStmt
																				(ExpressionStmt
																					(MethodCallExpr
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																				)
																			)
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				NameExpr
																					SimpleName
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																)
															)
															(VoidType
															)
															SimpleName
															(MarkerAnnotationExpr
																Name
															)
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
											)
										)
										(ReturnStmt
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														(MethodCallExpr
															SimpleName
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
													StringLiteralExpr
												)
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									SimpleName
								)
								(BooleanLiteralExpr
								)
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

