private static int validateValueChar(int state, char c, CharSequence seq) {
    /*
             * State:
             * 0: Previous character was neither CR nor LF
             * 1: The previous character was CR
             * 2: The previous character was LF
             */
    if ((c & HIGHEST_INVALID_VALUE_CHAR_MASK) == 0) {
        // Check the absolutely prohibited characters.
        switch(c) {
            case // NULL
            0x0:
                throw new IllegalArgumentException("a header value contains a prohibited character '\0': " + seq);
            case // Vertical tab
            0x0b:
                throw new IllegalArgumentException("a header value contains a prohibited character '\\v': " + seq);
            case '\f':
                throw new IllegalArgumentException("a header value contains a prohibited character '\\f': " + seq);
        }
    }
    // Check the CRLF (HT | SP) pattern
    switch(state) {
        case 0:
            switch(c) {
                case '\r':
                    state = 1;
                    break;
                case '\n':
                    state = 2;
                    break;
            }
            break;
        case 1:
            switch(c) {
                case '\n':
                    state = 2;
                    break;
                default:
                    throw new IllegalArgumentException("only '\\n' is allowed after '\\r': " + seq);
            }
            break;
        case 2:
            switch(c) {
                case '\t':
                case ' ':
                    state = 0;
                    break;
                default:
                    throw new IllegalArgumentException("only ' ' and '\\t' are allowed after '\\n': " + seq);
            }
    }
    return state;
}||||||||private static int validateValueChar(CharSequence seq, int state, char character) {
    /*
             * State:
             * 0: Previous character was neither CR nor LF
             * 1: The previous character was CR
             * 2: The previous character was LF
             */
    if ((character & HIGHEST_INVALID_VALUE_CHAR_MASK) == 0) {
        // Check the absolutely prohibited characters.
        switch(character) {
            case // NULL
            0x0:
                throw new IllegalArgumentException("a header value contains a prohibited character '\0': " + seq);
            case // Vertical tab
            0x0b:
                throw new IllegalArgumentException("a header value contains a prohibited character '\\v': " + seq);
            case '\f':
                throw new IllegalArgumentException("a header value contains a prohibited character '\\f': " + seq);
        }
    }
    // Check the CRLF (HT | SP) pattern
    switch(state) {
        case 0:
            switch(character) {
                case '\r':
                    return 1;
                case '\n':
                    return 2;
            }
            break;
        case 1:
            switch(character) {
                case '\n':
                    return 2;
                default:
                    throw new IllegalArgumentException("only '\\n' is allowed after '\\r': " + seq);
            }
        case 2:
            switch(character) {
                case '\t':
                case ' ':
                    return 0;
                default:
                    throw new IllegalArgumentException("only ' ' and '\\t' are allowed after '\\n': " + seq);
            }
    }
    return state;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(SwitchStmt
					(SwitchEntryStmt
						(IntegerLiteralExpr
							LineComment
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
							LineComment
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
			)
			(BlockComment
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(SwitchStmt
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(BreakStmt
						)
					)
					NameExpr
						SimpleName
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(SwitchStmt
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(SwitchStmt
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(SwitchStmt
					(SwitchEntryStmt
						(IntegerLiteralExpr
							LineComment
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(SwitchEntryStmt
						(IntegerLiteralExpr
							LineComment
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
			)
			(BlockComment
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(SwitchStmt
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ReturnStmt
							(IntegerLiteralExpr
							)
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ReturnStmt
							(IntegerLiteralExpr
							)
						)
					)
					NameExpr
						SimpleName
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(SwitchStmt
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ReturnStmt
							(IntegerLiteralExpr
							)
						)
					)
					(SwitchEntryStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
				)
			)
			(SwitchEntryStmt
				(IntegerLiteralExpr
				)
				(SwitchStmt
					(SwitchEntryStmt
						(CharLiteralExpr
						)
					)
					(SwitchEntryStmt
						(CharLiteralExpr
						)
						(ReturnStmt
							(IntegerLiteralExpr
							)
						)
					)
					(SwitchEntryStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

