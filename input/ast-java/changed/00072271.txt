/**
 * If the call to Preconditions.checkNotNull is part of an expression (assignment, return, etc.),
 * we substitute the argument for the method call. E.g.:
 * bar = Preconditions.checkNotNull(foo); ==> bar = foo;
 * If the argument to Preconditions.checkNotNull is a comparison using == or != and one of the
 * operands is null, we call checkNotNull on the non-null operand. E.g.:
 * checkNotNull(a == null); ==> checkNotNull(a);
 * If the argument is a method call or binary tree and its return type is boolean, change it to a
 * checkArgument/checkState. E.g.:
 * Preconditions.checkNotNull(foo.hasFoo()) ==> Preconditions.checkArgument(foo.hasFoo())
 * Otherwise, delete the checkNotNull call. E.g.:
 * Preconditions.checkNotNull(foo); ==> [delete the line]
 */
@Override
public Description describe(MethodInvocationTree methodInvocationTree, VisitorState state) {
    ExpressionTree arg1 = methodInvocationTree.getArguments().get(0);
    Tree parent = state.getPath().getParentPath().getLeaf();
    // Assignment, return, etc.
    if (parent.getKind() != Kind.EXPRESSION_STATEMENT) {
        return new Description(arg1, getDiagnosticMessage(), new SuggestedFix().replace(methodInvocationTree, arg1.toString()));
    }
    // Comparison to null
    if (arg1.getKind() == Kind.EQUAL_TO || arg1.getKind() == Kind.NOT_EQUAL_TO) {
        BinaryTree binaryExpr = (BinaryTree) arg1;
        if (binaryExpr.getLeftOperand().getKind() == Kind.NULL_LITERAL) {
            return new Description(arg1, getDiagnosticMessage(), new SuggestedFix().replace(arg1, binaryExpr.getRightOperand().toString()));
        }
        if (binaryExpr.getRightOperand().getKind() == Kind.NULL_LITERAL) {
            return new Description(arg1, getDiagnosticMessage(), new SuggestedFix().replace(arg1, binaryExpr.getLeftOperand().toString()));
        }
    }
    if ((arg1 instanceof BinaryTree || arg1.getKind() == Kind.METHOD_INVOCATION || arg1.getKind() == Kind.LOGICAL_COMPLEMENT) && ((JCExpression) arg1).type == state.getSymtab().booleanType) {
        return new Description(arg1, getDiagnosticMessage(), createCheckArgumentOrStateCall(methodInvocationTree, state, arg1));
    }
    return new Description(arg1, getDiagnosticMessage(), new SuggestedFix().delete(parent));
}||||||||/**
 * If the call to Preconditions.checkNotNull is part of an expression (assignment, return, etc.),
 * we substitute the argument for the method call. E.g.:
 * bar = Preconditions.checkNotNull(foo); ==> bar = foo;
 * If the argument to Preconditions.checkNotNull is a comparison using == or != and one of the
 * operands is null, we call checkNotNull on the non-null operand. E.g.:
 * checkNotNull(a == null); ==> checkNotNull(a);
 * If the argument is a method call or binary tree and its return type is boolean, change it to a
 * checkArgument/checkState. E.g.:
 * Preconditions.checkNotNull(foo.hasFoo()) ==> Preconditions.checkArgument(foo.hasFoo())
 * Otherwise, delete the checkNotNull call. E.g.:
 * Preconditions.checkNotNull(foo); ==> [delete the line]
 */
public Description describe(MethodInvocationTree methodInvocationTree, VisitorState state) {
    ExpressionTree arg1 = methodInvocationTree.getArguments().get(0);
    Tree parent = state.getPath().getParentPath().getLeaf();
    // Assignment, return, etc.
    if (parent.getKind() != Kind.EXPRESSION_STATEMENT) {
        return describeMatch(arg1, new SuggestedFix().replace(methodInvocationTree, arg1.toString()));
    }
    // Comparison to null
    if (arg1.getKind() == Kind.EQUAL_TO || arg1.getKind() == Kind.NOT_EQUAL_TO) {
        BinaryTree binaryExpr = (BinaryTree) arg1;
        if (binaryExpr.getLeftOperand().getKind() == Kind.NULL_LITERAL) {
            return describeMatch(arg1, new SuggestedFix().replace(arg1, binaryExpr.getRightOperand().toString()));
        }
        if (binaryExpr.getRightOperand().getKind() == Kind.NULL_LITERAL) {
            return describeMatch(arg1, new SuggestedFix().replace(arg1, binaryExpr.getLeftOperand().toString()));
        }
    }
    if ((arg1 instanceof BinaryTree || arg1.getKind() == Kind.METHOD_INVOCATION || arg1.getKind() == Kind.LOGICAL_COMPLEMENT) && ((JCExpression) arg1).type == state.getSymtab().booleanType) {
        return describeMatch(arg1, createCheckArgumentOrStateCall(methodInvocationTree, state, arg1));
    }
    return describeMatch(arg1, new SuggestedFix().delete(parent));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(EnclosedExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						(BinaryExpr
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(EnclosedExpr
							(CastExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(FieldAccessExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

