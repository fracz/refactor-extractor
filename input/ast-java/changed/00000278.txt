/**
 * Used to allocate location and space for a new coming block, worker will choose the appropriate
 * storage directory which fits the initial block size by some allocation strategy, and the
 * temporary file path of the block file will be returned. if there is no enough space on Tachyon
 * storage OutOfSpaceException will be thrown, if the file is already being written by the
 * session, FileAlreadyExistException will be thrown.
 *
 * @param sessionId the id of the client requesting the create
 * @param blockId the id of the new block to create
 * @param initialBytes the initial number of bytes to allocate for this block
 * @throws tachyon.thrift.OutOfSpaceException if there is no space available
 * @throws TException if the underlying worker RPC fails
 */
@Override
public String requestBlockLocation(long sessionId, long blockId, long initialBytes) throws tachyon.thrift.OutOfSpaceException, TException {
    try {
        // NOTE: right now, we ask allocator to allocate new blocks in MEM tier
        return mWorker.createBlock(sessionId, blockId, StorageLevelAlias.MEM.getValue(), initialBytes);
    } catch (AlreadyExistsException aee) {
        throw new TException(aee);
    } catch (IllegalArgumentException iae) {
        throw new TException(iae);
    } catch (OutOfSpaceException ooe) {
        throw new tachyon.thrift.OutOfSpaceException(ooe.getMessage());
    } catch (NotFoundException nfe) {
        throw new TException(nfe);
    } catch (IOException ioe) {
        throw new TException(ioe);
    } catch (InvalidStateException ise) {
        throw new TException(ise);
    }
}||||||||/**
 * Used to allocate location and space for a new coming block, worker will choose the appropriate
 * storage directory which fits the initial block size by some allocation strategy, and the
 * temporary file path of the block file will be returned. if there is no enough space on Tachyon
 * storage WorkerOutOfSpaceException will be thrown, if the file is already being written by the
 * session, FileAlreadyExistsException will be thrown.
 *
 * @param sessionId the id of the client requesting the create
 * @param blockId the id of the new block to create
 * @param initialBytes the initial number of bytes to allocate for this block
 * @throws TachyonTException if a tachyon error occurs
 * @throws ThriftIOException if an I/O error occurs
 */
@Override
public String requestBlockLocation(long sessionId, long blockId, long initialBytes) throws TachyonTException, ThriftIOException {
    try {
        // NOTE: right now, we ask allocator to allocate new blocks in MEM tier
        return mWorker.createBlock(sessionId, blockId, StorageLevelAlias.MEM.getValue(), initialBytes);
    } catch (TachyonException e) {
        throw e.toTachyonTException();
    } catch (IOException e) {
        throw new ThriftIOException(e.getMessage());
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

