/**
 * Returns whether 2 shapes are equals by checking for dimension semantics
 * as well as array equality
 * @param shape1 the first shape for comparison
 * @param shape2 the second shape for comparison
 * @return whether the shapes are equivalent
 */
public static boolean shapeEquals(int[] shape1, int[] shape2) {
    return scalarEquals(shape1, shape2) || Arrays.equals(shape1, shape2);
}||||||||/**
 * Returns whether 2 shapes are equals by checking for dimension semantics
 * as well as array equality
 * @param shape1 the first shape for comparison
 * @param shape2 the second shape for comparison
 * @return whether the shapes are equivalent
 */
public static boolean shapeEquals(int[] shape1, int[] shape2) {
    return scalarEquals(shape1, shape2) || Arrays.equals(shape1, shape2) || squeezeEquals(shape1, shape2);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(JavadocComment
	)
)

