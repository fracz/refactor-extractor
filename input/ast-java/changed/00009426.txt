/**
 * Ask password from user and set it to password safe instance
 *
 * @param project the current project
 * @param safe    the password safe
 * @throws PasswordSafeException if the master password is not provided.
 */
public static void askPassword(@Nullable Project project, MasterKeyPasswordSafe safe) throws PasswordSafeException {
    // trying empty password: people who have set up empty password, don't want to get disturbed by the prompt.
    if (safe.setMasterPassword("")) {
        return;
    }
    String error = null;
    retries: for (int count = 0; count < NUMBER_OF_RETRIES; count++) {
        MasterPasswordDialog d = new MasterPasswordDialog(project, safe);
        if (error != null) {
            d.setErrorText(error);
        }
        d.show();
        switch(d.getExitCode()) {
            case OK_EXIT_CODE:
                boolean rc;
                String pw = new String(d.myMasterPasswordPasswordField.getPassword());
                if (d.myEncryptMasterPasswordWithCheckBox.isSelected()) {
                    rc = safe.changeMasterPassword(pw, pw, true);
                } else {
                    rc = safe.setMasterPassword(pw);
                }
                if (rc) {
                    return;
                } else {
                    error = "Invalid master password, please retry or reset.";
                    continue retries;
                }
            case CANCEL_EXIT_CODE:
                throw new MasterPasswordUnavailableException("The master password request were cancelled.");
            case CHANGE_USER_CODE:
                if (!ChangeMasterKeyDialog.changePassword(project, safe)) {
                    throw new MasterPasswordUnavailableException("The master password request were cancelled.");
                }
                return;
            case RESET_USER_CODE:
                if (!ResetPasswordDialog.resetPassword(project, safe)) {
                    throw new MasterPasswordUnavailableException("The master password request were cancelled.");
                }
                return;
        }
    }
}||||||||/**
 * Ask password from user and set it to password safe instance
 *
 * @param project   the current project
 * @param safe      the password safe
 * @param requestor
 * @throws PasswordSafeException if the master password is not provided.
 */
public static void askPassword(@Nullable Project project, @NotNull MasterKeyPasswordSafe safe, @NotNull Class<?> requestor) throws PasswordSafeException {
    // trying empty password: people who have set up empty password, don't want to get disturbed by the prompt.
    if (safe.setMasterPassword("")) {
        return;
    }
    if (!enterMasterPasswordDialog(project, safe, requestor).showAndGet()) {
        throw new MasterPasswordUnavailableException("Cancelled by user");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(LabeledStmt
			SimpleName
			(ForStmt
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(SwitchStmt
						(SwitchEntryStmt
							NameExpr
								SimpleName
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										SimpleName
										(PrimitiveType
										)
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(ObjectCreationExpr
											(MethodCallExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
									)
									(ContinueStmt
										SimpleName
									)
								)
								(BlockStmt
									(ReturnStmt
									)
								)
							)
						)
						(SwitchEntryStmt
							NameExpr
								SimpleName
							(ThrowStmt
								(ObjectCreationExpr
									StringLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(SwitchEntryStmt
							NameExpr
								SimpleName
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											StringLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ReturnStmt
							)
						)
						(SwitchEntryStmt
							NameExpr
								SimpleName
							(IfStmt
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											StringLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ReturnStmt
							)
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
				(VariableDeclarationExpr
					(VariableDeclarator
						(IntegerLiteralExpr
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

