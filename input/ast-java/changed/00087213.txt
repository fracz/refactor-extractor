@Override
public boolean seek(Mark mark, int[] untilOneOfChars) throws IOException {
    if (eof) {
        // We're at the end
        return eof(mark);
    }
    // Keep a start position in case we need to further fill the buffer in nextChar, a value can at maximum be the
    // whole buffer, so max one fill per value is supported.
    // seekStartPos updated in nextChar if buffer flips over, that's why it's a member
    seekStartPos = bufferPos;
    int ch;
    int endOffset = 1;
    int skippedChars = 0;
    int quoteDepth = 0;
    boolean isQuoted = false;
    if (lineStartPos == bufferPos) {
        int skippedEolChars = skipEolChars();
        seekStartPos += skippedEolChars;
        if (eof) {
            return eof(mark);
        }
        lineNumber++;
    }
    while (!eof) {
        ch = nextChar(skippedChars);
        if (quoteDepth == 0) {
            // In normal mode, i.e. not within quotes
            if (ch == quoteChar && seekStartPos == bufferPos - 1) /* -1 since we just advanced one */
            {
                // We found a quote, which was the first of the value, skip it and switch mode
                quoteDepth++;
                seekStartPos++;
                continue;
            } else if (isNewLine(ch)) {
                // Encountered newline, done for now
                break;
            } else {
                for (int i = 0; i < untilOneOfChars.length; i++) {
                    if (ch == untilOneOfChars[i]) {
                        // We found a delimiter, set marker and return true
                        mark.set(seekStartPos, bufferPos - endOffset - skippedChars, ch, isQuoted);
                        return true;
                    }
                }
            }
        } else {
            // In quoted mode, i.e. within quotes
            isQuoted = true;
            if (ch == quoteChar) {
                // Found a quote within a quote, peek at next char
                int nextCh = peekChar();
                if (nextCh == quoteChar) {
                    // Found a double quote, skip it and we're going down one more quote depth (quote-in-quote)
                    repositionChar(bufferPos++, ++skippedChars);
                    // toggle between quote and quote-in-quote
                    quoteDepth = quoteDepth == 1 ? 2 : 1;
                } else {
                    // Found an ending quote, skip it and switch mode
                    endOffset++;
                    quoteDepth--;
                }
            } else if ((ch == EOL_CHAR || ch == EOL_CHAR_2)) {
                // Found a new line, just keep going
                intermediaryNewLines++;
                nextChar(skippedChars);
            } else if (ch == BACK_SLASH) {
                // Legacy concern, support java style quote encoding
                int nextCh = peekChar();
                if (nextCh == quoteChar) {
                    // Found a slash encoded quote
                    repositionChar(bufferPos++, ++skippedChars);
                }
            }
        }
    }
    int valueLength = bufferPos - seekStartPos - 1;
    if (eof && valueLength == 0 && seekStartPos == lineStartPos) {
        // We didn't find any of the characters sought for
        return eof(mark);
    }
    // We found the last value of the line or stream
    mark.set(seekStartPos, bufferPos - endOffset - skippedChars, END_OF_LINE_CHARACTER, isQuoted);
    lineStartPos = bufferPos;
    return true;
}||||||||@Override
public boolean seek(Mark mark, int untilChar) throws IOException {
    if (eof) {
        // We're at the end
        return eof(mark);
    }
    // Keep a start position in case we need to further fill the buffer in nextChar, a value can at maximum be the
    // whole buffer, so max one fill per value is supported.
    // seekStartPos updated in nextChar if buffer flips over, that's why it's a member
    seekStartPos = bufferPos;
    int ch;
    int endOffset = 1;
    int skippedChars = 0;
    int quoteDepth = 0;
    boolean isQuoted = false;
    while (!eof) {
        ch = nextChar(skippedChars);
        if (quoteDepth == 0) {
            // In normal mode, i.e. not within quotes
            if (ch == quoteChar && seekStartPos == bufferPos - 1) /* -1 since we just advanced one */
            {
                // We found a quote, which was the first of the value, skip it and switch mode
                quoteDepth++;
                seekStartPos++;
                continue;
            } else if (isNewLine(ch)) {
                // Encountered newline, done for now
                lineNumber++;
                if (bufferPos - 1 == lineStartPos) {
                    // We're at the start of this read so just skip it
                    seekStartPos++;
                    lineStartPos++;
                    continue;
                }
                break;
            } else if (ch == untilChar) {
                // We found a delimiter, set marker and return true
                mark.set(seekStartPos, bufferPos - endOffset - skippedChars, ch, isQuoted);
                return true;
            }
        } else {
            // In quoted mode, i.e. within quotes
            isQuoted = true;
            if (ch == quoteChar) {
                // Found a quote within a quote, peek at next char
                int nextCh = peekChar();
                if (nextCh == quoteChar) {
                    // Found a double quote, skip it and we're going down one more quote depth (quote-in-quote)
                    repositionChar(bufferPos++, ++skippedChars);
                    // toggle between quote and quote-in-quote
                    quoteDepth = quoteDepth == 1 ? 2 : 1;
                } else {
                    // Found an ending quote, skip it and switch mode
                    endOffset++;
                    quoteDepth--;
                }
            } else if (isNewLine(ch)) {
                // Found a new line, just keep going
                lineNumber++;
                nextChar(skippedChars);
            } else if (ch == BACK_SLASH) {
                // Legacy concern, support java style quote encoding
                int nextCh = peekChar();
                if (nextCh == quoteChar) {
                    // Found a slash encoded quote
                    repositionChar(bufferPos++, ++skippedChars);
                }
            }
        }
    }
    int valueLength = bufferPos - seekStartPos - 1;
    if (eof && valueLength == 0 && seekStartPos == lineStartPos) {
        // We didn't find any of the characters sought for
        return eof(mark);
    }
    // We found the last value of the line or stream
    lineStartPos = bufferPos;
    mark.set(seekStartPos, bufferPos - endOffset - skippedChars, END_OF_LINE_CHARACTER, isQuoted);
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(UnaryExpr
															NameExpr
																SimpleName
														)
														(UnaryExpr
															NameExpr
																SimpleName
														)
														SimpleName
													)
													LineComment
												)
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												(UnaryExpr
													NameExpr
														SimpleName
												)
												SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(ConditionalExpr
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
													(IntegerLiteralExpr
													)
													(IntegerLiteralExpr
													)
												)
											)
											LineComment
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(BlockStmt
									(ForStmt
										(BlockStmt
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															(BinaryExpr
																(BinaryExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																)
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
														LineComment
													)
													(ReturnStmt
														(BooleanLiteralExpr
														)
													)
												)
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(VariableDeclarationExpr
											(VariableDeclarator
												(IntegerLiteralExpr
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(BreakStmt
										LineComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(ContinueStmt
								)
								(BlockComment
								)
							)
							LineComment
						)
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(UnaryExpr
															NameExpr
																SimpleName
														)
														(UnaryExpr
															NameExpr
																SimpleName
														)
														SimpleName
													)
													LineComment
												)
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(UnaryExpr
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												(UnaryExpr
													NameExpr
														SimpleName
												)
												SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(ConditionalExpr
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
													(IntegerLiteralExpr
													)
													(IntegerLiteralExpr
													)
												)
											)
											LineComment
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												(BinaryExpr
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ReturnStmt
											(BooleanLiteralExpr
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
												LineComment
											)
											(ExpressionStmt
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
											(ContinueStmt
											)
										)
									)
									(BreakStmt
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(ContinueStmt
								)
								(BlockComment
								)
							)
							LineComment
						)
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

