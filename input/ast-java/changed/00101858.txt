// TODO use Junit4 & define a rule to setup the threading, to avoid
// this boiler plat code, or use a custom test runner
public void testFindAll() throws Throwable {
    // We need to control precisely which Looper/Thread our Realm
    // will operate on. This is unfortunately not possible when using the
    // current Instrumentation#InstrumentationThread, because InstrumentationTestRunner#onStart
    // Call Looper.prepare() for us and surprisingly doesn't call Looper#loop(), this is problematic
    // as the async query callback will not run (because the Handler is sending Runnables to a Looper
    // that didn't loop.
    // 
    // In the other hand, using a dedicated 'ExecutorService' will allow us to fine grain control the
    // desired behaviour
    final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
    final Looper[] looper = new Looper[1];
    final Throwable[] threadAssertionError = new Throwable[1];
    ExecutorService executorService = Executors.newSingleThreadExecutor();
    executorService.submit(new Runnable() {

        @Override
        public void run() {
            Looper.prepare();
            looper[0] = Looper.myLooper();
            Realm realm = null;
            try {
                realm = openRealmInstance();
                populateTestRealm(realm, 10);
                // async query (will run on different thread)
                realm.findAsync(AllTypes.class, new Realm.QueryCallback<RealmResults<AllTypes>>() {

                    @Override
                    public void onSuccess(RealmResults<AllTypes> results) {
                        try {
                            assertEquals(10, results.size());
                            // Make sure access to RealmObject will not throw an Exception
                            for (int i = 0, size = results.size(); i < size; i++) {
                                assertEquals(i, results.get(i).getColumnLong());
                            }
                        } catch (AssertionFailedError e) {
                            threadAssertionError[0] = e;
                        } finally {
                            // whatever happened, make sure to notify the waiting TestCase Thread
                            signalCallbackFinished.countDown();
                        }
                    }

                    @Override
                    public void onError(Throwable t) {
                        try {
                            threadAssertionError[0] = t;
                            t.printStackTrace();
                        } finally {
                            signalCallbackFinished.countDown();
                        }
                    }
                }).between("columnLong", 0, 9).findAll();
                // ready to receive callback
                Looper.loop();
            } finally {
                if (realm != null) {
                    realm.close();
                }
            }
        }
    });
    // wait until the callback of our async query proceed
    signalCallbackFinished.await();
    looper[0].quit();
    executorService.shutdownNow();
    if (null != threadAssertionError[0]) {
        // Throw any assertion errors happened in the background thread
        throw threadAssertionError[0];
    }
}||||||||// Async query without any conflicts strategy
public void testFindAll() throws Throwable {
    setDebugModeForAsyncRealmQuery(0, RetryPolicy.MODE_NO_RETRY, 0);
    // We need to control precisely which Looper/Thread our Realm
    // will operate on. This is unfortunately not possible when using the
    // current Instrumentation#InstrumentationThread, because InstrumentationTestRunner#onStart
    // Call Looper.prepare() for us and surprisingly doesn't call Looper#loop(), this is problematic
    // as the async query callback will not run (because the Handler is sending Runnables to a Looper
    // that didn't loop.
    // 
    // In the other hand, using a dedicated 'ExecutorService' will allow us to fine grain control the
    // desired behaviour
    final CountDownLatch signalCallbackFinished = new CountDownLatch(1);
    final Looper[] looper = new Looper[1];
    final Throwable[] threadAssertionError = new Throwable[1];
    ExecutorService executorService = Executors.newSingleThreadExecutor();
    executorService.submit(new Runnable() {

        @Override
        public void run() {
            Looper.prepare();
            looper[0] = Looper.myLooper();
            Realm realm = null;
            try {
                realm = openRealmInstance();
                populateTestRealm(realm, 10);
                // async query (will run on different thread)
                realm.findAsync(AllTypes.class, new Realm.QueryCallback<AllTypes>() {

                    @Override
                    public void onSuccess(RealmResults<AllTypes> results) {
                        try {
                            assertEquals(10, results.size());
                            // Make sure access to RealmObject will not throw an Exception
                            for (int i = 0, size = results.size(); i < size; i++) {
                                assertEquals(i, results.get(i).getColumnLong());
                            }
                        } catch (AssertionFailedError e) {
                            threadAssertionError[0] = e;
                        } finally {
                            // whatever happened, make sure to notify the waiting TestCase Thread
                            signalCallbackFinished.countDown();
                        }
                    }

                    @Override
                    public void onError(Throwable t) {
                        try {
                            threadAssertionError[0] = t;
                            t.printStackTrace();
                        } finally {
                            signalCallbackFinished.countDown();
                        }
                    }
                }).between("columnLong", 0, 9).findAll();
                // ready to receive callback
                Looper.loop();
            } finally {
                if (realm != null) {
                    realm.close();
                }
            }
        }
    });
    // wait until the callback of our async query proceed
    signalCallbackFinished.await();
    looper[0].quit();
    executorService.shutdownNow();
    if (null != threadAssertionError[0]) {
        // Throw any assertion errors happened in the background thread
        throw threadAssertionError[0];
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									(ArrayAccessExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										NullLiteralExpr
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(TryStmt
								(BlockStmt
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
											SimpleName
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
												SimpleName
												(MethodCallExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
													(ObjectCreationExpr
														(MethodDeclaration
															(BlockStmt
																(TryStmt
																	(CatchClause
																		(BlockStmt
																			(ExpressionStmt
																				(AssignExpr
																					(ArrayAccessExpr
																						(IntegerLiteralExpr
																						)
																						NameExpr
																							SimpleName
																					)
																					NameExpr
																						SimpleName
																				)
																			)
																		)
																		(Parameter
																			SimpleName
																			(ClassOrInterfaceType
																				SimpleName
																			)
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			LineComment
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				(IntegerLiteralExpr
																				)
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																			)
																		)
																		(ForStmt
																			(BlockStmt
																				(ExpressionStmt
																					(MethodCallExpr
																						NameExpr
																							SimpleName
																						(MethodCallExpr
																							SimpleName
																							(MethodCallExpr
																								NameExpr
																									SimpleName
																								SimpleName
																								NameExpr
																									SimpleName
																							)
																						)
																						SimpleName
																					)
																				)
																			)
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																			)
																			(VariableDeclarationExpr
																				(VariableDeclarator
																					(IntegerLiteralExpr
																					)
																					SimpleName
																					(PrimitiveType
																					)
																				)
																				(VariableDeclarator
																					(MethodCallExpr
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																					SimpleName
																					(PrimitiveType
																					)
																				)
																			)
																			(UnaryExpr
																				NameExpr
																					SimpleName
																			)
																			LineComment
																		)
																	)
																)
															)
															(VoidType
															)
															SimpleName
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																	(ClassOrInterfaceType
																		SimpleName
																	)
																)
															)
															(MarkerAnnotationExpr
																Name
															)
														)
														(MethodDeclaration
															(BlockStmt
																(TryStmt
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(AssignExpr
																				(ArrayAccessExpr
																					(IntegerLiteralExpr
																					)
																					NameExpr
																						SimpleName
																				)
																				NameExpr
																					SimpleName
																			)
																		)
																		(ExpressionStmt
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																)
															)
															(VoidType
															)
															SimpleName
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
															(MarkerAnnotationExpr
																Name
															)
														)
														(ClassOrInterfaceType
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
															(ClassOrInterfaceType
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ArrayAccessExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				(ArrayAccessExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ArrayAccessExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(IntegerLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(AssignExpr
									(ArrayAccessExpr
										(IntegerLiteralExpr
										)
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										NullLiteralExpr
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(TryStmt
								(BlockStmt
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
											SimpleName
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												(IntegerLiteralExpr
												)
												(IntegerLiteralExpr
												)
												SimpleName
												(MethodCallExpr
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
													(ObjectCreationExpr
														(MethodDeclaration
															(BlockStmt
																(TryStmt
																	(CatchClause
																		(BlockStmt
																			(ExpressionStmt
																				(AssignExpr
																					(ArrayAccessExpr
																						(IntegerLiteralExpr
																						)
																						NameExpr
																							SimpleName
																					)
																					NameExpr
																						SimpleName
																				)
																			)
																		)
																		(Parameter
																			SimpleName
																			(ClassOrInterfaceType
																				SimpleName
																			)
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			LineComment
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				(IntegerLiteralExpr
																				)
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																			)
																		)
																		(ForStmt
																			(BlockStmt
																				(ExpressionStmt
																					(MethodCallExpr
																						NameExpr
																							SimpleName
																						(MethodCallExpr
																							SimpleName
																							(MethodCallExpr
																								NameExpr
																									SimpleName
																								SimpleName
																								NameExpr
																									SimpleName
																							)
																						)
																						SimpleName
																					)
																				)
																			)
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																			)
																			(VariableDeclarationExpr
																				(VariableDeclarator
																					(IntegerLiteralExpr
																					)
																					SimpleName
																					(PrimitiveType
																					)
																				)
																				(VariableDeclarator
																					(MethodCallExpr
																						SimpleName
																						NameExpr
																							SimpleName
																					)
																					SimpleName
																					(PrimitiveType
																					)
																				)
																			)
																			(UnaryExpr
																				NameExpr
																					SimpleName
																			)
																			LineComment
																		)
																	)
																)
															)
															(VoidType
															)
															SimpleName
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																	(ClassOrInterfaceType
																		SimpleName
																	)
																)
															)
															(MarkerAnnotationExpr
																Name
															)
														)
														(MethodDeclaration
															(BlockStmt
																(TryStmt
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(AssignExpr
																				(ArrayAccessExpr
																					(IntegerLiteralExpr
																					)
																					NameExpr
																						SimpleName
																				)
																				NameExpr
																					SimpleName
																			)
																		)
																		(ExpressionStmt
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																)
															)
															(VoidType
															)
															SimpleName
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
															(MarkerAnnotationExpr
																Name
															)
														)
														(ClassOrInterfaceType
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ArrayAccessExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NullLiteralExpr
				(ArrayAccessExpr
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ThrowStmt
					(ArrayAccessExpr
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)

