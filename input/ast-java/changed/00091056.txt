public static void increaseMasterVolume(final float percent) throws IOException {
    if (percent <= 0 || percent > 100) {
        throw new IllegalArgumentException("Percent must be in the range (0,100]!");
    }
    Float volume = getMasterVolume();
    if (volume == 0) {
        // as increasing 0 by x percent will still be 0, we have to set some initial positive value
        volume = 0.001f;
    }
    float newVolume = volume * (1f + percent / 100f);
    if (newVolume > 1) {
        newVolume = 1;
    }
    setMasterVolume(newVolume);
}||||||||public static void increaseMasterVolume(final float percent) throws IOException {
    if (percent <= 0 || percent > 100) {
        throw new IllegalArgumentException("Percent must be in the range (0,100]!");
    }
    Float volume = getMasterVolume();
    if (volume == 0) {
        // as increasing 0 by x percent will still be 0, we have to set some initial positive value
        volume = 0.001f;
    }
    float newVolume = volume * (1f + percent / 100f);
    if (isMacOSX() && newVolume - volume < .01) {
        // the getMasterVolume() only returns integers, so we have to make sure that we
        // increase the volume level at least by 1%.
        newVolume += .01;
    }
    if (newVolume > 1) {
        newVolume = 1;
    }
    setMasterVolume(newVolume);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(DoubleLiteralExpr
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(EnclosedExpr
							(BinaryExpr
								(DoubleLiteralExpr
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(DoubleLiteralExpr
									)
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(DoubleLiteralExpr
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(EnclosedExpr
							(BinaryExpr
								(DoubleLiteralExpr
								)
								(BinaryExpr
									NameExpr
										SimpleName
									(DoubleLiteralExpr
									)
								)
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
				)
				(BinaryExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(DoubleLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(DoubleLiteralExpr
						)
					)
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

