@Override
public PrimitiveLongIterator nodesGetAll() {
    return new PrimitiveLongBaseIterator() {

        private long highId = nodeStore.getHighestPossibleIdInUse();

        private long currentId;

        // reused
        private final NodeRecord reusableNodeRecord = new NodeRecord(-1);

        @Override
        protected boolean fetchNext() {
            while (true) {
                // This outer loop is for checking if highId has changed since we started.
                while (currentId <= highId) {
                    try {
                        NodeRecord record = nodeStore.loadRecord(currentId, reusableNodeRecord);
                        if (record != null && record.inUse()) {
                            System.out.println("RETURNING A NODE FROM THE STORE, ID " + record.getId());
                            return next(record.getId());
                        }
                    } finally {
                        currentId++;
                    }
                }
                long newHighId = nodeStore.getHighestPossibleIdInUse();
                if (newHighId > highId) {
                    highId = newHighId;
                } else {
                    break;
                }
            }
            return false;
        }
    };
}||||||||@Override
public PrimitiveLongIterator nodesGetAll() {
    return new PrimitiveLongBaseIterator() {

        private long highId = nodeStore.getHighestPossibleIdInUse();

        private long currentId;

        // reused
        private final NodeRecord reusableNodeRecord = new NodeRecord(-1);

        @Override
        protected boolean fetchNext() {
            while (true) {
                // This outer loop is for checking if highId has changed since we started.
                while (currentId <= highId) {
                    try {
                        NodeRecord record = nodeStore.loadRecord(currentId, reusableNodeRecord);
                        if (record != null && record.inUse()) {
                            return next(record.getId());
                        }
                    } finally {
                        currentId++;
                    }
                }
                long newHighId = nodeStore.getHighestPossibleIdInUse();
                if (newHighId > highId) {
                    highId = newHighId;
                } else {
                    break;
                }
            }
            return false;
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						SimpleName
						(PrimitiveType
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						(ObjectCreationExpr
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
				(MethodDeclaration
					(BlockStmt
						(WhileStmt
							(BlockStmt
								(WhileStmt
									(BlockStmt
										(TryStmt
											(BlockStmt
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(VariableDeclarationExpr
														(VariableDeclarator
															(MethodCallExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
												(IfStmt
													(BinaryExpr
														(BinaryExpr
															NameExpr
																SimpleName
															NullLiteralExpr
														)
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(BinaryExpr
																	StringLiteralExpr
																	(MethodCallExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
														(ReturnStmt
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
															)
														)
													)
												)
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(BreakStmt
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BooleanLiteralExpr
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(PrimitiveType
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						SimpleName
						(PrimitiveType
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						(ObjectCreationExpr
							(UnaryExpr
								(IntegerLiteralExpr
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					LineComment
				)
				(MethodDeclaration
					(BlockStmt
						(WhileStmt
							(BlockStmt
								(WhileStmt
									(BlockStmt
										(TryStmt
											(BlockStmt
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(VariableDeclarationExpr
														(VariableDeclarator
															(MethodCallExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
												(IfStmt
													(BinaryExpr
														(BinaryExpr
															NameExpr
																SimpleName
															NullLiteralExpr
														)
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(BlockStmt
														(ReturnStmt
															(MethodCallExpr
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
															)
														)
													)
												)
											)
										)
									)
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(PrimitiveType
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(BreakStmt
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BooleanLiteralExpr
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

