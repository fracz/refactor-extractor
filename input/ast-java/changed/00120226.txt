@Test
public void containsKeyReturnsTrueOnExtantKey() throws Exception {
    StaticBuffer key1 = KeyColumnValueStoreUtil.longToByteBuffer(1);
    StoreTransaction txn = manager.beginTransaction(ConsistencyLevel.DEFAULT);
    Assert.assertFalse(store.containsKey(key1, txn));
    KeyColumnValueStoreUtil.insert(store, txn, 1, "c", "v");
    txn.commit();
    txn = manager.beginTransaction(ConsistencyLevel.DEFAULT);
    Assert.assertTrue(store.containsKey(key1, txn));
    txn.commit();
}||||||||// @Test
// public void getSliceNoLimit() throws Exception {
// CassandraThriftStoreManager manager = new CassandraThriftStoreManager(keyspace);
// CassandraThriftKeyColumnValueStore store =
// manager.openDatabase(dbName);
// 
// StoreTransaction txn = manager.beginTransaction();
// KeyColumnValueStoreUtil.insert(store, txn, "key0", "col0", "val0");
// KeyColumnValueStoreUtil.insert(store, txn, "key0", "col1", "val1");
// txn.commit();
// 
// txn = manager.beginTransaction();
// ByteBuffer key0 = KeyColumnValueStoreUtil.stringToByteBuffer("key0");
// ByteBuffer col0 = KeyColumnValueStoreUtil.stringToByteBuffer("col0");
// ByteBuffer col2 = KeyColumnValueStoreUtil.stringToByteBuffer("col2");
// List<Entry> entries = store.getSlice(key0, col0, col2, txn);
// assertNotNull(entries);
// assertEquals(2, entries.size());
// assertEquals("col0", KeyColumnValueStoreUtil.byteBufferToString(entries.get(0).getColumn()));
// assertEquals("val0", KeyColumnValueStoreUtil.byteBufferToString(entries.get(0).getValue()));
// assertEquals("col1", KeyColumnValueStoreUtil.byteBufferToString(entries.get(1).getColumn()));
// assertEquals("val1", KeyColumnValueStoreUtil.byteBufferToString(entries.get(1).getValue()));
// 
// txn.commit();
// 
// store.shutdown();
// manager.shutdown();
// }
/*
    @Test
    public void getSliceRespectsColumnLimit() throws Exception {
        StoreTransaction txn = manager.beginTransaction(ConsistencyLevel.DEFAULT);
        StaticBuffer key = KeyColumnValueStoreUtil.longToByteBuffer(0);

        final int cols = 1024;

        List<Entry> entries = new LinkedList<Entry>();
        for (int i = 0; i < cols; i++) {
            StaticBuffer col = KeyColumnValueStoreUtil.longToByteBuffer(i);
            entries.add(new StaticBufferEntry(col, col));
        }
        store.mutate(key, entries, KeyColumnValueStore.NO_DELETIONS, txn);
        txn.commit();

        txn = manager.beginTransaction(ConsistencyLevel.DEFAULT);
        StaticBuffer columnStart = KeyColumnValueStoreUtil.longToByteBuffer(0);
        StaticBuffer columnEnd = KeyColumnValueStoreUtil.longToByteBuffer(cols);
        /*
		 * When limit is greater than or equal to the matching column count,
		 * all matching columns must be returned.
		 *
        List<Entry> result =
                store.getSlice(new KeySliceQuery(key, columnStart, columnEnd).setLimit(cols), txn);
        Assert.assertEquals(cols, result.size());

        for (int i=0; i<result.size(); i++) {
            Entry src = entries.get(i);
            Entry dst = result.get(i);
            if (!src.equals(dst)) {
                int x = 1;
            }
        }

        Assert.assertEquals(entries, result);
        result =
                store.getSlice(new KeySliceQuery(key, columnStart, columnEnd).setLimit(cols + 10), txn);
        Assert.assertEquals(cols, result.size());
        Assert.assertEquals(entries, result);

		/*
		 * When limit is less the matching column count, the columns up to the
		 * limit (ordered bytewise) must be returned.
		 *
        result =
                store.getSlice(new KeySliceQuery(key, columnStart, columnEnd).setLimit(cols - 1), txn);
        Assert.assertEquals(cols - 1, result.size());
        entries.remove(entries.size() - 1);
        Assert.assertEquals(entries, result);
        result =
                store.getSlice(new KeySliceQuery(key, columnStart, columnEnd).setLimit(1), txn);
        Assert.assertEquals(1, result.size());
        List<Entry> firstEntrySingleton = Arrays.asList(entries.get(0));
        Assert.assertEquals(firstEntrySingleton, result);
        txn.commit();
    }

    @Test
    public void getSliceRespectsAllBoundsInclusionArguments() throws Exception {
        // Test case where endColumn=startColumn+1
        StaticBuffer key = KeyColumnValueStoreUtil.longToByteBuffer(0);
        StaticBuffer columnBeforeStart = KeyColumnValueStoreUtil.longToByteBuffer(776);
        StaticBuffer columnStart = KeyColumnValueStoreUtil.longToByteBuffer(777);
        StaticBuffer columnEnd = KeyColumnValueStoreUtil.longToByteBuffer(778);
        StaticBuffer columnAfterEnd = KeyColumnValueStoreUtil.longToByteBuffer(779);

        // First insert four test Entries
        StoreTransaction txn = manager.beginTransaction(ConsistencyLevel.DEFAULT);
        List<Entry> entries = Arrays.asList(
                (Entry)new StaticBufferEntry(columnBeforeStart, columnBeforeStart),
                new StaticBufferEntry(columnStart, columnStart),
                new StaticBufferEntry(columnEnd, columnEnd),
                new StaticBufferEntry(columnAfterEnd, columnAfterEnd));
        store.mutate(key, entries, KeyColumnValueStore.NO_DELETIONS, txn);
        txn.commit();

        // getSlice() with only start inclusive
        txn = manager.beginTransaction(ConsistencyLevel.DEFAULT);
        List<Entry> result = store.getSlice(new KeySliceQuery(key, columnStart, columnEnd), txn);
        Assert.assertEquals(1, result.size());
        Assert.assertEquals(777, KeyColumnValueStoreUtil.bufferToLong(result.get(0).getColumn()));
        txn.commit();

    }
    */
@Test
public void containsKeyReturnsTrueOnExtantKey() throws Exception {
    StaticBuffer key1 = KeyColumnValueStoreUtil.longToByteBuffer(1);
    Assert.assertFalse(store.containsKey(key1, tx));
    KeyColumnValueStoreUtil.insert(store, tx, 1, "c", "v");
    tx.commit();
    tx = manager.beginTransaction(ConsistencyLevel.DEFAULT);
    Assert.assertTrue(store.containsKey(key1, tx));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

