public void testFoldLogicalOp() {
    fold("x = true && x", "x = x");
    fold("x = [foo()] && x", "x = ([foo()],x)");
    fold("x = false && x", "x = false");
    fold("x = true || x", "x = true");
    fold("x = false || x", "x = x");
    fold("x = 0 && x", "x = 0");
    fold("x = 3 || x", "x = 3");
    fold("x = false || 0", "x = 0");
    // unfoldable, because the right-side may be the result
    fold("a = x && true", "a=x&&true");
    fold("a = x && false", "a=x&&false");
    fold("a = x || 3", "a=x||3");
    fold("a = x || false", "a=x||false");
    fold("a = b ? c : x || false", "a=b?c:x||false");
    fold("a = b ? x || false : c", "a=b?x||false:c");
    fold("a = b ? c : x && true", "a=b?c:x&&true");
    fold("a = b ? x && true : c", "a=b?x&&true:c");
    // folded, but not here.
    foldSame("a = x || false ? b : c");
    foldSame("a = x && true ? b : c");
    fold("x = foo() || true || bar()", "x = foo()||true");
    fold("x = foo() || true && bar()", "x = foo()||bar()");
    fold("x = foo() || false && bar()", "x = foo()||false");
    fold("x = foo() && false && bar()", "x = foo()&&false");
    fold("x = foo() && false || bar()", "x = (foo()&&false,bar())");
    // TODO(tbreisacher): Fix and re-enable.
    // fold("x = foo() || false || bar()", "x = foo()||bar()");
    // fold("x = foo() && true && bar()", "x = foo()&&bar()");
    fold("1 && b()", "b()");
    fold("a() && (1 && b())", "a() && b()");
    // TODO(johnlenz): Consider folding the following to:
    // "(a(),1) && b();
    fold("(a() && 1) && b()", "(a() && 1) && b()");
    // Really not foldable, because it would change the type of the
    // expression if foo() returns something equivalent, but not
    // identical, to true. Cf. FoldConstants.tryFoldAndOr().
    foldSame("x = foo() && true || bar()");
    foldSame("foo() && true || bar()");
}||||||||public void testFoldLogicalOp() {
    fold("x = true && x", "x = x");
    fold("x = [foo()] && x", "x = ([foo()],x)");
    fold("x = false && x", "x = false");
    fold("x = true || x", "x = true");
    fold("x = false || x", "x = x");
    fold("x = 0 && x", "x = 0");
    fold("x = 3 || x", "x = 3");
    fold("x = false || 0", "x = 0");
    // unfoldable, because the right-side may be the result
    fold("a = x && true", "a=x&&true");
    fold("a = x && false", "a=x&&false");
    fold("a = x || 3", "a=x||3");
    fold("a = x || false", "a=x||false");
    fold("a = b ? c : x || false", "a=b?c:x||false");
    fold("a = b ? x || false : c", "a=b?x||false:c");
    fold("a = b ? c : x && true", "a=b?c:x&&true");
    fold("a = b ? x && true : c", "a=b?x&&true:c");
    // folded, but not here.
    foldSame("a = x || false ? b : c");
    foldSame("a = x && true ? b : c");
    fold("x = foo() || true || bar()", "x = foo()||true");
    fold("x = foo() || true && bar()", "x = foo()||bar()");
    fold("x = foo() || false && bar()", "x = foo()||false");
    fold("x = foo() && false && bar()", "x = foo()&&false");
    fold("x = foo() && false || bar()", "x = (foo()&&false,bar())");
    // TODO(tbreisacher): Fix and re-enable.
    // fold("x = foo() || false || bar()", "x = foo()||bar()");
    // fold("x = foo() && true && bar()", "x = foo()&&bar()");
    fold("1 && b()", "b()");
    fold("a() && (1 && b())", "a() && b()");
    // TODO(johnlenz): Consider folding the following to:
    // "(a(),1) && b();
    foldSame("(a() && 1) && b()");
    // Really not foldable, because it would change the type of the
    // expression if foo() returns something equivalent, but not
    // identical, to true. Cf. FoldConstants.tryFoldAndOr().
    foldSame("x = foo() && true || bar()");
    foldSame("foo() && true || bar()");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

