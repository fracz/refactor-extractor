/**
 * Two named types are equal if they are the same {@code ObjectType} object.
 * This is complicated by the fact that equals is sometimes called before we
 * have a chance to resolve the type names.
 *
 * @return {@code true} iff {@code that} == {@code this} or {@code that}
 * is a {@link NamedType} whose reference is the same as ours,
 * or {@code that} is the type we reference.
 */
@Override
public boolean equals(Object that) {
    if (this == that) {
        return true;
    } else if (that instanceof ObjectType) {
        ObjectType objType = (ObjectType) that;
        return objType.isNominalType() && reference.equals(objType.getReferenceName());
    }
    return false;
}||||||||/**
 * Two named types are equal if they are the same {@code ObjectType} object.
 * This is complicated by the fact that equals is sometimes called before we
 * have a chance to resolve the type names.
 *
 * @return {@code true} iff {@code that} == {@code this} or {@code that}
 * is a {@link NamedType} whose reference is the same as ours,
 * or {@code that} is the type we reference.
 */
@Override
public boolean equals(Object that) {
    if (this == that) {
        return true;
    } else if (that instanceof JSType) {
        ObjectType objType = ObjectType.cast((JSType) that);
        if (objType != null) {
            return objType.isNominalType() && reference.equals(objType.getReferenceName());
        }
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(ThisExpr
				)
				NameExpr
					SimpleName
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ReturnStmt
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(ThisExpr
				)
				NameExpr
					SimpleName
			)
			(IfStmt
				(InstanceOfExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ReturnStmt
								(BinaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

