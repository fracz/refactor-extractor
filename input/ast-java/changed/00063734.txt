// see https://github.com/elasticsearch/elasticsearch/issues/3898
@Test
public void testCustomWordDelimiterQueryString() {
    assertAcked(client().admin().indices().prepareCreate("test").setSettings("analysis.analyzer.my_analyzer.type", "custom", "analysis.analyzer.my_analyzer.tokenizer", "whitespace", "analysis.analyzer.my_analyzer.filter", "custom_word_delimiter", "analysis.filter.custom_word_delimiter.type", "word_delimiter", "analysis.filter.custom_word_delimiter.generate_word_parts", "true", "analysis.filter.custom_word_delimiter.generate_number_parts", "false", "analysis.filter.custom_word_delimiter.catenate_numbers", "true", "analysis.filter.custom_word_delimiter.catenate_words", "false", "analysis.filter.custom_word_delimiter.split_on_case_change", "false", "analysis.filter.custom_word_delimiter.split_on_numerics", "false", "analysis.filter.custom_word_delimiter.stem_english_possessive", "false").addMapping("type1", "field1", "type=string,analyzer=my_analyzer", "field2", "type=string,analyzer=my_analyzer"));
    ensureGreen();
    client().prepareIndex("test", "type1", "1").setSource("field1", "foo bar baz", "field2", "not needed").get();
    refresh();
    SearchResponse response = client().prepareSearch("test").setQuery(queryStringQuery("foo.baz").useDisMax(false).defaultOperator(QueryStringQueryBuilder.Operator.AND).field("field1").field("field2")).get();
    assertHitCount(response, 1l);
}||||||||// see https://github.com/elasticsearch/elasticsearch/issues/3898
@Test
public void testCustomWordDelimiterQueryString() {
    assertAcked(client().admin().indices().prepareCreate("test").setSettings("analysis.analyzer.my_analyzer.type", "custom", "analysis.analyzer.my_analyzer.tokenizer", "whitespace", "analysis.analyzer.my_analyzer.filter", "custom_word_delimiter", "analysis.filter.custom_word_delimiter.type", "word_delimiter", "analysis.filter.custom_word_delimiter.generate_word_parts", "true", "analysis.filter.custom_word_delimiter.generate_number_parts", "false", "analysis.filter.custom_word_delimiter.catenate_numbers", "true", "analysis.filter.custom_word_delimiter.catenate_words", "false", "analysis.filter.custom_word_delimiter.split_on_case_change", "false", "analysis.filter.custom_word_delimiter.split_on_numerics", "false", "analysis.filter.custom_word_delimiter.stem_english_possessive", "false").addMapping("type1", "field1", "type=string,analyzer=my_analyzer", "field2", "type=string,analyzer=my_analyzer"));
    ensureGreen();
    client().prepareIndex("test", "type1", "1").setSource("field1", "foo bar baz", "field2", "not needed").get();
    refresh();
    SearchResponse response = client().prepareSearch("test").setQuery(queryStringQuery("foo.baz").useDisMax(false).defaultOperator(Operator.AND).field("field1").field("field2")).get();
    assertHitCount(response, 1l);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										(MethodCallExpr
											(BooleanLiteralExpr
											)
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
											)
										)
									)
								)
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(LongLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
		LineComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(MethodCallExpr
											(BooleanLiteralExpr
											)
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
											)
										)
									)
								)
							)
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(LongLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
		LineComment
	)
)

