/**
 * The schema (CREATE TABLE statement) for the table for which sstable are to be created.
 * <p>
 * Please note that the provided CREATE TABLE statement <b>must</b> use a fully-qualified
 * table name, one that include the keyspace name.
 * <p>
 * This is a mandatory option.
 *
 * @param schema the schema of the table for which sstables are to be created.
 * @return this builder.
 *
 * @throws IllegalArgumentException if {@code schema} is not a valid CREATE TABLE statement
 * or does not have a fully-qualified table name.
 */
public Builder forTable(String schema) {
    try {
        synchronized (CQLSSTableWriter.class) {
            this.schema = getStatement(schema, CreateTableStatement.class, "CREATE TABLE").left.getCFMetaData().rebuild();
            // We need to register the keyspace/table metadata through Schema, otherwise we won't be able to properly
            // build the insert statement in using().
            KSMetaData ksm = Schema.instance.getKSMetaData(this.schema.ksName);
            if (ksm == null) {
                createKeyspaceWithTable(this.schema);
            } else if (Schema.instance.getCFMetaData(this.schema.ksName, this.schema.cfName) == null) {
                addTableToKeyspace(ksm, this.schema);
            }
            return this;
        }
    } catch (RequestValidationException e) {
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}||||||||/**
 * The schema (CREATE TABLE statement) for the table for which sstable are to be created.
 * <p>
 * Please note that the provided CREATE TABLE statement <b>must</b> use a fully-qualified
 * table name, one that include the keyspace name.
 * <p>
 * This is a mandatory option.
 *
 * @param schema the schema of the table for which sstables are to be created.
 * @return this builder.
 *
 * @throws IllegalArgumentException if {@code schema} is not a valid CREATE TABLE statement
 * or does not have a fully-qualified table name.
 */
public Builder forTable(String schema) {
    try {
        synchronized (CQLSSTableWriter.class) {
            this.schema = getStatement(schema, CreateTableStatement.class, "CREATE TABLE").left.getCFMetaData();
            // We need to register the keyspace/table metadata through Schema, otherwise we won't be able to properly
            // build the insert statement in using().
            KSMetaData ksm = Schema.instance.getKSMetaData(this.schema.ksName);
            if (ksm == null) {
                createKeyspaceWithTable(this.schema);
            } else if (Schema.instance.getCFMetaData(this.schema.ksName, this.schema.cfName) == null) {
                addTableToKeyspace(ksm, this.schema);
            }
            return this;
        }
    } catch (RequestValidationException e) {
        throw new IllegalArgumentException(e.getMessage(), e);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											(MethodCallExpr
												NameExpr
													SimpleName
												(ClassExpr
													(ClassOrInterfaceType
														SimpleName
													)
												)
												StringLiteralExpr
												SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												(ThisExpr
												)
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												(ThisExpr
												)
											)
										)
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												(ThisExpr
												)
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												(ThisExpr
												)
											)
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(ThisExpr
							)
						)
					)
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(FieldAccessExpr
									SimpleName
									(ThisExpr
									)
								)
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											(ClassExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
											StringLiteralExpr
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												(ThisExpr
												)
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(IfStmt
								(BinaryExpr
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												(ThisExpr
												)
											)
										)
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												(ThisExpr
												)
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									NullLiteralExpr
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(FieldAccessExpr
												SimpleName
												(ThisExpr
												)
											)
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(FieldAccessExpr
											SimpleName
											(ThisExpr
											)
										)
										SimpleName
									)
								)
							)
						)
						(ReturnStmt
							(ThisExpr
							)
						)
					)
					(ClassExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

