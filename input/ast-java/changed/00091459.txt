/**
 * Removes <code>provider</code> from the list of providers. If there is no
 * provider left the refresh thread is getting interrupted.
 *
 * @param provider the {@link BindingProvider} to remove
 */
public void removeBindingProvider(P provider) {
    this.providers.remove(provider);
    // refresh thread any longer ...
    if (this.providers.size() == 0) {
        interrupt();
    }
}||||||||/**
 * Removes <code>provider</code> from the list of providers. If there is no
 * provider left the refresh thread is getting interrupted.
 *
 * @param provider the {@link BindingProvider} to remove
 */
public void removeBindingProvider(P provider) {
    this.providers.remove(provider);
    // refresh thread any longer ...
    if (this.providers.size() == 0) {
        super.interrupt();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(SuperExpr
						)
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

