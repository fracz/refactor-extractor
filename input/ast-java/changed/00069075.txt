@Override
public String getBase64UUID() {
    final int sequenceId = sequenceNumber.incrementAndGet() & 0xffffff;
    long timestamp = System.currentTimeMillis();
    synchronized (this) {
        // Don't let timestamp go backwards, at least "on our watch" (while this JVM is running).  We are still vulnerable if we are
        // shut down, clock goes backwards, and we restart... for this we randomize the sequenceNumber on init to decrease chance of
        // collision:
        timestamp = Math.max(lastTimestamp, timestamp);
        if (sequenceId == 0) {
            // Always force the clock to increment whenever sequence number is 0, in case we have a long time-slip backwards:
            timestamp++;
        }
        lastTimestamp = timestamp;
    }
    final byte[] uuidBytes = new byte[15];
    // Only use lower 6 bytes of the timestamp (this will suffice beyond the year 10000):
    putLong(uuidBytes, timestamp, 0, 6);
    // MAC address adds 6 bytes:
    System.arraycopy(SECURE_MUNGED_ADDRESS, 0, uuidBytes, 6, SECURE_MUNGED_ADDRESS.length);
    // Sequence number adds 3 bytes:
    putLong(uuidBytes, sequenceId, 12, 3);
    assert 9 + SECURE_MUNGED_ADDRESS.length == uuidBytes.length;
    return Base64.getUrlEncoder().withoutPadding().encodeToString(uuidBytes);
}||||||||@Override
public String getBase64UUID() {
    final int sequenceId = sequenceNumber.incrementAndGet() & 0xffffff;
    long timestamp = currentTimeMillis();
    synchronized (this) {
        // Don't let timestamp go backwards, at least "on our watch" (while this JVM is running).  We are still vulnerable if we are
        // shut down, clock goes backwards, and we restart... for this we randomize the sequenceNumber on init to decrease chance of
        // collision:
        timestamp = Math.max(lastTimestamp, timestamp);
        if (sequenceId == 0) {
            // Always force the clock to increment whenever sequence number is 0, in case we have a long time-slip backwards:
            timestamp++;
        }
        lastTimestamp = timestamp;
    }
    final byte[] uuidBytes = new byte[15];
    int i = 0;
    // We have auto-generated ids, which are usually used for append-only workloads.
    // So we try to optimize the order of bytes for indexing speed (by having quite
    // unique bytes close to the beginning of the ids so that sorting is fast) and
    // compression (by making sure we share common prefixes between enough ids),
    // but not necessarily for lookup speed (by having the leading bytes identify
    // segments whenever possible)
    // Blocks in the block tree have between 25 and 48 terms. So all prefixes that
    // are shared by ~30 terms should be well compressed. I first tried putting the
    // two lower bytes of the sequence id in the beginning of the id, but compression
    // is only triggered when you have at least 30*2^16 ~= 2M documents in a segment,
    // which is already quite large. So instead, we are putting the 1st and 3rd byte
    // of the sequence number so that compression starts to be triggered with smaller
    // segment sizes and still gives pretty good indexing speed. We use the sequenceId
    // rather than the timestamp because the distribution of the timestamp depends too
    // much on the indexing rate, so it is less reliable.
    uuidBytes[i++] = (byte) sequenceId;
    // changes every 65k docs, so potentially every second if you have a steady indexing rate
    uuidBytes[i++] = (byte) (sequenceId >>> 16);
    // Now we start focusing on compression and put bytes that should not change too often.
    // changes every ~65 secs
    uuidBytes[i++] = (byte) (timestamp >>> 16);
    // changes every ~4.5h
    uuidBytes[i++] = (byte) (timestamp >>> 24);
    // changes every ~50 days
    uuidBytes[i++] = (byte) (timestamp >>> 32);
    // changes every 35 years
    uuidBytes[i++] = (byte) (timestamp >>> 40);
    byte[] macAddress = macAddress();
    assert macAddress.length == 6;
    System.arraycopy(macAddress, 0, uuidBytes, i, macAddress.length);
    i += macAddress.length;
    // Finally we put the remaining bytes, which will likely not be compressed at all.
    uuidBytes[i++] = (byte) (timestamp >>> 8);
    uuidBytes[i++] = (byte) (sequenceId >>> 8);
    uuidBytes[i++] = (byte) timestamp;
    assert i == uuidBytes.length;
    return Base64.getUrlEncoder().withoutPadding().encodeToString(uuidBytes);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ThisExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(PrimitiveType
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(AssertStmt
			(BinaryExpr
				(BinaryExpr
					(IntegerLiteralExpr
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ThisExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(PrimitiveType
						)
						(ArrayCreationLevel
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					NameExpr
						SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ArrayType
						(PrimitiveType
						)
					)
				)
			)
		)
		(AssertStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(ArrayAccessExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
				(CastExpr
					NameExpr
						SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(AssertStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

