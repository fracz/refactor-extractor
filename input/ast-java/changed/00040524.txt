private void doFinish() {
    // Inform listener of any active targets.  Typically only one will be active.
    final int activeTarget = mActiveTarget;
    boolean targetHit = activeTarget != -1;
    if (targetHit) {
        Log.v(TAG, "Finish with target hit = " + targetHit);
        dispatchTriggerEvent(mActiveTarget);
    }
    setGrabbedState(OnTriggerListener.NO_HANDLE);
    // Animate finger outline back to home position
    mHandleDrawable.setAlpha(targetHit ? 0.0f : 1.0f);
    mHandleAnimation = Tweener.to(mHandleDrawable, RETURN_TO_HOME_DURATION, "ease", Ease.Quart.easeOut, "delay", targetHit ? HIDE_ANIMATION_DELAY : 0, "alpha", 1.0f, "x", mWaveCenterX, "y", mWaveCenterY, "onUpdate", this, "onComplete", mResetListener);
    // Hide unselected targets
    hideTargets(true);
    // Highlight the selected one
    if (targetHit) {
        mTargetDrawables.get(activeTarget).setState(TargetDrawable.STATE_ACTIVE);
    }
    stopChevronAnimation();
}||||||||private void doFinish() {
    // Inform listener of any active targets.  Typically only one will be active.
    final int activeTarget = mActiveTarget;
    boolean targetHit = activeTarget != -1;
    if (targetHit) {
        Log.v(TAG, "Finish with target hit = " + targetHit);
        dispatchTriggerEvent(mActiveTarget);
    }
    setGrabbedState(OnTriggerListener.NO_HANDLE);
    // Animate finger outline back to home position
    mHandleDrawable.setAlpha(targetHit ? 0.0f : 1.0f);
    mHandleAnimation = Tweener.to(mHandleDrawable, RETURN_TO_HOME_DURATION, "ease", Ease.Quart.easeOut, "delay", targetHit ? HIDE_ANIMATION_DELAY : 0, "alpha", 1.0f, "x", mWaveCenterX, "y", mWaveCenterY, "onUpdate", this, "onComplete", mResetListener);
    // Hide unselected targets
    hideTargets(true);
    // Highlight the selected one
    if (targetHit) {
        mTargetDrawables.get(activeTarget).setState(TargetDrawable.STATE_ACTIVE);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					NameExpr
						SimpleName
					(DoubleLiteralExpr
					)
					(DoubleLiteralExpr
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					StringLiteralExpr
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
					(ConditionalExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					StringLiteralExpr
					(DoubleLiteralExpr
					)
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					(ThisExpr
					)
					StringLiteralExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					NameExpr
						SimpleName
					(DoubleLiteralExpr
					)
					(DoubleLiteralExpr
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					StringLiteralExpr
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					StringLiteralExpr
					(ConditionalExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						NameExpr
							SimpleName
					)
					StringLiteralExpr
					(DoubleLiteralExpr
					)
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					NameExpr
						SimpleName
					StringLiteralExpr
					(ThisExpr
					)
					StringLiteralExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
)

