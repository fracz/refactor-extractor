// As the set of filtered values can be large, parsing them as longs should be done only if needed, and only once.
// Pass in a common long predicate supplier to all filters created by .toFilter(), so that
// we only compute the long hashset/array once per query.
// This supplier must be thread-safe, since this DimFilter will be accessed in the query runners.
private Supplier<DruidLongPredicate> getLongPredicateSupplier() {
    return new Supplier<DruidLongPredicate>() {

        private final Object initLock = new Object();

        private DruidLongPredicate predicate;

        private void initLongValues() {
            if (predicate != null) {
                return;
            }
            synchronized (initLock) {
                if (predicate != null) {
                    return;
                }
                LongArrayList longs = new LongArrayList(values.size());
                for (String value : values) {
                    final Long longValue = DimensionHandlerUtils.getExactLongFromDecimalString(value);
                    if (longValue != null) {
                        longs.add(longValue);
                    }
                }
                if (longs.size() > NUMERIC_HASHING_THRESHOLD) {
                    final LongOpenHashSet longHashSet = new LongOpenHashSet(longs);
                    predicate = new DruidLongPredicate() {

                        @Override
                        public boolean applyLong(long input) {
                            return longHashSet.contains(input);
                        }
                    };
                } else {
                    final long[] longArray = longs.toLongArray();
                    Arrays.sort(longArray);
                    predicate = new DruidLongPredicate() {

                        @Override
                        public boolean applyLong(long input) {
                            return Arrays.binarySearch(longArray, input) >= 0;
                        }
                    };
                }
            }
        }

        @Override
        public DruidLongPredicate get() {
            initLongValues();
            return predicate;
        }
    };
}||||||||// As the set of filtered values can be large, parsing them as longs should be done only if needed, and only once.
// Pass in a common long predicate supplier to all filters created by .toFilter(), so that
// we only compute the long hashset/array once per query.
// This supplier must be thread-safe, since this DimFilter will be accessed in the query runners.
private Supplier<DruidLongPredicate> getLongPredicateSupplier() {
    return new Supplier<DruidLongPredicate>() {

        private final Object initLock = new Object();

        private DruidLongPredicate predicate;

        private void initLongValues() {
            if (predicate != null) {
                return;
            }
            synchronized (initLock) {
                if (predicate != null) {
                    return;
                }
                LongArrayList longs = new LongArrayList(values.size());
                for (String value : values) {
                    final Long longValue = DimensionHandlerUtils.getExactLongFromDecimalString(value);
                    if (longValue != null) {
                        longs.add(longValue);
                    }
                }
                if (longs.size() > NUMERIC_HASHING_THRESHOLD) {
                    final LongOpenHashSet longHashSet = new LongOpenHashSet(longs);
                    predicate = input -> longHashSet.contains(input);
                } else {
                    final long[] longArray = longs.toLongArray();
                    Arrays.sort(longArray);
                    predicate = input -> Arrays.binarySearch(longArray, input) >= 0;
                }
            }
        }

        @Override
        public DruidLongPredicate get() {
            initLongValues();
            return predicate;
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ReturnStmt
								)
							)
						)
						(SynchronizedStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ReturnStmt
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ObjectCreationExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ForeachStmt
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
									NameExpr
										SimpleName
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ArrayType
														(PrimitiveType
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(ReturnStmt
																(BinaryExpr
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	(IntegerLiteralExpr
																	)
																)
															)
														)
														(PrimitiveType
														)
														SimpleName
														(Parameter
															SimpleName
															(PrimitiveType
															)
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(ReturnStmt
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
														(PrimitiveType
														)
														SimpleName
														(Parameter
															SimpleName
															(PrimitiveType
															)
														)
														(MarkerAnnotationExpr
															Name
														)
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
								)
							)
							NameExpr
								SimpleName
						)
					)
					(VoidType
					)
					SimpleName
				)
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(FieldDeclaration
					(VariableDeclarator
						(ObjectCreationExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(FieldDeclaration
					(VariableDeclarator
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ReturnStmt
								)
							)
						)
						(SynchronizedStmt
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ReturnStmt
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(ObjectCreationExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(ClassOrInterfaceType
													SimpleName
												)
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ForeachStmt
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
									NameExpr
										SimpleName
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ArrayType
														(PrimitiveType
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(LambdaExpr
													(ExpressionStmt
														(BinaryExpr
															(MethodCallExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
																SimpleName
																NameExpr
																	SimpleName
															)
															(IntegerLiteralExpr
															)
														)
													)
													(Parameter
														SimpleName
														(UnknownType
														)
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(ObjectCreationExpr
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(LambdaExpr
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(Parameter
														SimpleName
														(UnknownType
														)
													)
												)
											)
										)
									)
								)
							)
							NameExpr
								SimpleName
						)
					)
					(VoidType
					)
					SimpleName
				)
				(MethodDeclaration
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
					SimpleName
					(MarkerAnnotationExpr
						Name
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	LineComment
)

