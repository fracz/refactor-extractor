/**
 * Nano time should not be confused with wall time. Nano time is only mean to compute time
 * differences. Because of this, we shift the time returned by 1000s, to test that the users
 * of this class do not rely on nanoTime == currentTimeMillis.
 */
@Override
public long nanoTime() {
    return TimeUnit.MILLISECONDS.toNanos(currentTimeMillis) + TimeUnit.SECONDS.toNanos(1000);
}||||||||/**
 * Nano time should not be confused with wall time. Nano time is only mean to compute time
 * differences. Because of this, we shift the time returned by 1000s, to test that the users
 * of this class do not rely on nanoTime == currentTimeMillis.
 */
@Override
public long nanoTime() {
    return TimeUnit.MILLISECONDS.toNanos(currentTimeMillis.get()) + TimeUnit.SECONDS.toNanos(1000);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(BinaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(BinaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					(IntegerLiteralExpr
					)
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

