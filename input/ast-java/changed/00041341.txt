private boolean runIdleOptimization(final JobParameters jobParams, final PackageManagerService pm, final ArraySet<String> pkgs) {
    // If post-boot update is still running, request that it exits early.
    mExitPostBootUpdate.set(true);
    mAbortIdleOptimization.set(false);
    final long lowThreshold = getLowStorageThreshold();
    new Thread("BackgroundDexOptService_IdleOptimization") {

        @Override
        public void run() {
            for (String pkg : pkgs) {
                if (mAbortIdleOptimization.get()) {
                    // JobScheduler requested an early abort.
                    return;
                }
                if (sFailedPackageNames.contains(pkg)) {
                    // Skip previously failing package
                    continue;
                }
                long usableSpace = dataDir.getUsableSpace();
                if (usableSpace < lowThreshold) {
                    // Rather bail than completely fill up the disk.
                    Log.w(TAG, "Aborting background dex opt job due to low storage: " + usableSpace);
                    break;
                }
                // never returns.
                synchronized (sFailedPackageNames) {
                    sFailedPackageNames.add(pkg);
                }
                // concurrent jobs because PackageDexOptimizer.performDexOpt is synchronized.
                if (pm.performDexOpt(pkg, /* checkProfiles */
                true, PackageManagerService.REASON_BACKGROUND_DEXOPT, /* force */
                false)) {
                    // Dexopt succeeded, remove package from the list of failing ones.
                    synchronized (sFailedPackageNames) {
                        sFailedPackageNames.remove(pkg);
                    }
                }
            }
            // Ran to completion, so we abandon our timeslice and do not reschedule.
            jobFinished(jobParams, /* reschedule */
            false);
        }
    }.start();
    return true;
}||||||||private boolean runIdleOptimization(final JobParameters jobParams, final PackageManagerService pm, final ArraySet<String> pkgs) {
    new Thread("BackgroundDexOptService_IdleOptimization") {

        @Override
        public void run() {
            idleOptimization(jobParams, pm, pkgs);
        }
    }.start();
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ForeachStmt
								(BlockStmt
									(IfStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ReturnStmt
												LineComment
											)
										)
									)
									(IfStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ContinueStmt
												LineComment
											)
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
											(BreakStmt
											)
										)
									)
									(SynchronizedStmt
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										NameExpr
											SimpleName
										LineComment
									)
									(IfStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
												(BlockComment
												)
											)
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(BooleanLiteralExpr
												(BlockComment
												)
											)
											SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(SynchronizedStmt
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												NameExpr
													SimpleName
												LineComment
											)
										)
										LineComment
									)
								)
								NameExpr
									SimpleName
								(VariableDeclarationExpr
									(VariableDeclarator
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
										(BlockComment
										)
									)
									SimpleName
								)
								LineComment
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
)

