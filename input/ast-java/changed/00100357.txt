// protected void beginTextScreenMode() {
// loadPixels();
// }
// protected void endTextScreenMode() {
// updatePixels();
// }
// ////////////////////////////////////////////////////////////
// TEXT
// None of the variations of text() are overridden from PGraphics.
// ////////////////////////////////////////////////////////////
// TEXT IMPL
// protected void textLineAlignImpl(char buffer[], int start, int stop,
// float x, float y)
@Override
protected void textLineImpl(char[] buffer, int start, int stop, float x, float y) {
    Font font = (Font) textFont.getNative();
    // if (font != null && (textFont.isStream() || hints[ENABLE_NATIVE_FONTS])) {
    if (font != null) {
        /*
      // save the current setting for text smoothing. note that this is
      // different from the smooth() function, because the font smoothing
      // is controlled when the font is created, not now as it's drawn.
      // fixed a bug in 0116 that handled this incorrectly.
      Object textAntialias =
        g2.getRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING);

      // override the current text smoothing setting based on the font
      // (don't change the global smoothing settings)
      g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
                          textFont.smooth ?
                          RenderingHints.VALUE_ANTIALIAS_ON :
                          RenderingHints.VALUE_ANTIALIAS_OFF);
      */
        Object antialias = g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
        if (antialias == null) {
            // if smooth() and noSmooth() not called, this will be null (0120)
            antialias = RenderingHints.VALUE_ANTIALIAS_DEFAULT;
        }
        // override the current smoothing setting based on the font
        // also changes global setting for antialiasing, but this is because it's
        // not possible to enable/disable them independently in some situations.
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, textFont.smooth ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);
        g2.setColor(fillColorObject);
        int length = stop - start;
        g2.drawChars(buffer, start, length, (int) (x + 0.5f), (int) (y + 0.5f));
        // better to use round here? also, drawChars now just calls drawString
        // g2.drawString(new String(buffer, start, stop - start), Math.round(x), Math.round(y));
        // better to use drawString() with floats? (nope, draws the same)
        // g2.drawString(new String(buffer, start, length), x, y);
        // this didn't seem to help the scaling issue, and creates garbage
        // because of a fairly heavyweight new temporary object
        // java.awt.font.GlyphVector gv =
        // font.createGlyphVector(g2.getFontRenderContext(), new String(buffer, start, stop - start));
        // g2.drawGlyphVector(gv, x, y);
        // return to previous smoothing state if it was changed
        // g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, textAntialias);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, antialias);
    } else {
        // otherwise just do the default
        super.textLineImpl(buffer, start, stop, x, y);
    }
}||||||||// protected void beginTextScreenMode() {
// loadPixels();
// }
// protected void endTextScreenMode() {
// updatePixels();
// }
// ////////////////////////////////////////////////////////////
// TEXT
// None of the variations of text() are overridden from PGraphics.
// ////////////////////////////////////////////////////////////
// TEXT IMPL
// protected void textLineAlignImpl(char buffer[], int start, int stop,
// float x, float y)
@Override
protected void textLineImpl(char[] buffer, int start, int stop, float x, float y) {
    Font font = (Font) textFont.getNative();
    // if (font != null && (textFont.isStream() || hints[ENABLE_NATIVE_FONTS])) {
    if (font != null) {
        /*
      // save the current setting for text smoothing. note that this is
      // different from the smooth() function, because the font smoothing
      // is controlled when the font is created, not now as it's drawn.
      // fixed a bug in 0116 that handled this incorrectly.
      Object textAntialias =
        g2.getRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING);

      // override the current text smoothing setting based on the font
      // (don't change the global smoothing settings)
      g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,
                          textFont.smooth ?
                          RenderingHints.VALUE_ANTIALIAS_ON :
                          RenderingHints.VALUE_ANTIALIAS_OFF);
      */
        Object antialias = g2.getRenderingHint(RenderingHints.KEY_ANTIALIASING);
        if (antialias == null) {
            // if smooth() and noSmooth() not called, this will be null (0120)
            antialias = RenderingHints.VALUE_ANTIALIAS_DEFAULT;
        }
        // override the current smoothing setting based on the font
        // also changes global setting for antialiasing, but this is because it's
        // not possible to enable/disable them independently in some situations.
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, textFont.smooth ? RenderingHints.VALUE_ANTIALIAS_ON : RenderingHints.VALUE_ANTIALIAS_OFF);
        g2.setColor(fillColorObject);
        int length = stop - start;
        if (length != 0) {
            g2.drawChars(buffer, start, length, (int) (x + 0.5f), (int) (y + 0.5f));
        // better to use round here? also, drawChars now just calls drawString
        // g2.drawString(new String(buffer, start, stop - start), Math.round(x), Math.round(y));
        // better to use drawString() with floats? (nope, draws the same)
        // g2.drawString(new String(buffer, start, length), x, y);
        // this didn't seem to help the scaling issue, and creates garbage
        // because of a fairly heavyweight new temporary object
        // java.awt.font.GlyphVector gv =
        // font.createGlyphVector(g2.getFontRenderContext(), new String(buffer, start, stop - start));
        // g2.drawGlyphVector(gv, x, y);
        }
        // return to previous smoothing state if it was changed
        // g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, textAntialias);
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, antialias);
    } else {
        // otherwise just do the default
        super.textLineImpl(buffer, start, stop, x, y);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						(SuperExpr
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockComment
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ConditionalExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(CastExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(DoubleLiteralExpr
									)
								)
							)
							(PrimitiveType
							)
						)
						(CastExpr
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(DoubleLiteralExpr
									)
								)
							)
							(PrimitiveType
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						(SuperExpr
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockComment
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ConditionalExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								(CastExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(DoubleLiteralExpr
											)
										)
									)
									(PrimitiveType
									)
								)
								(CastExpr
									(EnclosedExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(DoubleLiteralExpr
											)
										)
									)
									(PrimitiveType
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

