/**
 * See {@link RuleContext#getPrerequisite(String, Mode)}.
 */
@SkylarkCallable(name = "target", structField = true, doc = "A <code>struct</code> containing prerequisite targets defined in label type " + "attributes. The struct fields correspond to the attribute names. The struct value " + "is always a <code>target</code> or <code>None</code>. If an optional attribute " + "is not specified in the rule, the corresponding struct value is <code>None</code>.")
public SkylarkClassObject getTarget() {
    return targetObject;
}||||||||/**
 * See {@link RuleContext#getPrerequisite(String, Mode)}.
 */
@SkylarkCallable(name = "target", structField = true, doc = "A <code>struct</code> containing prerequisite targets defined in label type " + "attributes. The struct fields correspond to the attribute names. The struct value " + "is always a <a href=\"#modules.Target\"><code>Target</code></a> or <code>None</code>. " + "If an optional attribute is not specified in the rule, the corresponding struct " + "value is <code>None</code>.")
public SkylarkClassObject getTarget() {
    return targetObject;
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		(MemberValuePair
			SimpleName
			(BooleanLiteralExpr
			)
		)
		(MemberValuePair
			SimpleName
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
			)
		)
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			StringLiteralExpr
		)
		(MemberValuePair
			SimpleName
			(BooleanLiteralExpr
			)
		)
		(MemberValuePair
			SimpleName
			(BinaryExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				StringLiteralExpr
			)
		)
		Name
	)
	(JavadocComment
	)
)

