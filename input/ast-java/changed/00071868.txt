// Trade-offs about property behavior on loose object types:
// We never mark properties as optional on loose objects. The reason is that
// we cannot know for sure when a property is optional or not.
// Eg, when we see an assignment to a loose obj
// obj.p1 = 123;
// we cannot know if obj already has p1, or if this is a property creation.
// If the assignment is inside an IF branch, we should not say after the IF
// that p1 is optional. But as a consequence, this means that any property we
// see on a loose object might be optional. That's why we don't warn about
// possibly-inexistent properties on loose objects.
// Last, say we infer a loose object type with a property p1 for a formal
// parameter of a function f. If we pass a non-loose object to f that does not
// have a p1, we warn. This may create spurious warnings, if p1 is optional,
// but mostly it catches real bugs.
private ObjectType withLoose() {
    if (isLoose() || // Don't loosen nominal types
    this.nominalType != null && this.nominalType.isClassy() || // Don't loosen namespaces
    this.ns != null) {
        return this;
    }
    FunctionType fn = this.fn == null ? null : this.fn.withLoose();
    PersistentMap<String, Property> newProps = PersistentMap.create();
    for (Map.Entry<String, Property> propsEntry : this.props.entrySet()) {
        String pname = propsEntry.getKey();
        Property prop = propsEntry.getValue();
        // It's wrong to warn about a possibly absent property on loose objects.
        newProps = newProps.with(pname, prop.withRequired());
    }
    // No need to call makeObjectType; we know that the new object is inhabitable.
    return new ObjectType(this.nominalType, newProps, fn, null, true, this.objectKind);
}||||||||// Trade-offs about property behavior on loose object types:
// We never mark properties as optional on loose objects. The reason is that
// we cannot know for sure when a property is optional or not.
// Eg, when we see an assignment to a loose obj
// obj.p1 = 123;
// we cannot know if obj already has p1, or if this is a property creation.
// If the assignment is inside an IF branch, we should not say after the IF
// that p1 is optional. But as a consequence, this means that any property we
// see on a loose object might be optional. That's why we don't warn about
// possibly-inexistent properties on loose objects.
// Last, say we infer a loose object type with a property p1 for a formal
// parameter of a function f. If we pass a non-loose object to f that does not
// have a p1, we warn. This may create spurious warnings, if p1 is optional,
// but mostly it catches real bugs.
private ObjectType withLoose() {
    if (isLoose() || // Don't loosen nominal types
    this.nominalType != null && this.nominalType.isClassy() || // Don't loosen namespaces
    this.ns != null) {
        return this;
    }
    FunctionType fn = this.fn == null ? null : this.fn.withLoose();
    PersistentMap<String, Property> newProps = PersistentMap.create();
    for (Map.Entry<String, Property> propsEntry : this.props.entrySet()) {
        String pname = propsEntry.getKey();
        Property prop = propsEntry.getValue();
        // It's wrong to warn about a possibly absent property on loose objects.
        newProps = newProps.with(pname, prop.withRequired());
    }
    // No need to call makeObjectType; we know that the new object is inhabitable.
    return new ObjectType(this.commonTypes, this.nominalType, newProps, fn, null, true, this.objectKind);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
						LineComment
					)
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					NullLiteralExpr
					LineComment
				)
			)
			(BlockStmt
				(ReturnStmt
					(ThisExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
						NullLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(MethodCallExpr
				SimpleName
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NullLiteralExpr
				(BooleanLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
					)
					(BinaryExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
						LineComment
					)
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					NullLiteralExpr
					LineComment
				)
			)
			(BlockStmt
				(ReturnStmt
					(ThisExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ConditionalExpr
						(BinaryExpr
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								(ThisExpr
								)
							)
						)
						NullLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(MethodCallExpr
				SimpleName
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NullLiteralExpr
				(BooleanLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)

