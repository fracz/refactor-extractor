/**
 * Registers {@link org.springframework.context.annotation.Configuration configuration classes}
 * in the supplied {@link GenericApplicationContext context} from the specified
 * class names.
 *
 * <p>Each class name must be the <em>fully qualified class name</em> of an
 * annotated configuration class, component, or feature specification. An
 * {@link AnnotatedBeanDefinitionReader} is used to register the appropriate
 * bean definitions.
 *
 * <p>Note that this method does not call {@link #createBeanDefinitionReader}
 * since <code>AnnotatedBeanDefinitionReader</code> is not an instance of
 * {@link BeanDefinitionReader}.
 *
 * @param context the context in which the configuration classes should be registered
 * @param classNames the names of configuration classes to register in the context
 * @throws IllegalArgumentException if a supplied class name does not represent a class
 */
@Override
protected void loadBeanDefinitions(GenericApplicationContext context, String... classNames) {
    Class<?>[] configClasses = new Class<?>[classNames.length];
    for (int i = 0; i < classNames.length; i++) {
        String className = classNames[i];
        try {
            configClasses[i] = (Class<?>) context.getClassLoader().loadClass(className);
        } catch (ClassNotFoundException e) {
            throw new IllegalArgumentException(String.format("The supplied class name [%s] does not represent a class.", className), e);
        }
    }
    if (logger.isDebugEnabled()) {
        logger.debug("Registering configuration classes: " + ObjectUtils.nullSafeToString(configClasses));
    }
    new AnnotatedBeanDefinitionReader(context).register(configClasses);
}||||||||/**
 * TODO Update documentation regarding SmartContextLoader SPI.
 *
 * <p>
 * Registers {@link org.springframework.context.annotation.Configuration configuration classes}
 * in the supplied {@link GenericApplicationContext context} from the specified
 * class names.
 *
 * <p>Each class name must be the <em>fully qualified class name</em> of an
 * annotated configuration class, component, or feature specification. An
 * {@link AnnotatedBeanDefinitionReader} is used to register the appropriate
 * bean definitions.
 *
 * <p>Note that this method does not call {@link #createBeanDefinitionReader}
 * since <code>AnnotatedBeanDefinitionReader</code> is not an instance of
 * {@link BeanDefinitionReader}.
 *
 * @param context the context in which the configuration classes should be registered
 * @param classNames the names of configuration classes to register in the context
 * @throws IllegalArgumentException if a supplied class name does not represent a class
 */
@Override
protected void loadBeanDefinitions(GenericApplicationContext context, MergedContextConfiguration mergedContextConfiguration) {
    Class<?>[] configClasses = mergedContextConfiguration.getClasses();
    if (logger.isDebugEnabled()) {
        logger.debug("Registering configuration classes: " + ObjectUtils.nullSafeToString(configClasses));
    }
    new AnnotatedBeanDefinitionReader(context).register(configClasses);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
							)
						)
						(ArrayCreationLevel
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
							)
						)
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(ObjectCreationExpr
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(CastExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ClassOrInterfaceType
										SimpleName
										(WildcardType
										)
									)
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
							)
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(ObjectCreationExpr
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

