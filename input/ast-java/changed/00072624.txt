/**
 * Returns a supplier that caches the instance supplied by the delegate and
 * removes the cached value after the specified time has passed. Subsequent
 * calls to {@code get()} return the cached value if the expiration time has
 * not passed. After the expiration time, a new value is retrieved, cached,
 * and returned. See:
 * <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a>
 *
 * <p>The returned supplier is thread-safe. The supplier's serialized form
 * does not contain the cached value, which will be recalculated when {@code
 * get()} is called on the reserialized instance.
 *
 * @param duration the length of time after a value is created that it
 * should stop being returned by subsequent {@code get()} calls
 * @param unit the unit that {@code duration} is expressed in
 * @throws IllegalArgumentException if {@code duration} is not positive
 * @since 2
 */
@Beta
public static <T> Supplier<T> memoizeWithExpiration(Supplier<T> delegate, long duration, TimeUnit unit) {
    return new ExpiringMemoizingSupplier<T>(delegate, duration, unit);
}||||||||/**
 * Returns a supplier that caches the instance supplied by the delegate and
 * removes the cached value after the specified time has passed. Subsequent
 * calls to {@code get()} return the cached value if the expiration time has
 * not passed. After the expiration time, a new value is retrieved, cached,
 * and returned. See:
 * <a href="http://en.wikipedia.org/wiki/Memoization">memoization</a>
 *
 * <p>The returned supplier is thread-safe. The supplier's serialized form
 * does not contain the cached value, which will be recalculated when {@code
 * get()} is called on the reserialized instance.
 *
 * @param duration the length of time after a value is created that it
 * should stop being returned by subsequent {@code get()} calls
 * @param unit the unit that {@code duration} is expressed in
 * @throws IllegalArgumentException if {@code duration} is not positive
 * @since 2
 */
public static <T> Supplier<T> memoizeWithExpiration(Supplier<T> delegate, long duration, TimeUnit unit) {
    return new ExpiringMemoizingSupplier<T>(delegate, duration, unit);
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

