/**
 * Reads the value up to but not including any delimiter characters. This
 * does not consume the delimiter character.
 *
 * @param assignOffsetsOnly true for this method to only set the valuePos
 * and valueLength fields and return a null result. This only works if
 * the literal is short; a string is returned otherwise.
 */
private String nextLiteral(boolean assignOffsetsOnly) throws IOException {
    StringBuilder builder = null;
    valuePos = -1;
    valueLength = 0;
    int i = 0;
    findNonLiteralCharacter: while (true) {
        for (; pos + i < limit; i++) {
            switch(buffer[pos + i]) {
                case '/':
                case '\\':
                case ';':
                case '#':
                case '=':
                    // fall-through
                    checkLenient();
                case '{':
                case '}':
                case '[':
                case ']':
                case ':':
                case ',':
                case ' ':
                case '\t':
                case '\f':
                case '\r':
                case '\n':
                    break findNonLiteralCharacter;
            }
        }
        /*
             * Attempt to load the entire literal into the buffer at once. If
             * we run out of input, add a non-literal character at the end so
             * that decoding doesn't need to do bounds checks.
             */
        if (i < buffer.length) {
            if (fillBuffer(i + 1)) {
                continue;
            } else {
                buffer[limit] = '\0';
                break;
            }
        }
        // use a StringBuilder when the value is too long. It must be an unquoted string.
        if (builder == null) {
            builder = new StringBuilder();
        }
        builder.append(buffer, pos, i);
        valueLength += i;
        pos += i;
        i = 0;
        if (!fillBuffer(1)) {
            break;
        }
    }
    String result;
    if (assignOffsetsOnly && builder == null) {
        valuePos = pos;
        result = null;
    } else if (skipping) {
        result = "skipped!";
    } else if (builder == null) {
        result = new String(buffer, pos, i);
    } else {
        builder.append(buffer, pos, i);
        result = builder.toString();
    }
    valueLength += i;
    pos += i;
    return result;
}||||||||/**
 * Reads the value up to but not including any delimiter characters. This
 * does not consume the delimiter character.
 *
 * @param assignOffsetsOnly true for this method to only set the valuePos
 * and valueLength fields and return a null result. This only works if
 * the literal is short; a string is returned otherwise.
 */
private String nextLiteral(boolean assignOffsetsOnly) throws IOException {
    StringBuilder builder = null;
    valuePos = -1;
    valueLength = 0;
    int i = 0;
    findNonLiteralCharacter: while (true) {
        for (; pos + i < limit; i++) {
            switch(buffer[pos + i]) {
                case '/':
                case '\\':
                case ';':
                case '#':
                case '=':
                    // fall-through
                    checkLenient();
                case '{':
                case '}':
                case '[':
                case ']':
                case ':':
                case ',':
                case ' ':
                case '\t':
                case '\f':
                case '\r':
                case '\n':
                    break findNonLiteralCharacter;
            }
        }
        /*
             * Attempt to load the entire literal into the buffer at once. If
             * we run out of input, add a non-literal character at the end so
             * that decoding doesn't need to do bounds checks.
             */
        if (i < buffer.length) {
            if (fillBuffer(i + 1)) {
                continue;
            } else {
                buffer[limit] = '\0';
                break;
            }
        }
        // use a StringBuilder when the value is too long. It must be an unquoted string.
        if (builder == null) {
            builder = new StringBuilder();
        }
        builder.append(buffer, pos, i);
        valueLength += i;
        pos += i;
        i = 0;
        if (!fillBuffer(1)) {
            break;
        }
    }
    String result;
    if (assignOffsetsOnly && builder == null) {
        valuePos = pos;
        result = null;
    } else if (skipping) {
        result = "skipped!";
    } else if (builder == null) {
        result = stringPool.get(buffer, pos, i);
    } else {
        builder.append(buffer, pos, i);
        result = builder.toString();
    }
    valueLength += i;
    pos += i;
    return result;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(LabeledStmt
			SimpleName
			(WhileStmt
				(BlockStmt
					(ForStmt
						(BlockStmt
							(SwitchStmt
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
										)
										LineComment
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
									(BreakStmt
										SimpleName
									)
								)
								(ArrayAccessExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
									)
									(BreakStmt
									)
								)
								(BlockStmt
									(ContinueStmt
									)
								)
							)
						)
						(BlockComment
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(IfStmt
						(UnaryExpr
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
							)
						)
						(BlockStmt
							(BreakStmt
							)
						)
					)
				)
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(IfStmt
				NameExpr
					SimpleName
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							StringLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(UnaryExpr
					(IntegerLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(LabeledStmt
			SimpleName
			(WhileStmt
				(BlockStmt
					(ForStmt
						(BlockStmt
							(SwitchStmt
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
										)
										LineComment
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
								)
								(SwitchEntryStmt
									(CharLiteralExpr
									)
									(BreakStmt
										SimpleName
									)
								)
								(ArrayAccessExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
							)
						)
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
									)
									(BreakStmt
									)
								)
								(BlockStmt
									(ContinueStmt
									)
								)
							)
						)
						(BlockComment
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(IfStmt
						(UnaryExpr
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
							)
						)
						(BlockStmt
							(BreakStmt
							)
						)
					)
				)
				(BooleanLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(IfStmt
				NameExpr
					SimpleName
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							StringLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

