private void initLongPredicate() {
    if (longPredicate != null) {
        return;
    }
    synchronized (initLock) {
        if (longPredicate != null) {
            return;
        }
        final Long valueAsLong = GuavaUtils.tryParseLong(value);
        if (valueAsLong == null) {
            longPredicate = DruidLongPredicate.ALWAYS_FALSE;
        } else {
            // store the primitive, so we don't unbox for every comparison
            final long unboxedLong = valueAsLong.longValue();
            longPredicate = new DruidLongPredicate() {

                @Override
                public boolean applyLong(long input) {
                    return input == unboxedLong;
                }
            };
        }
    }
}||||||||private void initLongPredicate() {
    if (longPredicate != null) {
        return;
    }
    synchronized (initLock) {
        if (longPredicate != null) {
            return;
        }
        final Long valueAsLong = GuavaUtils.tryParseLong(value);
        if (valueAsLong == null) {
            longPredicate = DruidLongPredicate.ALWAYS_FALSE;
        } else {
            // store the primitive, so we don't unbox for every comparison
            final long unboxedLong = valueAsLong.longValue();
            longPredicate = input -> input == unboxedLong;
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ReturnStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(PrimitiveType
										)
										SimpleName
										(Parameter
											SimpleName
											(PrimitiveType
											)
										)
										(MarkerAnnotationExpr
											Name
										)
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(LambdaExpr
									(ExpressionStmt
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(Parameter
										SimpleName
										(UnknownType
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
)

