/**
 * Stops running workspace runtime.
 *
 * <p>Stops all running machines one by one,
 * non-dev machines first. During the stop of the workspace
 * its runtime is accessible with {@link WorkspaceStatus#STOPPING stopping} status.
 * Workspace may be stopped only if its status is {@link WorkspaceStatus#RUNNING}.
 *
 * <p>If workspace has runtime with dev-machine running
 * and other machines starting then the runtime can still
 * be stopped which will also interrupt starting process.
 *
 * <p>Note that it doesn't provide any events for machines stop,
 * Machine API is responsible for it.
 *
 * @param workspaceId
 * identifier of workspace which should be stopped
 * @throws NotFoundException
 * when workspace with specified identifier is not running
 * @throws ServerException
 * when any error occurs during workspace stopping
 * @throws ConflictException
 * when running workspace status is different from {@link WorkspaceStatus#RUNNING}
 * @see MachineManager#destroy(String, boolean)
 * @see WorkspaceStatus#STOPPING
 */
public void stop(String workspaceId) throws NotFoundException, ServerException, ConflictException {
    // This check allows to exit with an appropriate exception before blocking on lock.
    // The double check is required as it is still possible to get unlucky timing
    // between locking and stopping workspace.
    ensurePreDestroyIsNotExecuted();
    acquireWriteLock(workspaceId);
    final WorkspaceRuntimeImpl runtime;
    try {
        ensurePreDestroyIsNotExecuted();
        final RuntimeDescriptor descriptor = descriptors.get(workspaceId);
        if (descriptor == null) {
            throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
        }
        if (descriptor.getRuntimeStatus() != WorkspaceStatus.RUNNING) {
            throw new ConflictException(format("Couldn't stop '%s' workspace because its status is '%s'. Workspace can be stopped only if it is 'RUNNING'", workspaceId, descriptor.getRuntimeStatus()));
        }
        // According to the WorkspaceStatus specification workspace runtime
        // must visible with STOPPING status until dev-machine is not stopped
        descriptor.setRuntimeStatus(WorkspaceStatus.STOPPING);
        // At this point of time starting queue must be removed
        // to prevent start of another machines which are not started yet.
        // In this case workspace start will be interrupted and
        // interruption will be reported, machine which is currently starting(if such exists)
        // will be destroyed by workspace starting thread.
        startQueues.remove(workspaceId);
        // Create deep  copy of the currently running workspace to prevent
        // out of the lock instance modifications and stale data effects
        runtime = new WorkspaceRuntimeImpl(descriptor.getRuntime());
    } finally {
        releaseWriteLock(workspaceId);
    }
    destroyRuntime(workspaceId, runtime);
}||||||||/**
 * Stops running workspace runtime.
 *
 * <p>Stops environment in an implementation specific way.
 * During the stop of the workspace its runtime is accessible with {@link WorkspaceStatus#STOPPING stopping} status.
 * Workspace may be stopped only if its status is {@link WorkspaceStatus#RUNNING}.
 *
 * @param workspaceId
 * identifier of workspace which should be stopped
 * @throws NotFoundException
 * when workspace with specified identifier is not running
 * @throws ServerException
 * when any error occurs during workspace stopping
 * @throws ConflictException
 * when running workspace status is different from {@link WorkspaceStatus#RUNNING}
 * @see CheEnvironmentEngine#stop(String)
 * @see WorkspaceStatus#STOPPING
 */
public void stop(String workspaceId) throws NotFoundException, ServerException, ConflictException {
    // This check allows to exit with an appropriate exception before blocking on lock.
    // The double check is required as it is still possible to get unlucky timing
    // between locking and stopping workspace.
    ensurePreDestroyIsNotExecuted();
    try (StripedLocks.WriteLock lock = stripedLocks.acquireWriteLock(workspaceId)) {
        ensurePreDestroyIsNotExecuted();
        WorkspaceState workspaceState = workspaces.get(workspaceId);
        if (workspaceState == null) {
            throw new NotFoundException("Workspace with id '" + workspaceId + "' is not running.");
        }
        if (workspaceState.status != WorkspaceStatus.RUNNING) {
            throw new ConflictException(format("Couldn't stop '%s' workspace because its status is '%s'. Workspace can be stopped only if it is 'RUNNING'", workspaceId, workspaceState.status));
        }
        workspaceState.status = WorkspaceStatus.STOPPING;
    }
    publishWorkspaceEvent(EventType.STOPPING, workspaceId, null);
    String error = null;
    try {
        environmentEngine.stop(workspaceId);
    } catch (ServerException | RuntimeException e) {
        error = e.getLocalizedMessage();
    } finally {
        try (StripedLocks.WriteLock lock = stripedLocks.acquireWriteLock(workspaceId)) {
            workspaces.remove(workspaceId);
        }
    }
    if (error == null) {
        publishWorkspaceEvent(EventType.STOPPED, workspaceId, null);
    } else {
        publishWorkspaceEvent(EventType.ERROR, workspaceId, error);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
			LineComment
		)
		(TryStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				NullLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(UnionType
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(TryStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						NullLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

