/**
 * Used to request space for some block file. return true if the worker successfully allocates
 * space for the block on block’s location, false if there is no enough space.
 *
 * @param userId the id of the client requesting space
 * @param blockId the id of the block to add the space to, this must be a temporary block
 * @param requestBytes the amount of bytes to add to the block
 */
public boolean requestSpace(long userId, long blockId, long requestBytes) {
    try {
        mWorker.requestSpace(userId, blockId, requestBytes);
        return true;
    } catch (Exception e) {
        LOG.error("Failed to request " + requestBytes + " bytes for block: " + blockId, e);
    }
    return false;
}||||||||/**
 * Used to request space for some block file. return true if the worker successfully allocates
 * space for the block on block’s location, false if there is no enough space.
 *
 * @param userId the id of the client requesting space
 * @param blockId the id of the block to add the space to, this must be a temporary block
 * @param requestBytes the amount of bytes to add to the block
 */
@Override
public boolean requestSpace(long userId, long blockId, long requestBytes) {
    try {
        mWorker.requestSpace(userId, blockId, requestBytes);
        return true;
    } catch (Exception e) {
        LOG.error("Failed to request " + requestBytes + " bytes for block: " + blockId, e);
    }
    return false;
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

