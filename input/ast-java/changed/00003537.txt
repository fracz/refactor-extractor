// todo[ann] fix and uncomment
// public void testStaticCallArguments() throws Exception { doTest("Impl", "Int", false); }
// public void testListArgs() throws Exception { doTest("Impl", "Int", false); }
// public void testCovariantReturnTypes() throws Exception { doTest("Impl", "Int", false); }
// public void testNewExpr() throws Exception { doTest("Impl", "Int", false); }
// public void testForEach1() throws Exception { doTest("Test.MyIterableImpl", "Test.MyIterable", false); }
// public void testForEach2() throws Exception { doTest("Test.MyIterableImpl", "Test.MyIterable", false); }
private void doTest(@NonNls final String className, @NonNls final String superClassName, final boolean replaceInstanceOf) throws Exception {
    doTest(new PerformAction() {

        @Override
        public void performAction(VirtualFile rootDir, VirtualFile rootAfter) throws Exception {
            TurnRefsToSuperTest.this.performAction(className, superClassName, replaceInstanceOf);
        }
    }, true);
}||||||||// todo[ann] fix and uncomment
// public void testStaticCallArguments() throws Exception { doTest("Impl", "Int", false); }
// public void testListArgs() throws Exception { doTest("Impl", "Int", false); }
// public void testCovariantReturnTypes() throws Exception { doTest("Impl", "Int", false); }
// public void testNewExpr() throws Exception { doTest("Impl", "Int", false); }
// public void testForEach1() throws Exception { doTest("Test.MyIterableImpl", "Test.MyIterable", false); }
// public void testForEach2() throws Exception { doTest("Test.MyIterableImpl", "Test.MyIterable", false); }
private void doTest(@NonNls final String className, @NonNls final String superClassName, final boolean replaceInstanceOf) throws Exception {
    doTest((rootDir, rootAfter) -> {
        TurnRefsToSuperTest.this.performAction(className, superClassName, replaceInstanceOf);
    }, true);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									(ThisExpr
										NameExpr
											SimpleName
									)
								)
							)
						)
						(VoidType
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(LambdaExpr
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								(ThisExpr
									NameExpr
										SimpleName
								)
							)
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				(BooleanLiteralExpr
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
)

