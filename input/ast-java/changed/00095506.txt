/**
 * Retrieve the record if any following the supported strategies:<br>
 * 0 = If found remove it (pop): the client (database instances) will push it back when finished or on close.<br>
 * 1 = Return the instance but keep a copy in 2-level cache; this could help highly-concurrent environment.
 *
 * @param iRID record identity
 * @return record if exists in cache, {@code null} otherwise
 */
protected ORecordInternal<?> retrieveRecord(final ORID iRID) {
    if (!isEnabled() || iRID.getClusterId() == excludedCluster)
        return null;
    final ORecordInternal<?> record;
    lock.lock();
    try {
        record = underlying.remove(iRID);
        if (record == null || record.isDirty())
            return null;
        if (strategy == STRATEGY.COPY_RECORD)
            // PUT BACK A CLONE (THIS UPDATE ALSO THE LRU)
            underlying.put((ORecordInternal<?>) record.flatCopy());
    } finally {
        lock.unlock();
    }
    return record;
}||||||||/**
 * Retrieve the record if any following the supported strategies:<br>
 * 0 = If found remove it (pop): the client (database instances) will push it back when finished or on close.<br>
 * 1 = Return the instance but keep a copy in 2-level cache; this could help highly-concurrent environment.
 *
 * @param iRID record identity
 * @return record if exists in cache, {@code null} otherwise
 */
protected ORecordInternal<?> retrieveRecord(final ORID iRID) {
    if (!isEnabled() || iRID.getClusterId() == excludedCluster)
        return null;
    final ORecordInternal<?> record;
    underlying.lock(iRID);
    try {
        record = underlying.remove(iRID);
        if (record == null || record.isDirty())
            return null;
        if (strategy == STRATEGY.COPY_RECORD)
            // PUT BACK A CLONE (THIS UPDATE ALSO THE LRU)
            underlying.put((ORecordInternal<?>) record.flatCopy());
    } finally {
        underlying.unlock(iRID);
    }
    return record;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				NullLiteralExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				NullLiteralExpr
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(CastExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
									(WildcardType
									)
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

