/**
 * A main program for using the parser with various options.
 * This program can be used for building and serializing
 * a parser from treebank data, for parsing sentences from a file
 * or URL using a serialized or text grammar parser,
 * and (mainly for parser quality testing)
 * for training and testing a parser on a treebank all in one go.
 *
 * <p>
 * Sample Usages:
 * <ul>
 * <li> <b>Train a parser (saved to <i>serializedGrammarFilename</i>)
 * from a directory of trees (<i>trainFilesPath</i>, with an optional <i>fileRange</i>, e.g., 0-1000):</b>
 * <code>java -mx1500m edu.stanford.nlp.parser.lexparser.LexicalizedParser [-v] -train trainFilesPath [fileRange] -saveToSerializedFile serializedGrammarFilename</code>
 * </li>
 *
 * <li> <b>Train a parser (not saved) from a directory of trees, and test it (reporting scores) on a directory of trees</b>
 * <code> java -mx1500m edu.stanford.nlp.parser.lexparser.LexicalizedParser [-v] -train trainFilesPath [fileRange] -testTreebank testFilePath [fileRange] </code>
 * </li>
 *
 * <li> <b>Parse one or more files, given a serialized grammar and a list of files</b>
 * <code>java -mx512m edu.stanford.nlp.parser.lexparser.LexicalizedParser [-v] serializedGrammarPath filename [filename] ...</code>
 * </li>
 *
 * <li> <b>Test and report scores for a serialized grammar on trees in an output directory</b>
 * <code>java -mx512m edu.stanford.nlp.parser.lexparser.LexicalizedParser [-v] -loadFromSerializedFile serializedGrammarPath -testTreebank testFilePath [fileRange]</code>
 * </li>
 * </ul>
 *
 * <p>
 * If the <code>serializedGrammarPath</code> ends in <code>.gz</code>,
 * then the grammar is written and read as a compressed file (GZip).
 * If the <code>serializedGrammarPath</code> is a URL, starting with
 * <code>http://</code>, then the parser is read from the URL.
 * A fileRange specifies a numeric value that must be included within a
 * filename for it to be used in training or testing (this works well with
 * most current treebanks).  It can be specified like a range of pages to be
 * printed, for instance as <code>200-2199</code> or
 * <code>1-300,500-725,9000</code> or just as <code>1</code> (if all your
 * trees are in a single file, just give a dummy argument such as
 * <code>0</code> or <code>1</code>).
 * The parser can write a grammar as either a serialized Java object file
 * or in a text format (or as both), specified with the following options:
 *
 * <p>
 * <code>java edu.stanford.nlp.parser.lexparser.LexicalizedParser
 * [-v] -train
 * trainFilesPath [fileRange] [-saveToSerializedFile grammarPath]
 * [-saveToTextFile grammarPath]</code><p>
 * If no files are supplied to parse, then a hardwired sentence
 * is parsed. <p>
 *
 * In the same position as the verbose flag (<code>-v</code>), many other
 * options can be specified.  The most useful to an end user are:
 * <UL>
 * <LI><code>-tLPP class</code> Specify a different
 * TreebankLangParserParams, for when using a different language or
 * treebank (the default is English Penn Treebank). <i>This option MUST occur
 * before any other language-specific options that are used (or else they
 * are ignored!).</i>
 * (It's usually a good idea to specify this option even when loading a
 * serialized grammar; it is necessary if the language pack specifies a
 * needed character encoding or you wish to specify language-specific
 * options on the command line.)</LI>
 * <LI><code>-encoding charset</code> Specify the character encoding of the
 * input and output files.  This will override the value in the
 * <code>TreebankLangParserParams</code>, provided this option appears
 * <i>after</i> any <code>-tLPP</code> option.</LI>
 * <LI><code>-tokenized</code> Says that the input is already separated
 * into whitespace-delimited tokens.  If this option is specified, any
 * tokenizer specified for the language is ignored, and a universal (Unicode)
 * tokenizer, which divides only on whitespace, is used.
 * Unless you also specify
 * <code>-escaper</code>, the tokens <i>must</i> all be correctly
 * tokenized tokens of the appropriate treebank for the parser to work
 * well (for instance, if using the Penn English Treebank, you must have
 * coded "(" as "-LRB-", "3/4" as "3\/4", etc.)</LI>
 * <li><code>-escaper class</code> Specify a class of type
 * {@link Function}&lt;List&lt;HasWord&gt;,List&lt;HasWord&gt;&gt; to do
 * customized escaping of tokenized text.  This class will be run over the
 * tokenized text and can fix the representation of tokens. For instance,
 * it could change "(" to "-LRB-" for the Penn English Treebank.  A
 * provided escaper that does such things for the Penn English Treebank is
 * <code>edu.stanford.nlp.process.PTBEscapingProcessor</code>
 * <li><code>-tokenizerFactory class</code> Specifies a
 * TokenizerFactory class to be used for tokenization</li>
 * <li><code>-tokenizerOptions options</code> Specifies options to a
 * TokenizerFactory class to be used for tokenization.   A comma-separated
 * list. For PTBTokenizer, options of interest include
 * <code>americanize=false</code> and <code>asciiQuotes</code> (for German).
 * Note that any choice of tokenizer options that conflicts with the
 * tokenization used in the parser training data will likely degrade parser
 * performance. </li>
 * <li><code>-sentences token </code> Specifies a token that marks sentence
 * boundaries.  A value of <code>newline</code> causes sentence breaking on
 * newlines.  A value of <code>onePerElement</code> causes each element
 * (using the XML <code>-parseInside</code> option) to be treated as a
 * sentence. All other tokens will be interpreted literally, and must be
 * exactly the same as tokens returned by the tokenizer.  For example,
 * you might specify "|||" and put that symbol sequence as a token between
 * sentences.
 * If no explicit sentence breaking option is chosen, sentence breaking
 * is done based on a set of language-particular sentence-ending patterns.
 * </li>
 * <LI><code>-parseInside element</code> Specifies that parsing should only
 * be done for tokens inside the indicated XML-style
 * elements (done as simple pattern matching, rather than XML parsing).
 * For example, if this is specified as <code>sentence</code>, then
 * the text inside the <code>sentence</code> element
 * would be parsed.
 * Using "-parseInside s" gives you support for the input format of
 * Charniak's parser. Sentences cannot span elements. Whether the
 * contents of the element are treated as one sentence or potentially
 * multiple sentences is controlled by the <code>-sentences</code> flag.
 * The default is potentially multiple sentences.
 * This option gives support for extracting and parsing
 * text from very simple SGML and XML documents, and is provided as a
 * user convenience for that purpose. If you want to really parse XML
 * documents before NLP parsing them, you should use an XML parser, and then
 * call to a LexicalizedParser on appropriate CDATA.
 * <LI><code>-tagSeparator char</code> Specifies to look for tags on words
 * following the word and separated from it by a special character
 * <code>char</code>.  For instance, many tagged corpora have the
 * representation "house/NN" and you would use <code>-tagSeparator /</code>.
 * Notes: This option requires that the input be pretokenized.
 * The separator has to be only a single character, and there is no
 * escaping mechanism. However, splitting is done on the <i>last</i>
 * instance of the character in the token, so that cases like
 * "3\/4/CD" are handled correctly.  The parser will in all normal
 * circumstances use the tag you provide, but will override it in the
 * case of very common words in cases where the tag that you provide
 * is not one that it regards as a possible tagging for the word.
 * The parser supports a format where only some of the words in a sentence
 * have a tag (if you are calling the parser programmatically, you indicate
 * them by having them implement the <code>HasTag</code> interface).
 * You can do this at the command-line by only having tags after some words,
 * but you are limited by the fact that there is no way to escape the
 * tagSeparator character.</LI>
 * <LI><code>-maxLength leng</code> Specify the longest sentence that
 * will be parsed (and hence indirectly the amount of memory
 * needed for the parser). If this is not specified, the parser will
 * try to dynamically grow its parse chart when long sentence are
 * encountered, but may run out of memory trying to do so.</LI>
 * <LI><code>-outputFormat styles</code> Choose the style(s) of output
 * sentences: <code>penn</code> for prettyprinting as in the Penn
 * treebank files, or <code>oneline</code> for printing sentences one
 * per line, <code>words</code>, <code>wordsAndTags</code>,
 * <code>dependencies</code>, <code>typedDependencies</code>,
 * or <code>typedDependenciesCollapsed</code>.
 * Multiple options may be specified as a comma-separated
 * list.  See TreePrint class for further documentation.</LI>
 * <LI><code>-outputFormatOptions</code> Provide options that control the
 * behavior of various <code>-outputFormat</code> choices, such as
 * <code>lexicalize</code>, <code>stem</code>, <code>markHeadNodes</code>,
 * or <code>xml</code>.
 * Options are specified as a comma-separated list.</LI>
 * <LI><code>-writeOutputFiles</code> Write output files corresponding
 * to the input files, with the same name but a <code>".stp"</code>
 * file extension.  The format of these files depends on the
 * <code>outputFormat</code> option.  (If not specified, output is sent
 * to stdout.)</LI>
 * <LI><code>-outputFilesExtension</code> The extension that is appended to
 * the filename that is being parsed to produce an output file name (with the
 * -writeOutputFiles option). The default is <code>stp</code>.  Don't
 * include the period.
 * <LI><code>-outputFilesDirectory</code> The directory in which output
 * files are written (when the -writeOutputFiles option is specified).
 * If not specified, output files are written in the same directory as the
 * input files.
 * <LI><code>-nthreads</code> Parsing files and testing on treebanks
 * can use multiple threads.  This option tells the parser how many
 * threads to use.  A negative number indicates to use as many
 * threads as the machine has cores.
 * </UL>
 * See also the package documentation for more details and examples of use.
 *
 * @param args Command line arguments, as above
 */
public static void main(String[] args) {
    boolean train = false;
    boolean saveToSerializedFile = false;
    boolean saveToTextFile = false;
    String serializedInputFileOrUrl = null;
    String textInputFileOrUrl = null;
    String serializedOutputFileOrUrl = null;
    String textOutputFileOrUrl = null;
    String treebankPath = null;
    Treebank testTreebank = null;
    Treebank tuneTreebank = null;
    String testPath = null;
    FileFilter testFilter = null;
    String tunePath = null;
    FileFilter tuneFilter = null;
    FileFilter trainFilter = null;
    String secondaryTreebankPath = null;
    double secondaryTreebankWeight = 1.0;
    FileFilter secondaryTrainFilter = null;
    // variables needed to process the files to be parsed
    TokenizerFactory<? extends HasWord> tokenizerFactory = null;
    String tokenizerOptions = null;
    String tokenizerFactoryClass = null;
    String tokenizerMethod = null;
    // whether or not the input file has already been tokenized
    boolean tokenized = false;
    Function<List<HasWord>, List<HasWord>> escaper = null;
    String tagDelimiter = null;
    String sentenceDelimiter = null;
    String elementDelimiter = null;
    int argIndex = 0;
    if (args.length < 1) {
        System.err.println("Basic usage (see Javadoc for more): java edu.stanford.nlp.parser.lexparser.LexicalizedParser parserFileOrUrl filename*");
        return;
    }
    Options op = new Options();
    List<String> optionArgs = new ArrayList<String>();
    String encoding = null;
    // while loop through option arguments
    while (argIndex < args.length && args[argIndex].charAt(0) == '-') {
        if (args[argIndex].equalsIgnoreCase("-train") || args[argIndex].equalsIgnoreCase("-trainTreebank")) {
            train = true;
            Pair<String, FileFilter> treebankDescription = ArgUtils.getTreebankDescription(args, argIndex, "-test");
            argIndex = argIndex + ArgUtils.numSubArgs(args, argIndex) + 1;
            treebankPath = treebankDescription.first();
            trainFilter = treebankDescription.second();
        } else if (args[argIndex].equalsIgnoreCase("-train2")) {
            // TODO: we could use the fully expressive -train options if
            // we add some mechanism for returning leftover options from
            // ArgUtils.getTreebankDescription
            // train = true;     // cdm july 2005: should require -train for this
            int numSubArgs = ArgUtils.numSubArgs(args, argIndex);
            argIndex++;
            if (numSubArgs < 2) {
                throw new RuntimeException("Error: -train2 <treebankPath> [<ranges>] <weight>.");
            }
            secondaryTreebankPath = args[argIndex++];
            secondaryTrainFilter = (numSubArgs == 3) ? new NumberRangesFileFilter(args[argIndex++], true) : null;
            secondaryTreebankWeight = Double.parseDouble(args[argIndex++]);
        } else if (args[argIndex].equalsIgnoreCase("-tLPP") && (argIndex + 1 < args.length)) {
            try {
                op.tlpParams = (TreebankLangParserParams) Class.forName(args[argIndex + 1]).newInstance();
            } catch (ClassNotFoundException e) {
                System.err.println("Class not found: " + args[argIndex + 1]);
                throw new RuntimeException(e);
            } catch (InstantiationException e) {
                System.err.println("Couldn't instantiate: " + args[argIndex + 1] + ": " + e.toString());
                throw new RuntimeException(e);
            } catch (IllegalAccessException e) {
                System.err.println("Illegal access" + e);
                throw new RuntimeException(e);
            }
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-encoding")) {
            // sets encoding for TreebankLangParserParams
            // redone later to override any serialized parser one read in
            encoding = args[argIndex + 1];
            op.tlpParams.setInputEncoding(encoding);
            op.tlpParams.setOutputEncoding(encoding);
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tokenized")) {
            tokenized = true;
            argIndex += 1;
        } else if (args[argIndex].equalsIgnoreCase("-escaper")) {
            try {
                escaper = ReflectionLoading.loadByReflection(args[argIndex + 1]);
            } catch (Exception e) {
                System.err.println("Couldn't instantiate escaper " + args[argIndex + 1] + ": " + e);
            }
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tokenizerOptions")) {
            tokenizerOptions = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tokenizerFactory")) {
            tokenizerFactoryClass = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tokenizerMethod")) {
            tokenizerMethod = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-sentences")) {
            sentenceDelimiter = args[argIndex + 1];
            if (sentenceDelimiter.equalsIgnoreCase("newline")) {
                sentenceDelimiter = "\n";
            }
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-parseInside")) {
            elementDelimiter = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tagSeparator")) {
            tagDelimiter = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-loadFromSerializedFile") || args[argIndex].equalsIgnoreCase("-model")) {
            // load the parser from a binary serialized file
            // the next argument must be the path to the parser file
            serializedInputFileOrUrl = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-loadFromTextFile")) {
            // load the parser from declarative text file
            // the next argument must be the path to the parser file
            textInputFileOrUrl = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-saveToSerializedFile")) {
            saveToSerializedFile = true;
            if (ArgUtils.numSubArgs(args, argIndex) < 1) {
                System.err.println("Missing path: -saveToSerialized filename");
            } else {
                serializedOutputFileOrUrl = args[argIndex + 1];
            }
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-saveToTextFile")) {
            // save the parser to declarative text file
            saveToTextFile = true;
            textOutputFileOrUrl = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-saveTrainTrees")) {
            // save the training trees to a binary file
            op.trainOptions.trainTreeFile = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-treebank") || args[argIndex].equalsIgnoreCase("-testTreebank") || args[argIndex].equalsIgnoreCase("-test")) {
            Pair<String, FileFilter> treebankDescription = ArgUtils.getTreebankDescription(args, argIndex, "-test");
            argIndex = argIndex + ArgUtils.numSubArgs(args, argIndex) + 1;
            testPath = treebankDescription.first();
            testFilter = treebankDescription.second();
        } else if (args[argIndex].equalsIgnoreCase("-tune")) {
            Pair<String, FileFilter> treebankDescription = ArgUtils.getTreebankDescription(args, argIndex, "-tune");
            argIndex = argIndex + ArgUtils.numSubArgs(args, argIndex) + 1;
            tunePath = treebankDescription.first();
            tuneFilter = treebankDescription.second();
        } else {
            int oldIndex = argIndex;
            argIndex = op.setOptionOrWarn(args, argIndex);
            for (int i = oldIndex; i < argIndex; i++) {
                optionArgs.add(args[i]);
            }
        }
    }
    // set up tokenizerFactory with options if provided
    if (tokenizerFactoryClass != null || tokenizerOptions != null) {
        try {
            if (tokenizerFactoryClass != null) {
                Class<TokenizerFactory<? extends HasWord>> clazz = ErasureUtils.uncheckedCast(Class.forName(tokenizerFactoryClass));
                Method factoryMethod;
                if (tokenizerOptions != null) {
                    factoryMethod = clazz.getMethod(tokenizerMethod != null ? tokenizerMethod : "newWordTokenizerFactory", String.class);
                    tokenizerFactory = ErasureUtils.uncheckedCast(factoryMethod.invoke(null, tokenizerOptions));
                } else {
                    factoryMethod = clazz.getMethod(tokenizerMethod != null ? tokenizerMethod : "newTokenizerFactory");
                    tokenizerFactory = ErasureUtils.uncheckedCast(factoryMethod.invoke(null));
                }
            } else {
                // have options but no tokenizer factory; default to PTB
                tokenizerFactory = PTBTokenizer.PTBTokenizerFactory.newWordTokenizerFactory(tokenizerOptions);
            }
        } catch (IllegalAccessException e) {
            System.err.println("Couldn't instantiate TokenizerFactory " + tokenizerFactoryClass + " with options " + tokenizerOptions);
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            System.err.println("Couldn't instantiate TokenizerFactory " + tokenizerFactoryClass + " with options " + tokenizerOptions);
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            System.err.println("Couldn't instantiate TokenizerFactory " + tokenizerFactoryClass + " with options " + tokenizerOptions);
            throw new RuntimeException(e);
        } catch (InvocationTargetException e) {
            System.err.println("Couldn't instantiate TokenizerFactory " + tokenizerFactoryClass + " with options " + tokenizerOptions);
            throw new RuntimeException(e);
        }
    }
    if (tuneFilter != null || tunePath != null) {
        if (tunePath == null) {
            if (treebankPath == null) {
                throw new RuntimeException("No tune treebank path specified...");
            } else {
                System.err.println("No tune treebank path specified.  Using train path: \"" + treebankPath + '\"');
                tunePath = treebankPath;
            }
        }
        tuneTreebank = op.tlpParams.testMemoryTreebank();
        tuneTreebank.loadPath(tunePath, tuneFilter);
    }
    if (!train && op.testOptions.verbose) {
        StringUtils.printErrInvocationString("LexicalizedParser", args);
    }
    // always initialized in next if-then-else block
    LexicalizedParser lp;
    if (train) {
        StringUtils.printErrInvocationString("LexicalizedParser", args);
        // so we train a parser using the treebank
        GrammarCompactor compactor = null;
        if (op.trainOptions.compactGrammar() == 3) {
            compactor = new ExactGrammarCompactor(op, false, false);
        }
        Treebank trainTreebank = makeTreebank(treebankPath, op, trainFilter);
        Treebank secondaryTrainTreebank = null;
        if (secondaryTreebankPath != null) {
            secondaryTrainTreebank = makeSecondaryTreebank(secondaryTreebankPath, op, secondaryTrainFilter);
        }
        List<List<TaggedWord>> extraTaggedWords = null;
        if (op.trainOptions.taggedFiles != null) {
            extraTaggedWords = new ArrayList<List<TaggedWord>>();
            List<TaggedFileRecord> fileRecords = TaggedFileRecord.createRecords(new Properties(), op.trainOptions.taggedFiles);
            for (TaggedFileRecord record : fileRecords) {
                for (List<TaggedWord> sentence : record.reader()) {
                    extraTaggedWords.add(sentence);
                }
            }
        }
        lp = getParserFromTreebank(trainTreebank, secondaryTrainTreebank, secondaryTreebankWeight, compactor, op, tuneTreebank, extraTaggedWords);
    } else if (textInputFileOrUrl != null) {
        // so we load the parser from a text grammar file
        lp = getParserFromTextFile(textInputFileOrUrl, op);
    } else {
        // so we load a serialized parser
        if (serializedInputFileOrUrl == null && argIndex < args.length) {
            // the next argument must be the path to the serialized parser
            serializedInputFileOrUrl = args[argIndex];
            argIndex++;
        }
        if (serializedInputFileOrUrl == null) {
            System.err.println("No grammar specified, exiting...");
            return;
        }
        String[] extraArgs = new String[optionArgs.size()];
        extraArgs = optionArgs.toArray(extraArgs);
        try {
            lp = loadModel(serializedInputFileOrUrl, op, extraArgs);
            op = lp.op;
        } catch (IllegalArgumentException e) {
            System.err.println("Error loading parser, exiting...");
            throw e;
        }
    }
    // OVERWRITTEN BY ONE SPECIFIED IN SERIALIZED PARSER
    if (encoding != null) {
        op.tlpParams.setInputEncoding(encoding);
        op.tlpParams.setOutputEncoding(encoding);
    }
    if (testFilter != null || testPath != null) {
        if (testPath == null) {
            if (treebankPath == null) {
                throw new RuntimeException("No test treebank path specified...");
            } else {
                System.err.println("No test treebank path specified.  Using train path: \"" + treebankPath + '\"');
                testPath = treebankPath;
            }
        }
        testTreebank = op.tlpParams.testMemoryTreebank();
        testTreebank.loadPath(testPath, testFilter);
    }
    op.trainOptions.sisterSplitters = Generics.newHashSet(Arrays.asList(op.tlpParams.sisterSplitters()));
    // Now what do we do with the parser we've made
    if (saveToTextFile) {
        // save the parser to textGrammar format
        if (textOutputFileOrUrl != null) {
            lp.saveParserToTextFile(textOutputFileOrUrl);
        } else {
            System.err.println("Usage: must specify a text grammar output path");
        }
    }
    if (saveToSerializedFile) {
        if (serializedOutputFileOrUrl != null) {
            lp.saveParserToSerialized(serializedOutputFileOrUrl);
        } else if (textOutputFileOrUrl == null && testTreebank == null) {
            // no saving/parsing request has been specified
            System.err.println("usage: " + "java edu.stanford.nlp.parser.lexparser.LexicalizedParser " + "-train trainFilesPath [fileRange] -saveToSerializedFile serializedParserFilename");
        }
    }
    if (op.testOptions.verbose || train) {
        // Tell the user a little or a lot about what we have made
        // get lexicon size separately as it may have its own prints in it....
        String lexNumRules = lp.lex != null ? Integer.toString(lp.lex.numRules()) : "";
        System.err.println("Grammar\tStates\tTags\tWords\tUnaryR\tBinaryR\tTaggings");
        System.err.println("Grammar\t" + lp.stateIndex.size() + '\t' + lp.tagIndex.size() + '\t' + lp.wordIndex.size() + '\t' + (lp.ug != null ? lp.ug.numRules() : "") + '\t' + (lp.bg != null ? lp.bg.numRules() : "") + '\t' + lexNumRules);
        System.err.println("ParserPack is " + op.tlpParams.getClass().getName());
        System.err.println("Lexicon is " + lp.lex.getClass().getName());
        if (op.testOptions.verbose) {
            System.err.println("Tags are: " + lp.tagIndex);
        // System.err.println("States are: " + lp.pd.stateIndex); // This is too verbose. It was already printed out by the below printOptions command if the flag -printStates is given (at training time)!
        }
        printOptions(false, op);
    }
    if (testTreebank != null) {
        // test parser on treebank
        EvaluateTreebank evaluator = new EvaluateTreebank(lp);
        evaluator.testOnTreebank(testTreebank);
    } else if (argIndex >= args.length) {
        // no more arguments, so we just parse our own test sentence
        PrintWriter pwOut = op.tlpParams.pw();
        PrintWriter pwErr = op.tlpParams.pw(System.err);
        ParserQuery pq = lp.parserQuery();
        if (pq.parse(op.tlpParams.defaultTestSentence())) {
            lp.getTreePrint().printTree(pq.getBestParse(), pwOut);
        } else {
            pwErr.println("Error. Can't parse test sentence: " + op.tlpParams.defaultTestSentence());
        }
    } else {
        // We parse filenames given by the remaining arguments
        ParseFiles.parseFiles(args, argIndex, tokenized, tokenizerFactory, elementDelimiter, sentenceDelimiter, escaper, tagDelimiter, op, lp.getTreePrint(), lp);
    }
}||||||||/**
 * A main program for using the parser with various options.
 * This program can be used for building and serializing
 * a parser from treebank data, for parsing sentences from a file
 * or URL using a serialized or text grammar parser,
 * and (mainly for parser quality testing)
 * for training and testing a parser on a treebank all in one go.
 *
 * <p>
 * Sample Usages:
 * <ul>
 * <li> <b>Train a parser (saved to <i>serializedGrammarFilename</i>)
 * from a directory of trees (<i>trainFilesPath</i>, with an optional <i>fileRange</i>, e.g., 0-1000):</b>
 * <code>java -mx1500m edu.stanford.nlp.parser.lexparser.LexicalizedParser [-v] -train trainFilesPath [fileRange] -saveToSerializedFile serializedGrammarFilename</code>
 * </li>
 *
 * <li> <b>Train a parser (not saved) from a directory of trees, and test it (reporting scores) on a directory of trees</b>
 * <code> java -mx1500m edu.stanford.nlp.parser.lexparser.LexicalizedParser [-v] -train trainFilesPath [fileRange] -testTreebank testFilePath [fileRange] </code>
 * </li>
 *
 * <li> <b>Parse one or more files, given a serialized grammar and a list of files</b>
 * <code>java -mx512m edu.stanford.nlp.parser.lexparser.LexicalizedParser [-v] serializedGrammarPath filename [filename] ...</code>
 * </li>
 *
 * <li> <b>Test and report scores for a serialized grammar on trees in an output directory</b>
 * <code>java -mx512m edu.stanford.nlp.parser.lexparser.LexicalizedParser [-v] -loadFromSerializedFile serializedGrammarPath -testTreebank testFilePath [fileRange]</code>
 * </li>
 * </ul>
 *
 * <p>
 * If the <code>serializedGrammarPath</code> ends in <code>.gz</code>,
 * then the grammar is written and read as a compressed file (GZip).
 * If the <code>serializedGrammarPath</code> is a URL, starting with
 * <code>http://</code>, then the parser is read from the URL.
 * A fileRange specifies a numeric value that must be included within a
 * filename for it to be used in training or testing (this works well with
 * most current treebanks).  It can be specified like a range of pages to be
 * printed, for instance as <code>200-2199</code> or
 * <code>1-300,500-725,9000</code> or just as <code>1</code> (if all your
 * trees are in a single file, just give a dummy argument such as
 * <code>0</code> or <code>1</code>).
 * The parser can write a grammar as either a serialized Java object file
 * or in a text format (or as both), specified with the following options:
 *
 * <p>
 * <code>java edu.stanford.nlp.parser.lexparser.LexicalizedParser
 * [-v] -train
 * trainFilesPath [fileRange] [-saveToSerializedFile grammarPath]
 * [-saveToTextFile grammarPath]</code><p>
 * If no files are supplied to parse, then a hardwired sentence
 * is parsed. <p>
 *
 * In the same position as the verbose flag (<code>-v</code>), many other
 * options can be specified.  The most useful to an end user are:
 * <UL>
 * <LI><code>-tLPP class</code> Specify a different
 * TreebankLangParserParams, for when using a different language or
 * treebank (the default is English Penn Treebank). <i>This option MUST occur
 * before any other language-specific options that are used (or else they
 * are ignored!).</i>
 * (It's usually a good idea to specify this option even when loading a
 * serialized grammar; it is necessary if the language pack specifies a
 * needed character encoding or you wish to specify language-specific
 * options on the command line.)</LI>
 * <LI><code>-encoding charset</code> Specify the character encoding of the
 * input and output files.  This will override the value in the
 * <code>TreebankLangParserParams</code>, provided this option appears
 * <i>after</i> any <code>-tLPP</code> option.</LI>
 * <LI><code>-tokenized</code> Says that the input is already separated
 * into whitespace-delimited tokens.  If this option is specified, any
 * tokenizer specified for the language is ignored, and a universal (Unicode)
 * tokenizer, which divides only on whitespace, is used.
 * Unless you also specify
 * <code>-escaper</code>, the tokens <i>must</i> all be correctly
 * tokenized tokens of the appropriate treebank for the parser to work
 * well (for instance, if using the Penn English Treebank, you must have
 * coded "(" as "-LRB-", "3/4" as "3\/4", etc.)</LI>
 * <li><code>-escaper class</code> Specify a class of type
 * {@link Function}&lt;List&lt;HasWord&gt;,List&lt;HasWord&gt;&gt; to do
 * customized escaping of tokenized text.  This class will be run over the
 * tokenized text and can fix the representation of tokens. For instance,
 * it could change "(" to "-LRB-" for the Penn English Treebank.  A
 * provided escaper that does such things for the Penn English Treebank is
 * <code>edu.stanford.nlp.process.PTBEscapingProcessor</code>
 * <li><code>-tokenizerFactory class</code> Specifies a
 * TokenizerFactory class to be used for tokenization</li>
 * <li><code>-tokenizerOptions options</code> Specifies options to a
 * TokenizerFactory class to be used for tokenization.   A comma-separated
 * list. For PTBTokenizer, options of interest include
 * <code>americanize=false</code> and <code>asciiQuotes</code> (for German).
 * Note that any choice of tokenizer options that conflicts with the
 * tokenization used in the parser training data will likely degrade parser
 * performance. </li>
 * <li><code>-sentences token </code> Specifies a token that marks sentence
 * boundaries.  A value of <code>newline</code> causes sentence breaking on
 * newlines.  A value of <code>onePerElement</code> causes each element
 * (using the XML <code>-parseInside</code> option) to be treated as a
 * sentence. All other tokens will be interpreted literally, and must be
 * exactly the same as tokens returned by the tokenizer.  For example,
 * you might specify "|||" and put that symbol sequence as a token between
 * sentences.
 * If no explicit sentence breaking option is chosen, sentence breaking
 * is done based on a set of language-particular sentence-ending patterns.
 * </li>
 * <LI><code>-parseInside element</code> Specifies that parsing should only
 * be done for tokens inside the indicated XML-style
 * elements (done as simple pattern matching, rather than XML parsing).
 * For example, if this is specified as <code>sentence</code>, then
 * the text inside the <code>sentence</code> element
 * would be parsed.
 * Using "-parseInside s" gives you support for the input format of
 * Charniak's parser. Sentences cannot span elements. Whether the
 * contents of the element are treated as one sentence or potentially
 * multiple sentences is controlled by the <code>-sentences</code> flag.
 * The default is potentially multiple sentences.
 * This option gives support for extracting and parsing
 * text from very simple SGML and XML documents, and is provided as a
 * user convenience for that purpose. If you want to really parse XML
 * documents before NLP parsing them, you should use an XML parser, and then
 * call to a LexicalizedParser on appropriate CDATA.
 * <LI><code>-tagSeparator char</code> Specifies to look for tags on words
 * following the word and separated from it by a special character
 * <code>char</code>.  For instance, many tagged corpora have the
 * representation "house/NN" and you would use <code>-tagSeparator /</code>.
 * Notes: This option requires that the input be pretokenized.
 * The separator has to be only a single character, and there is no
 * escaping mechanism. However, splitting is done on the <i>last</i>
 * instance of the character in the token, so that cases like
 * "3\/4/CD" are handled correctly.  The parser will in all normal
 * circumstances use the tag you provide, but will override it in the
 * case of very common words in cases where the tag that you provide
 * is not one that it regards as a possible tagging for the word.
 * The parser supports a format where only some of the words in a sentence
 * have a tag (if you are calling the parser programmatically, you indicate
 * them by having them implement the <code>HasTag</code> interface).
 * You can do this at the command-line by only having tags after some words,
 * but you are limited by the fact that there is no way to escape the
 * tagSeparator character.</LI>
 * <LI><code>-maxLength leng</code> Specify the longest sentence that
 * will be parsed (and hence indirectly the amount of memory
 * needed for the parser). If this is not specified, the parser will
 * try to dynamically grow its parse chart when long sentence are
 * encountered, but may run out of memory trying to do so.</LI>
 * <LI><code>-outputFormat styles</code> Choose the style(s) of output
 * sentences: <code>penn</code> for prettyprinting as in the Penn
 * treebank files, or <code>oneline</code> for printing sentences one
 * per line, <code>words</code>, <code>wordsAndTags</code>,
 * <code>dependencies</code>, <code>typedDependencies</code>,
 * or <code>typedDependenciesCollapsed</code>.
 * Multiple options may be specified as a comma-separated
 * list.  See TreePrint class for further documentation.</LI>
 * <LI><code>-outputFormatOptions</code> Provide options that control the
 * behavior of various <code>-outputFormat</code> choices, such as
 * <code>lexicalize</code>, <code>stem</code>, <code>markHeadNodes</code>,
 * or <code>xml</code>.
 * Options are specified as a comma-separated list.</LI>
 * <LI><code>-writeOutputFiles</code> Write output files corresponding
 * to the input files, with the same name but a <code>".stp"</code>
 * file extension.  The format of these files depends on the
 * <code>outputFormat</code> option.  (If not specified, output is sent
 * to stdout.)</LI>
 * <LI><code>-outputFilesExtension</code> The extension that is appended to
 * the filename that is being parsed to produce an output file name (with the
 * -writeOutputFiles option). The default is <code>stp</code>.  Don't
 * include the period.
 * <LI><code>-outputFilesDirectory</code> The directory in which output
 * files are written (when the -writeOutputFiles option is specified).
 * If not specified, output files are written in the same directory as the
 * input files.
 * <LI><code>-nthreads</code> Parsing files and testing on treebanks
 * can use multiple threads.  This option tells the parser how many
 * threads to use.  A negative number indicates to use as many
 * threads as the machine has cores.
 * </UL>
 * See also the package documentation for more details and examples of use.
 *
 * @param args Command line arguments, as above
 */
public static void main(String[] args) {
    boolean train = false;
    boolean saveToSerializedFile = false;
    boolean saveToTextFile = false;
    String serializedInputFileOrUrl = null;
    String textInputFileOrUrl = null;
    String serializedOutputFileOrUrl = null;
    String textOutputFileOrUrl = null;
    String treebankPath = null;
    Treebank testTreebank = null;
    Treebank tuneTreebank = null;
    String testPath = null;
    FileFilter testFilter = null;
    String tunePath = null;
    FileFilter tuneFilter = null;
    FileFilter trainFilter = null;
    String secondaryTreebankPath = null;
    double secondaryTreebankWeight = 1.0;
    FileFilter secondaryTrainFilter = null;
    // variables needed to process the files to be parsed
    TokenizerFactory<? extends HasWord> tokenizerFactory = null;
    String tokenizerOptions = null;
    String tokenizerFactoryClass = null;
    String tokenizerMethod = null;
    // whether or not the input file has already been tokenized
    boolean tokenized = false;
    Function<List<HasWord>, List<HasWord>> escaper = null;
    String tagDelimiter = null;
    String sentenceDelimiter = null;
    String elementDelimiter = null;
    int argIndex = 0;
    if (args.length < 1) {
        System.err.println("Basic usage (see Javadoc for more): java edu.stanford.nlp.parser.lexparser.LexicalizedParser parserFileOrUrl filename*");
        return;
    }
    Options op = new Options();
    List<String> optionArgs = new ArrayList<String>();
    String encoding = null;
    // while loop through option arguments
    while (argIndex < args.length && args[argIndex].charAt(0) == '-') {
        if (args[argIndex].equalsIgnoreCase("-train") || args[argIndex].equalsIgnoreCase("-trainTreebank")) {
            train = true;
            Pair<String, FileFilter> treebankDescription = ArgUtils.getTreebankDescription(args, argIndex, "-test");
            argIndex = argIndex + ArgUtils.numSubArgs(args, argIndex) + 1;
            treebankPath = treebankDescription.first();
            trainFilter = treebankDescription.second();
        } else if (args[argIndex].equalsIgnoreCase("-train2")) {
            // TODO: we could use the fully expressive -train options if
            // we add some mechanism for returning leftover options from
            // ArgUtils.getTreebankDescription
            // train = true;     // cdm july 2005: should require -train for this
            int numSubArgs = ArgUtils.numSubArgs(args, argIndex);
            argIndex++;
            if (numSubArgs < 2) {
                throw new RuntimeException("Error: -train2 <treebankPath> [<ranges>] <weight>.");
            }
            secondaryTreebankPath = args[argIndex++];
            secondaryTrainFilter = (numSubArgs == 3) ? new NumberRangesFileFilter(args[argIndex++], true) : null;
            secondaryTreebankWeight = Double.parseDouble(args[argIndex++]);
        } else if (args[argIndex].equalsIgnoreCase("-tLPP") && (argIndex + 1 < args.length)) {
            try {
                op.tlpParams = (TreebankLangParserParams) Class.forName(args[argIndex + 1]).newInstance();
            } catch (ClassNotFoundException e) {
                System.err.println("Class not found: " + args[argIndex + 1]);
                throw new RuntimeException(e);
            } catch (InstantiationException e) {
                System.err.println("Couldn't instantiate: " + args[argIndex + 1] + ": " + e.toString());
                throw new RuntimeException(e);
            } catch (IllegalAccessException e) {
                System.err.println("Illegal access" + e);
                throw new RuntimeException(e);
            }
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-encoding")) {
            // sets encoding for TreebankLangParserParams
            // redone later to override any serialized parser one read in
            encoding = args[argIndex + 1];
            op.tlpParams.setInputEncoding(encoding);
            op.tlpParams.setOutputEncoding(encoding);
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tokenized")) {
            tokenized = true;
            argIndex += 1;
        } else if (args[argIndex].equalsIgnoreCase("-escaper")) {
            try {
                escaper = ReflectionLoading.loadByReflection(args[argIndex + 1]);
            } catch (Exception e) {
                System.err.println("Couldn't instantiate escaper " + args[argIndex + 1] + ": " + e);
            }
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tokenizerOptions")) {
            tokenizerOptions = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tokenizerFactory")) {
            tokenizerFactoryClass = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tokenizerMethod")) {
            tokenizerMethod = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-sentences")) {
            sentenceDelimiter = args[argIndex + 1];
            if (sentenceDelimiter.equalsIgnoreCase("newline")) {
                sentenceDelimiter = "\n";
            }
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-parseInside")) {
            elementDelimiter = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-tagSeparator")) {
            tagDelimiter = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-loadFromSerializedFile") || args[argIndex].equalsIgnoreCase("-model")) {
            // load the parser from a binary serialized file
            // the next argument must be the path to the parser file
            serializedInputFileOrUrl = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-loadFromTextFile")) {
            // load the parser from declarative text file
            // the next argument must be the path to the parser file
            textInputFileOrUrl = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-saveToSerializedFile")) {
            saveToSerializedFile = true;
            if (ArgUtils.numSubArgs(args, argIndex) < 1) {
                System.err.println("Missing path: -saveToSerialized filename");
            } else {
                serializedOutputFileOrUrl = args[argIndex + 1];
            }
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-saveToTextFile")) {
            // save the parser to declarative text file
            saveToTextFile = true;
            textOutputFileOrUrl = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-saveTrainTrees")) {
            // save the training trees to a binary file
            op.trainOptions.trainTreeFile = args[argIndex + 1];
            argIndex += 2;
        } else if (args[argIndex].equalsIgnoreCase("-treebank") || args[argIndex].equalsIgnoreCase("-testTreebank") || args[argIndex].equalsIgnoreCase("-test")) {
            Pair<String, FileFilter> treebankDescription = ArgUtils.getTreebankDescription(args, argIndex, "-test");
            argIndex = argIndex + ArgUtils.numSubArgs(args, argIndex) + 1;
            testPath = treebankDescription.first();
            testFilter = treebankDescription.second();
        } else if (args[argIndex].equalsIgnoreCase("-tune")) {
            Pair<String, FileFilter> treebankDescription = ArgUtils.getTreebankDescription(args, argIndex, "-tune");
            argIndex = argIndex + ArgUtils.numSubArgs(args, argIndex) + 1;
            tunePath = treebankDescription.first();
            tuneFilter = treebankDescription.second();
        } else {
            int oldIndex = argIndex;
            argIndex = op.setOptionOrWarn(args, argIndex);
            for (int i = oldIndex; i < argIndex; i++) {
                optionArgs.add(args[i]);
            }
        }
    }
    if (tuneFilter != null || tunePath != null) {
        if (tunePath == null) {
            if (treebankPath == null) {
                throw new RuntimeException("No tune treebank path specified...");
            } else {
                System.err.println("No tune treebank path specified.  Using train path: \"" + treebankPath + '\"');
                tunePath = treebankPath;
            }
        }
        tuneTreebank = op.tlpParams.testMemoryTreebank();
        tuneTreebank.loadPath(tunePath, tuneFilter);
    }
    if (!train && op.testOptions.verbose) {
        StringUtils.printErrInvocationString("LexicalizedParser", args);
    }
    // always initialized in next if-then-else block
    LexicalizedParser lp;
    if (train) {
        StringUtils.printErrInvocationString("LexicalizedParser", args);
        // so we train a parser using the treebank
        GrammarCompactor compactor = null;
        if (op.trainOptions.compactGrammar() == 3) {
            compactor = new ExactGrammarCompactor(op, false, false);
        }
        Treebank trainTreebank = makeTreebank(treebankPath, op, trainFilter);
        Treebank secondaryTrainTreebank = null;
        if (secondaryTreebankPath != null) {
            secondaryTrainTreebank = makeSecondaryTreebank(secondaryTreebankPath, op, secondaryTrainFilter);
        }
        List<List<TaggedWord>> extraTaggedWords = null;
        if (op.trainOptions.taggedFiles != null) {
            extraTaggedWords = new ArrayList<List<TaggedWord>>();
            List<TaggedFileRecord> fileRecords = TaggedFileRecord.createRecords(new Properties(), op.trainOptions.taggedFiles);
            for (TaggedFileRecord record : fileRecords) {
                for (List<TaggedWord> sentence : record.reader()) {
                    extraTaggedWords.add(sentence);
                }
            }
        }
        lp = getParserFromTreebank(trainTreebank, secondaryTrainTreebank, secondaryTreebankWeight, compactor, op, tuneTreebank, extraTaggedWords);
    } else if (textInputFileOrUrl != null) {
        // so we load the parser from a text grammar file
        lp = getParserFromTextFile(textInputFileOrUrl, op);
    } else {
        // so we load a serialized parser
        if (serializedInputFileOrUrl == null && argIndex < args.length) {
            // the next argument must be the path to the serialized parser
            serializedInputFileOrUrl = args[argIndex];
            argIndex++;
        }
        if (serializedInputFileOrUrl == null) {
            System.err.println("No grammar specified, exiting...");
            return;
        }
        String[] extraArgs = new String[optionArgs.size()];
        extraArgs = optionArgs.toArray(extraArgs);
        try {
            lp = loadModel(serializedInputFileOrUrl, op, extraArgs);
            op = lp.op;
        } catch (IllegalArgumentException e) {
            System.err.println("Error loading parser, exiting...");
            throw e;
        }
    }
    // set up tokenizerFactory with options if provided
    if (tokenizerFactoryClass != null || tokenizerOptions != null) {
        try {
            if (tokenizerFactoryClass != null) {
                Class<TokenizerFactory<? extends HasWord>> clazz = ErasureUtils.uncheckedCast(Class.forName(tokenizerFactoryClass));
                Method factoryMethod;
                if (tokenizerOptions != null) {
                    factoryMethod = clazz.getMethod(tokenizerMethod != null ? tokenizerMethod : "newWordTokenizerFactory", String.class);
                    tokenizerFactory = ErasureUtils.uncheckedCast(factoryMethod.invoke(null, tokenizerOptions));
                } else {
                    factoryMethod = clazz.getMethod(tokenizerMethod != null ? tokenizerMethod : "newTokenizerFactory");
                    tokenizerFactory = ErasureUtils.uncheckedCast(factoryMethod.invoke(null));
                }
            } else {
                // have options but no tokenizer factory.  use the parser
                // langpack's factory and set its options
                tokenizerFactory = lp.op.langpack().getTokenizerFactory();
                tokenizerFactory.setOptions(tokenizerOptions);
            }
        } catch (IllegalAccessException e) {
            System.err.println("Couldn't instantiate TokenizerFactory " + tokenizerFactoryClass + " with options " + tokenizerOptions);
            throw new RuntimeException(e);
        } catch (NoSuchMethodException e) {
            System.err.println("Couldn't instantiate TokenizerFactory " + tokenizerFactoryClass + " with options " + tokenizerOptions);
            throw new RuntimeException(e);
        } catch (ClassNotFoundException e) {
            System.err.println("Couldn't instantiate TokenizerFactory " + tokenizerFactoryClass + " with options " + tokenizerOptions);
            throw new RuntimeException(e);
        } catch (InvocationTargetException e) {
            System.err.println("Couldn't instantiate TokenizerFactory " + tokenizerFactoryClass + " with options " + tokenizerOptions);
            throw new RuntimeException(e);
        }
    }
    // OVERWRITTEN BY ONE SPECIFIED IN SERIALIZED PARSER
    if (encoding != null) {
        op.tlpParams.setInputEncoding(encoding);
        op.tlpParams.setOutputEncoding(encoding);
    }
    if (testFilter != null || testPath != null) {
        if (testPath == null) {
            if (treebankPath == null) {
                throw new RuntimeException("No test treebank path specified...");
            } else {
                System.err.println("No test treebank path specified.  Using train path: \"" + treebankPath + '\"');
                testPath = treebankPath;
            }
        }
        testTreebank = op.tlpParams.testMemoryTreebank();
        testTreebank.loadPath(testPath, testFilter);
    }
    op.trainOptions.sisterSplitters = Generics.newHashSet(Arrays.asList(op.tlpParams.sisterSplitters()));
    // Now what do we do with the parser we've made
    if (saveToTextFile) {
        // save the parser to textGrammar format
        if (textOutputFileOrUrl != null) {
            lp.saveParserToTextFile(textOutputFileOrUrl);
        } else {
            System.err.println("Usage: must specify a text grammar output path");
        }
    }
    if (saveToSerializedFile) {
        if (serializedOutputFileOrUrl != null) {
            lp.saveParserToSerialized(serializedOutputFileOrUrl);
        } else if (textOutputFileOrUrl == null && testTreebank == null) {
            // no saving/parsing request has been specified
            System.err.println("usage: " + "java edu.stanford.nlp.parser.lexparser.LexicalizedParser " + "-train trainFilesPath [fileRange] -saveToSerializedFile serializedParserFilename");
        }
    }
    if (op.testOptions.verbose || train) {
        // Tell the user a little or a lot about what we have made
        // get lexicon size separately as it may have its own prints in it....
        String lexNumRules = lp.lex != null ? Integer.toString(lp.lex.numRules()) : "";
        System.err.println("Grammar\tStates\tTags\tWords\tUnaryR\tBinaryR\tTaggings");
        System.err.println("Grammar\t" + lp.stateIndex.size() + '\t' + lp.tagIndex.size() + '\t' + lp.wordIndex.size() + '\t' + (lp.ug != null ? lp.ug.numRules() : "") + '\t' + (lp.bg != null ? lp.bg.numRules() : "") + '\t' + lexNumRules);
        System.err.println("ParserPack is " + op.tlpParams.getClass().getName());
        System.err.println("Lexicon is " + lp.lex.getClass().getName());
        if (op.testOptions.verbose) {
            System.err.println("Tags are: " + lp.tagIndex);
        // System.err.println("States are: " + lp.pd.stateIndex); // This is too verbose. It was already printed out by the below printOptions command if the flag -printStates is given (at training time)!
        }
        printOptions(false, op);
    }
    if (testTreebank != null) {
        // test parser on treebank
        EvaluateTreebank evaluator = new EvaluateTreebank(lp);
        evaluator.testOnTreebank(testTreebank);
    } else if (argIndex >= args.length) {
        // no more arguments, so we just parse our own test sentence
        PrintWriter pwOut = op.tlpParams.pw();
        PrintWriter pwErr = op.tlpParams.pw(System.err);
        ParserQuery pq = lp.parserQuery();
        if (pq.parse(op.tlpParams.defaultTestSentence())) {
            lp.getTreePrint().printTree(pq.getBestParse(), pwOut);
        } else {
            pwErr.println("Error. Can't parse test sentence: " + op.tlpParams.defaultTestSentence());
        }
    } else {
        // We parse filenames given by the remaining arguments
        ParseFiles.parseFiles(args, argIndex, tokenized, tokenizerFactory, elementDelimiter, sentenceDelimiter, escaper, tagDelimiter, op, lp.getTreePrint(), lp);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(DoubleLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(IfStmt
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(IfStmt
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											(IfStmt
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(IfStmt
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
													)
													(IfStmt
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
														)
														(IfStmt
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																(ArrayAccessExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(IfStmt
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	(ArrayAccessExpr
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(IfStmt
																	(BinaryExpr
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			(ArrayAccessExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			(ArrayAccessExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(IfStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			(ArrayAccessExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		(IfStmt
																			(MethodCallExpr
																				StringLiteralExpr
																				SimpleName
																				(ArrayAccessExpr
																					NameExpr
																						SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																			(IfStmt
																				(MethodCallExpr
																					StringLiteralExpr
																					SimpleName
																					(ArrayAccessExpr
																						NameExpr
																							SimpleName
																						NameExpr
																							SimpleName
																					)
																				)
																				(IfStmt
																					(MethodCallExpr
																						StringLiteralExpr
																						SimpleName
																						(ArrayAccessExpr
																							NameExpr
																								SimpleName
																							NameExpr
																								SimpleName
																						)
																					)
																					(IfStmt
																						(BinaryExpr
																							(BinaryExpr
																								(MethodCallExpr
																									StringLiteralExpr
																									SimpleName
																									(ArrayAccessExpr
																										NameExpr
																											SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																								(MethodCallExpr
																									StringLiteralExpr
																									SimpleName
																									(ArrayAccessExpr
																										NameExpr
																											SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																							)
																							(MethodCallExpr
																								StringLiteralExpr
																								SimpleName
																								(ArrayAccessExpr
																									NameExpr
																										SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																						(IfStmt
																							(MethodCallExpr
																								StringLiteralExpr
																								SimpleName
																								(ArrayAccessExpr
																									NameExpr
																										SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																							(BlockStmt
																								(ExpressionStmt
																									(VariableDeclarationExpr
																										(VariableDeclarator
																											NameExpr
																												SimpleName
																											SimpleName
																											(PrimitiveType
																											)
																										)
																									)
																								)
																								(ExpressionStmt
																									(AssignExpr
																										NameExpr
																											SimpleName
																										(MethodCallExpr
																											NameExpr
																												SimpleName
																											NameExpr
																												SimpleName
																											SimpleName
																											NameExpr
																												SimpleName
																										)
																									)
																								)
																								(ForStmt
																									(BlockStmt
																										(ExpressionStmt
																											(MethodCallExpr
																												(ArrayAccessExpr
																													NameExpr
																														SimpleName
																													NameExpr
																														SimpleName
																												)
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																										)
																									)
																									(BinaryExpr
																										NameExpr
																											SimpleName
																										NameExpr
																											SimpleName
																									)
																									(VariableDeclarationExpr
																										(VariableDeclarator
																											NameExpr
																												SimpleName
																											SimpleName
																											(PrimitiveType
																											)
																										)
																									)
																									(UnaryExpr
																										NameExpr
																											SimpleName
																									)
																								)
																							)
																							(BlockStmt
																								(ExpressionStmt
																									(VariableDeclarationExpr
																										(VariableDeclarator
																											(MethodCallExpr
																												NameExpr
																													SimpleName
																												NameExpr
																													SimpleName
																												StringLiteralExpr
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																											SimpleName
																											(ClassOrInterfaceType
																												SimpleName
																												(ClassOrInterfaceType
																													SimpleName
																												)
																												(ClassOrInterfaceType
																													SimpleName
																												)
																											)
																										)
																									)
																								)
																								(ExpressionStmt
																									(AssignExpr
																										NameExpr
																											SimpleName
																										(BinaryExpr
																											(BinaryExpr
																												NameExpr
																													SimpleName
																												(MethodCallExpr
																													NameExpr
																														SimpleName
																													NameExpr
																														SimpleName
																													SimpleName
																													NameExpr
																														SimpleName
																												)
																											)
																											(IntegerLiteralExpr
																											)
																										)
																									)
																								)
																								(ExpressionStmt
																									(AssignExpr
																										NameExpr
																											SimpleName
																										(MethodCallExpr
																											SimpleName
																											NameExpr
																												SimpleName
																										)
																									)
																								)
																								(ExpressionStmt
																									(AssignExpr
																										NameExpr
																											SimpleName
																										(MethodCallExpr
																											SimpleName
																											NameExpr
																												SimpleName
																										)
																									)
																								)
																							)
																						)
																						(BlockStmt
																							(ExpressionStmt
																								(VariableDeclarationExpr
																									(VariableDeclarator
																										(MethodCallExpr
																											NameExpr
																												SimpleName
																											NameExpr
																												SimpleName
																											StringLiteralExpr
																											SimpleName
																											NameExpr
																												SimpleName
																										)
																										SimpleName
																										(ClassOrInterfaceType
																											SimpleName
																											(ClassOrInterfaceType
																												SimpleName
																											)
																											(ClassOrInterfaceType
																												SimpleName
																											)
																										)
																									)
																								)
																							)
																							(ExpressionStmt
																								(AssignExpr
																									NameExpr
																										SimpleName
																									(BinaryExpr
																										(BinaryExpr
																											NameExpr
																												SimpleName
																											(MethodCallExpr
																												NameExpr
																													SimpleName
																												NameExpr
																													SimpleName
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																										)
																										(IntegerLiteralExpr
																										)
																									)
																								)
																							)
																							(ExpressionStmt
																								(AssignExpr
																									NameExpr
																										SimpleName
																									(MethodCallExpr
																										SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																							)
																							(ExpressionStmt
																								(AssignExpr
																									NameExpr
																										SimpleName
																									(MethodCallExpr
																										SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																							)
																						)
																					)
																					(BlockStmt
																						(ExpressionStmt
																							(AssignExpr
																								(FieldAccessExpr
																									SimpleName
																									(FieldAccessExpr
																										SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																								(ArrayAccessExpr
																									(BinaryExpr
																										NameExpr
																											SimpleName
																										(IntegerLiteralExpr
																										)
																									)
																									NameExpr
																										SimpleName
																								)
																							)
																							LineComment
																						)
																						(ExpressionStmt
																							(AssignExpr
																								NameExpr
																									SimpleName
																								(IntegerLiteralExpr
																								)
																							)
																						)
																					)
																				)
																				(BlockStmt
																					(ExpressionStmt
																						(AssignExpr
																							NameExpr
																								SimpleName
																							(BooleanLiteralExpr
																							)
																						)
																						LineComment
																					)
																					(ExpressionStmt
																						(AssignExpr
																							NameExpr
																								SimpleName
																							(ArrayAccessExpr
																								(BinaryExpr
																									NameExpr
																										SimpleName
																									(IntegerLiteralExpr
																									)
																								)
																								NameExpr
																									SimpleName
																							)
																						)
																					)
																					(ExpressionStmt
																						(AssignExpr
																							NameExpr
																								SimpleName
																							(IntegerLiteralExpr
																							)
																						)
																					)
																				)
																			)
																			(BlockStmt
																				(ExpressionStmt
																					(AssignExpr
																						NameExpr
																							SimpleName
																						(BooleanLiteralExpr
																						)
																					)
																				)
																				(IfStmt
																					(BinaryExpr
																						(MethodCallExpr
																							NameExpr
																								SimpleName
																							NameExpr
																								SimpleName
																							SimpleName
																							NameExpr
																								SimpleName
																						)
																						(IntegerLiteralExpr
																						)
																					)
																					(BlockStmt
																						(ExpressionStmt
																							(AssignExpr
																								NameExpr
																									SimpleName
																								(ArrayAccessExpr
																									(BinaryExpr
																										NameExpr
																											SimpleName
																										(IntegerLiteralExpr
																										)
																									)
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																					)
																					(BlockStmt
																						(ExpressionStmt
																							(MethodCallExpr
																								StringLiteralExpr
																								SimpleName
																								(FieldAccessExpr
																									SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																					)
																				)
																				(ExpressionStmt
																					(AssignExpr
																						NameExpr
																							SimpleName
																						(IntegerLiteralExpr
																						)
																					)
																				)
																			)
																		)
																		(BlockStmt
																			(ExpressionStmt
																				(AssignExpr
																					NameExpr
																						SimpleName
																					(ArrayAccessExpr
																						(BinaryExpr
																							NameExpr
																								SimpleName
																							(IntegerLiteralExpr
																							)
																						)
																						NameExpr
																							SimpleName
																					)
																				)
																				LineComment
																			)
																			(ExpressionStmt
																				(AssignExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																			)
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(AssignExpr
																				NameExpr
																					SimpleName
																				(ArrayAccessExpr
																					(BinaryExpr
																						NameExpr
																							SimpleName
																						(IntegerLiteralExpr
																						)
																					)
																					NameExpr
																						SimpleName
																				)
																			)
																			LineComment
																		)
																		(ExpressionStmt
																			(AssignExpr
																				NameExpr
																					SimpleName
																				(IntegerLiteralExpr
																				)
																			)
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(AssignExpr
																			NameExpr
																				SimpleName
																			(ArrayAccessExpr
																				(BinaryExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(ExpressionStmt
																		(AssignExpr
																			NameExpr
																				SimpleName
																			(IntegerLiteralExpr
																			)
																		)
																	)
																)
															)
															(BlockStmt
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(ArrayAccessExpr
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				(IntegerLiteralExpr
																				)
																			)
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																)
															)
														)
														(BlockStmt
															(ExpressionStmt
																(AssignExpr
																	NameExpr
																		SimpleName
																	(ArrayAccessExpr
																		(BinaryExpr
																			NameExpr
																				SimpleName
																			(IntegerLiteralExpr
																			)
																		)
																		NameExpr
																			SimpleName
																	)
																)
															)
															(IfStmt
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(BlockStmt
																	(ExpressionStmt
																		(AssignExpr
																			NameExpr
																				SimpleName
																			StringLiteralExpr
																		)
																	)
																)
															)
															(ExpressionStmt
																(AssignExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
															)
														)
													)
													(BlockStmt
														(ExpressionStmt
															(AssignExpr
																NameExpr
																	SimpleName
																(ArrayAccessExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	NameExpr
																		SimpleName
																)
															)
														)
														(ExpressionStmt
															(AssignExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(ArrayAccessExpr
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																NameExpr
																	SimpleName
															)
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(ArrayAccessExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
															NameExpr
																SimpleName
														)
													)
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
											)
										)
										(BlockStmt
											(TryStmt
												(CatchClause
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			StringLiteralExpr
																			(ArrayAccessExpr
																				(BinaryExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																				NameExpr
																					SimpleName
																			)
																		)
																		StringLiteralExpr
																	)
																	NameExpr
																		SimpleName
																)
																SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																(ArrayAccessExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(ArrayAccessExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												NameExpr
													SimpleName
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(TryStmt
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														StringLiteralExpr
														(ArrayAccessExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ThrowStmt
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																(ArrayAccessExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	NameExpr
																		SimpleName
																)
															)
															StringLiteralExpr
														)
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ThrowStmt
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ThrowStmt
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(CastExpr
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															(ArrayAccessExpr
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											StringLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ArrayAccessExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ConditionalExpr
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
										NullLiteralExpr
										(ObjectCreationExpr
											(ArrayAccessExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
											)
											(BooleanLiteralExpr
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(ArrayAccessExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IntegerLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(CharLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									LineComment
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
													(WildcardType
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(ConditionalExpr
														(BinaryExpr
															NameExpr
																SimpleName
															NullLiteralExpr
														)
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(MethodCallExpr
														NullLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(ConditionalExpr
														(BinaryExpr
															NameExpr
																SimpleName
															NullLiteralExpr
														)
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(MethodCallExpr
														NullLiteralExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								LineComment
							)
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						LineComment
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ReturnStmt
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ArrayCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
									(ArrayCreationLevel
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								SimpleName
								(ArrayType
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ThrowStmt
									NameExpr
										SimpleName
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
									(BooleanLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ForeachStmt
							(BlockStmt
								(ForeachStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
							NameExpr
								SimpleName
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								LineComment
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
								)
								StringLiteralExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	StringLiteralExpr
																	(MethodCallExpr
																		SimpleName
																		(FieldAccessExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(CharLiteralExpr
																)
															)
															(MethodCallExpr
																SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
														(CharLiteralExpr
														)
													)
													(MethodCallExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(CharLiteralExpr
												)
											)
											(EnclosedExpr
												(ConditionalExpr
													(BinaryExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														NullLiteralExpr
													)
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
										(CharLiteralExpr
										)
									)
									(EnclosedExpr
										(ConditionalExpr
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												NullLiteralExpr
											)
											StringLiteralExpr
											(MethodCallExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(CharLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(DoubleLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(WildcardType
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(IfStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(ArrayAccessExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(IfStmt
										(MethodCallExpr
											StringLiteralExpr
											SimpleName
											(ArrayAccessExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
										(IfStmt
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												(ArrayAccessExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
											(IfStmt
												(MethodCallExpr
													StringLiteralExpr
													SimpleName
													(ArrayAccessExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(IfStmt
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
													)
													(IfStmt
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															(ArrayAccessExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
														)
														(IfStmt
															(MethodCallExpr
																StringLiteralExpr
																SimpleName
																(ArrayAccessExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(IfStmt
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	(ArrayAccessExpr
																		NameExpr
																			SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(IfStmt
																	(BinaryExpr
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			(ArrayAccessExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			(ArrayAccessExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(IfStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			(ArrayAccessExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		(IfStmt
																			(MethodCallExpr
																				StringLiteralExpr
																				SimpleName
																				(ArrayAccessExpr
																					NameExpr
																						SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																			(IfStmt
																				(MethodCallExpr
																					StringLiteralExpr
																					SimpleName
																					(ArrayAccessExpr
																						NameExpr
																							SimpleName
																						NameExpr
																							SimpleName
																					)
																				)
																				(IfStmt
																					(MethodCallExpr
																						StringLiteralExpr
																						SimpleName
																						(ArrayAccessExpr
																							NameExpr
																								SimpleName
																							NameExpr
																								SimpleName
																						)
																					)
																					(IfStmt
																						(BinaryExpr
																							(BinaryExpr
																								(MethodCallExpr
																									StringLiteralExpr
																									SimpleName
																									(ArrayAccessExpr
																										NameExpr
																											SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																								(MethodCallExpr
																									StringLiteralExpr
																									SimpleName
																									(ArrayAccessExpr
																										NameExpr
																											SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																							)
																							(MethodCallExpr
																								StringLiteralExpr
																								SimpleName
																								(ArrayAccessExpr
																									NameExpr
																										SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																						(IfStmt
																							(MethodCallExpr
																								StringLiteralExpr
																								SimpleName
																								(ArrayAccessExpr
																									NameExpr
																										SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																							(BlockStmt
																								(ExpressionStmt
																									(VariableDeclarationExpr
																										(VariableDeclarator
																											NameExpr
																												SimpleName
																											SimpleName
																											(PrimitiveType
																											)
																										)
																									)
																								)
																								(ExpressionStmt
																									(AssignExpr
																										NameExpr
																											SimpleName
																										(MethodCallExpr
																											NameExpr
																												SimpleName
																											NameExpr
																												SimpleName
																											SimpleName
																											NameExpr
																												SimpleName
																										)
																									)
																								)
																								(ForStmt
																									(BlockStmt
																										(ExpressionStmt
																											(MethodCallExpr
																												(ArrayAccessExpr
																													NameExpr
																														SimpleName
																													NameExpr
																														SimpleName
																												)
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																										)
																									)
																									(BinaryExpr
																										NameExpr
																											SimpleName
																										NameExpr
																											SimpleName
																									)
																									(VariableDeclarationExpr
																										(VariableDeclarator
																											NameExpr
																												SimpleName
																											SimpleName
																											(PrimitiveType
																											)
																										)
																									)
																									(UnaryExpr
																										NameExpr
																											SimpleName
																									)
																								)
																							)
																							(BlockStmt
																								(ExpressionStmt
																									(VariableDeclarationExpr
																										(VariableDeclarator
																											(MethodCallExpr
																												NameExpr
																													SimpleName
																												NameExpr
																													SimpleName
																												StringLiteralExpr
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																											SimpleName
																											(ClassOrInterfaceType
																												SimpleName
																												(ClassOrInterfaceType
																													SimpleName
																												)
																												(ClassOrInterfaceType
																													SimpleName
																												)
																											)
																										)
																									)
																								)
																								(ExpressionStmt
																									(AssignExpr
																										NameExpr
																											SimpleName
																										(BinaryExpr
																											(BinaryExpr
																												NameExpr
																													SimpleName
																												(MethodCallExpr
																													NameExpr
																														SimpleName
																													NameExpr
																														SimpleName
																													SimpleName
																													NameExpr
																														SimpleName
																												)
																											)
																											(IntegerLiteralExpr
																											)
																										)
																									)
																								)
																								(ExpressionStmt
																									(AssignExpr
																										NameExpr
																											SimpleName
																										(MethodCallExpr
																											SimpleName
																											NameExpr
																												SimpleName
																										)
																									)
																								)
																								(ExpressionStmt
																									(AssignExpr
																										NameExpr
																											SimpleName
																										(MethodCallExpr
																											SimpleName
																											NameExpr
																												SimpleName
																										)
																									)
																								)
																							)
																						)
																						(BlockStmt
																							(ExpressionStmt
																								(VariableDeclarationExpr
																									(VariableDeclarator
																										(MethodCallExpr
																											NameExpr
																												SimpleName
																											NameExpr
																												SimpleName
																											StringLiteralExpr
																											SimpleName
																											NameExpr
																												SimpleName
																										)
																										SimpleName
																										(ClassOrInterfaceType
																											SimpleName
																											(ClassOrInterfaceType
																												SimpleName
																											)
																											(ClassOrInterfaceType
																												SimpleName
																											)
																										)
																									)
																								)
																							)
																							(ExpressionStmt
																								(AssignExpr
																									NameExpr
																										SimpleName
																									(BinaryExpr
																										(BinaryExpr
																											NameExpr
																												SimpleName
																											(MethodCallExpr
																												NameExpr
																													SimpleName
																												NameExpr
																													SimpleName
																												SimpleName
																												NameExpr
																													SimpleName
																											)
																										)
																										(IntegerLiteralExpr
																										)
																									)
																								)
																							)
																							(ExpressionStmt
																								(AssignExpr
																									NameExpr
																										SimpleName
																									(MethodCallExpr
																										SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																							)
																							(ExpressionStmt
																								(AssignExpr
																									NameExpr
																										SimpleName
																									(MethodCallExpr
																										SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																							)
																						)
																					)
																					(BlockStmt
																						(ExpressionStmt
																							(AssignExpr
																								(FieldAccessExpr
																									SimpleName
																									(FieldAccessExpr
																										SimpleName
																										NameExpr
																											SimpleName
																									)
																								)
																								(ArrayAccessExpr
																									(BinaryExpr
																										NameExpr
																											SimpleName
																										(IntegerLiteralExpr
																										)
																									)
																									NameExpr
																										SimpleName
																								)
																							)
																							LineComment
																						)
																						(ExpressionStmt
																							(AssignExpr
																								NameExpr
																									SimpleName
																								(IntegerLiteralExpr
																								)
																							)
																						)
																					)
																				)
																				(BlockStmt
																					(ExpressionStmt
																						(AssignExpr
																							NameExpr
																								SimpleName
																							(BooleanLiteralExpr
																							)
																						)
																						LineComment
																					)
																					(ExpressionStmt
																						(AssignExpr
																							NameExpr
																								SimpleName
																							(ArrayAccessExpr
																								(BinaryExpr
																									NameExpr
																										SimpleName
																									(IntegerLiteralExpr
																									)
																								)
																								NameExpr
																									SimpleName
																							)
																						)
																					)
																					(ExpressionStmt
																						(AssignExpr
																							NameExpr
																								SimpleName
																							(IntegerLiteralExpr
																							)
																						)
																					)
																				)
																			)
																			(BlockStmt
																				(ExpressionStmt
																					(AssignExpr
																						NameExpr
																							SimpleName
																						(BooleanLiteralExpr
																						)
																					)
																				)
																				(IfStmt
																					(BinaryExpr
																						(MethodCallExpr
																							NameExpr
																								SimpleName
																							NameExpr
																								SimpleName
																							SimpleName
																							NameExpr
																								SimpleName
																						)
																						(IntegerLiteralExpr
																						)
																					)
																					(BlockStmt
																						(ExpressionStmt
																							(AssignExpr
																								NameExpr
																									SimpleName
																								(ArrayAccessExpr
																									(BinaryExpr
																										NameExpr
																											SimpleName
																										(IntegerLiteralExpr
																										)
																									)
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																					)
																					(BlockStmt
																						(ExpressionStmt
																							(MethodCallExpr
																								StringLiteralExpr
																								SimpleName
																								(FieldAccessExpr
																									SimpleName
																									NameExpr
																										SimpleName
																								)
																							)
																						)
																					)
																				)
																				(ExpressionStmt
																					(AssignExpr
																						NameExpr
																							SimpleName
																						(IntegerLiteralExpr
																						)
																					)
																				)
																			)
																		)
																		(BlockStmt
																			(ExpressionStmt
																				(AssignExpr
																					NameExpr
																						SimpleName
																					(ArrayAccessExpr
																						(BinaryExpr
																							NameExpr
																								SimpleName
																							(IntegerLiteralExpr
																							)
																						)
																						NameExpr
																							SimpleName
																					)
																				)
																				LineComment
																			)
																			(ExpressionStmt
																				(AssignExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																			)
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(AssignExpr
																				NameExpr
																					SimpleName
																				(ArrayAccessExpr
																					(BinaryExpr
																						NameExpr
																							SimpleName
																						(IntegerLiteralExpr
																						)
																					)
																					NameExpr
																						SimpleName
																				)
																			)
																			LineComment
																		)
																		(ExpressionStmt
																			(AssignExpr
																				NameExpr
																					SimpleName
																				(IntegerLiteralExpr
																				)
																			)
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(AssignExpr
																			NameExpr
																				SimpleName
																			(ArrayAccessExpr
																				(BinaryExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																	(ExpressionStmt
																		(AssignExpr
																			NameExpr
																				SimpleName
																			(IntegerLiteralExpr
																			)
																		)
																	)
																)
															)
															(BlockStmt
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(ArrayAccessExpr
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				(IntegerLiteralExpr
																				)
																			)
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																)
															)
														)
														(BlockStmt
															(ExpressionStmt
																(AssignExpr
																	NameExpr
																		SimpleName
																	(ArrayAccessExpr
																		(BinaryExpr
																			NameExpr
																				SimpleName
																			(IntegerLiteralExpr
																			)
																		)
																		NameExpr
																			SimpleName
																	)
																)
															)
															(IfStmt
																(MethodCallExpr
																	StringLiteralExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																(BlockStmt
																	(ExpressionStmt
																		(AssignExpr
																			NameExpr
																				SimpleName
																			StringLiteralExpr
																		)
																	)
																)
															)
															(ExpressionStmt
																(AssignExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
															)
														)
													)
													(BlockStmt
														(ExpressionStmt
															(AssignExpr
																NameExpr
																	SimpleName
																(ArrayAccessExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	NameExpr
																		SimpleName
																)
															)
														)
														(ExpressionStmt
															(AssignExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(ArrayAccessExpr
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																NameExpr
																	SimpleName
															)
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(ArrayAccessExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
															NameExpr
																SimpleName
														)
													)
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
											)
										)
										(BlockStmt
											(TryStmt
												(CatchClause
													(BlockStmt
														(ExpressionStmt
															(MethodCallExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			StringLiteralExpr
																			(ArrayAccessExpr
																				(BinaryExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																				NameExpr
																					SimpleName
																			)
																		)
																		StringLiteralExpr
																	)
																	NameExpr
																		SimpleName
																)
																SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
													(Parameter
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
												(BlockStmt
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																(ArrayAccessExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(ArrayAccessExpr
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												NameExpr
													SimpleName
											)
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(TryStmt
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														StringLiteralExpr
														(ArrayAccessExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ThrowStmt
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																StringLiteralExpr
																(ArrayAccessExpr
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	NameExpr
																		SimpleName
																)
															)
															StringLiteralExpr
														)
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ThrowStmt
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(CatchClause
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													SimpleName
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(ThrowStmt
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(Parameter
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(CastExpr
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															(ArrayAccessExpr
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																NameExpr
																	SimpleName
															)
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(VariableDeclarationExpr
									(VariableDeclarator
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										(PrimitiveType
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(BlockStmt
									(ThrowStmt
										(ObjectCreationExpr
											StringLiteralExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ArrayAccessExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ConditionalExpr
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
										NullLiteralExpr
										(ObjectCreationExpr
											(ArrayAccessExpr
												(UnaryExpr
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
											)
											(BooleanLiteralExpr
											)
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(ArrayAccessExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BooleanLiteralExpr
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										StringLiteralExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(IntegerLiteralExpr
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BinaryExpr
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						(ArrayAccessExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(CharLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ArrayAccessExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								LineComment
							)
							(ExpressionStmt
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
						)
						LineComment
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ReturnStmt
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ArrayCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
									(ArrayCreationLevel
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								SimpleName
								(ArrayType
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(TryStmt
						(CatchClause
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ThrowStmt
									NameExpr
										SimpleName
								)
							)
							(Parameter
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
									(BooleanLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(FieldAccessExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(ObjectCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
										)
										(FieldAccessExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
						(ForeachStmt
							(BlockStmt
								(ForeachStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
							NameExpr
								SimpleName
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(ThrowStmt
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
													(WildcardType
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
										)
									)
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(ConditionalExpr
														(BinaryExpr
															NameExpr
																SimpleName
															NullLiteralExpr
														)
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(MethodCallExpr
														NullLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(ConditionalExpr
														(BinaryExpr
															NameExpr
																SimpleName
															NullLiteralExpr
														)
														StringLiteralExpr
														NameExpr
															SimpleName
													)
													(ClassExpr
														(ClassOrInterfaceType
															SimpleName
														)
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													(MethodCallExpr
														NullLiteralExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											(CharLiteralExpr
											)
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ThrowStmt
									(ObjectCreationExpr
										StringLiteralExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(MethodCallExpr
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
			)
			LineComment
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								LineComment
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ConditionalExpr
								(BinaryExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NullLiteralExpr
								)
								StringLiteralExpr
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	StringLiteralExpr
																	(MethodCallExpr
																		SimpleName
																		(FieldAccessExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(CharLiteralExpr
																)
															)
															(MethodCallExpr
																SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
														(CharLiteralExpr
														)
													)
													(MethodCallExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(CharLiteralExpr
												)
											)
											(EnclosedExpr
												(ConditionalExpr
													(BinaryExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														NullLiteralExpr
													)
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
										(CharLiteralExpr
										)
									)
									(EnclosedExpr
										(ConditionalExpr
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												NullLiteralExpr
											)
											StringLiteralExpr
											(MethodCallExpr
												SimpleName
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(CharLiteralExpr
								)
							)
							NameExpr
								SimpleName
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(FieldAccessExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									StringLiteralExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)

