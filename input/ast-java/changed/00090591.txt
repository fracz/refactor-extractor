/**
 * Read one line up to --delimiter or --delimiter-- and if existing the CRLF
 * or LF Read one line up to --delimiter or --delimiter-- and if existing
 * the CRLF or LF. Note that CRLF or LF are mandatory for opening delimiter
 * (--delimiter) but not for closing delimiter (--delimiter--) since some
 * clients does not include CRLF in this case.
 *
 * @param delimiter
 * of the form --string, such that '--' is already included
 * @return the String from one line as the delimiter searched (opening or
 * closing)
 * @throws NotEnoughDataDecoderException
 * Need more chunks and reset the {@code readerIndex} to the previous
 * value
 */
private String readDelimiterStandard(String delimiter) {
    int readerIndex = undecodedChunk.readerIndex();
    try {
        StringBuilder sb = new StringBuilder(64);
        int delimiterPos = 0;
        int len = delimiter.length();
        while (undecodedChunk.isReadable() && delimiterPos < len) {
            byte nextByte = undecodedChunk.readByte();
            if (nextByte == delimiter.charAt(delimiterPos)) {
                delimiterPos++;
                sb.append((char) nextByte);
            } else {
                // delimiter not found so break here !
                undecodedChunk.readerIndex(readerIndex);
                throw new NotEnoughDataDecoderException();
            }
        }
        // Now check if either opening delimiter or closing delimiter
        if (undecodedChunk.isReadable()) {
            byte nextByte = undecodedChunk.readByte();
            // first check for opening delimiter
            if (nextByte == HttpConstants.CR) {
                nextByte = undecodedChunk.readByte();
                if (nextByte == HttpConstants.LF) {
                    return sb.toString();
                } else {
                    // error since CR must be followed by LF
                    // delimiter not found so break here !
                    undecodedChunk.readerIndex(readerIndex);
                    throw new NotEnoughDataDecoderException();
                }
            } else if (nextByte == HttpConstants.LF) {
                return sb.toString();
            } else if (nextByte == '-') {
                sb.append('-');
                // second check for closing delimiter
                nextByte = undecodedChunk.readByte();
                if (nextByte == '-') {
                    sb.append('-');
                    // now try to find if CRLF or LF there
                    if (undecodedChunk.isReadable()) {
                        nextByte = undecodedChunk.readByte();
                        if (nextByte == HttpConstants.CR) {
                            nextByte = undecodedChunk.readByte();
                            if (nextByte == HttpConstants.LF) {
                                return sb.toString();
                            } else {
                                // error CR without LF
                                // delimiter not found so break here !
                                undecodedChunk.readerIndex(readerIndex);
                                throw new NotEnoughDataDecoderException();
                            }
                        } else if (nextByte == HttpConstants.LF) {
                            return sb.toString();
                        } else {
                            // No CRLF but ok however (Adobe Flash uploader)
                            // minus 1 since we read one char ahead but
                            // should not
                            undecodedChunk.readerIndex(undecodedChunk.readerIndex() - 1);
                            return sb.toString();
                        }
                    }
                    // lets try considering it is fine...
                    return sb.toString();
                }
            // only one '-' => not enough
            // whatever now => error since incomplete
            }
        }
    } catch (IndexOutOfBoundsException e) {
        undecodedChunk.readerIndex(readerIndex);
        throw new NotEnoughDataDecoderException(e);
    }
    undecodedChunk.readerIndex(readerIndex);
    throw new NotEnoughDataDecoderException();
}||||||||/**
 * Read one line up to --delimiter or --delimiter-- and if existing the CRLF
 * or LF Read one line up to --delimiter or --delimiter-- and if existing
 * the CRLF or LF. Note that CRLF or LF are mandatory for opening delimiter
 * (--delimiter) but not for closing delimiter (--delimiter--) since some
 * clients does not include CRLF in this case.
 *
 * @param delimiter
 * of the form --string, such that '--' is already included
 * @return the String from one line as the delimiter searched (opening or
 * closing)
 * @throws NotEnoughDataDecoderException
 * Need more chunks and reset the {@code readerIndex} to the previous
 * value
 */
private static String readDelimiterStandard(ByteBuf undecodedChunk, String delimiter) {
    int readerIndex = undecodedChunk.readerIndex();
    try {
        StringBuilder sb = new StringBuilder(64);
        int delimiterPos = 0;
        int len = delimiter.length();
        while (undecodedChunk.isReadable() && delimiterPos < len) {
            byte nextByte = undecodedChunk.readByte();
            if (nextByte == delimiter.charAt(delimiterPos)) {
                delimiterPos++;
                sb.append((char) nextByte);
            } else {
                // delimiter not found so break here !
                undecodedChunk.readerIndex(readerIndex);
                throw new NotEnoughDataDecoderException();
            }
        }
        // Now check if either opening delimiter or closing delimiter
        if (undecodedChunk.isReadable()) {
            byte nextByte = undecodedChunk.readByte();
            // first check for opening delimiter
            if (nextByte == HttpConstants.CR) {
                nextByte = undecodedChunk.readByte();
                if (nextByte == HttpConstants.LF) {
                    return sb.toString();
                } else {
                    // error since CR must be followed by LF
                    // delimiter not found so break here !
                    undecodedChunk.readerIndex(readerIndex);
                    throw new NotEnoughDataDecoderException();
                }
            } else if (nextByte == HttpConstants.LF) {
                return sb.toString();
            } else if (nextByte == '-') {
                sb.append('-');
                // second check for closing delimiter
                nextByte = undecodedChunk.readByte();
                if (nextByte == '-') {
                    sb.append('-');
                    // now try to find if CRLF or LF there
                    if (undecodedChunk.isReadable()) {
                        nextByte = undecodedChunk.readByte();
                        if (nextByte == HttpConstants.CR) {
                            nextByte = undecodedChunk.readByte();
                            if (nextByte == HttpConstants.LF) {
                                return sb.toString();
                            } else {
                                // error CR without LF
                                // delimiter not found so break here !
                                undecodedChunk.readerIndex(readerIndex);
                                throw new NotEnoughDataDecoderException();
                            }
                        } else if (nextByte == HttpConstants.LF) {
                            return sb.toString();
                        } else {
                            // No CRLF but ok however (Adobe Flash uploader)
                            // minus 1 since we read one char ahead but
                            // should not
                            undecodedChunk.readerIndex(undecodedChunk.readerIndex() - 1);
                            return sb.toString();
                        }
                    }
                    // lets try considering it is fine...
                    return sb.toString();
                }
            // only one '-' => not enough
            // whatever now => error since incomplete
            }
        }
    } catch (IndexOutOfBoundsException e) {
        undecodedChunk.readerIndex(readerIndex);
        throw new NotEnoughDataDecoderException(e);
    }
    undecodedChunk.readerIndex(readerIndex);
    throw new NotEnoughDataDecoderException();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(IntegerLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ThrowStmt
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(CastExpr
											NameExpr
												SimpleName
											(PrimitiveType
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(CharLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(CharLiteralExpr
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(CharLiteralExpr
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(IfStmt
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(BlockStmt
														(ExpressionStmt
															(AssignExpr
																NameExpr
																	SimpleName
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
														(IfStmt
															(BinaryExpr
																NameExpr
																	SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			(BinaryExpr
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				(IntegerLiteralExpr
																				)
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		LineComment
																	)
																	(ReturnStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(BlockStmt
																	(ReturnStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(BlockStmt
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(IfStmt
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(FieldAccessExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				NameExpr
																					SimpleName
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			LineComment
																		)
																		(ThrowStmt
																			(ObjectCreationExpr
																				(ClassOrInterfaceType
																					SimpleName
																				)
																			)
																		)
																	)
																	(BlockStmt
																		(ReturnStmt
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																)
															)
														)
													)
													LineComment
												)
												(ReturnStmt
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
										)
									)
								)
								(BlockStmt
									(ReturnStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ThrowStmt
											(ObjectCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							LineComment
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(IntegerLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ThrowStmt
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(CastExpr
											NameExpr
												SimpleName
											(PrimitiveType
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(CharLiteralExpr
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(CharLiteralExpr
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(CharLiteralExpr
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(CharLiteralExpr
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(IfStmt
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													(BlockStmt
														(ExpressionStmt
															(AssignExpr
																NameExpr
																	SimpleName
																(MethodCallExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
														(IfStmt
															(BinaryExpr
																NameExpr
																	SimpleName
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			(BinaryExpr
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				(IntegerLiteralExpr
																				)
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		LineComment
																	)
																	(ReturnStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(BlockStmt
																	(ReturnStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(BlockStmt
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(IfStmt
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(FieldAccessExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				NameExpr
																					SimpleName
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			LineComment
																		)
																		(ThrowStmt
																			(ObjectCreationExpr
																				(ClassOrInterfaceType
																					SimpleName
																				)
																			)
																		)
																	)
																	(BlockStmt
																		(ReturnStmt
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																	)
																)
															)
														)
													)
													LineComment
												)
												(ReturnStmt
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
										)
									)
								)
								(BlockStmt
									(ReturnStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ThrowStmt
											(ObjectCreationExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							LineComment
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ThrowStmt
			(ObjectCreationExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

