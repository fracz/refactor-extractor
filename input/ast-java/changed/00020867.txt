/**
 * Allows to answer if symbols of the given char array located at <code>[start; end)</code> interval should be soft wrapped,
 * i.e. represented on a next line.
 *
 * @param chars       symbols holder
 * @param start       target symbols sub-sequence start within the given char array (inclusive)
 * @param end         target symbols sub-sequence end within the given char array (exclusive)
 * @param position    current drawing position
 * @return            <code>true</code> if target symbols sub-sequence should be soft-wrapped; <code>false</code> otherwise
 */
public boolean shouldWrap(char[] chars, int start, int end, Point position) {
    if (!isSoftWrappingEnabled()) {
        return false;
    }
    initIfNecessary();
    dropDataIfNecessary();
    if (hasSoftWrapAt(start)) {
        return true;
    }
    if (myRightEdgeLocation < 0) {
        assert false;
        return false;
    }
    // TODO den implement
    return position.x + (end - start) * 7 > myRightEdgeLocation;
}||||||||/**
 * Allows to answer if symbols of the given char array located at <code>[start; end)</code> interval should be soft wrapped,
 * i.e. represented on a next line.
 *
 * @param chars       symbols holder
 * @param start       target symbols sub-sequence start within the given char array (inclusive)
 * @param end         target symbols sub-sequence end within the given char array (exclusive)
 * @param position    current drawing position
 * @return            <code>true</code> if target symbols sub-sequence should be soft-wrapped; <code>false</code> otherwise
 */
public boolean shouldWrap(char[] chars, int start, int end, Point position) {
    if (!isSoftWrappingEnabled()) {
        return false;
    }
    initIfNecessary();
    dropDataIfNecessary();
    if (myStorage.hasSoftWrapAt(start)) {
        return true;
    }
    if (myRightEdgeLocation < 0) {
        assert false;
        return false;
    }
    // TODO den implement
    return position.x + (end - start) * 7 > myRightEdgeLocation;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(AssertStmt
					(BooleanLiteralExpr
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(IntegerLiteralExpr
						)
					)
				)
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(AssertStmt
					(BooleanLiteralExpr
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			(BinaryExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(IntegerLiteralExpr
						)
					)
				)
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

