public void testCorrectBuilder() throws Exception {
    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines("foo.bar.Baz", "package foo.bar;", "", "import com.google.auto.value.AutoValue;", "import com.google.common.collect.ImmutableList;", "", "import java.util.List;", "import javax.annotation.Nullable;", "", "@AutoValue", "public abstract class Baz<T extends Number> {", "  public abstract int anInt();", "  public abstract byte[] aByteArray();", "  @Nullable public abstract int[] aNullableIntArray();", "  public abstract List<T> aList();", "  public abstract ImmutableList<T> anImmutableList();", "", "  public abstract Builder<T> toBuilder();", "", "  @AutoValue.Builder", "  public interface Builder<T extends Number> {", "    Builder<T> anInt(int x);", "    Builder<T> aByteArray(byte[] x);", "    Builder<T> aNullableIntArray(@Nullable int[] x);", "    Builder<T> aList(List<T> x);", "    ImmutableList.Builder<T> anImmutableListBuilder();", "", "    List<T> aList();", "    ImmutableList<T> anImmutableList();", "", "    Baz<T> build();", "  }", "", "  public static <T extends Number> Builder<T> builder() {", "    return AutoValue_Baz.builder();", "  }", "}");
    JavaFileObject expectedOutput = JavaFileObjects.forSourceLines("foo.bar.AutoValue_Baz", "package foo.bar;", "", "import com.google.common.collect.ImmutableList", "import java.util.Arrays;", "import java.util.List;", "import javax.annotation.Generated;", "", "@Generated(\"" + AutoValueProcessor.class.getName() + "\")", "final class AutoValue_Baz<T extends Number> extends Baz<T> {", "  private final int anInt;", "  private final byte[] aByteArray;", "  private final int[] aNullableIntArray;", "  private final List<T> aList;", "  private final ImmutableList<T> anImmutableList;", "", "  private AutoValue_Baz(", "      int anInt,", "      byte[] aByteArray,", "      @javax.annotation.Nullable int[] aNullableIntArray,", "      List<T> aList,", "      ImmutableList<T> anImmutableList) {", "    this.anInt = anInt;", "    if (aByteArray == null) {", "      throw new NullPointerException(\"Null aByteArray\");", "    }", "    this.aByteArray = aByteArray;", "    this.aNullableIntArray = aNullableIntArray;", "    if (aList == null) {", "      throw new NullPointerException(\"Null aList\");", "    }", "    this.aList = aList;", "    this.anImmutableList = anImmutableList;", "  }", "", "  @Override public int anInt() {", "    return anInt;", "  }", "", "  @Override public byte[] aByteArray() {", "    return aByteArray.clone();", "  }", "", "  @javax.annotation.Nullable", "  @Override public int[] aNullableIntArray() {", "    return aNullableIntArray == null ? null : aNullableIntArray.clone();", "  }", "", "  @Override public List<T> aList() {", "    return aList;", "  }", "", "  @Override public ImmutableList<T> anImmutableList() {", "    return anImmutableList;", "  }", "", "  @Override public String toString() {", "    return \"Baz{\"", "        + \"anInt=\" + anInt + \", \"", "        + \"aByteArray=\" + Arrays.toString(aByteArray) + \", \"", "        + \"aNullableIntArray=\" + Arrays.toString(aNullableIntArray) + \", \"", "        + \"aList=\" + aList + \", \"", "        + \"anImmutableList=\" + anImmutableList", "        + \"}\";", "  }", "", "  @Override public boolean equals(Object o) {", "    if (o == this) {", "      return true;", "    }", "    if (o instanceof Baz) {", "      Baz<?> that = (Baz<?>) o;", "      return (this.anInt == that.anInt())", "          && (Arrays.equals(this.aByteArray, " + "(that instanceof AutoValue_Baz) " + "? ((AutoValue_Baz) that).aByteArray : that.aByteArray()))", "          && (Arrays.equals(this.aNullableIntArray, " + "(that instanceof AutoValue_Baz) " + "? ((AutoValue_Baz) that).aNullableIntArray : that.aNullableIntArray()))", "          && (this.aList.equals(that.aList()))", "          && (this.anImmutableList.equals(that.anImmutableList()));", "    }", "    return false;", "  }", "", "  @Override public int hashCode() {", "    int h = 1;", "    h *= 1000003;", "    h ^= this.anInt;", "    h *= 1000003;", "    h ^= Arrays.hashCode(this.aByteArray);", "    h *= 1000003;", "    h ^= Arrays.hashCode(this.aNullableIntArray);", "    h *= 1000003;", "    h ^= this.aList.hashCode();", "    h *= 1000003;", "    h ^= this.anImmutableList.hashCode();", "    return h;", "  }", "", "  @Override public Baz.Builder<T> toBuilder() {", "    return new Builder<T>(this);", "  }", "", "  static final class Builder<T extends Number> implements Baz.Builder<T> {", "    private Integer anInt;", "    private byte[] aByteArray;", "    private int[] aNullableIntArray;", "    private List<T> aList;", "    private ImmutableList.Builder<T> anImmutableList = ImmutableList.builder();", "", "    Builder() {", "    }", "", "    Builder(Baz<T> source) {", "      this.anInt = source.anInt();", "      this.aByteArray = source.aByteArray();", "      this.aNullableIntArray = source.aNullableIntArray();", "      this.aList = source.aList();", "      this.anImmutableList.addAll(source.anImmutableList());", "    }", "", "    @Override", "    public Baz.Builder<T> anInt(int anInt) {", "      this.anInt = anInt;", "      return this;", "    }", "", "    @Override", "    public Baz.Builder<T> aByteArray(byte[] aByteArray) {", "      this.aByteArray = aByteArray.clone();", "      return this;", "    }", "", "    @Override", "    public Baz.Builder<T> aNullableIntArray(int[] aNullableIntArray) {", "      this.aNullableIntArray = " + "(aNullableIntArray == null) ? null : aNullableIntArray.clone();", "      return this;", "    }", "", "    @Override", "    public Baz.Builder<T> aList(List<T> aList) {", "      this.aList = aList;", "      return this;", "    }", "", "    @Override", "    public List<T> aList() {", "      if (aList == null) {", "        throw new IllegalStateException(\"Property \\\"aList\\\" has not been set\");", "      }", "      return aList;", "    }", "", "    @Override", "    public ImmutableList.Builder<T> anImmutableListBuilder() {", "      return anImmutableList;", "    }", "", "    @Override", "    public ImmutableList<T> anImmutableList() {", "      return anImmutableList.build();", "    }", "", "    @Override", "    public Baz<T> build() {", "      String missing = \"\";", "      if (anInt == null) {", "        missing += \" anInt\";", "      }", "      if (aByteArray == null) {", "        missing += \" aByteArray\";", "      }", "      if (aList == null) {", "        missing += \" aList\";", "      }", "      if (!missing.isEmpty()) {", "        throw new IllegalStateException(\"Missing required properties:\" + missing);", "      }", "      return new AutoValue_Baz<T>(", "          this.anInt,", "          this.aByteArray,", "          this.aNullableIntArray,", "          this.aList,", "          this.anImmutableList.build());", "    }", "  }", "}");
    assertAbout(javaSource()).that(javaFileObject).processedWith(new AutoValueProcessor()).compilesWithoutError().and().generatesSources(expectedOutput);
}||||||||public void testCorrectBuilder() throws Exception {
    JavaFileObject javaFileObject = JavaFileObjects.forSourceLines("foo.bar.Baz", "package foo.bar;", "", "import com.google.auto.value.AutoValue;", "import com.google.common.collect.ImmutableList;", "", "import java.util.List;", "import javax.annotation.Nullable;", "", "@AutoValue", "public abstract class Baz<T extends Number> {", "  public abstract int anInt();", "  public abstract byte[] aByteArray();", "  @Nullable public abstract int[] aNullableIntArray();", "  public abstract List<T> aList();", "  public abstract ImmutableList<T> anImmutableList();", "", "  public abstract Builder<T> toBuilder();", "", "  @AutoValue.Builder", "  public interface Builder<T extends Number> {", "    Builder<T> anInt(int x);", "    Builder<T> aByteArray(byte[] x);", "    Builder<T> aNullableIntArray(@Nullable int[] x);", "    Builder<T> aList(List<T> x);", "    ImmutableList.Builder<T> anImmutableListBuilder();", "", "    List<T> aList();", "    ImmutableList<T> anImmutableList();", "", "    Baz<T> build();", "  }", "", "  public static <T extends Number> Builder<T> builder() {", "    return AutoValue_Baz.builder();", "  }", "}");
    JavaFileObject expectedOutput = JavaFileObjects.forSourceLines("foo.bar.AutoValue_Baz", "package foo.bar;", "", "import com.google.common.collect.ImmutableList", "import java.util.Arrays;", "import java.util.List;", "import javax.annotation.Generated;", "import javax.annotation.Nullable;", "", "@Generated(\"" + AutoValueProcessor.class.getName() + "\")", "final class AutoValue_Baz<T extends Number> extends Baz<T> {", "  private final int anInt;", "  private final byte[] aByteArray;", "  private final int[] aNullableIntArray;", "  private final List<T> aList;", "  private final ImmutableList<T> anImmutableList;", "", "  private AutoValue_Baz(", "      int anInt,", "      byte[] aByteArray,", "      @Nullable int[] aNullableIntArray,", "      List<T> aList,", "      ImmutableList<T> anImmutableList) {", "    this.anInt = anInt;", "    if (aByteArray == null) {", "      throw new NullPointerException(\"Null aByteArray\");", "    }", "    this.aByteArray = aByteArray;", "    this.aNullableIntArray = aNullableIntArray;", "    if (aList == null) {", "      throw new NullPointerException(\"Null aList\");", "    }", "    this.aList = aList;", "    this.anImmutableList = anImmutableList;", "  }", "", "  @Override public int anInt() {", "    return anInt;", "  }", "", "  @Override public byte[] aByteArray() {", "    return aByteArray.clone();", "  }", "", "  @Nullable", "  @Override public int[] aNullableIntArray() {", "    return aNullableIntArray == null ? null : aNullableIntArray.clone();", "  }", "", "  @Override public List<T> aList() {", "    return aList;", "  }", "", "  @Override public ImmutableList<T> anImmutableList() {", "    return anImmutableList;", "  }", "", "  @Override public String toString() {", "    return \"Baz{\"", "        + \"anInt=\" + anInt + \", \"", "        + \"aByteArray=\" + Arrays.toString(aByteArray) + \", \"", "        + \"aNullableIntArray=\" + Arrays.toString(aNullableIntArray) + \", \"", "        + \"aList=\" + aList + \", \"", "        + \"anImmutableList=\" + anImmutableList", "        + \"}\";", "  }", "", "  @Override public boolean equals(Object o) {", "    if (o == this) {", "      return true;", "    }", "    if (o instanceof Baz) {", "      Baz<?> that = (Baz<?>) o;", "      return (this.anInt == that.anInt())", "          && (Arrays.equals(this.aByteArray, " + "(that instanceof AutoValue_Baz) " + "? ((AutoValue_Baz) that).aByteArray : that.aByteArray()))", "          && (Arrays.equals(this.aNullableIntArray, " + "(that instanceof AutoValue_Baz) " + "? ((AutoValue_Baz) that).aNullableIntArray : that.aNullableIntArray()))", "          && (this.aList.equals(that.aList()))", "          && (this.anImmutableList.equals(that.anImmutableList()));", "    }", "    return false;", "  }", "", "  @Override public int hashCode() {", "    int h = 1;", "    h *= 1000003;", "    h ^= this.anInt;", "    h *= 1000003;", "    h ^= Arrays.hashCode(this.aByteArray);", "    h *= 1000003;", "    h ^= Arrays.hashCode(this.aNullableIntArray);", "    h *= 1000003;", "    h ^= this.aList.hashCode();", "    h *= 1000003;", "    h ^= this.anImmutableList.hashCode();", "    return h;", "  }", "", "  @Override public Baz.Builder<T> toBuilder() {", "    return new Builder<T>(this);", "  }", "", "  static final class Builder<T extends Number> implements Baz.Builder<T> {", "    private Integer anInt;", "    private byte[] aByteArray;", "    private int[] aNullableIntArray;", "    private List<T> aList;", "    private ImmutableList.Builder<T> anImmutableList = ImmutableList.builder();", "", "    Builder() {", "    }", "", "    Builder(Baz<T> source) {", "      this.anInt = source.anInt();", "      this.aByteArray = source.aByteArray();", "      this.aNullableIntArray = source.aNullableIntArray();", "      this.aList = source.aList();", "      this.anImmutableList.addAll(source.anImmutableList());", "    }", "", "    @Override", "    public Baz.Builder<T> anInt(int anInt) {", "      this.anInt = anInt;", "      return this;", "    }", "", "    @Override", "    public Baz.Builder<T> aByteArray(byte[] aByteArray) {", "      this.aByteArray = aByteArray.clone();", "      return this;", "    }", "", "    @Override", "    public Baz.Builder<T> aNullableIntArray(@Nullable int[] aNullableIntArray) {", "      this.aNullableIntArray = " + "(aNullableIntArray == null) ? null : aNullableIntArray.clone();", "      return this;", "    }", "", "    @Override", "    public Baz.Builder<T> aList(List<T> aList) {", "      this.aList = aList;", "      return this;", "    }", "", "    @Override", "    public List<T> aList() {", "      if (aList == null) {", "        throw new IllegalStateException(\"Property \\\"aList\\\" has not been set\");", "      }", "      return aList;", "    }", "", "    @Override", "    public ImmutableList.Builder<T> anImmutableListBuilder() {", "      return anImmutableList;", "    }", "", "    @Override", "    public ImmutableList<T> anImmutableList() {", "      return anImmutableList.build();", "    }", "", "    @Override", "    public Baz<T> build() {", "      String missing = \"\";", "      if (anInt == null) {", "        missing += \" anInt\";", "      }", "      if (aByteArray == null) {", "        missing += \" aByteArray\";", "      }", "      if (aList == null) {", "        missing += \" aList\";", "      }", "      if (!missing.isEmpty()) {", "        throw new IllegalStateException(\"Missing required properties:\" + missing);", "      }", "      return new AutoValue_Baz<T>(", "          this.anInt,", "          this.aByteArray,", "          this.aNullableIntArray,", "          this.aList,", "          this.anImmutableList.build());", "    }", "  }", "}");
    assertAbout(javaSource()).that(javaFileObject).processedWith(new AutoValueProcessor()).compilesWithoutError().and().generatesSources(expectedOutput);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
									)
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									(ClassExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						(BinaryExpr
							StringLiteralExpr
							StringLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
									)
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

