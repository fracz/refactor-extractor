/**
 * An inspection API to retrieve the list of streaming media currently be advertised.
 * The results are returned asynchronously through the previously registered callback.
 * serviceClasses lets the app filter on types of programming and is opaque data between
 * the app and the carrier.
 *
 * Multiple calls replace the list of serviceClasses of interest.
 *
 * May throw an IllegalArgumentException or RemoteException.
 *
 * Synchronous responses include
 * <li>SUCCESS</li>
 * <li>ERROR_MSDC_CONCURRENT_SERVICE_LIMIT_REACHED</li>
 *
 * Asynchronous errors through the listener include any of the errors except
 * <li>ERROR_MSDC_UNABLE_TO_)START_SERVICE</li>
 * <li>ERROR_MSDC_INVALID_SERVICE_ID</li>
 * <li>ERROR_MSDC_END_OF_SESSION</li>
 */
public int getStreamingServices(List<String> classList) {
    return 0;
}||||||||/**
 * An inspection API to retrieve the list of streaming media currently be advertised.
 * The results are returned asynchronously through the previously registered callback.
 * serviceClasses lets the app filter on types of programming and is opaque data between
 * the app and the carrier.
 *
 * Multiple calls replace the list of serviceClasses of interest.
 *
 * This may throw an {@link MbmsException} containing one of the following errors:
 * {@link MbmsException#ERROR_MIDDLEWARE_NOT_BOUND}
 * {@link MbmsException#ERROR_NOT_YET_INITIALIZED}
 * {@link MbmsException#ERROR_CONCURRENT_SERVICE_LIMIT_REACHED}
 *
 * Asynchronous error codes via the {@link IMbmsStreamingManagerCallback#error(int, String)}
 * callback can include any of the errors except:
 * {@link MbmsException#ERROR_UNABLE_TO_START_SERVICE}
 * {@link MbmsException#ERROR_INVALID_SERVICE_ID}
 * {@link MbmsException#ERROR_END_OF_SESSION}
 */
public void getStreamingServices(List<String> classList) throws MbmsException {
    if (mService == null) {
        throw new MbmsException(MbmsException.ERROR_MIDDLEWARE_NOT_BOUND);
    }
    try {
        int returnCode = mService.getStreamingServices(mAppName, mSubscriptionId, classList);
        if (returnCode != MbmsException.SUCCESS) {
            throw new MbmsException(returnCode);
        }
    } catch (RemoteException e) {
        throw new MbmsException(MbmsException.ERROR_UNKNOWN_REMOTE_EXCEPTION);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(IntegerLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

