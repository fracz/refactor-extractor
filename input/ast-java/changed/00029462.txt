public <T, R> Operator<? extends R, ? super T> onLift(final Operator<? extends R, ? super T> bind) {
    return bind;
}||||||||/**
 * Invoked just as the operator functions is called to bind two operations together into a new
 * {@link Observable} and the return value is used as the lifted function
 * <p>
 * This can be used to decorate or replace the {@link Operator} instance or just perform extra
 * logging, metrics and other such things and pass-thru the onSubscribe.
 *
 * @param lift
 * original {@link Operator}{@code<R, T>} ' * @return {@link Operator}{@code <R, T>}
 * function that can be modified, decorated, replaced or
 * just returned as a pass-thru.
 */
public <T, R> Operator<? extends R, ? super T> onLift(final Operator<? extends R, ? super T> lift) {
    return lift;
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(TypeParameter
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
		(WildcardType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(WildcardType
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(TypeParameter
		SimpleName
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

