@Test
public void testSkylarkProviderRetrievalNoneIfNoProvider() throws Exception {
    scratch.file("examples/rule/BUILD");
    scratch.file("examples/rule/apple_rules.bzl", "def my_rule_impl(ctx):", "   dep = ctx.attr.deps[0]", "   objc_provider = dep.objc", "   return struct()", "my_rule = rule(implementation = my_rule_impl,", "   attrs = {", "   'deps': attr.label_list(allow_files = False, mandatory = False),", "})");
    scratch.file("examples/apple_skylark/a.cc");
    scratch.file("examples/apple_skylark/BUILD", "package(default_visibility = ['//visibility:public'])", "load('/examples/rule/apple_rules', 'my_rule')", "my_rule(", "    name = 'my_target',", "    deps = [':lib'],", ")", "cc_library(", "    name = 'lib',", "    srcs = ['a.cc'],", "    hdrs = ['b.h']", ")");
    try {
        getConfiguredTarget("//examples/apple_skylark:my_target");
        fail("Should throw assertion error");
    } catch (AssertionError e) {
        assertThat(e).hasMessageThat().contains("File \"/workspace/examples/apple_skylark/BUILD\", line 3");
        assertThat(e).hasMessageThat().contains("my_rule(name = 'my_target')");
        assertThat(e).hasMessageThat().contains("File \"/workspace/examples/rule/apple_rules.bzl\", line 3, in my_rule_impl");
        assertThat(e).hasMessageThat().contains("dep.objc");
        assertThat(e).hasMessageThat().contains("target (rule class of 'cc_library') doesn't have provider 'objc'.");
    }
}||||||||@Test
public void testSkylarkProviderRetrievalNoneIfNoProvider() throws Exception {
    scratch.file("examples/rule/BUILD");
    scratch.file("examples/rule/apple_rules.bzl", "def my_rule_impl(ctx):", "   dep = ctx.attr.deps[0]", "   objc_provider = dep.objc", "   return struct()", "my_rule = rule(implementation = my_rule_impl,", "   attrs = {", "   'deps': attr.label_list(allow_files = False, mandatory = False),", "})");
    scratch.file("examples/apple_skylark/a.cc");
    scratch.file("examples/apple_skylark/BUILD", "package(default_visibility = ['//visibility:public'])", "load('/examples/rule/apple_rules', 'my_rule')", "my_rule(", "    name = 'my_target',", "    deps = [':lib'],", ")", "cc_library(", "    name = 'lib',", "    srcs = ['a.cc'],", "    hdrs = ['b.h']", ")");
    try {
        getConfiguredTarget("//examples/apple_skylark:my_target");
        fail("Should throw assertion error");
    } catch (AssertionError e) {
        assertThat(e).hasMessageThat().contains("File \"/workspace/examples/apple_skylark/BUILD\", line 3");
        assertThat(e).hasMessageThat().contains("my_rule(name = 'my_target')");
        assertThat(e).hasMessageThat().contains("File \"/workspace/examples/rule/apple_rules.bzl\", line 3, in my_rule_impl");
        assertThat(e).hasMessageThat().contains("dep.objc");
        assertThat(e).hasMessageThat().contains("<target //examples/apple_skylark:lib> (rule 'cc_library') " + "doesn't have provider 'objc'");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

