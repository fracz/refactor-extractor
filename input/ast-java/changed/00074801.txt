/**
 * Starts the daemon, receiving connections asynchronously (i.e. returns immediately).
 *
 * @throws IllegalStateException if this daemon is already running, or has already been stopped.
 */
public void start() {
    lifecycleLock.lock();
    try {
        if (stopped) {
            throw new IllegalStateException("cannot start daemon as it has already been used");
        }
        if (started) {
            throw new IllegalStateException("cannot start daemon as it is already running");
        }
        // Get ready to accept connections, but we are assuming that no connections will be established
        // because we have not yet advertised that we are open for business by entering our address into
        // the registry, which happens a little further down in this method.
        connectorAddress = connector.start(new IncomingConnectionHandler() {

            public void handle(final Connection<Object> connection) {
                // we're spinning a thread to do work to avoid blocking the connection
                // This means that the Daemon potentially can have multiple jobs running.
                // We only allow 2 threads max - one for the build, second for potential Stop request
                handlersExecutor.execute(new Runnable() {

                    public void run() {
                        Command command = null;
                        try {
                            // There's a reason why we lock first and then read the incoming command
                            // This way we're marking the daemon as 'busy' as soon as it is connected to the client
                            // It does not have impact for daemon usage in real world but it makes certain things easier and it helps a lot with testing daemon
                            command = lockAndReceive(connection, control);
                            if (command == null) {
                                LOGGER.warn("It seems the client dropped the connection before sending any command. Stopping connection.");
                                unlock(control);
                                connection.stop();
                                return;
                            }
                        } catch (BusyException e) {
                            connection.dispatch(new CommandComplete(e));
                            return;
                        }
                        try {
                            doRun(connection, control, command);
                        } finally {
                            unlock(control);
                            connection.stop();
                        }
                    }
                });
            }
        });
        control.setActivityListener(new CompletionHandler.ActivityListener() {

            public void onStart() {
                daemonRegistry.markBusy(connectorAddress);
            }

            public void onComplete() {
                daemonRegistry.markIdle(connectorAddress);
            }
        });
        // Start a new thread to watch the stop latch
        stopperExecutor.execute(new Runnable() {

            public void run() {
                try {
                    stopLatch.await();
                } catch (InterruptedException e) {
                    // unsure what we can really do here, it shouldn't happen anyway.
                    return;
                }
                // remove our presence to clients
                daemonRegistry.remove(connectorAddress);
                // stop accepting new connections
                connector.stop();
                // wait for any connection handlers to stop (though connector.stop() will have already waited for this)
                handlersExecutor.stop();
                // wake up anyone waiting on our completion (i.e. )
                control.stop();
            }
        });
        // Advertise that the daemon is now ready to accept connections
        daemonRegistry.store(connectorAddress);
        control.start();
        started = true;
        LOGGER.lifecycle("Daemon started at: " + new Date() + ", with address: " + connectorAddress);
    } catch (Exception e) {
        LOGGER.warn("exception starting daemon", e);
        stopLatch.countDown();
    } finally {
        lifecycleLock.unlock();
    }
}||||||||/**
 * Starts the daemon, receiving connections asynchronously (i.e. returns immediately).
 *
 * @throws IllegalStateException if this daemon is already running, or has already been stopped.
 */
public void start() {
    // TODO SF why we use reentrant lock instead of synchronized (same for stop() method)
    lifecycleLock.lock();
    try {
        // TODO SF why do we need those?
        if (stopped) {
            throw new IllegalStateException("cannot start daemon as it has already been used");
        }
        if (started) {
            throw new IllegalStateException("cannot start daemon as it is already running");
        }
        // Get ready to accept connections, but we are assuming that no connections will be established
        // because we have not yet advertised that we are open for business by entering our address into
        // the registry, which happens a little further down in this method.
        connectorAddress = connector.start(new IncomingConnectionHandler() {

            public void handle(final Connection<Object> connection) {
                // we're spinning a thread to do work to avoid blocking the connection
                // This means that the Daemon potentially can do multiple things but we only allows a single build at a time
                handlersExecutor.execute(new Runnable() {

                    public void run() {
                        Command command = (Command) connection.receive();
                        if (command == null) {
                            LOGGER.warn("It seems the client dropped the connection before sending any command. Stopping connection.");
                            // TODO SF why do we need to stop the connection here and there?
                            connection.stop();
                            return;
                        }
                        if (command instanceof Stop) {
                            LOGGER.lifecycle("Stopping");
                            connection.dispatch(new CommandComplete(null));
                            stopLatch.countDown();
                            return;
                        }
                        try {
                            control.onStartActivity();
                        } catch (BusyException e) {
                            LOGGER.info("The daemon is busy and another build request received. Returning Busy response.");
                            connection.dispatch(new CommandComplete(e));
                            return;
                        }
                        try {
                            doRun(connection, control, command);
                        } finally {
                            control.onActivityComplete();
                            connection.stop();
                        }
                    }
                });
            }
        });
        control.setActivityListener(new CompletionHandler.ActivityListener() {

            public void onStart() {
                daemonRegistry.markBusy(connectorAddress);
            }

            public void onComplete() {
                daemonRegistry.markIdle(connectorAddress);
            }
        });
        // Start a new thread to watch the stop latch
        stopperExecutor.execute(new Runnable() {

            public void run() {
                try {
                    stopLatch.await();
                } catch (InterruptedException e) {
                    // unsure what we can really do here, it shouldn't happen anyway.
                    return;
                }
                // stop accepting new connections
                connector.stop();
                // wait for any connection handlers to stop (though connector.stop() will have already waited for this)
                handlersExecutor.stop();
                // wake up anyone waiting on our completion (i.e. )
                control.stop();
                // remove our presence to clients
                daemonRegistry.remove(connectorAddress);
            }
        });
        // Advertise that the daemon is now ready to accept connections
        // TODO SF move totally to the control
        daemonRegistry.store(connectorAddress);
        control.start();
        started = true;
        LOGGER.lifecycle("Daemon started at: " + new Date() + ", with address: " + connectorAddress);
    } catch (Exception e) {
        LOGGER.warn("exception starting daemon", e);
        stopLatch.countDown();
    } finally {
        lifecycleLock.unlock();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		NullLiteralExpr
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
															(TryStmt
																(CatchClause
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				(ObjectCreationExpr
																					NameExpr
																						SimpleName
																					(ClassOrInterfaceType
																						SimpleName
																					)
																				)
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		(ReturnStmt
																		)
																	)
																	(Parameter
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(AssignExpr
																			NameExpr
																				SimpleName
																			(MethodCallExpr
																				NameExpr
																					SimpleName
																				NameExpr
																					SimpleName
																				SimpleName
																			)
																		)
																		LineComment
																	)
																	(IfStmt
																		(BinaryExpr
																			NameExpr
																				SimpleName
																			NullLiteralExpr
																		)
																		(BlockStmt
																			(ExpressionStmt
																				(MethodCallExpr
																					StringLiteralExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																			(ExpressionStmt
																				(MethodCallExpr
																					NameExpr
																						SimpleName
																					SimpleName
																				)
																			)
																			(ExpressionStmt
																				(MethodCallExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																			(ReturnStmt
																			)
																		)
																	)
																)
															)
															(TryStmt
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																			SimpleName
																		)
																	)
																)
															)
														)
														(VoidType
														)
														SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
									(VoidType
									)
									SimpleName
									(Parameter
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
							)
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(TryStmt
										(CatchClause
											(BlockStmt
												(ReturnStmt
													LineComment
												)
											)
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
								(VoidType
								)
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												(ObjectCreationExpr
													(MethodDeclaration
														(BlockStmt
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(CastExpr
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			(ClassOrInterfaceType
																				SimpleName
																			)
																		)
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
															)
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	NullLiteralExpr
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		LineComment
																	)
																	(ReturnStmt
																	)
																)
															)
															(IfStmt
																(InstanceOfExpr
																	NameExpr
																		SimpleName
																	(ClassOrInterfaceType
																		SimpleName
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			(ObjectCreationExpr
																				NullLiteralExpr
																				(ClassOrInterfaceType
																					SimpleName
																				)
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(ReturnStmt
																	)
																)
															)
															(TryStmt
																(CatchClause
																	(BlockStmt
																		(ExpressionStmt
																			(MethodCallExpr
																				StringLiteralExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		(ExpressionStmt
																			(MethodCallExpr
																				(ObjectCreationExpr
																					NameExpr
																						SimpleName
																					(ClassOrInterfaceType
																						SimpleName
																					)
																				)
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		(ReturnStmt
																		)
																	)
																	(Parameter
																		SimpleName
																		(ClassOrInterfaceType
																			SimpleName
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(TryStmt
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																			SimpleName
																		)
																	)
																)
															)
														)
														(VoidType
														)
														SimpleName
													)
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
									)
									(VoidType
									)
									SimpleName
									(Parameter
										SimpleName
										(ClassOrInterfaceType
											SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
							)
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(TryStmt
										(CatchClause
											(BlockStmt
												(ReturnStmt
													LineComment
												)
											)
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
								(VoidType
								)
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
								StringLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

