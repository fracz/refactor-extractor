/**
 * Parses a string as a date. RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021)
 * or DATE-TIME (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC).
 *
 * @param when The string to parse
 * @throws ParseException if not able to parse as a date
 */
private static Date parseDate(String when) throws ParseException {
    if (!DATE_TIME.matcher(when).matches()) {
        throw new ParseException(when, 0);
    }
    if (when.length() == 8) {
        // Show only year/month/day
        return buildDateFormat().parse(when);
    } else {
        // The when string can be local time, or UTC if it ends with a Z
        Date date;
        if (when.length() == 16 && when.charAt(15) == 'Z') {
            date = buildDateTimeFormat().parse(when.substring(0, 15));
            Calendar calendar = new GregorianCalendar();
            long milliseconds = date.getTime();
            // Account for time zone difference
            milliseconds += calendar.get(Calendar.ZONE_OFFSET);
            // Might need to correct for daylight savings time, but use target time since
            // now might be in DST but not then, or vice versa
            calendar.setTime(new Date(milliseconds));
            milliseconds += calendar.get(Calendar.DST_OFFSET);
            date = new Date(milliseconds);
        } else {
            date = buildDateTimeFormat().parse(when);
        }
        return date;
    }
}||||||||/**
 * Parses a string as a date. RFC 2445 allows the start and end fields to be of type DATE (e.g. 20081021)
 * or DATE-TIME (e.g. 20081021T123000 for local time, or 20081021T123000Z for UTC).
 *
 * @param when The string to parse
 * @throws ParseException if not able to parse as a date
 */
private static long parseDate(String when) throws ParseException {
    if (!DATE_TIME.matcher(when).matches()) {
        throw new ParseException(when, 0);
    }
    if (when.length() == 8) {
        // Show only year/month/day
        DateFormat format = new SimpleDateFormat("yyyyMMdd", Locale.ENGLISH);
        // For dates without a time, for purposes of interacting with Android, the resulting timestamp
        // needs to be midnight of that day in GMT. See:
        // http://code.google.com/p/android/issues/detail?id=8330
        format.setTimeZone(TimeZone.getTimeZone("GMT"));
        return format.parse(when).getTime();
    }
    // The when string can be local time, or UTC if it ends with a Z
    if (when.length() == 16 && when.charAt(15) == 'Z') {
        long milliseconds = parseDateTimeString(when.substring(0, 15));
        Calendar calendar = new GregorianCalendar();
        // Account for time zone difference
        milliseconds += calendar.get(Calendar.ZONE_OFFSET);
        // Might need to correct for daylight savings time, but use target time since
        // now might be in DST but not then, or vice versa
        calendar.setTime(new Date(milliseconds));
        return milliseconds + calendar.get(Calendar.DST_OFFSET);
    }
    return parseDateTimeString(when);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BinaryExpr
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							(CharLiteralExpr
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
				(ReturnStmt
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
					LineComment
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								StringLiteralExpr
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				(BinaryExpr
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					(CharLiteralExpr
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									(IntegerLiteralExpr
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

