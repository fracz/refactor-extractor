/**
 * Executes a given line in the interpreter.
 *
 * @param command the command to be executed in the client
 */
public void execInterpreter(final String command, final ICallback<Object, InterpreterResponse> onResponseReceived) {
    nextResponse = null;
    if (waitingForInput) {
        inputReceived = command;
        waitingForInput = false;
    // the thread that we started in the last exec is still alive if we were waiting for an input.
    } else {
        // create a thread that'll keep locked until an answer is received from the server.
        new Task.Backgroundable(myProject, "REPL Communication", true) {

            @Override
            public void run(@NotNull ProgressIndicator indicator) {
                boolean needInput = false;
                try {
                    Pair<String, Boolean> executed = null;
                    // the 1st time we'll do a connection attempt, we can try to connect n times (until the 1st time the connection
                    // is accepted) -- that's mostly because the server may take a while to get started.
                    int commAttempts = 0;
                    while (true) {
                        if (indicator.isCanceled()) {
                            return;
                        }
                        executed = exec(command);
                        // executed.o1 is not null only if we had an error
                        // Was "refused", but it didn't
                        String refusedConnPattern = "Failed to read servers response";
                        // the XML-RPC library)
                        if (executed.first != null && executed.first.indexOf(refusedConnPattern) != -1) {
                            if (firstCommWorked) {
                                break;
                            } else {
                                if (commAttempts < MAX_ATTEMPTS) {
                                    commAttempts += 1;
                                    Thread.sleep(250);
                                    executed = new Pair<String, Boolean>("", executed.second);
                                } else {
                                    break;
                                }
                            }
                        } else {
                            break;
                        }
                    // unreachable code!! -- commented because eclipse will complain about it
                    // throw new RuntimeException("Can never get here!");
                    }
                    firstCommWorked = true;
                    boolean more = executed.second;
                    nextResponse = new InterpreterResponse(more, needInput);
                } catch (Exception e) {
                    nextResponse = new InterpreterResponse(false, needInput);
                }
            }
        }.queue();
        // busy loop waiting for the answer (or having the console die).
        ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() {

            @Override
            public void run() {
                final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator();
                progressIndicator.setText("Waiting for REPL response with " + (int) (TIMEOUT / 10e8) + "s timeout");
                final long startTime = System.nanoTime();
                while (nextResponse == null) {
                    if (progressIndicator.isCanceled()) {
                        LOG.debug("Canceled");
                        nextResponse = new InterpreterResponse(false, false);
                    }
                    final long time = System.nanoTime() - startTime;
                    progressIndicator.setFraction(((double) time) / TIMEOUT);
                    if (time > TIMEOUT) {
                        LOG.debug("Timeout exceeded");
                        nextResponse = new InterpreterResponse(false, false);
                    }
                    synchronized (lock2) {
                        try {
                            lock2.wait(20);
                        } catch (InterruptedException e) {
                            LOG.error(e);
                        }
                    }
                }
                onResponseReceived.call(nextResponse);
            }
        }, "Waiting for REPL response", true, myProject);
    }
}||||||||/**
 * Executes a given line in the interpreter.
 *
 * @param command the command to be executed in the client
 */
public void execInterpreter(final String command, final ICallback<Object, InterpreterResponse> onResponseReceived) {
    nextResponse = null;
    if (waitingForInput) {
        inputReceived = command;
        waitingForInput = false;
    // the thread that we started in the last exec is still alive if we were waiting for an input.
    } else {
        // create a thread that'll keep locked until an answer is received from the server.
        new Task.Backgroundable(myProject, "REPL Communication", true) {

            @Override
            public void run(@NotNull ProgressIndicator indicator) {
                boolean needInput = false;
                try {
                    Pair<String, Boolean> executed = null;
                    // the 1st time we'll do a connection attempt, we can try to connect n times (until the 1st time the connection
                    // is accepted) -- that's mostly because the server may take a while to get started.
                    int commAttempts = 0;
                    while (true) {
                        if (indicator.isCanceled()) {
                            return;
                        }
                        executed = exec(command);
                        // executed.o1 is not null only if we had an error
                        String refusedConnPattern = "Failed to read servers response";
                        // the XML-RPC library)
                        if (executed.first != null && executed.first.indexOf(refusedConnPattern) != -1) {
                            if (firstCommWorked) {
                                break;
                            } else {
                                if (commAttempts < MAX_ATTEMPTS) {
                                    commAttempts += 1;
                                    Thread.sleep(250);
                                    executed = new Pair<String, Boolean>("", executed.second);
                                } else {
                                    break;
                                }
                            }
                        } else {
                            break;
                        }
                    // unreachable code!! -- commented because eclipse will complain about it
                    // throw new RuntimeException("Can never get here!");
                    }
                    firstCommWorked = true;
                    boolean more = executed.second;
                    nextResponse = new InterpreterResponse(more, needInput);
                } catch (Exception e) {
                    nextResponse = new InterpreterResponse(false, needInput);
                }
            }
        }.queue();
        // busy loop waiting for the answer (or having the console die).
        ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() {

            @Override
            public void run() {
                final ProgressIndicator progressIndicator = ProgressManager.getInstance().getProgressIndicator();
                progressIndicator.setText("Waiting for REPL response with " + (int) (TIMEOUT / 10e8) + "s timeout");
                final long startTime = System.nanoTime();
                while (nextResponse == null) {
                    if (progressIndicator.isCanceled()) {
                        LOG.debug("Canceled");
                        nextResponse = new InterpreterResponse(false, false);
                    }
                    final long time = System.nanoTime() - startTime;
                    progressIndicator.setFraction(((double) time) / TIMEOUT);
                    if (time > TIMEOUT) {
                        LOG.debug("Timeout exceeded");
                        nextResponse = new InterpreterResponse(false, false);
                    }
                    synchronized (lock2) {
                        try {
                            lock2.wait(20);
                        } catch (InterruptedException e) {
                            LOG.error(e);
                        }
                    }
                }
                onResponseReceived.call(nextResponse);
            }
        }, "Waiting for REPL response", true, myProject);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(BooleanLiteralExpr
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(TryStmt
										(CatchClause
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(ObjectCreationExpr
															(BooleanLiteralExpr
															)
															NameExpr
																SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
											)
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														NullLiteralExpr
														SimpleName
														(ClassOrInterfaceType
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(IntegerLiteralExpr
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
												LineComment
											)
											(WhileStmt
												(BlockStmt
													(IfStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ReturnStmt
															)
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
															)
														)
													)
													(ExpressionStmt
														(VariableDeclarationExpr
															(VariableDeclarator
																StringLiteralExpr
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														LineComment
													)
													(IfStmt
														(BinaryExpr
															(BinaryExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																NullLiteralExpr
															)
															(BinaryExpr
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(UnaryExpr
																	(IntegerLiteralExpr
																	)
																)
															)
														)
														(BlockStmt
															(BreakStmt
															)
														)
														(BlockStmt
															(IfStmt
																NameExpr
																	SimpleName
																(BlockStmt
																	(IfStmt
																		(BinaryExpr
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																		)
																		(BlockStmt
																			(BreakStmt
																			)
																		)
																		(BlockStmt
																			(ExpressionStmt
																				(AssignExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																			)
																			(ExpressionStmt
																				(MethodCallExpr
																					(IntegerLiteralExpr
																					)
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																			(ExpressionStmt
																				(AssignExpr
																					NameExpr
																						SimpleName
																					(ObjectCreationExpr
																						StringLiteralExpr
																						(FieldAccessExpr
																							SimpleName
																							NameExpr
																								SimpleName
																						)
																						(ClassOrInterfaceType
																							SimpleName
																							(ClassOrInterfaceType
																								SimpleName
																							)
																							(ClassOrInterfaceType
																								SimpleName
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
																(BlockStmt
																	(BreakStmt
																	)
																)
															)
														)
														LineComment
													)
												)
												(BooleanLiteralExpr
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(ObjectCreationExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									(MarkerAnnotationExpr
										Name
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							NameExpr
								SimpleName
							StringLiteralExpr
							(BooleanLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(CastExpr
														(EnclosedExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(DoubleLiteralExpr
																)
															)
														)
														(PrimitiveType
														)
													)
												)
												StringLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(WhileStmt
										(BlockStmt
											(IfStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(ObjectCreationExpr
																(BooleanLiteralExpr
																)
																(BooleanLiteralExpr
																)
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														(EnclosedExpr
															(CastExpr
																NameExpr
																	SimpleName
																(PrimitiveType
																)
															)
														)
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(ObjectCreationExpr
																(BooleanLiteralExpr
																)
																(BooleanLiteralExpr
																)
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
												)
											)
											(SynchronizedStmt
												(BlockStmt
													(TryStmt
														(CatchClause
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
															)
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	(IntegerLiteralExpr
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
												)
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						StringLiteralExpr
						(BooleanLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(BooleanLiteralExpr
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(TryStmt
										(CatchClause
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(ObjectCreationExpr
															(BooleanLiteralExpr
															)
															NameExpr
																SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
											)
											(Parameter
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										(BlockStmt
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														NullLiteralExpr
														SimpleName
														(ClassOrInterfaceType
															SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
															(ClassOrInterfaceType
																SimpleName
															)
														)
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(IntegerLiteralExpr
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
												LineComment
											)
											(WhileStmt
												(BlockStmt
													(IfStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(BlockStmt
															(ReturnStmt
															)
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(MethodCallExpr
																NameExpr
																	SimpleName
																SimpleName
															)
														)
													)
													(ExpressionStmt
														(VariableDeclarationExpr
															(VariableDeclarator
																StringLiteralExpr
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
													(IfStmt
														(BinaryExpr
															(BinaryExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																NullLiteralExpr
															)
															(BinaryExpr
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	SimpleName
																	(FieldAccessExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(UnaryExpr
																	(IntegerLiteralExpr
																	)
																)
															)
														)
														(BlockStmt
															(BreakStmt
															)
														)
														(BlockStmt
															(IfStmt
																NameExpr
																	SimpleName
																(BlockStmt
																	(IfStmt
																		(BinaryExpr
																			NameExpr
																				SimpleName
																			NameExpr
																				SimpleName
																		)
																		(BlockStmt
																			(BreakStmt
																			)
																		)
																		(BlockStmt
																			(ExpressionStmt
																				(AssignExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																			)
																			(ExpressionStmt
																				(MethodCallExpr
																					(IntegerLiteralExpr
																					)
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																			)
																			(ExpressionStmt
																				(AssignExpr
																					NameExpr
																						SimpleName
																					(ObjectCreationExpr
																						StringLiteralExpr
																						(FieldAccessExpr
																							SimpleName
																							NameExpr
																								SimpleName
																						)
																						(ClassOrInterfaceType
																							SimpleName
																							(ClassOrInterfaceType
																								SimpleName
																							)
																							(ClassOrInterfaceType
																								SimpleName
																							)
																						)
																					)
																				)
																			)
																		)
																	)
																)
																(BlockStmt
																	(BreakStmt
																	)
																)
															)
														)
														LineComment
													)
												)
												(BooleanLiteralExpr
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(BooleanLiteralExpr
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													(ObjectCreationExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									(MarkerAnnotationExpr
										Name
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							NameExpr
								SimpleName
							StringLiteralExpr
							(BooleanLiteralExpr
							)
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(CastExpr
														(EnclosedExpr
															(BinaryExpr
																NameExpr
																	SimpleName
																(DoubleLiteralExpr
																)
															)
														)
														(PrimitiveType
														)
													)
												)
												StringLiteralExpr
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(WhileStmt
										(BlockStmt
											(IfStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(ObjectCreationExpr
																(BooleanLiteralExpr
																)
																(BooleanLiteralExpr
																)
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															NameExpr
																SimpleName
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(BinaryExpr
														(EnclosedExpr
															(CastExpr
																NameExpr
																	SimpleName
																(PrimitiveType
																)
															)
														)
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
													(ExpressionStmt
														(AssignExpr
															NameExpr
																SimpleName
															(ObjectCreationExpr
																(BooleanLiteralExpr
																)
																(BooleanLiteralExpr
																)
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
												)
											)
											(SynchronizedStmt
												(BlockStmt
													(TryStmt
														(CatchClause
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
															)
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(BlockStmt
															(ExpressionStmt
																(MethodCallExpr
																	(IntegerLiteralExpr
																	)
																	SimpleName
																	NameExpr
																		SimpleName
																)
															)
														)
													)
												)
												NameExpr
													SimpleName
											)
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						StringLiteralExpr
						(BooleanLiteralExpr
						)
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)

