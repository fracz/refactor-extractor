/**
 * Tests that a java_proto_library only provides direct jars corresponding on the proto_library
 * rules it directly depends on, excluding anything that the proto_library rules depends on
 * themselves. This does not concern strict-deps in the compilation of the generated Java code
 * itself, only compilation of regular code in java_library/java_binary and similar rules.
 *
 * <p>Here, a java_lite_proto_library dependes on an alias proto. We make sure that the system
 * behaves as if we depend directly on the aliased proto_library.
 */
@Test
@Ignore
public // java_lite_proto_library.
void jplCorrectlyDefinesDirectJars_strictDepsEnabled_aliasProto() throws Exception {
    scratch.file("x/BUILD", "load('//tools/build_rules/java_lite_proto_library:java_lite_proto_library.bzl',", "    'java_lite_proto_library')", "java_lite_proto_library(name = 'foo_java_proto_lite', deps = [':foo_proto'], ", "    strict_deps = 1)", "proto_library(", "    name = 'foo_proto',", "    deps = [ ':bar_proto' ],", ")", "proto_library(", "    name = 'bar_proto',", "    srcs = [ 'bar.proto' ],", ")");
    JavaCompilationArgsProvider compilationArgsProvider = getJavaCompilationArgsProvider(getConfiguredTarget("//x:foo_java_proto_lite"));
    Iterable<String> directJars = prettyJarNames(compilationArgsProvider.getJavaCompilationArgs().getCompileTimeJars());
    assertThat(directJars).containsExactly("x/libbar_proto-lite-hjar.jar");
}||||||||/**
 * Tests that a java_proto_library only provides direct jars corresponding on the proto_library
 * rules it directly depends on, excluding anything that the proto_library rules depends on
 * themselves. This does not concern strict-deps in the compilation of the generated Java code
 * itself, only compilation of regular code in java_library/java_binary and similar rules.
 *
 * <p>Here, a java_lite_proto_library dependes on an alias proto. We make sure that the system
 * behaves as if we depend directly on the aliased proto_library.
 */
@Test
@Ignore
public // java_lite_proto_library.
void jplCorrectlyDefinesDirectJars_strictDepsEnabled_aliasProto() throws Exception {
    scratch.file("x/BUILD", "load('//tools/build_rules/java_lite_proto_library:java_lite_proto_library.bzl',", "    'java_lite_proto_library')", "java_lite_proto_library(name = 'foo_java_proto_lite', deps = [':foo_proto'], ", "    strict_deps = 1)", "proto_library(", "    name = 'foo_proto',", "    deps = [ ':bar_proto' ],", ")", "proto_library(", "    name = 'bar_proto',", "    srcs = [ 'bar.proto' ],", ")");
    JavaCompilationArgsProvider compilationArgsProvider = getProvider(JavaCompilationArgsProvider.class, getConfiguredTarget("//x:foo_java_proto_lite"));
    Iterable<String> directJars = prettyJarNames(compilationArgsProvider.getJavaCompilationArgs().getCompileTimeJars());
    assertThat(directJars).containsExactly("x/libbar_proto-lite-hjar.jar");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(VoidType
		LineComment
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(ClassExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
	)
	(VoidType
		LineComment
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

