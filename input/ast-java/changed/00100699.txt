public void launch() {
    // TODO entire class is a total mess as of release 0136.
    // This will be cleaned up significantly over the next couple months.
    // all params have to be stored as separate items,
    // so a growable array needs to be used. i.e. -Xms128m -Xmx1024m
    // will throw an error if it's shoved into a single array element
    // Vector params = new Vector();
    // get around Apple's Java 1.5 bugs
    // params.add("/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Commands/java");
    // params.add("java");
    // System.out.println("0");
    String[] machineParamList = getMachineParams();
    String[] sketchParamList = getSketchParams();
    vm = launchVirtualMachine(machineParamList, sketchParamList);
    if (vm != null) {
        generateTrace(null);
    // try {
    // generateTrace(new PrintWriter("/Users/fry/Desktop/output.txt"));
    // } catch (Exception e) {
    // e.printStackTrace();
    // }
    }
}||||||||public void launch(Sketch sketch, String appletClassName, boolean presenting) {
    this.sketch = sketch;
    this.appletClassName = appletClassName;
    this.presenting = presenting;
    // TODO entire class is a total mess as of release 0136.
    // This will be cleaned up significantly over the next couple months.
    // all params have to be stored as separate items,
    // so a growable array needs to be used. i.e. -Xms128m -Xmx1024m
    // will throw an error if it's shoved into a single array element
    // Vector params = new Vector();
    // get around Apple's Java 1.5 bugs
    // params.add("/System/Library/Frameworks/JavaVM.framework/Versions/1.4.2/Commands/java");
    // params.add("java");
    // System.out.println("0");
    String[] machineParamList = getMachineParams();
    String[] sketchParamList = getSketchParams();
    vm = launchVirtualMachine(machineParamList, sketchParamList);
    if (vm != null) {
        generateTrace(null);
    // try {
    // generateTrace(new PrintWriter("/Users/fry/Desktop/output.txt"));
    // } catch (Exception e) {
    // e.printStackTrace();
    // }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NullLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NullLiteralExpr
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

