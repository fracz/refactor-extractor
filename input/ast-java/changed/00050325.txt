/**
 * Abstract convenience method that assumes the credential passed in are a
 * subclass of UsernamePasswordCredential.
 *
 * @param credentials the credential representing the Username and Password
 * presented to CAS
 * @return true if the credential are authentic, false otherwise.
 * @throws AuthenticationException if authenticity cannot be determined.
 */
protected abstract boolean authenticateUsernamePasswordInternal(final UsernamePasswordCredential credentials) throws AuthenticationException;||||||||/**
 * Authenticates a username/password credential by an arbitrary strategy.
 *
 * @param username Non-null username produced by {@link #principalNameTransformer} acting on
 * {@link org.jasig.cas.authentication.UsernamePasswordCredential#getUsername()}.
 * @param password Password to authenticate.
 *
 * @return Principal resolved from credential on authentication success or null if no principal could be resolved
 * from the credential.
 *
 * @throws GeneralSecurityException On authentication failure.
 * @throws PreventedException On the indeterminate case when authentication is prevented.
 */
protected abstract Principal authenticateUsernamePasswordInternal(String username, String password) throws GeneralSecurityException, PreventedException;||||||||(MethodDeclaration
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

