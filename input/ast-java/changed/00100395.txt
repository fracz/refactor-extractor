/**
 * Emit a sentence of text, defined as a chunk of text without any newlines.
 * @param stop non-inclusive, the end of the text in question
 * @return false if cannot fit
 */
protected boolean textSentence(char[] buffer, int start, int stop, float boxWidth, float spaceWidth) {
    float runningX = 0;
    // Keep track of this separately from index, since we'll need to back up
    // from index when breaking words that are too long to fit.
    int lineStart = start;
    int wordStart = start;
    int index = start;
    while (index <= stop) {
        // boundary of a word or end of this sentence
        if ((buffer[index] == ' ') || (index == stop)) {
            // System.out.println((index == stop) + " " + wordStart + " " + index);
            if (wordStart == index) {
                // end of line, nothing is fitting
                return false;
            }
            float wordWidth = textWidthImpl(buffer, wordStart, index);
            if (runningX + wordWidth >= boxWidth) {
                if (runningX != 0) {
                    // Next word is too big, output the current line and advance
                    index = wordStart;
                    textSentenceBreak(lineStart, index);
                    // Eat whitespace before the first word on the next line.
                    while ((index < stop) && (buffer[index] == ' ')) {
                        index++;
                    }
                } else {
                    // max width, and send the rest of the word to the next line.
                    do {
                        index--;
                        if (index == wordStart) {
                            // Float.NaN;
                            return false;
                        }
                        wordWidth = textWidthImpl(buffer, wordStart, index);
                    } while (wordWidth > boxWidth);
                    // textLineImpl(buffer, lineStart, index, x, y);
                    textSentenceBreak(lineStart, index);
                }
                lineStart = index;
                wordStart = index;
                runningX = 0;
            } else if (index == stop) {
                // last line in the block, time to unload
                // textLineImpl(buffer, lineStart, index, x, y);
                textSentenceBreak(lineStart, index);
                // y += textLeading;
                index++;
            } else {
                // this word will fit, just add it to the line
                runningX += wordWidth;
                // move on to the next word including the space before the word
                wordStart = index;
                index++;
            }
        } else {
            // not a space or the last character
            // this is just another letter
            index++;
        }
    }
    // return y;
    return true;
}||||||||/**
 * Emit a sentence of text, defined as a chunk of text without any newlines.
 * @param stop non-inclusive, the end of the text in question
 * @return false if cannot fit
 */
protected boolean textSentence(char[] buffer, int start, int stop, float boxWidth, float spaceWidth) {
    float runningX = 0;
    // Keep track of this separately from index, since we'll need to back up
    // from index when breaking words that are too long to fit.
    int lineStart = start;
    int wordStart = start;
    int index = start;
    while (index <= stop) {
        // boundary of a word or end of this sentence
        if ((buffer[index] == ' ') || (index == stop)) {
            // System.out.println((index == stop) + " " + wordStart + " " + index);
            if (wordStart == index) {
                // end of line, nothing is fitting
                return false;
            }
            float wordWidth = textWidthImpl(buffer, wordStart, index);
            if (runningX + wordWidth >= boxWidth) {
                if (runningX != 0) {
                    // Next word is too big, output the current line and advance
                    index = wordStart;
                    textSentenceBreak(lineStart, index);
                    // Eat whitespace before the first word on the next line.
                    while ((index < stop) && (buffer[index] == ' ')) {
                        index++;
                    }
                } else {
                    // max width, and send the rest of the word to the next line.
                    if (index - wordStart < 25) {
                        do {
                            index--;
                            if (index == wordStart) {
                                // Not a single char will fit on this line. screw 'em.
                                return false;
                            }
                            wordWidth = textWidthImpl(buffer, wordStart, index);
                        } while (wordWidth > boxWidth);
                    } else {
                        // This word is more than 25 characters long, might be faster to
                        // start from the beginning of the text rather than shaving from
                        // the end of it, which is super slow if it's 1000s of letters.
                        // https://github.com/processing/processing/issues/211
                        int lastIndex = index;
                        index = wordStart + 1;
                        // walk to the right while things fit
                        while ((wordWidth = textWidthImpl(buffer, wordStart, index)) < boxWidth) {
                            index++;
                            if (index > lastIndex) {
                                // Unreachable?
                                break;
                            }
                        }
                        index--;
                        if (index == wordStart) {
                            // nothing fits
                            return false;
                        }
                    }
                    // textLineImpl(buffer, lineStart, index, x, y);
                    textSentenceBreak(lineStart, index);
                }
                lineStart = index;
                wordStart = index;
                runningX = 0;
            } else if (index == stop) {
                // last line in the block, time to unload
                // textLineImpl(buffer, lineStart, index, x, y);
                textSentenceBreak(lineStart, index);
                // y += textLeading;
                index++;
            } else {
                // this word will fit, just add it to the line
                runningX += wordWidth;
                // move on to the next word including the space before the word
                wordStart = index;
                index++;
            }
        } else {
            // not a space or the last character
            // this is just another letter
            index++;
        }
    }
    // return y;
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(CharLiteralExpr
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
									LineComment
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(BlockStmt
										(DoStmt
											(BlockStmt
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
												(IfStmt
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(BlockStmt
														(ReturnStmt
															(BooleanLiteralExpr
															)
															LineComment
														)
													)
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															NameExpr
																SimpleName
															SimpleName
														)
													)
												)
											)
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											LineComment
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(WhileStmt
											(BlockStmt
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
											)
											(BinaryExpr
												(EnclosedExpr
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(EnclosedExpr
													(BinaryExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(CharLiteralExpr
														)
													)
												)
											)
											LineComment
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
					)
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								(ArrayAccessExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(CharLiteralExpr
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
									LineComment
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(UnaryExpr
											NameExpr
												SimpleName
										)
										LineComment
									)
								)
							)
							(BlockStmt
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(BlockStmt
										(IfStmt
											(BinaryExpr
												(BinaryExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
											(BlockStmt
												(ExpressionStmt
													(VariableDeclarationExpr
														(VariableDeclarator
															NameExpr
																SimpleName
															SimpleName
															(PrimitiveType
															)
														)
													)
													LineComment
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
													)
												)
												(WhileStmt
													(BlockStmt
														(ExpressionStmt
															(UnaryExpr
																NameExpr
																	SimpleName
															)
														)
														(IfStmt
															(BinaryExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(BlockStmt
																(BreakStmt
																	LineComment
																)
															)
														)
													)
													(BinaryExpr
														(EnclosedExpr
															(AssignExpr
																NameExpr
																	SimpleName
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	SimpleName
																)
															)
														)
														NameExpr
															SimpleName
													)
													LineComment
												)
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
												(IfStmt
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
													(BlockStmt
														(ReturnStmt
															(BooleanLiteralExpr
															)
															LineComment
														)
													)
												)
											)
											(BlockStmt
												(DoStmt
													(BlockStmt
														(ExpressionStmt
															(UnaryExpr
																NameExpr
																	SimpleName
															)
														)
														(IfStmt
															(BinaryExpr
																NameExpr
																	SimpleName
																NameExpr
																	SimpleName
															)
															(BlockStmt
																(ReturnStmt
																	(BooleanLiteralExpr
																	)
																	LineComment
																)
															)
														)
														(ExpressionStmt
															(AssignExpr
																NameExpr
																	SimpleName
																(MethodCallExpr
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	NameExpr
																		SimpleName
																	SimpleName
																)
															)
														)
													)
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
											LineComment
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
											)
										)
										(WhileStmt
											(BlockStmt
												(ExpressionStmt
													(UnaryExpr
														NameExpr
															SimpleName
													)
												)
											)
											(BinaryExpr
												(EnclosedExpr
													(BinaryExpr
														NameExpr
															SimpleName
														NameExpr
															SimpleName
													)
												)
												(EnclosedExpr
													(BinaryExpr
														(ArrayAccessExpr
															NameExpr
																SimpleName
															NameExpr
																SimpleName
														)
														(CharLiteralExpr
														)
													)
												)
											)
											LineComment
										)
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
							)
						)
					)
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

