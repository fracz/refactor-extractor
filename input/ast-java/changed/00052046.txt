/**
 * Attempts to create a directory with the name of the given path, creating
 * ancestors as necessary.
 *
 * <p>Postcondition: completes normally iff {@code dir} denotes an existing
 * directory (not necessarily canonical); completes abruptly otherwise.
 *
 * @return true if the directory was successfully created anew, false if it
 * already existed (including the case where {@code dir} denotes a symlink
 * to an existing directory)
 * @throws IOException if the directory could not be created
 */
@ThreadSafe
public static boolean createDirectoryAndParents(Path dir) throws IOException {
    // Don't attempt to create the root directory.
    if (dir.getParentDirectory() == null) {
        return false;
    }
    FileSystem filesystem = dir.getFileSystem();
    if (filesystem instanceof UnionFileSystem) {
        // If using UnionFS, make sure that we do not traverse filesystem boundaries when creating
        // parent directories by rehoming the path on the most specific filesystem.
        FileSystem delegate = ((UnionFileSystem) filesystem).getDelegate(dir);
        dir = delegate.getPath(dir.asFragment());
    }
    try {
        return dir.createDirectory();
    } catch (IOException e) {
        if (e.getMessage().endsWith(" (No such file or directory)")) {
            // ENOENT
            createDirectoryAndParents(dir.getParentDirectory());
            return dir.createDirectory();
        } else if (e.getMessage().endsWith(" (File exists)") && dir.isDirectory()) {
            // EEXIST
            return false;
        } else {
            // some other error (e.g. ENOTDIR, EACCES, etc.)
            throw e;
        }
    }
}||||||||/**
 * Attempts to create a directory with the name of the given path, creating
 * ancestors as necessary.
 *
 * <p>Postcondition: completes normally iff {@code dir} denotes an existing
 * directory (not necessarily canonical); completes abruptly otherwise.
 *
 * @return true if the directory was successfully created anew, false if it
 * already existed (including the case where {@code dir} denotes a symlink
 * to an existing directory)
 * @throws IOException if the directory could not be created
 */
@ThreadSafe
public static boolean createDirectoryAndParents(Path dir) throws IOException {
    return createDirectoryAndParentsWithCache(null, dir);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NullLiteralExpr
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(EnclosedExpr
									(CastExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(IfStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									StringLiteralExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ThrowStmt
									NameExpr
										SimpleName
									LineComment
								)
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
									LineComment
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								LineComment
							)
							(ReturnStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(MethodCallExpr
				NullLiteralExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

