@Override
public void launch(final MessageInput2 input) throws MisfireException {
    serverStatus.awaitRunning(new Runnable() {

        @Override
        public void run() {
            lifecycleStateChange(Lifecycle.RUNNING);
        }
    });
    // listen for lifecycle changes
    serverEventBus.register(this);
    final Properties props = new Properties();
    props.put("group.id", GROUP_ID);
    props.put("client.id", "gl2-" + nodeId + "-" + input.getId());
    props.put("fetch.min.bytes", String.valueOf(configuration.getInt(CK_FETCH_MIN_BYTES)));
    props.put("fetch.wait.max.ms", String.valueOf(configuration.getInt(CK_FETCH_WAIT_MAX)));
    props.put("zookeeper.connect", configuration.getString(CK_ZOOKEEPER));
    // Default auto commit interval is 60 seconds. Reduce to 1 second to minimize message duplication
    // if something breaks.
    props.put("auto.commit.interval.ms", "1000");
    final int numThreads = (int) configuration.getInt(CK_THREADS);
    final ConsumerConfig consumerConfig = new ConsumerConfig(props);
    cc = Consumer.createJavaConsumerConnector(consumerConfig);
    final TopicFilter filter = new Whitelist(configuration.getString(CK_TOPIC_FILTER));
    final List<KafkaStream<byte[], byte[]>> streams = cc.createMessageStreamsByFilter(filter, numThreads);
    final ExecutorService executor = Executors.newFixedThreadPool(numThreads);
    // this is being used during shutdown to first stop all submitted jobs before committing the offsets back to zookeeper
    // and then shutting down the connection.
    // this is to avoid yanking away the connection from the consumer runnables
    stopLatch = new CountDownLatch(streams.size());
    for (final KafkaStream<byte[], byte[]> stream : streams) {
        executor.submit(new Runnable() {

            public void run() {
                final ConsumerIterator<byte[], byte[]> consumerIterator = stream.iterator();
                // noinspection WhileLoopReplaceableByForEach
                while (consumerIterator.hasNext()) {
                    if (paused) {
                        // we try not to spin here, so we wait until the lifecycle goes back to running.
                        LOG.debug("Message processing is paused, blocking until message processing is turned back on.");
                        Uninterruptibles.awaitUninterruptibly(pausedLatch);
                    }
                    // check for being stopped before actually getting the message, otherwise we could end up losing that message
                    if (stopped) {
                        break;
                    }
                    // process the message, this will immediately mark the message as having been processed. this gets tricky
                    // if we get an exception about processing it down below.
                    final MessageAndMetadata<byte[], byte[]> message = consumerIterator.next();
                    final byte[] bytes = message.message();
                    totalBytesRead.addAndGet(bytes.length);
                    lastSecBytesReadTmp.addAndGet(bytes.length);
                    final RawMessage rawMessage = new RawMessage("radio-msgpack", input.getId(), null, bytes);
                    // the loop below is like this because we cannot "unsee" the message we've just gotten by calling .next()
                    // the high level consumer of Kafka marks the message as "processed" immediately after being returned from next.
                    // thus we need to retry processing it.
                    boolean retry = false;
                    int retryCount = 0;
                    do {
                        try {
                            if (retry) {
                                // don't try immediately if the buffer was full, try not spin too much
                                LOG.debug("Waiting 10ms to retry inserting into buffer, retried {} times", retryCount);
                                // TODO magic number
                                Uninterruptibles.sleepUninterruptibly(10, TimeUnit.MILLISECONDS);
                            }
                            // try to process the message, if it succeeds, we immediately move on to the next message (retry will be false)
                            // if parsing the message failed, this will return 'true' (sorry for the stupid return value handling, amqp needs to know
                            // whether to ack or nack the message)
                            final boolean discardMalformedMessage = input.processRawMessageFailFast(rawMessage);
                            if (discardMalformedMessage) {
                                LOG.debug("Message {} was malformed, skipping message.", rawMessage.getId());
                            }
                            retry = false;
                        } catch (BufferOutOfCapacityException e) {
                            LOG.debug("Input buffer full, retrying Kafka message processing");
                            retry = true;
                            retryCount++;
                        } catch (ProcessingDisabledException e) {
                            LOG.debug("Processing was disabled after we read the message but before we could insert it into " + "the buffer. We cache this one message, and should block on the next iteration.");
                            input.processRawMessage(rawMessage);
                            retry = false;
                        }
                    } while (retry);
                }
                // explicitly commit our offsets when stopping.
                // this might trigger a couple of times, but it won't hurt
                cc.commitOffsets();
                stopLatch.countDown();
            }
        });
    }
    scheduler.scheduleAtFixedRate(new Runnable() {

        @Override
        public void run() {
            lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));
        }
    }, 1, 1, TimeUnit.SECONDS);
}||||||||@Override
public void launch(final MessageInput2 input) throws MisfireException {
    serverStatus.awaitRunning(new Runnable() {

        @Override
        public void run() {
            lifecycleStateChange(Lifecycle.RUNNING);
        }
    });
    // listen for lifecycle changes
    serverEventBus.register(this);
    final Properties props = new Properties();
    props.put("group.id", GROUP_ID);
    props.put("client.id", "gl2-" + nodeId + "-" + input.getId());
    props.put("fetch.min.bytes", String.valueOf(configuration.getInt(CK_FETCH_MIN_BYTES)));
    props.put("fetch.wait.max.ms", String.valueOf(configuration.getInt(CK_FETCH_WAIT_MAX)));
    props.put("zookeeper.connect", configuration.getString(CK_ZOOKEEPER));
    // Default auto commit interval is 60 seconds. Reduce to 1 second to minimize message duplication
    // if something breaks.
    props.put("auto.commit.interval.ms", "1000");
    final int numThreads = (int) configuration.getInt(CK_THREADS);
    final ConsumerConfig consumerConfig = new ConsumerConfig(props);
    cc = Consumer.createJavaConsumerConnector(consumerConfig);
    final TopicFilter filter = new Whitelist(configuration.getString(CK_TOPIC_FILTER));
    final List<KafkaStream<byte[], byte[]>> streams = cc.createMessageStreamsByFilter(filter, numThreads);
    final ExecutorService executor = Executors.newFixedThreadPool(numThreads);
    // this is being used during shutdown to first stop all submitted jobs before committing the offsets back to zookeeper
    // and then shutting down the connection.
    // this is to avoid yanking away the connection from the consumer runnables
    stopLatch = new CountDownLatch(streams.size());
    for (final KafkaStream<byte[], byte[]> stream : streams) {
        executor.submit(new Runnable() {

            public void run() {
                final ConsumerIterator<byte[], byte[]> consumerIterator = stream.iterator();
                // noinspection WhileLoopReplaceableByForEach
                while (consumerIterator.hasNext()) {
                    if (paused) {
                        // we try not to spin here, so we wait until the lifecycle goes back to running.
                        LOG.debug("Message processing is paused, blocking until message processing is turned back on.");
                        Uninterruptibles.awaitUninterruptibly(pausedLatch);
                    }
                    // check for being stopped before actually getting the message, otherwise we could end up losing that message
                    if (stopped) {
                        break;
                    }
                    // process the message, this will immediately mark the message as having been processed. this gets tricky
                    // if we get an exception about processing it down below.
                    final MessageAndMetadata<byte[], byte[]> message = consumerIterator.next();
                    final byte[] bytes = message.message();
                    totalBytesRead.addAndGet(bytes.length);
                    lastSecBytesReadTmp.addAndGet(bytes.length);
                    final RawMessage rawMessage = new RawMessage("radio-msgpack", input.getId(), null, bytes);
                    // the loop below is like this because we cannot "unsee" the message we've just gotten by calling .next()
                    // the high level consumer of Kafka marks the message as "processed" immediately after being returned from next.
                    // thus we need to retry processing it.
                    boolean retry = false;
                    int retryCount = 0;
                    do {
                        try {
                            if (retry) {
                                // don't try immediately if the buffer was full, try not spin too much
                                LOG.debug("Waiting 10ms to retry inserting into buffer, retried {} times", retryCount);
                                Uninterruptibles.sleepUninterruptibly(10, // TODO magic number
                                TimeUnit.MILLISECONDS);
                            }
                            // try to process the message, if it succeeds, we immediately move on to the next message (retry will be false)
                            // if parsing the message failed, this will return 'true' (sorry for the stupid return value handling, amqp needs to know
                            // whether to ack or nack the message)
                            final boolean discardMalformedMessage = input.processRawMessageFailFast(rawMessage);
                            if (discardMalformedMessage) {
                                LOG.debug("Message {} was malformed, skipping message.", rawMessage.getId());
                            }
                            retry = false;
                        } catch (BufferOutOfCapacityException e) {
                            LOG.debug("Input buffer full, retrying Kafka message processing");
                            retry = true;
                            retryCount++;
                        } catch (ProcessingDisabledException e) {
                            LOG.debug("Processing was disabled after we read the message but before we could insert it into " + "the buffer. We cache this one message, and should block on the next iteration.");
                            input.processRawMessage(rawMessage);
                            retry = false;
                        }
                    } while (retry);
                }
                // explicitly commit our offsets when stopping.
                // this might trigger a couple of times, but it won't hurt
                cc.commitOffsets();
                stopLatch.countDown();
            }
        });
    }
    scheduler.scheduleAtFixedRate(new Runnable() {

        @Override
        public void run() {
            lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));
        }
    }, 1, 1, TimeUnit.SECONDS);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ThisExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(PrimitiveType
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
													(ArrayType
														(PrimitiveType
														)
													)
													(ArrayType
														(PrimitiveType
														)
													)
												)
											)
										)
									)
									(WhileStmt
										(BlockStmt
											(IfStmt
												NameExpr
													SimpleName
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
														LineComment
													)
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(IfStmt
												NameExpr
													SimpleName
												(BlockStmt
													(BreakStmt
													)
												)
												LineComment
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(ClassOrInterfaceType
															SimpleName
															(ArrayType
																(PrimitiveType
																)
															)
															(ArrayType
																(PrimitiveType
																)
															)
														)
													)
												)
												LineComment
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(ArrayType
															(PrimitiveType
															)
														)
													)
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(ObjectCreationExpr
															StringLiteralExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															NullLiteralExpr
															NameExpr
																SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(BooleanLiteralExpr
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
												LineComment
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(IntegerLiteralExpr
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(DoStmt
												(BlockStmt
													(TryStmt
														(CatchClause
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		StringLiteralExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(BooleanLiteralExpr
																		)
																	)
																)
																(ExpressionStmt
																	(UnaryExpr
																		NameExpr
																			SimpleName
																	)
																)
															)
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(CatchClause
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		(BinaryExpr
																			StringLiteralExpr
																			StringLiteralExpr
																		)
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(ExpressionStmt
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(BooleanLiteralExpr
																		)
																	)
																)
															)
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(BlockStmt
															(IfStmt
																NameExpr
																	SimpleName
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		LineComment
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			(IntegerLiteralExpr
																			)
																			(FieldAccessExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		LineComment
																	)
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(PrimitiveType
																		)
																	)
																)
																LineComment
															)
															(IfStmt
																NameExpr
																	SimpleName
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(ExpressionStmt
																(AssignExpr
																	NameExpr
																		SimpleName
																	(BooleanLiteralExpr
																	)
																)
															)
														)
													)
												)
												NameExpr
													SimpleName
											)
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ArrayType
							(PrimitiveType
							)
						)
						(ArrayType
							(PrimitiveType
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ThisExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						StringLiteralExpr
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(CastExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(PrimitiveType
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
													(ArrayType
														(PrimitiveType
														)
													)
													(ArrayType
														(PrimitiveType
														)
													)
												)
											)
										)
									)
									(WhileStmt
										(BlockStmt
											(IfStmt
												NameExpr
													SimpleName
												(BlockStmt
													(ExpressionStmt
														(MethodCallExpr
															StringLiteralExpr
															SimpleName
															NameExpr
																SimpleName
														)
														LineComment
													)
													(ExpressionStmt
														(MethodCallExpr
															NameExpr
																SimpleName
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(IfStmt
												NameExpr
													SimpleName
												(BlockStmt
													(BreakStmt
													)
												)
												LineComment
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(ClassOrInterfaceType
															SimpleName
															(ArrayType
																(PrimitiveType
																)
															)
															(ArrayType
																(PrimitiveType
																)
															)
														)
													)
												)
												LineComment
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														(ArrayType
															(PrimitiveType
															)
														)
													)
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(MethodCallExpr
													(FieldAccessExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(ObjectCreationExpr
															StringLiteralExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															NullLiteralExpr
															NameExpr
																SimpleName
															(ClassOrInterfaceType
																SimpleName
															)
														)
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(BooleanLiteralExpr
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
												LineComment
											)
											(ExpressionStmt
												(VariableDeclarationExpr
													(VariableDeclarator
														(IntegerLiteralExpr
														)
														SimpleName
														(PrimitiveType
														)
													)
												)
											)
											(DoStmt
												(BlockStmt
													(TryStmt
														(CatchClause
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		StringLiteralExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(BooleanLiteralExpr
																		)
																	)
																)
																(ExpressionStmt
																	(UnaryExpr
																		NameExpr
																			SimpleName
																	)
																)
															)
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(CatchClause
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		(BinaryExpr
																			StringLiteralExpr
																			StringLiteralExpr
																		)
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(ExpressionStmt
																	(MethodCallExpr
																		NameExpr
																			SimpleName
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																(ExpressionStmt
																	(AssignExpr
																		NameExpr
																			SimpleName
																		(BooleanLiteralExpr
																		)
																	)
																)
															)
															(Parameter
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
														(BlockStmt
															(IfStmt
																NameExpr
																	SimpleName
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		LineComment
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			(IntegerLiteralExpr
																			)
																			(FieldAccessExpr
																				SimpleName
																				NameExpr
																					SimpleName
																				LineComment
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(ExpressionStmt
																(VariableDeclarationExpr
																	(VariableDeclarator
																		(MethodCallExpr
																			NameExpr
																				SimpleName
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		(PrimitiveType
																		)
																	)
																)
																LineComment
															)
															(IfStmt
																NameExpr
																	SimpleName
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			(MethodCallExpr
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(ExpressionStmt
																(AssignExpr
																	NameExpr
																		SimpleName
																	(BooleanLiteralExpr
																	)
																)
															)
														)
													)
												)
												NameExpr
													SimpleName
											)
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										LineComment
									)
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ArrayType
							(PrimitiveType
							)
						)
						(ArrayType
							(PrimitiveType
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(IntegerLiteralExpr
				)
				(IntegerLiteralExpr
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

