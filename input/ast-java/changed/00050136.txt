@Override
public void run() {
    Request request;
    try {
        while (!stopped) {
            synchronized (this) {
                while (!stopped && ((queuedRequests.isEmpty() || isWaitingForCommit() || isProcessingCommit()) && (committedRequests.isEmpty() || isProcessingRequest()))) {
                    wait();
                }
            }
            /*
                 * Processing queuedRequests: Process the next requests until we
                 * find one for which we need to wait for a commit. We cannot
                 * process a read request while we are processing write request.
                 */
            while (!stopped && !isWaitingForCommit() && !isProcessingCommit() && (request = queuedRequests.poll()) != null) {
                if (needCommit(request)) {
                    nextPending.set(request);
                } else {
                    sendToNextProcessor(request);
                }
            }
            /*
                 * Processing committedRequests: check and see if the commit
                 * came in for the pending request. We can only commit a
                 * request when there is no other request being processed.
                 */
            processCommitted();
        }
    } catch (Throwable e) {
        handleException(this.getName(), e);
    }
    LOG.info("CommitProcessor exited loop!");
}||||||||@Override
public void run() {
    try {
        /*
             * In each iteration of the following loop we process at most
             * requestsToProcess requests of queuedRequests. We have to limit
             * the number of request we poll from queuedRequests, since it is
             * possible to endlessly poll read requests from queuedRequests, and
             * that will lead to a starvation of non-local committed requests.
             */
        int requestsToProcess = 0;
        boolean commitIsWaiting = false;
        do {
            /*
                 * Since requests are placed in the queue before being sent to
                 * the leader, if commitIsWaiting = true, the commit belongs to
                 * the first update operation in the queuedRequests or to a
                 * request from a client on another server (i.e., the order of
                 * the following two lines is important!).
                 */
            commitIsWaiting = !committedRequests.isEmpty();
            requestsToProcess = queuedRequests.size();
            // Avoid sync if we have something to do
            if (requestsToProcess == 0 && !commitIsWaiting) {
                // Waiting for requests to process
                synchronized (this) {
                    while (!stopped && requestsToProcess == 0 && !commitIsWaiting) {
                        wait();
                        commitIsWaiting = !committedRequests.isEmpty();
                        requestsToProcess = queuedRequests.size();
                    }
                }
            }
            /*
                 * Processing up to requestsToProcess requests from the incoming
                 * queue (queuedRequests), possibly less if a committed request
                 * is present along with a pending local write. After the loop,
                 * we process one committed request if commitIsWaiting.
                 */
            Request request = null;
            while (!stopped && requestsToProcess > 0 && (request = queuedRequests.poll()) != null) {
                requestsToProcess--;
                if (needCommit(request) || pendingRequests.containsKey(request.sessionId)) {
                    // Add request to pending
                    LinkedList<Request> requests = pendingRequests.get(request.sessionId);
                    if (requests == null) {
                        requests = new LinkedList<Request>();
                        pendingRequests.put(request.sessionId, requests);
                    }
                    requests.addLast(request);
                } else {
                    sendToNextProcessor(request);
                }
                /*
                     * Stop feeding the pool if there is a local pending update
                     * and a committed request that is ready. Once we have a
                     * pending request with a waiting committed request, we know
                     * we can process the committed one. This is because commits
                     * for local requests arrive in the order they appeared in
                     * the queue, so if we have a pending request and a
                     * committed request, the committed request must be for that
                     * pending write or for a write originating at a different
                     * server.
                     */
                if (!pendingRequests.isEmpty() && !committedRequests.isEmpty()) {
                    /*
                         * We set commitIsWaiting so that we won't check
                         * committedRequests again.
                         */
                    commitIsWaiting = true;
                    break;
                }
            }
            // Handle a single committed request
            if (commitIsWaiting && !stopped) {
                waitForEmptyPool();
                if (stopped) {
                    return;
                }
                // Process committed head
                if ((request = committedRequests.poll()) == null) {
                    throw new IOException("Error: committed head is null");
                }
                /*
                     * Check if request is pending, if so, update it with the
                     * committed info
                     */
                LinkedList<Request> sessionQueue = pendingRequests.get(request.sessionId);
                if (sessionQueue != null) {
                    // If session queue != null, then it is also not empty.
                    Request topPending = sessionQueue.poll();
                    if (request.cxid != topPending.cxid) {
                        LOG.error("Got cxid 0x" + Long.toHexString(request.cxid) + " expected 0x" + Long.toHexString(topPending.cxid) + " for client session id " + Long.toHexString(request.sessionId));
                        throw new IOException("Error: unexpected cxid for" + "client session");
                    }
                    /*
                         * We want to send our version of the request. the
                         * pointer to the connection in the request
                         */
                    topPending.setHdr(request.getHdr());
                    topPending.setTxn(request.getTxn());
                    topPending.zxid = request.zxid;
                    request = topPending;
                }
                sendToNextProcessor(request);
                waitForEmptyPool();
                /*
                     * Process following reads if any, remove session queue if
                     * empty.
                     */
                if (sessionQueue != null) {
                    while (!stopped && !sessionQueue.isEmpty() && !needCommit(sessionQueue.peek())) {
                        sendToNextProcessor(sessionQueue.poll());
                    }
                    // Remove empty queues
                    if (sessionQueue.isEmpty()) {
                        pendingRequests.remove(request.sessionId);
                    }
                }
            }
        } while (!stoppedMainLoop);
    } catch (Throwable e) {
        handleException(this.getName(), e);
    }
    LOG.info("CommitProcessor exited loop!");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								(ThisExpr
								)
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(WhileStmt
					(BlockStmt
						(SynchronizedStmt
							(BlockStmt
								(WhileStmt
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
											)
										)
									)
									(BinaryExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										(EnclosedExpr
											(BinaryExpr
												(EnclosedExpr
													(BinaryExpr
														(BinaryExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															(MethodCallExpr
																SimpleName
															)
														)
														(MethodCallExpr
															SimpleName
														)
													)
												)
												(EnclosedExpr
													(BinaryExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														(MethodCallExpr
															SimpleName
														)
													)
												)
											)
										)
									)
								)
							)
							(ThisExpr
							)
						)
						(WhileStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										(UnaryExpr
											(MethodCallExpr
												SimpleName
											)
										)
									)
									(UnaryExpr
										(MethodCallExpr
											SimpleName
										)
									)
								)
								(BinaryExpr
									(EnclosedExpr
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									NullLiteralExpr
								)
							)
							(BlockComment
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockComment
							)
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								(ThisExpr
								)
							)
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(IntegerLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
					(BlockComment
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BooleanLiteralExpr
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(DoStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockComment
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(SynchronizedStmt
									(BlockStmt
										(WhileStmt
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														SimpleName
													)
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(UnaryExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
													)
												)
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
											(BinaryExpr
												(BinaryExpr
													(UnaryExpr
														NameExpr
															SimpleName
													)
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
												)
												(UnaryExpr
													NameExpr
														SimpleName
												)
											)
										)
									)
									(ThisExpr
									)
									LineComment
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									NullLiteralExpr
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							(BlockComment
							)
						)
						(WhileStmt
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
								)
								(IfStmt
									(BinaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
										)
										(MethodCallExpr
											(FieldAccessExpr
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(AssignExpr
														NameExpr
															SimpleName
														(ObjectCreationExpr
															(ClassOrInterfaceType
																SimpleName
																(ClassOrInterfaceType
																	SimpleName
																)
															)
														)
													)
												)
												(ExpressionStmt
													(MethodCallExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(UnaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(BooleanLiteralExpr
												)
											)
											(BlockComment
											)
										)
										(BreakStmt
										)
									)
									(BlockComment
									)
								)
							)
							(BinaryExpr
								(BinaryExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(BinaryExpr
									(EnclosedExpr
										(AssignExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									NullLiteralExpr
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ReturnStmt
										)
									)
								)
								(IfStmt
									(BinaryExpr
										(EnclosedExpr
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										NullLiteralExpr
									)
									(BlockStmt
										(ThrowStmt
											(ObjectCreationExpr
												StringLiteralExpr
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(VariableDeclarationExpr
										(VariableDeclarator
											(MethodCallExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
											(ClassOrInterfaceType
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
									(BlockComment
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
											LineComment
										)
										(IfStmt
											(BinaryExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			StringLiteralExpr
																			(MethodCallExpr
																				(FieldAccessExpr
																					SimpleName
																					NameExpr
																						SimpleName
																				)
																				SimpleName
																				NameExpr
																					SimpleName
																			)
																		)
																		StringLiteralExpr
																	)
																	(MethodCallExpr
																		(FieldAccessExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
																StringLiteralExpr
															)
															(MethodCallExpr
																(FieldAccessExpr
																	SimpleName
																	NameExpr
																		SimpleName
																)
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
												(ThrowStmt
													(ObjectCreationExpr
														(BinaryExpr
															StringLiteralExpr
															StringLiteralExpr
														)
														(ClassOrInterfaceType
															SimpleName
														)
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
											(BlockComment
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
									(BlockStmt
										(WhileStmt
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
											(BinaryExpr
												(BinaryExpr
													(UnaryExpr
														NameExpr
															SimpleName
													)
													(UnaryExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												(UnaryExpr
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(FieldAccessExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											LineComment
										)
									)
									(BlockComment
									)
								)
							)
							LineComment
						)
					)
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

