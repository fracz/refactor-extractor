CodeStyleSchemesModel ensureModel() {
    if (myModel == null) {
        myModel = new CodeStyleSchemesModel(myProject);
        myRootSchemesPanel = new CodeStyleSchemesPanel(myModel);
        myModel.addListener(new CodeStyleSettingsListener() {

            @Override
            public void currentSchemeChanged(final Object source) {
                if (source != myRootSchemesPanel) {
                    myRootSchemesPanel.onSelectedSchemeChanged();
                }
            }

            @Override
            public void schemeListChanged() {
                myRootSchemesPanel.resetSchemesCombo();
            }

            @Override
            public void beforeCurrentSettingsChanged() {
            }

            @Override
            public void afterCurrentSettingsChanged() {
            }

            @Override
            public void usePerProjectSettingsOptionChanged() {
                myRootSchemesPanel.usePerProjectSettingsOptionChanged();
            }

            @Override
            public void schemeChanged(final CodeStyleScheme scheme) {
                if (scheme == myModel.getSelectedScheme())
                    myRootSchemesPanel.onSelectedSchemeChanged();
            }
        });
    }
    return myModel;
}||||||||CodeStyleSchemesModel ensureModel() {
    if (myModel == null) {
        myModel = new CodeStyleSchemesModel(myProject);
        myRootSchemesPanel = new CodeStyleSchemesPanel(myModel);
        myModel.addListener(new CodeStyleSettingsListener() {

            @Override
            public void currentSchemeChanged(final Object source) {
                if (source != myRootSchemesPanel) {
                    myRootSchemesPanel.onSelectedSchemeChanged();
                }
            }

            @Override
            public void schemeListChanged() {
                myRootSchemesPanel.resetSchemesCombo();
            }

            @Override
            public void beforeCurrentSettingsChanged() {
            }

            @Override
            public void afterCurrentSettingsChanged() {
            }

            @Override
            public void schemeChanged(final CodeStyleScheme scheme) {
                if (scheme == myModel.getSelectedScheme())
                    myRootSchemesPanel.onSelectedSchemeChanged();
            }
        });
    }
    return myModel;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(ObjectCreationExpr
							(MethodDeclaration
								(BlockStmt
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
								)
								(VoidType
								)
								SimpleName
								(MarkerAnnotationExpr
									Name
								)
							)
							(MethodDeclaration
								(BlockStmt
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
								(VoidType
								)
								SimpleName
								(Parameter
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								(MarkerAnnotationExpr
									Name
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
)

