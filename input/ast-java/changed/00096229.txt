/**
 * Return and remove the recycled position if any.
 *
 * @return the recycled position if found, otherwise -1 that usually means to request more space.
 * @throws IOException
 */
public long popLastEntryPosition() throws IOException {
    // BROWSE IN ASCENDING ORDER UNTIL A GOOD POSITION IS FOUND (!=-1)
    for (int pos = getHoles() - 1; pos >= 0; --pos) {
        final long recycledPosition = file.readLong(pos * RECORD_SIZE);
        if (recycledPosition > -1) {
            if (OLogManager.instance().isDebugEnabled())
                OLogManager.instance().debug(this, "Recycling hole cluster #%d containing the position #%d:%d", pos, owner.getId(), recycledPosition);
            // SHRINK THE FILE
            file.removeTail((getHoles() - pos) * RECORD_SIZE);
            return recycledPosition;
        }
    }
    return -1;
}||||||||/**
 * Return and remove the recycled position if any.
 *
 * @return the recycled position if found, otherwise -1 that usually means to request more space.
 * @throws IOException
 */
public long popLastEntryPosition() throws IOException {
    // BROWSE IN ASCENDING ORDER UNTIL A GOOD POSITION IS FOUND (!=-1)
    for (int pos = getHoles() - 1; pos >= 0; --pos) {
        final long recycledPosition = file.readLong(pos * RECORD_SIZE);
        if (recycledPosition > -1) {
            if (OLogManager.instance().isDebugEnabled())
                OLogManager.instance().debug(this, "Recycled hole %s/#%d -> #%d:%d", owner.getName(), pos, owner.getId(), recycledPosition);
            // SHRINK THE FILE
            file.removeTail((getHoles() - pos) * RECORD_SIZE);
            return recycledPosition;
        }
    }
    return -1;
}||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(ThisExpr
									)
									StringLiteralExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
											)
											NameExpr
												SimpleName
										)
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(UnaryExpr
				(IntegerLiteralExpr
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(ThisExpr
									)
									StringLiteralExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(BinaryExpr
									(EnclosedExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
											)
											NameExpr
												SimpleName
										)
									)
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ReturnStmt
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(UnaryExpr
				(IntegerLiteralExpr
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

