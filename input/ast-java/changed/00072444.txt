// TODO(user): support read/write lock copies
@Ignore
@Test
public void testReadWriteLockCopy() throws Exception {
    compilationHelper.assertCompileSucceeds(compilationHelper.fileManager().forSourceLines("threadsafety.Test", "package threadsafety.Test;", "import javax.annotation.concurrent.GuardedBy;", "import java.util.concurrent.locks.ReentrantReadWriteLock;", "import java.util.concurrent.locks.Lock;", "class Test {", "  final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();", "  final Lock readLock = lock.readLock();", "  final Lock writeLock = lock.writeLock();", "  @GuardedBy(\"lock\") boolean b = false;", "  void m() {", "    readLock.lock();", "    try {", "      b = true;", "    } finally {", "      readLock.unlock();", "    }", "  }", "  void n() {", "    writeLock.lock();", "    try {", "      b = true;", "    } finally {", "      writeLock.unlock();", "    }", "  }", "}"));
}||||||||// TODO(user): support read/write lock copies
@Ignore
@Test
public void testReadWriteLockCopy() throws Exception {
    compilationHelper.assertCompileSucceeds(compilationHelper.fileManager().forSourceLines("threadsafety.Test", "package threadsafety.Test;", "import javax.annotation.concurrent.GuardedBy;", "import java.util.concurrent.locks.ReentrantReadWriteLock;", "import java.util.concurrent.locks.Lock;", "class Test {", "  final ReentrantReadWriteLock lock = new ReentrantReadWriteLock();", "  final Lock readLock = lock.readLock();", "  final Lock writeLock = lock.writeLock();", "  @GuardedBy(\"lock\") boolean b = false;", "  void m() {", "    readLock.lock();", "    try {", "      b = true;", "    } finally {", "      readLock.unlock();", "    }", "  }", "  void n() {", "    writeLock.lock();", "    try {", "      b = true;", "    } finally {", "      writeLock.unlock();", "    }", "  }", "}"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
		LineComment
	)
	(MarkerAnnotationExpr
		Name
	)
)

