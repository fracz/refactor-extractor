/**
 * Called by a profile owner or device owner to retrieve the application restrictions managing
 * package for the current user, or {@code null} if none is set.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return The package name allowed to manage application restrictions on the current user, or
 * {@code null} if none is set.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 */
@Nullable
public String getApplicationRestrictionsManagingPackage(@NonNull ComponentName admin) {
    throwIfParentInstance("getApplicationRestrictionsManagingPackage");
    if (mService != null) {
        try {
            return mService.getApplicationRestrictionsManagingPackage(admin);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
    return null;
}||||||||/**
 * Called by a profile owner or device owner to retrieve the application restrictions managing
 * package for the current user, or {@code null} if none is set. If there are multiple
 * delegates this function will return one of them.
 *
 * @param admin Which {@link DeviceAdminReceiver} this request is associated with.
 * @return The package name allowed to manage application restrictions on the current user, or
 * {@code null} if none is set.
 * @throws SecurityException if {@code admin} is not a device or profile owner.
 *
 * @deprecated From {@link android.os.Build.VERSION_CODES#O}. Use {@link #getDelegatePackages}
 * with the {@link #DELEGATION_APP_RESTRICTIONS} scope instead.
 */
@Deprecated
@Nullable
public String getApplicationRestrictionsManagingPackage(@NonNull ComponentName admin) {
    throwIfParentInstance("getApplicationRestrictionsManagingPackage");
    if (mService != null) {
        try {
            return mService.getApplicationRestrictionsManagingPackage(admin);
        } catch (RemoteException e) {
            throw e.rethrowFromSystemServer();
        }
    }
    return null;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NullLiteralExpr
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ThrowStmt
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NullLiteralExpr
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

