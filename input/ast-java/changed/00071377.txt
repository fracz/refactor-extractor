/**
 * Examines queue'ed unrecognizedRequires to categorize and report them as either missing module,
 * missing namespace or late provide.
 */
private void reportUnrecognizedRequires() {
    for (UnrecognizedRequire unrecognizedRequire : unrecognizedRequires) {
        String legacyNamespace = unrecognizedRequire.legacyNamespace;
        Node requireNode = unrecognizedRequire.requireNode;
        boolean targetGoogModuleExists = rewriteState.containsModule(legacyNamespace);
        boolean targetLegacyScriptExists = rewriteState.legacyScriptNamespaces.contains(legacyNamespace);
        if (!targetGoogModuleExists && !targetLegacyScriptExists) {
            // The required thing was free to be either a goog.module() or a legacy script but neither
            // flavor of file provided the required namespace, so report a vague error.
            compiler.report(JSError.make(requireNode, MISSING_MODULE_OR_PROVIDE, legacyNamespace));
            // Remove the require node so this problem isn't reported all over again in
            // ProcessClosurePrimitives.
            NodeUtil.getEnclosingStatement(requireNode).detach();
            continue;
        }
        // available as early as the require statement would have liked.
        if (unrecognizedRequire.mustBeOrdered) {
            compiler.report(JSError.make(requireNode, LATE_PROVIDE_ERROR, legacyNamespace));
        }
    }
    // Clear the queue so that repeated reportUnrecognizedRequires() invocations in hotswap compiles
    // only report new problems.
    unrecognizedRequires.clear();
}||||||||/**
 * Examines queue'ed unrecognizedRequires to categorize and report them as either missing module,
 * missing namespace or late provide.
 */
private void reportUnrecognizedRequires() {
    for (UnrecognizedRequire unrecognizedRequire : unrecognizedRequires) {
        String legacyNamespace = unrecognizedRequire.legacyNamespace;
        Node requireNode = unrecognizedRequire.requireNode;
        boolean targetGoogModuleExists = rewriteState.containsModule(legacyNamespace);
        boolean targetLegacyScriptExists = rewriteState.legacyScriptNamespaces.contains(legacyNamespace);
        if (!targetGoogModuleExists && !targetLegacyScriptExists) {
            // The required thing was free to be either a goog.module() or a legacy script but neither
            // flavor of file provided the required namespace, so report a vague error.
            compiler.report(JSError.make(requireNode, MISSING_MODULE_OR_PROVIDE, legacyNamespace));
            // ProcessClosurePrimitives.
            if (!preserveSugar) {
                NodeUtil.getEnclosingStatement(requireNode).detach();
            }
            continue;
        }
        // available as early as the require statement would have liked.
        if (unrecognizedRequire.mustBeOrdered) {
            compiler.report(JSError.make(requireNode, LATE_PROVIDE_ERROR, legacyNamespace));
        }
    }
    // Clear the queue so that repeated reportUnrecognizedRequires() invocations in hotswap compiles
    // only report new problems.
    unrecognizedRequires.clear();
}||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							LineComment
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(IfStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							LineComment
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

