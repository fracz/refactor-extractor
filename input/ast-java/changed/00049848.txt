@Test
public void testAngularRunParagraph() throws Exception {
    if (!endToEndTestEnabled()) {
        return;
    }
    try {
        createNewNote();
        // wait for first paragraph's " READY " status text
        waitForParagraph(1, "READY");
        // Create 1st paragraph
        setTextOfParagraph(1, "%angular <div id=\\'angularRunParagraph\\'>Run second paragraph</div>");
        runParagraph(1);
        waitForParagraph(1, "FINISHED");
        waitForText("Run second paragraph", By.xpath(getParagraphXPath(1) + "//div[@id=\"angularRunParagraph\"]"));
        // Create 2nd paragraph
        setTextOfParagraph(2, "%sh echo TEST");
        runParagraph(2);
        waitForParagraph(2, "FINISHED");
        // Get 2nd paragraph id
        final String secondParagraphId = driver.findElement(By.xpath(getParagraphXPath(2) + "//div[@class=\"control ng-scope\"]//ul[@class=\"dropdown-menu\"]/li[1]")).getAttribute("textContent");
        assertTrue("Cannot find paragraph id for the 2nd paragraph", isNotBlank(secondParagraphId));
        // Update first paragraph to call z.runParagraph() with 2nd paragraph id
        setTextOfParagraph(1, "%angular <div id=\\'angularRunParagraph\\' ng-click=\\'z.runParagraph(\"" + secondParagraphId.trim() + "\")\\'>Run second paragraph</div>");
        runParagraph(1);
        waitForParagraph(1, "FINISHED");
        // Set new text value for 2nd paragraph
        setTextOfParagraph(2, "%sh echo NEW_VALUE");
        // Click on 1 paragraph to trigger z.runParagraph() function
        driver.findElement(By.xpath(getParagraphXPath(1) + "//div[@id=\"angularRunParagraph\"]")).click();
        waitForParagraph(2, "FINISHED");
        // Check that 2nd paragraph has been executed
        waitForText("NEW_VALUE", By.xpath(getParagraphXPath(2) + "//div[contains(@id,\"_text\") and @class=\"text\"]"));
        // delete created notebook for cleanup.
        deleteTestNotebook(driver);
        sleep(1000, true);
        LOG.info("testAngularRunParagraph Test executed");
    } catch (Exception e) {
        handleException("Exception in ZeppelinIT while testAngularRunParagraph", e);
    }
}||||||||@Test
public void testAngularRunParagraph() throws Exception {
    if (!endToEndTestEnabled()) {
        return;
    }
    try {
        createNewNote();
        // wait for first paragraph's " READY " status text
        waitForParagraph(1, "READY");
        // Create 1st paragraph
        setTextOfParagraph(1, "%angular <div id=\\'angularRunParagraph\\'>Run second paragraph</div>");
        runParagraph(1);
        waitForParagraph(1, "FINISHED");
        waitForText("Run second paragraph", By.xpath(getParagraphXPath(1) + "//div[@id=\"angularRunParagraph\"]"));
        // Create 2nd paragraph
        setTextOfParagraph(2, "%sh echo TEST");
        runParagraph(2);
        waitForParagraph(2, "FINISHED");
        // Get 2nd paragraph id
        final String secondParagraphId = driver.findElement(By.xpath(getParagraphXPath(2) + "//div[@class=\"control ng-scope\"]//ul[@class=\"dropdown-menu\"]/li[1]")).getAttribute("textContent");
        assertTrue("Cannot find paragraph id for the 2nd paragraph", isNotBlank(secondParagraphId));
        // Update first paragraph to call z.runParagraph() with 2nd paragraph id
        setTextOfParagraph(1, "%angular <div id=\\'angularRunParagraph\\' ng-click=\\'z.runParagraph(\"" + secondParagraphId.trim() + "\")\\'>Run second paragraph</div>");
        runParagraph(1);
        waitForParagraph(1, "FINISHED");
        // Set new text value for 2nd paragraph
        setTextOfParagraph(2, "%sh echo NEW_VALUE");
        // Click on 1 paragraph to trigger z.runParagraph() function
        driver.findElement(By.xpath(getParagraphXPath(1) + "//div[@id=\"angularRunParagraph\"]")).click();
        waitForParagraph(2, "FINISHED");
        // Check that 2nd paragraph has been executed
        waitForText("NEW_VALUE", By.xpath(getParagraphXPath(2) + "//div[contains(@id,\"_text\") and @class=\"text\"]"));
        // delete created notebook for cleanup.
        deleteTestNotebook(driver);
        ZeppelinITUtils.sleep(1000, true);
        LOG.info("testAngularRunParagraph Test executed");
    } catch (Exception e) {
        handleException("Exception in ZeppelinIT while testAngularRunParagraph", e);
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							(BinaryExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
								)
								StringLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												(IntegerLiteralExpr
												)
												SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								(BinaryExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							(BinaryExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
								)
								StringLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							(BinaryExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
								)
								StringLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								(MethodCallExpr
									(MethodCallExpr
										(BinaryExpr
											(MethodCallExpr
												(IntegerLiteralExpr
												)
												SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							StringLiteralExpr
						)
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								(BinaryExpr
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
									)
									StringLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						StringLiteralExpr
						SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							(BinaryExpr
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
								)
								StringLiteralExpr
							)
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						(IntegerLiteralExpr
						)
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

