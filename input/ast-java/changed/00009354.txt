/**
 * If lines include non-empty lines, all empty lines or lines that contain only spaces are ignored.
 * Otherwise (all line are empty) their common indent are returned as expected. If any two lines
 * have different indentation (e.g. one contains tab character and another doesn't), empty prefix
 * is returned.
 */
@NotNull
public static String findCommonIndent(@NotNull Iterable<String> lines, boolean ignoreFirstLine) {
    String minIndent = null;
    boolean allLinesEmpty = true;
    if (Iterables.isEmpty(lines)) {
        return "";
    }
    boolean hasBadEmptyLineIndent = false;
    for (String line : Iterables.skip(lines, ignoreFirstLine ? 1 : 0)) {
        final boolean lineEmpty = StringUtil.isEmptyOrSpaces(line);
        if (lineEmpty && !allLinesEmpty) {
            continue;
        }
        final String indent = (String) getLineIndent(line);
        if (minIndent == null || (!lineEmpty && allLinesEmpty) || minIndent.startsWith(indent)) {
            minIndent = indent;
        } else if (!indent.startsWith(minIndent)) {
            if (lineEmpty) {
                hasBadEmptyLineIndent = true;
            } else {
                return "";
            }
        }
        allLinesEmpty &= lineEmpty;
    }
    if (allLinesEmpty && hasBadEmptyLineIndent) {
        return "";
    }
    return StringUtil.notNullize(minIndent);
}||||||||/**
 * Finds maximum common indentation of the given lines. Indentation of empty lines and lines containing only whitespaces is ignored unless
 * they're the only lines provided. In the latter case common indentation for such lines is returned. If mix of tabs and spaces was used
 * for indentation and any two of lines taken into account contain incompatible combination of these symbols, i.e. it's impossible to
 * decide which one can be used as prefix for another, empty string is returned.
 *
 * @param ignoreFirstLine whether the first line should be considered (useful for multiline string literals)
 */
@NotNull
public static String findCommonIndent(@NotNull Iterable<String> lines, boolean ignoreFirstLine) {
    String minIndent = null;
    boolean allLinesEmpty = true;
    if (Iterables.isEmpty(lines)) {
        return "";
    }
    boolean hasBadEmptyLineIndent = false;
    for (String line : Iterables.skip(lines, ignoreFirstLine ? 1 : 0)) {
        final boolean lineEmpty = StringUtil.isEmptyOrSpaces(line);
        if (lineEmpty && !allLinesEmpty) {
            continue;
        }
        final String indent = getLineIndent(line);
        if (minIndent == null || (!lineEmpty && allLinesEmpty) || minIndent.startsWith(indent)) {
            minIndent = indent;
        } else if (!indent.startsWith(minIndent)) {
            if (lineEmpty) {
                hasBadEmptyLineIndent = true;
            } else {
                return "";
            }
        }
        allLinesEmpty &= lineEmpty;
    }
    if (allLinesEmpty && hasBadEmptyLineIndent) {
        return "";
    }
    return StringUtil.notNullize(minIndent);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(CastExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(EnclosedExpr
								(BinaryExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ReturnStmt
										StringLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				NameExpr
					SimpleName
				(ConditionalExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(EnclosedExpr
								(BinaryExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
							)
						)
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(BlockStmt
							(IfStmt
								NameExpr
									SimpleName
								(BlockStmt
									(ReturnStmt
										StringLiteralExpr
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											(BooleanLiteralExpr
											)
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				NameExpr
					SimpleName
				(ConditionalExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
					(IntegerLiteralExpr
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

