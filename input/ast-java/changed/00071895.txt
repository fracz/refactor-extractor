@Override
protected JSType computeJSType(JSTypes commonTypes) {
    Preconditions.checkState(this.namespaceType == null);
    return JSType.fromObjectType(ObjectType.makeObjectType(this.window, null, null, this, false, ObjectKind.UNRESTRICTED));
}||||||||@Override
protected JSType computeJSType() {
    Preconditions.checkState(this.namespaceType == null);
    return JSType.fromObjectType(ObjectType.makeObjectType(this.window, null, null, this, false, ObjectKind.UNRESTRICTED));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					NullLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					NullLiteralExpr
					NullLiteralExpr
					(ThisExpr
					)
					(BooleanLiteralExpr
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					NullLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					NullLiteralExpr
					NullLiteralExpr
					(ThisExpr
					)
					(BooleanLiteralExpr
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

