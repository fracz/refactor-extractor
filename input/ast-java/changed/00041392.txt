/**
 * Notifies the power manager that user activity happened.
 * <p>
 * Turns the device from whatever state it's in to full on, and resets
 * the auto-off timer.
 * </p><p>
 * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.
 * </p>
 *
 * @param when The time of the user activity, in the {@link SystemClock#uptimeMillis()}
 * time base.  This timestamp is used to correctly order the user activity with
 * other power management functions.  It should be set
 * to the timestamp of the input event that caused the user activity.
 * @param noChangeLights If true, does not cause the keyboard backlight to turn on
 * because of this event.  This is set when the power key is pressed.
 * We want the device to stay on while the button is down, but we're about
 * to turn off the screen so we don't want the keyboard backlight to turn on again.
 * Otherwise the lights flash on and then off and it looks weird.
 */
public void userActivity(long when, boolean noChangeLights) {
    try {
        mService.userActivity(when, noChangeLights);
    } catch (RemoteException e) {
    }
}||||||||/**
 * Notifies the power manager that user activity happened.
 * <p>
 * Resets the auto-off timer and brightens the screen if the device
 * is not asleep.  This is what happens normally when a key or the touch
 * screen is pressed or when some other user activity occurs.
 * This method does not wake up the device if it has been put to sleep.
 * </p><p>
 * Requires the {@link android.Manifest.permission#DEVICE_POWER} permission.
 * </p>
 *
 * @param when The time of the user activity, in the {@link SystemClock#uptimeMillis()}
 * time base.  This timestamp is used to correctly order the user activity with
 * other power management functions.  It should be set
 * to the timestamp of the input event that caused the user activity.
 * @param noChangeLights If true, does not cause the keyboard backlight to turn on
 * because of this event.  This is set when the power key is pressed.
 * We want the device to stay on while the button is down, but we're about
 * to turn off the screen so we don't want the keyboard backlight to turn on again.
 * Otherwise the lights flash on and then off and it looks weird.
 *
 * @see #wakeUp
 * @see #goToSleep
 */
public void userActivity(long when, boolean noChangeLights) {
    try {
        mService.userActivity(when, USER_ACTIVITY_EVENT_OTHER, noChangeLights ? USER_ACTIVITY_FLAG_NO_CHANGE_LIGHTS : 0);
    } catch (RemoteException e) {
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ConditionalExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

