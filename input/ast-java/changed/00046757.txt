/**
 * Grab the open-file info from namenode
 */
void openInfo() throws IOException, UnresolvedLinkException {
    final DfsClientConf conf = dfsClient.getConf();
    synchronized (infoLock) {
        lastBlockBeingWrittenLength = fetchLocatedBlocksAndGetLastBlockLength();
        int retriesForLastBlockLength = conf.getRetryTimesForGetLastBlockLength();
        while (retriesForLastBlockLength > 0) {
            // retry for 3 times to get the length.
            if (lastBlockBeingWrittenLength == -1) {
                DFSClient.LOG.warn("Last block locations not available. " + "Datanodes might not have reported blocks completely." + " Will retry for " + retriesForLastBlockLength + " times");
                waitFor(conf.getRetryIntervalForGetLastBlockLength());
                lastBlockBeingWrittenLength = fetchLocatedBlocksAndGetLastBlockLength();
            } else {
                break;
            }
            retriesForLastBlockLength--;
        }
        if (retriesForLastBlockLength == 0) {
            throw new IOException("Could not obtain the last block locations.");
        }
    }
}||||||||/**
 * Grab the open-file info from namenode
 * @param refreshLocatedBlocks whether to re-fetch locatedblocks
 */
void openInfo(boolean refreshLocatedBlocks) throws IOException, UnresolvedLinkException {
    final DfsClientConf conf = dfsClient.getConf();
    synchronized (infoLock) {
        lastBlockBeingWrittenLength = fetchLocatedBlocksAndGetLastBlockLength(refreshLocatedBlocks);
        int retriesForLastBlockLength = conf.getRetryTimesForGetLastBlockLength();
        while (retriesForLastBlockLength > 0) {
            // retry for 3 times to get the length.
            if (lastBlockBeingWrittenLength == -1) {
                DFSClient.LOG.warn("Last block locations not available. " + "Datanodes might not have reported blocks completely." + " Will retry for " + retriesForLastBlockLength + " times");
                waitFor(conf.getRetryIntervalForGetLastBlockLength());
                lastBlockBeingWrittenLength = fetchLocatedBlocksAndGetLastBlockLength(true);
            } else {
                break;
            }
            retriesForLastBlockLength--;
        }
        if (retriesForLastBlockLength == 0) {
            throw new IOException("Could not obtain the last block locations.");
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(WhileStmt
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BlockStmt
								(BreakStmt
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														StringLiteralExpr
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
									)
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(BooleanLiteralExpr
											)
											SimpleName
										)
									)
								)
							)
							LineComment
						)
						(ExpressionStmt
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
					)
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								StringLiteralExpr
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

