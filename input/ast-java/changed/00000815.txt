/**
 * Returns the block lock for the given block id, acquiring such a lock if it doesn't exist yet.
 *
 * If all locks have been allocated, this method will block until one can be acquired.
 *
 * @param blockId the block id to get the lock for
 * @return the block lock
 */
private ClientRWLock getBlockLock(long blockId) {
    ClientRWLock blockLock = null;
    boolean acquiredNewLock = false;
    while (blockLock == null) {
        // Check whether a lock has already been allocated for the block id.
        synchronized (mSharedMapsLock) {
            blockLock = mLocks.get(blockId);
            if (blockLock != null) {
                blockLock.addReference();
            }
        }
        // allocated to another thread, in which case we could just use that lock.
        if (blockLock == null) {
            blockLock = mLockPool.acquire(1, TimeUnit.SECONDS);
            acquiredNewLock = (blockLock != null);
        }
    }
    // If we acquired a new block lock, we need to add it to the mLocks map.
    if (acquiredNewLock) {
        synchronized (mSharedMapsLock) {
            if (mLocks.containsKey(blockId)) {
                // Someone else acquired a block lock for blockId while we were acquiring one. Use theirs.
                mLockPool.release(blockLock);
                blockLock = mLocks.get(blockId);
            } else {
                mLocks.put(blockId, blockLock);
            }
            blockLock.addReference();
        }
    }
    return blockLock;
}||||||||/**
 * Returns the block lock for the given block id, acquiring such a lock if it doesn't exist yet.
 *
 * If all locks have been allocated, this method will block until one can be acquired.
 *
 * @param blockId the block id to get the lock for
 * @return the block lock
 */
private ClientRWLock getBlockLock(long blockId) {
    // block lock from the lock pool.
    while (true) {
        ClientRWLock blockLock;
        // Check whether a lock has already been allocated for the block id.
        synchronized (mSharedMapsLock) {
            blockLock = mLocks.get(blockId);
            if (blockLock != null) {
                blockLock.addReference();
                return blockLock;
            }
        }
        // Since a block lock hasn't already been allocated, try to acquire a new one from the pool.
        // Acquire the lock outside the synchronized section because #acquire might need to block.
        // We shouldn't wait indefinitely in acquire because the another lock for this block could be
        // allocated to another thread, in which case we could just use that lock.
        blockLock = mLockPool.acquire(1, TimeUnit.SECONDS);
        if (blockLock != null) {
            synchronized (mSharedMapsLock) {
                // Check if someone else acquired a block lock for blockId while we were acquiring one.
                if (mLocks.containsKey(blockId)) {
                    mLockPool.release(blockLock);
                    blockLock = mLocks.get(blockId);
                } else {
                    mLocks.put(blockId, blockLock);
                }
                blockLock.addReference();
                return blockLock;
            }
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NullLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(WhileStmt
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										NullLiteralExpr
									)
								)
							)
						)
					)
					LineComment
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
		)
		(IfStmt
			NameExpr
				SimpleName
			(BlockStmt
				(SynchronizedStmt
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(SynchronizedStmt
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
						)
					)
					NameExpr
						SimpleName
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(SynchronizedStmt
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ReturnStmt
									NameExpr
										SimpleName
								)
							)
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BooleanLiteralExpr
			)
			LineComment
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

