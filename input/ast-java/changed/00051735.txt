/**
 * Normalizes the path fragment: removes "." and ".." segments if possible
 * (if there are too many ".." segments, the resulting PathFragment will still
 * start with "..").
 */
public PathFragment normalize() {
    String[] scratchSegments = new String[segments.length];
    int segmentCount = 0;
    for (String segment : segments) {
        switch(segment) {
            case ".":
                // Just discard it
                break;
            case "..":
                if (segmentCount > 0 && !scratchSegments[segmentCount - 1].equals("..")) {
                    // Remove the last segment, if there is one and it is not "..". This
                    // means that the resulting PathFragment can still contain ".."
                    // segments at the beginning.
                    segmentCount--;
                } else {
                    scratchSegments[segmentCount++] = segment;
                }
                break;
            default:
                scratchSegments[segmentCount++] = segment;
        }
    }
    if (segmentCount == segments.length) {
        // Optimization, no new PathFragment needs to be created.
        return this;
    }
    return createNoClone(driveLetter, isAbsolute, subarray(scratchSegments, 0, segmentCount));
}||||||||/**
 * Normalizes the path fragment: removes "." and ".." segments if possible
 * (if there are too many ".." segments, the resulting PathFragment will still
 * start with "..").
 */
public PathFragment normalize() {
    String[] scratchSegments = new String[segments.length];
    int segmentCount = 0;
    for (String segment : segments) {
        switch(segment) {
            case ".":
                // Just discard it
                break;
            case "..":
                if (segmentCount > 0 && !scratchSegments[segmentCount - 1].equals("..")) {
                    // Remove the last segment, if there is one and it is not "..". This
                    // means that the resulting PathFragment can still contain ".."
                    // segments at the beginning.
                    segmentCount--;
                } else {
                    scratchSegments[segmentCount++] = segment;
                }
                break;
            default:
                scratchSegments[segmentCount++] = segment;
        }
    }
    if (segmentCount == segments.length) {
        // Optimization, no new PathFragment needs to be created.
        return this;
    }
    return HELPER.createAlreadyInterned(getDriveLetter(), isAbsolute(), subarray(scratchSegments, 0, segmentCount));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(SwitchStmt
					(SwitchEntryStmt
						StringLiteralExpr
						(BreakStmt
							LineComment
						)
					)
					(SwitchEntryStmt
						StringLiteralExpr
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(UnaryExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(ArrayAccessExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(ThisExpr
					)
					LineComment
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				(MethodCallExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayCreationLevel
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(SwitchStmt
					(SwitchEntryStmt
						StringLiteralExpr
						(BreakStmt
							LineComment
						)
					)
					(SwitchEntryStmt
						StringLiteralExpr
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(UnaryExpr
									(MethodCallExpr
										StringLiteralExpr
										SimpleName
										(ArrayAccessExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										(ArrayAccessExpr
											(UnaryExpr
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(UnaryExpr
										NameExpr
											SimpleName
									)
									LineComment
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						(ExpressionStmt
							(AssignExpr
								(ArrayAccessExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
						)
					)
					NameExpr
						SimpleName
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(ThisExpr
					)
					LineComment
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
					NameExpr
						SimpleName
					SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(JavadocComment
	)
)

