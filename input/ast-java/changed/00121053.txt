/**
 * The <em>Sec-WebSocket-Version</em> header might not always contain
 * a number. Therefore I return a string. Use the version to choose
 * the appropriate processing class.
 *
 * @param handShakeResponse
 * @return Version of the WebSockets channel, defining the protocol.
 */
private String parseWebSocketVersion(HttpResponseHeader handShakeResponse) {
    String version = handShakeResponse.getHeader("sec-websocket-version");
    if (version == null) {
        // default to version 13 if non is given, for whatever reason
        log.debug("No Sec-Websocket-Version header was provided - try version 13");
        version = "13";
    }
    return version;
}||||||||/**
 * The <em>Sec-WebSocket-Version</em> header might not always contain
 * a number. Therefore I return a string. Use the version to choose
 * the appropriate processing class.
 *
 * @param msg
 * @return Version of the WebSockets channel, defining the protocol.
 */
private String parseWebSocketVersion(HttpMessage msg) {
    String version = msg.getResponseHeader().getHeader("sec-websocket-version");
    if (version == null) {
        // check for requested WebSockets version
        version = msg.getRequestHeader().getHeader("sec-websocket-version");
        if (version == null) {
            // default to version 13 if non is given, for whatever reason
            log.debug("No Sec-Websocket-Version header was provided - try version 13");
            version = "13";
        }
    }
    return version;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								StringLiteralExpr
							)
						)
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

