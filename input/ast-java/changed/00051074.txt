/**
 * Gets the gcc NDK builtin includes directories that exist in the NDK. These directories are
 * always searched for header files by clang and should be added to the CROSSTOOL in the
 * cxx_builtin_include_directories list.
 *
 * <p>You can see the list of directories and the order that they are searched in by running
 * {@code gcc -E -x c++ - -v < /dev/null}.
 */
public List<String> createGccToolchainBuiltinIncludeDirectories(final String toolchainName, final String targetPlatform, final String gccVersion) {
    final String toolchainIncludePathTemplate = "external/%repositoryName%/ndk/toolchains/%toolchainName%/prebuilt/%hostPlatform%" + "/lib/gcc/%targetPlatform%/%gccVersion%/%includeFolderName%";
    return Lists.transform(ImmutableList.of("include", "include-fixed"), new Function<String, String>() {

        @Override
        public String apply(String includeFolderName) {
            return toolchainIncludePathTemplate.replace("%repositoryName%", repositoryName).replace("%toolchainName%", toolchainName).replace("%hostPlatform%", hostPlatform).replace("%targetPlatform%", targetPlatform).replace("%gccVersion%", gccVersion).replace("%includeFolderName%", includeFolderName);
        }
    });
}||||||||/**
 * Gets the gcc NDK builtin includes directories that exist in the NDK. These directories are
 * always searched for header files by clang and should be added to the CROSSTOOL in the
 * cxx_builtin_include_directories list.
 *
 * <p>You can see the list of directories and the order that they are searched in by running
 * {@code gcc -E -x c++ - -v < /dev/null}.
 */
public List<String> createGccToolchainBuiltinIncludeDirectories(final String toolchainName, final String targetPlatform, final String gccVersion) {
    final String toolchainIncludePathTemplate = "external/%repositoryName%/ndk/toolchains/%toolchainName%/prebuilt/%hostPlatform%" + "/lib/gcc/%targetPlatform%/%gccVersion%/%includeFolderName%";
    return Lists.transform(ImmutableList.of("include", "include-fixed"), includeFolderName -> toolchainIncludePathTemplate.replace("%repositoryName%", repositoryName).replace("%toolchainName%", toolchainName).replace("%hostPlatform%", hostPlatform).replace("%targetPlatform%", targetPlatform).replace("%gccVersion%", gccVersion).replace("%includeFolderName%", includeFolderName));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ReturnStmt
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												NameExpr
													SimpleName
												SimpleName
												(MethodCallExpr
													StringLiteralExpr
													NameExpr
														SimpleName
													SimpleName
													(MethodCallExpr
														StringLiteralExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
									)
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
						SimpleName
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						StringLiteralExpr
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(LambdaExpr
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									StringLiteralExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											SimpleName
											(MethodCallExpr
												StringLiteralExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
								)
							)
						)
					)
					(Parameter
						SimpleName
						(UnknownType
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

