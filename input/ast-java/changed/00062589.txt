@Test(expected = IllegalArgumentException.class)
public void testRemovePlugin_NullName_ThrowsException() throws IOException {
    pluginManager(getPluginUrlForResource("plugin_single_folder.zip")).removePlugin(null);
}||||||||@Test
public void testRemovePlugin_NullName_ThrowsException() throws IOException {
    int status = new PluginManagerCliParser(terminal).execute(args("remove "));
    assertThat("Terminal output was: " + terminal.getTerminalOutput(), status, is(USAGE.status()));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NullLiteralExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(NormalAnnotationExpr
		(MemberValuePair
			SimpleName
			(ClassExpr
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
						SimpleName
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				NameExpr
					SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

