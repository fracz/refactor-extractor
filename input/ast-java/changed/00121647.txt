/**
 * See ISO 16022:2006, 5.2.3 and Annex C, Table C.2
 */
private static int decodeAsciiSegment(BitSource bits, StringBuffer result, StringBuffer resultTrailer) throws ReaderException {
    boolean upperShift = false;
    do {
        int oneByte = bits.readBits(8);
        if (oneByte == 0) {
            throw ReaderException.getInstance();
        } else if (oneByte <= 128) {
            // ASCII data (ASCII value + 1)
            oneByte = upperShift ? (oneByte + 128) : oneByte;
            upperShift = false;
            result.append((char) (oneByte - 1));
            return ASCII_ENCODE;
        } else if (oneByte == 129) {
            // Pad
            return PAD_ENCODE;
        } else if (oneByte <= 229) {
            // 2-digit data 00-99 (Numeric Value + 130)
            int value = oneByte - 130;
            if (value < 10) {
                // padd with '0' for single digit values
                result.append('0');
            }
            result.append(value);
        } else if (oneByte == 230) {
            // Latch to C40 encodation
            return C40_ENCODE;
        } else if (oneByte == 231) {
            // Latch to Base 256 encodation
            return BASE256_ENCODE;
        } else if (oneByte == 232) {
            // FNC1
            throw ReaderException.getInstance();
        } else if (oneByte == 233) {
            // Structured Append
            throw ReaderException.getInstance();
        } else if (oneByte == 234) {
            // Reader Programming
            throw ReaderException.getInstance();
        } else if (oneByte == 235) {
            // Upper Shift (shift to Extended ASCII)
            upperShift = true;
        } else if (oneByte == 236) {
            // 05 Macro
            result.append("[)>\u001E05\u001D");
            resultTrailer.insert(0, "\u001E\u0004");
        } else if (oneByte == 237) {
            // 06 Macro
            result.append("[)>\u001E06\u001D");
            resultTrailer.insert(0, "\u001E\u0004");
        } else if (oneByte == 238) {
            // Latch to ANSI X12 encodation
            return ANSIX12_ENCODE;
        } else if (oneByte == 239) {
            // Latch to Text encodation
            return TEXT_ENCODE;
        } else if (oneByte == 240) {
            // Latch to EDIFACT encodation
            return EDIFACT_ENCODE;
        } else if (oneByte == 241) {
            // TODO(bbrown): I think we need to support ECI
            throw ReaderException.getInstance();
        } else if (oneByte >= 242) {
            // Not to be used in ASCII encodation
            throw ReaderException.getInstance();
        }
    } while (bits.available() > 0);
    return ASCII_ENCODE;
}||||||||/**
 * See ISO 16022:2006, 5.2.3 and Annex C, Table C.2
 */
private static int decodeAsciiSegment(BitSource bits, StringBuffer result, StringBuffer resultTrailer) throws ReaderException {
    boolean upperShift = false;
    do {
        int oneByte = bits.readBits(8);
        if (oneByte == 0) {
            throw ReaderException.getInstance();
        } else if (oneByte <= 128) {
            // ASCII data (ASCII value + 1)
            oneByte = upperShift ? (oneByte + 128) : oneByte;
            upperShift = false;
            result.append((char) (oneByte - 1));
            return ASCII_ENCODE;
        } else if (oneByte == 129) {
            // Pad
            return PAD_ENCODE;
        } else if (oneByte <= 229) {
            // 2-digit data 00-99 (Numeric Value + 130)
            int value = oneByte - 130;
            if (value < 10) {
                // padd with '0' for single digit values
                result.append('0');
            }
            result.append(value);
        } else if (oneByte == 230) {
            // Latch to C40 encodation
            return C40_ENCODE;
        } else if (oneByte == 231) {
            // Latch to Base 256 encodation
            return BASE256_ENCODE;
        } else if (oneByte == 232) {
        // FNC1
        // throw ReaderException.getInstance();
        // Ignore this symbol for now
        } else if (oneByte == 233) {
        // Structured Append
        // throw ReaderException.getInstance();
        // Ignore this symbol for now
        } else if (oneByte == 234) {
        // Reader Programming
        // throw ReaderException.getInstance();
        // Ignore this symbol for now
        } else if (oneByte == 235) {
            // Upper Shift (shift to Extended ASCII)
            upperShift = true;
        } else if (oneByte == 236) {
            // 05 Macro
            result.append("[)>\u001E05\u001D");
            resultTrailer.insert(0, "\u001E\u0004");
        } else if (oneByte == 237) {
            // 06 Macro
            result.append("[)>\u001E06\u001D");
            resultTrailer.insert(0, "\u001E\u0004");
        } else if (oneByte == 238) {
            // Latch to ANSI X12 encodation
            return ANSIX12_ENCODE;
        } else if (oneByte == 239) {
            // Latch to Text encodation
            return TEXT_ENCODE;
        } else if (oneByte == 240) {
            // Latch to EDIFACT encodation
            return EDIFACT_ENCODE;
        } else if (oneByte == 241) {
        // ECI Character
        // TODO(bbrown): I think we need to support ECI
        // throw ReaderException.getInstance();
        // Ignore this symbol for now
        } else if (oneByte >= 242) {
            // Not to be used in ASCII encodation
            throw ReaderException.getInstance();
        }
    } while (bits.available() > 0);
    return ASCII_ENCODE;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(DoStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(IfStmt
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
													(IfStmt
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
														(IfStmt
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																(IfStmt
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	(IfStmt
																		(BinaryExpr
																			NameExpr
																				SimpleName
																			(IntegerLiteralExpr
																			)
																		)
																		(IfStmt
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				(IntegerLiteralExpr
																				)
																			)
																			(IfStmt
																				(BinaryExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																				(IfStmt
																					(BinaryExpr
																						NameExpr
																							SimpleName
																						(IntegerLiteralExpr
																						)
																					)
																					(BlockStmt
																						(ThrowStmt
																							(MethodCallExpr
																								SimpleName
																								NameExpr
																									SimpleName
																							)
																							LineComment
																						)
																					)
																				)
																				(BlockStmt
																					(ThrowStmt
																						(MethodCallExpr
																							SimpleName
																							NameExpr
																								SimpleName
																						)
																						LineComment
																					)
																				)
																			)
																			(BlockStmt
																				(ReturnStmt
																					NameExpr
																						SimpleName
																					LineComment
																				)
																			)
																		)
																		(BlockStmt
																			(ReturnStmt
																				NameExpr
																					SimpleName
																				LineComment
																			)
																		)
																	)
																	(BlockStmt
																		(ReturnStmt
																			NameExpr
																				SimpleName
																			LineComment
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		LineComment
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			(IntegerLiteralExpr
																			)
																			StringLiteralExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		StringLiteralExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	LineComment
																)
																(ExpressionStmt
																	(MethodCallExpr
																		(IntegerLiteralExpr
																		)
																		StringLiteralExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
															)
														)
														(BlockStmt
															(ExpressionStmt
																(AssignExpr
																	NameExpr
																		SimpleName
																	(BooleanLiteralExpr
																	)
																)
																LineComment
															)
														)
													)
													(BlockStmt
														(ThrowStmt
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
															LineComment
														)
													)
												)
												(BlockStmt
													(ThrowStmt
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														LineComment
													)
												)
											)
											(BlockStmt
												(ThrowStmt
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
										)
										(BlockStmt
											(ReturnStmt
												NameExpr
													SimpleName
												LineComment
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											NameExpr
												SimpleName
											LineComment
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(CharLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
									LineComment
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ConditionalExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(CastExpr
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
										(PrimitiveType
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(DoStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(IntegerLiteralExpr
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(IntegerLiteralExpr
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									(IntegerLiteralExpr
									)
								)
								(IfStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											(IfStmt
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												(IfStmt
													(BinaryExpr
														NameExpr
															SimpleName
														(IntegerLiteralExpr
														)
													)
													(IfStmt
														(BinaryExpr
															NameExpr
																SimpleName
															(IntegerLiteralExpr
															)
														)
														(IfStmt
															(BinaryExpr
																NameExpr
																	SimpleName
																(IntegerLiteralExpr
																)
															)
															(IfStmt
																(BinaryExpr
																	NameExpr
																		SimpleName
																	(IntegerLiteralExpr
																	)
																)
																(IfStmt
																	(BinaryExpr
																		NameExpr
																			SimpleName
																		(IntegerLiteralExpr
																		)
																	)
																	(IfStmt
																		(BinaryExpr
																			NameExpr
																				SimpleName
																			(IntegerLiteralExpr
																			)
																		)
																		(IfStmt
																			(BinaryExpr
																				NameExpr
																					SimpleName
																				(IntegerLiteralExpr
																				)
																			)
																			(IfStmt
																				(BinaryExpr
																					NameExpr
																						SimpleName
																					(IntegerLiteralExpr
																					)
																				)
																				(IfStmt
																					(BinaryExpr
																						NameExpr
																							SimpleName
																						(IntegerLiteralExpr
																						)
																					)
																					(BlockStmt
																						(ThrowStmt
																							(MethodCallExpr
																								SimpleName
																								NameExpr
																									SimpleName
																							)
																							LineComment
																						)
																					)
																				)
																				(BlockStmt
																				)
																			)
																			(BlockStmt
																				(ReturnStmt
																					NameExpr
																						SimpleName
																					LineComment
																				)
																			)
																		)
																		(BlockStmt
																			(ReturnStmt
																				NameExpr
																					SimpleName
																				LineComment
																			)
																		)
																	)
																	(BlockStmt
																		(ReturnStmt
																			NameExpr
																				SimpleName
																			LineComment
																		)
																	)
																)
																(BlockStmt
																	(ExpressionStmt
																		(MethodCallExpr
																			StringLiteralExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																		LineComment
																	)
																	(ExpressionStmt
																		(MethodCallExpr
																			(IntegerLiteralExpr
																			)
																			StringLiteralExpr
																			SimpleName
																			NameExpr
																				SimpleName
																		)
																	)
																)
															)
															(BlockStmt
																(ExpressionStmt
																	(MethodCallExpr
																		StringLiteralExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																	LineComment
																)
																(ExpressionStmt
																	(MethodCallExpr
																		(IntegerLiteralExpr
																		)
																		StringLiteralExpr
																		SimpleName
																		NameExpr
																			SimpleName
																	)
																)
															)
														)
														(BlockStmt
															(ExpressionStmt
																(AssignExpr
																	NameExpr
																		SimpleName
																	(BooleanLiteralExpr
																	)
																)
																LineComment
															)
														)
													)
													(BlockStmt
													)
												)
												(BlockStmt
												)
											)
											(BlockStmt
											)
										)
										(BlockStmt
											(ReturnStmt
												NameExpr
													SimpleName
												LineComment
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											NameExpr
												SimpleName
											LineComment
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(BinaryExpr
													NameExpr
														SimpleName
													(IntegerLiteralExpr
													)
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
										LineComment
									)
									(IfStmt
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													(CharLiteralExpr
													)
													SimpleName
													NameExpr
														SimpleName
												)
												LineComment
											)
										)
									)
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
									LineComment
								)
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(ConditionalExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
									)
								)
								LineComment
							)
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									(CastExpr
										(EnclosedExpr
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
										)
										(PrimitiveType
										)
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(IntegerLiteralExpr
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

