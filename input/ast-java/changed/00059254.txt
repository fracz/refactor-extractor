@Override
public String getExplanation() {
    checkDecisionState();
    String explanation;
    if (allocationStatus == null) {
        explanation = "can allocate the shard";
    } else if (allocationStatus == AllocationStatus.DECIDERS_THROTTLED) {
        explanation = "allocation temporarily throttled";
    } else if (allocationStatus == AllocationStatus.FETCHING_SHARD_DATA) {
        explanation = "cannot allocate because information about existing shard data is still being retrieved from " + "some of the nodes";
    } else if (allocationStatus == AllocationStatus.NO_VALID_SHARD_COPY) {
        if (getNodeDecisions() != null && getNodeDecisions().size() > 0) {
            explanation = "cannot allocate because all existing copies of the shard are unreadable";
        } else {
            explanation = "cannot allocate because a previous copy of the shard existed but could not be found";
        }
    } else if (allocationStatus == AllocationStatus.DELAYED_ALLOCATION) {
        explanation = "cannot allocate because the cluster is still waiting " + TimeValue.timeValueMillis(remainingDelayInMillis) + " for the departed node holding a replica to rejoin" + (atLeastOneNodeWithYesDecision() ? ", despite being allowed to allocate the shard to at least one other node" : "");
    } else {
        assert allocationStatus == AllocationStatus.DECIDERS_NO;
        if (reuseStore) {
            explanation = "cannot allocate because allocation is not permitted to any of the nodes that hold an in-sync shard copy";
        } else {
            explanation = "cannot allocate because allocation is not permitted to any of the nodes";
        }
    }
    return explanation;
}||||||||@Override
public String getExplanation() {
    checkDecisionState();
    AllocationDecision allocationDecision = getAllocationDecision();
    if (allocationDecision == AllocationDecision.YES) {
        return "can allocate the shard";
    } else if (allocationDecision == AllocationDecision.THROTTLED) {
        return "allocation temporarily throttled";
    } else if (allocationDecision == AllocationDecision.AWAITING_INFO) {
        return "cannot allocate because information about existing shard data is still being retrieved from some of the nodes";
    } else if (allocationDecision == AllocationDecision.NO_VALID_SHARD_COPY) {
        if (getNodeDecisions() != null && getNodeDecisions().isEmpty() == false) {
            return "cannot allocate because all found copies of the shard are either stale or corrupt";
        } else {
            return "cannot allocate because a previous copy of the primary shard existed but can no longer be found on " + "the nodes in the cluster";
        }
    } else if (allocationDecision == AllocationDecision.ALLOCATION_DELAYED) {
        return "cannot allocate because the cluster is still waiting " + TimeValue.timeValueMillis(remainingDelayInMillis) + " for the departed node holding a replica to rejoin" + (atLeastOneNodeWithYesDecision() ? ", despite being allowed to allocate the shard to at least one other node" : "");
    } else {
        assert allocationDecision == AllocationDecision.NO;
        if (reuseStore) {
            return "cannot allocate because allocation is not permitted to any of the nodes that hold an in-sync shard copy";
        } else {
            return "cannot allocate because allocation is not permitted to any of the nodes";
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(AssertStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												StringLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
												)
												StringLiteralExpr
											)
											(EnclosedExpr
												(ConditionalExpr
													(MethodCallExpr
														SimpleName
													)
													StringLiteralExpr
													StringLiteralExpr
												)
											)
										)
									)
								)
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
										)
										NullLiteralExpr
									)
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
										(IntegerLiteralExpr
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
									)
								)
								(BlockStmt
									(ExpressionStmt
										(AssignExpr
											NameExpr
												SimpleName
											StringLiteralExpr
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
							)
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(AssignExpr
							NameExpr
								SimpleName
							StringLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						StringLiteralExpr
					)
				)
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(AssertStmt
									(BinaryExpr
										NameExpr
											SimpleName
										(FieldAccessExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(IfStmt
									NameExpr
										SimpleName
									(BlockStmt
										(ReturnStmt
											StringLiteralExpr
										)
									)
									(BlockStmt
										(ReturnStmt
											StringLiteralExpr
										)
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											StringLiteralExpr
										)
										(EnclosedExpr
											(ConditionalExpr
												(MethodCallExpr
													SimpleName
												)
												StringLiteralExpr
												StringLiteralExpr
											)
										)
									)
								)
							)
						)
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											SimpleName
										)
										NullLiteralExpr
									)
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
										(BooleanLiteralExpr
										)
									)
								)
								(BlockStmt
									(ReturnStmt
										(BinaryExpr
											StringLiteralExpr
											StringLiteralExpr
										)
									)
								)
								(BlockStmt
									(ReturnStmt
										StringLiteralExpr
									)
								)
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							StringLiteralExpr
						)
					)
				)
				(BlockStmt
					(ReturnStmt
						StringLiteralExpr
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					StringLiteralExpr
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

