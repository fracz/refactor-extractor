/**
 * Resolve and cache the layout direction. LTR is set initially. This is implicitly supposing
 * that the parent directionality can and will be resolved before its children.
 *
 * @hide
 */
public void resolveLayoutDirection() {
    // Clear any previous layout direction resolution
    mPrivateFlags2 &= ~PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK;
    if (hasRtlSupport()) {
        // Set resolved depending on layout direction
        switch((mPrivateFlags2 & PFLAG2_LAYOUT_DIRECTION_MASK) >> PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT) {
            case LAYOUT_DIRECTION_INHERIT:
                // later to get the correct resolved value
                if (!canResolveLayoutDirection())
                    return;
                ViewGroup viewGroup = ((ViewGroup) mParent);
                // resolution happen again later
                if (!viewGroup.canResolveLayoutDirection())
                    return;
                if (viewGroup.getLayoutDirection() == LAYOUT_DIRECTION_RTL) {
                    mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
                }
                break;
            case LAYOUT_DIRECTION_RTL:
                mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
                break;
            case LAYOUT_DIRECTION_LOCALE:
                if ((LAYOUT_DIRECTION_RTL == TextUtils.getLayoutDirectionFromLocale(Locale.getDefault()))) {
                    mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
                }
                break;
            default:
        }
    }
    // Set to resolved
    mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED;
}||||||||/**
 * Resolve and cache the layout direction. LTR is set initially. This is implicitly supposing
 * that the parent directionality can and will be resolved before its children.
 *
 * @return true if resolution has been done, false otherwise.
 *
 * @hide
 */
public boolean resolveLayoutDirection() {
    // Clear any previous layout direction resolution
    mPrivateFlags2 &= ~PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK;
    if (hasRtlSupport()) {
        // Set resolved depending on layout direction
        switch((mPrivateFlags2 & PFLAG2_LAYOUT_DIRECTION_MASK) >> PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT) {
            case LAYOUT_DIRECTION_INHERIT:
                // later to get the correct resolved value
                if (!canResolveLayoutDirection())
                    return false;
                View parent = ((View) mParent);
                // Parent has not yet resolved, LTR is still the default
                if (!parent.isLayoutDirectionResolved())
                    return false;
                if (parent.getLayoutDirection() == LAYOUT_DIRECTION_RTL) {
                    mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
                }
                break;
            case LAYOUT_DIRECTION_RTL:
                mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
                break;
            case LAYOUT_DIRECTION_LOCALE:
                if ((LAYOUT_DIRECTION_RTL == TextUtils.getLayoutDirectionFromLocale(Locale.getDefault()))) {
                    mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
                }
                break;
            default:
        }
    }
    // Set to resolved
    mPrivateFlags2 |= PFLAG2_LAYOUT_DIRECTION_RESOLVED;
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(ReturnStmt
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(EnclosedExpr
										(CastExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(IfStmt
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
					)
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(UnaryExpr
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(BlockStmt
				(SwitchStmt
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(EnclosedExpr
										(CastExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
						NameExpr
							SimpleName
						(IfStmt
							(EnclosedExpr
								(BinaryExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BreakStmt
						)
					)
					(SwitchEntryStmt
					)
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

