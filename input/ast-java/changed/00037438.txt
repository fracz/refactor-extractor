/**
 * Sets whether this WakeLock is ref counted.
 *
 * <p>Wake locks are reference counted by default.
 *
 * @param value true for ref counted, false for not ref counted.
 */
public void setReferenceCounted(boolean value) {
    mRefCounted = value;
}||||||||/**
 * Sets whether this WakeLock is reference counted.
 * <p>
 * Wake locks are reference counted by default.  If a wake lock is
 * reference counted, then each call to {@link #acquire()} must be
 * balanced by an equal number of calls to {@link #release()}.  If a wake
 * lock is not reference counted, then one call to {@link #release()} is
 * sufficient to undo the effect of all previous calls to {@link #acquire()}.
 * </p>
 *
 * @param value True to make the wake lock reference counted, false to
 * make the wake lock non-reference counted.
 */
public void setReferenceCounted(boolean value) {
    synchronized (mToken) {
        mRefCounted = value;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(SynchronizedStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			NameExpr
				SimpleName
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

