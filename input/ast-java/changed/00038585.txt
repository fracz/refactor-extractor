public abstract int onCommand(String cmd);||||||||/**
 * Implement parsing and execution of a command.  If it isn't a command you understand,
 * call {@link #handleDefaultCommands(String)} and return its result as a last resort.
 * User {@link #getNextOption()}, {@link #getNextArg()}, and {@link #getNextArgRequired()}
 * to process additional command line arguments.  Command output can be written to
 * {@link #getOutPrintWriter()} and errors to {@link #getErrPrintWriter()}.
 *
 * <p class="caution">Note that no permission checking has been done before entering this function,
 * so you need to be sure to do your own security verification for any commands you
 * are executing.  The easiest way to do this is to have the ShellCommand contain
 * only a reference to your service's aidl interface, and do all of your command
 * implementations on top of that -- that way you can rely entirely on your executing security
 * code behind that interface.</p>
 *
 * @param cmd The first command line argument representing the name of the command to execute.
 * @return Return the command result; generally 0 or positive indicates success and
 * negative values indicate error.
 */
public abstract int onCommand(String cmd);||||||||(MethodDeclaration
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

