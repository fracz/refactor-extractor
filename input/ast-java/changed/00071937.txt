/**
 * A Union type expression must be a valid type variable or
 * a union(Uniontype-Exp, Uniontype-Exp, ...)
 */
private boolean validUnionTypeExpression(Node expr) {
    if (!isTypeVar(expr) && !isOperation(expr)) {
        warnInvalidExpression("union type", expr);
        return false;
    }
    if (isTypeVar(expr)) {
        return true;
    }
    // It must start with union keyword
    String name = expr.getFirstChild().getString();
    if (!isUnion(name)) {
        warnInvalidExpression("union type", expr);
        return false;
    }
    // two type expressions
    if (!checkParameterCount(expr, Keywords.UNION)) {
        return false;
    }
    int numParams = expr.getChildCount() - 1;
    // Check if each of the members of the union is a valid type expression
    for (int i = 0; i < numParams; i++) {
        if (!validTypeExpression(expr.getChildAtIndex(i))) {
            warnInvalidInside("union type", expr);
            return false;
        }
    }
    return true;
}||||||||/**
 * A Union type expression must be a valid type variable or
 * a union(TTLExp, TTLExp, ...)
 */
private boolean validUnionTypeExpression(Node expr) {
    // two type expressions
    if (!checkParameterCount(expr, Keywords.UNION)) {
        return false;
    }
    int numParams = expr.getChildCount() - 1;
    // Check if each of the members of the union is a valid type expression
    for (int i = 0; i < numParams; i++) {
        if (!validTypeTransformationExpression(expr.getChildAtIndex(i))) {
            warnInvalidInside("union type", expr);
            return false;
        }
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(UnaryExpr
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(IntegerLiteralExpr
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
			LineComment
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

