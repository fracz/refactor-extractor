private void evict() {
// When a miss occurs and a block is needed for replacement, we choose an HIR block that is
// resident in the cache. The blocks in the LIR block set always reside in the cache, i.e.,
// there are no misses for the references to the LIR blocks. However, a reference to an HIR
// block is likely to encounter a miss because Lhirs is very small (its practical size can be as
// small as 1 percent of the cache size).
// Once a free block is needed, the LIRS algorithm removes a resident HIR block from the bottom
// of stack Q for replacement. However, the replaced HIR block remains in 2. For simplicity, in
// the rest of the paper we use “a block in the stack” instead of “the entry of a block in the
// stack” without ambiguity. stack S with its residence status changed to “nonresident” if it is
// originally in the stack.
}||||||||private void evict() {
    // Once a free block is needed, the LIRS algorithm removes a resident HIR block from the bottom
    // of stack Q for replacement. However, the replaced HIR block remains in stack S with its
    // residence status changed to “non resident” if it is originally in the stack. We ensure the
    // block in the bottom of the stack S is an LIR block by removing HIR blocks after it.
    policyStats.recordEviction();
    residentSize--;
    Node bottom = headQ.prevQ;
    bottom.removeFrom(StackType.Q);
    bottom.status = Status.HIR_NON_RESIDENT;
    if (!bottom.isInStack(StackType.S)) {
        // the map only needs to hold non-resident entries that are on the stack
        data.remove(bottom.key);
    }
    pruneStack();
}||||||||(MethodDeclaration
	(BlockStmt
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

