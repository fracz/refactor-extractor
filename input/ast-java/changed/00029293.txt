/**
 * Creates a time- and size-bounded replay subject.
 * <p>
 * In this setting, the {@code ReplaySubject} internally tags each received item with a timestamp value
 * supplied by the {@link Scheduler} and holds at most {@code size} items in its internal buffer. It evicts
 * items from the start of the buffer if their age becomes less-than or equal to the supplied age in
 * milliseconds or the buffer reaches its {@code size} limit.
 * <p>
 * When observers subscribe to a terminated {@code ReplaySubject}, they observe the items that remained in
 * the buffer after the terminal notification, regardless of their age, but at most {@code size} items.
 * <p>
 * If an observer subscribes while the {@code ReplaySubject} is active, it will observe only those items
 * from within the buffer that have age less than the specified time and each subsequent item, even if the
 * buffer evicts items due to the time constraint in the mean time. In other words, once an observer
 * subscribes, it observes items without gaps in the sequence except for the outdated items at the beginning
 * of the sequence.
 * <p>
 * Note that terminal notifications ({@code onError} and {@code onCompleted}) trigger eviction as well. For
 * example, with a max age of 5, the first item is observed at T=0, then an {@code onCompleted} notification
 * arrives at T=10. If an observer subscribes at T=11, it will find an empty {@code ReplaySubject} with just
 * an {@code onCompleted} notification.
 *
 * @param <T>
 * the type of items observed and emitted by the Subject
 * @param maxAge
 * the maximum age of the contained items
 * @param unit
 * the time unit of {@code time}
 * @param size
 * the maximum number of buffered items
 * @param scheduler
 * the {@link Scheduler} that provides the current time
 * @return the created subject
 */
public static <T> ReplaySubject<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int size) {
    ObjectHelper.requireNonNull(unit, "unit is null");
    ObjectHelper.requireNonNull(scheduler, "scheduler is null");
    if (size <= 0) {
        throw new IllegalArgumentException("size > 0 required but it was " + size);
    }
    SizeAndTimeBoundReplayBuffer<T> buffer = new SizeAndTimeBoundReplayBuffer<T>(size, maxAge, unit, scheduler);
    return createWithBuffer(buffer);
}||||||||/**
 * Creates a time- and size-bounded replay subject.
 * <p>
 * In this setting, the {@code ReplaySubject} internally tags each received item with a timestamp value
 * supplied by the {@link Scheduler} and holds at most {@code size} items in its internal buffer. It evicts
 * items from the start of the buffer if their age becomes less-than or equal to the supplied age in
 * milliseconds or the buffer reaches its {@code size} limit.
 * <p>
 * When observers subscribe to a terminated {@code ReplaySubject}, they observe the items that remained in
 * the buffer after the terminal notification, regardless of their age, but at most {@code size} items.
 * <p>
 * If an observer subscribes while the {@code ReplaySubject} is active, it will observe only those items
 * from within the buffer that have age less than the specified time and each subsequent item, even if the
 * buffer evicts items due to the time constraint in the mean time. In other words, once an observer
 * subscribes, it observes items without gaps in the sequence except for the outdated items at the beginning
 * of the sequence.
 * <p>
 * Note that terminal notifications ({@code onError} and {@code onCompleted}) trigger eviction as well. For
 * example, with a max age of 5, the first item is observed at T=0, then an {@code onCompleted} notification
 * arrives at T=10. If an observer subscribes at T=11, it will find an empty {@code ReplaySubject} with just
 * an {@code onCompleted} notification.
 *
 * @param <T>
 * the type of items observed and emitted by the Subject
 * @param maxAge
 * the maximum age of the contained items
 * @param unit
 * the time unit of {@code time}
 * @param maxSize
 * the maximum number of buffered items
 * @param scheduler
 * the {@link Scheduler} that provides the current time
 * @return the created subject
 */
public static <T> ReplaySubject<T> createWithTimeAndSize(long maxAge, TimeUnit unit, Scheduler scheduler, int maxSize) {
    return new ReplaySubject<T>(new SizeAndTimeBoundReplayBuffer<T>(maxSize, maxAge, unit, scheduler));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							StringLiteralExpr
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(ObjectCreationExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
				(ClassOrInterfaceType
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(TypeParameter
		SimpleName
	)
	(JavadocComment
	)
)

