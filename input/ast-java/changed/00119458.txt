/**
 * Attempt to acquire every lock previously specified by calls to
 * {@link #writeLock(Entry)} since either creation of this {@code Locker}
 * instance or the last {@link #unlockAll()} call.
 * <p>
 * In other words, {@code prepareLock(Entry)} must be called at least once
 * before this method is called in order for this method to have an effect.
 * <p>
 * Returns on success and throws an exception on failure.
 *
 * @param timeout
 * The maximum wallclock time to attempt locking in the face of
 * temporary failures (such as the lock being held by another
 * process) before giving up and throwing an exception
 * @param timeunits
 * The units of {@code timeout}
 * @throws PermanentLockingException
 * @throws TemporaryLockingException
 */
public void checkLocks() throws StorageException;||||||||/**
 * Attempt to acquire every lock previously specified by calls to
 * {@link #writeLock(Entry)} since either creation of this {@code Locker}
 * instance or the last {@link #unlockAll()} call.
 * <p>
 * In other words, {@code prepareLock(Entry)} must be called at least once
 * before this method is called in order for this method to have an effect.
 * <p>
 * Returns on success and throws an exception on failure.
 *
 * @param timeout
 * The maximum wallclock time to attempt locking in the face of
 * temporary failures (such as the lock being held by another
 * process) before giving up and throwing an exception
 * @param timeunits
 * The units of {@code timeout}
 * @throws PermanentLockingException
 * @throws TemporaryLockingException
 */
public void checkLocks(StoreTransaction tx) throws StorageException;||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

