public void testInferScalarInsteadOfLooseObject() {
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.name.toLowerCase().startsWith('a');", "}", "h({name: 'asdf'});"));
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.name.toLowerCase().startsWith('a');", "}", "h({name: {}});"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.name.toString();", "}", "h({name: 'asdf'});", "h({name: {}});"));
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.name.length;", "}", "h({name: 'asdf'});", "h({name: {}});"));
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.num.toExponential();", "}", "h({num: 123});"));
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.num.toExponential();", "}", "h({num: {}});"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("/** @constructor */ function Foo() {}", "Foo.prototype.toLowerCase = function() {};", "Foo.prototype.getProp = function() {};", "var foo = new Foo;", "foo.f = function() {", "  if (foo.toLowerCase() > 'asdf') { throw new Error; }", "  foo.getProp();", "};"), NewTypeInference.INEXISTENT_PROPERTY, // spurious b/c foo is inferred as string in the inner scope
    NewTypeInference.CROSS_SCOPE_GOTCHA);
}||||||||public void testInferScalarInsteadOfLooseObject() {
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.name.toLowerCase().startsWith('a');", "}", "h({name: 'asdf'});"));
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.name.toLowerCase().startsWith('a');", "}", "h({name: {}});"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.name.toString();", "}", "h({name: 'asdf'});", "h({name: {}});"));
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.name.length;", "}", "h({name: 'asdf'});", "h({name: {}});"));
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.num.toExponential();", "}", "h({num: 123});"));
    typeCheck(LINE_JOINER.join("function h(x) {", "  return x.num.toExponential();", "}", "h({num: {}});"), NewTypeInference.INVALID_ARGUMENT_TYPE);
    typeCheck(LINE_JOINER.join("/** @constructor */ function Foo() {}", "Foo.prototype.toLowerCase = function() {};", "Foo.prototype.getProp = function() {};", "var foo = new Foo;", "function f() {", "  if (foo.toLowerCase() > 'asdf') { throw new Error; }", "  foo.getProp();", "};"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
					LineComment
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
)

