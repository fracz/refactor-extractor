// public void testFindUsagesForEnvProperty() throws Exception {
// createProjectPom("<groupId>test</groupId>" +
// "<artifactId>module1</artifactId>" +
// "<version>11</version>" +
// "<name>${env.<caret>TEMP}</name>" +
// "<description>${env.<caret>TEMP}</description>");
// 
// assertSearchResultsContain(myProjectPom, findTag("project.name"), findTag("project.description"));
// }
// 
// public void testFindUsagesForSystemProperty() throws Exception {
// createProjectPom("<groupId>test</groupId>" +
// "<artifactId>module1</artifactId>" +
// "<version>11</version>" +
// "<name>${use<caret>r.home}</name>" +
// "<description>${user.home}</description>");
// 
// assertSearchResultsContain(myProjectPom, findTag("project.name"), findTag("project.description"));
// }
// 
public void testHighlightingFromTag() throws Exception {
    createProjectPom("<groupId>test</groupId>" + "<artifactId>module1</artifactId>" + "<<caret>version>1</version>" + "<name>${project.version}</name>" + "<description>${version}</description>");
    assertHighlighted(myProjectPom, new HighlightInfo(findTag("project.name"), "project.version"), new HighlightInfo(findTag("project.description"), "version"));
}||||||||public void testHighlightingFromTag() throws Exception {
    createProjectPom("<groupId>test</groupId>" + "<artifactId>module1</artifactId>" + "<<caret>version>1</version>" + "<name>${project.version}</name>" + "<description>${version}</description>");
    assertHighlighted(myProjectPom, new HighlightInfo(findTag("project.name"), "project.version"), new HighlightInfo(findTag("project.description"), "version"));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	LineComment
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								StringLiteralExpr
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				(ObjectCreationExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					StringLiteralExpr
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

