/**
 * Sets whether or not (default) the content of this view is selectable by the user.
 *
 * Note that this methods affect the {@link #setFocusable(boolean)},
 * {@link #setFocusableInTouchMode(boolean)} {@link #setClickable(boolean)} and
 * {@link #setLongClickable(boolean)} states and you may want to restore these if they were
 * customized.
 *
 * See {@link #isTextSelectable} for details.
 *
 * @param selectable Whether or not the content of this TextView should be selectable.
 */
public void setTextIsSelectable(boolean selectable) {
    // false is default value with no edit data
    if (!selectable && mEditor == null)
        return;
    createEditorIfNeeded("setTextIsSelectable");
    if (getEditor().mTextIsSelectable == selectable)
        return;
    getEditor().mTextIsSelectable = selectable;
    setFocusableInTouchMode(selectable);
    setFocusable(selectable);
    setClickable(selectable);
    setLongClickable(selectable);
    // mInputType should already be EditorInfo.TYPE_NULL and mInput should be null
    setMovementMethod(selectable ? ArrowKeyMovementMethod.getInstance() : null);
    setText(getText(), selectable ? BufferType.SPANNABLE : BufferType.NORMAL);
    // Called by setText above, but safer in case of future code changes
    getEditor().prepareCursorControllers();
}||||||||/**
 * Sets whether or not (default) the content of this view is selectable by the user.
 *
 * Note that this methods affect the {@link #setFocusable(boolean)},
 * {@link #setFocusableInTouchMode(boolean)} {@link #setClickable(boolean)} and
 * {@link #setLongClickable(boolean)} states and you may want to restore these if they were
 * customized.
 *
 * See {@link #isTextSelectable} for details.
 *
 * @param selectable Whether or not the content of this TextView should be selectable.
 */
public void setTextIsSelectable(boolean selectable) {
    // false is default value with no edit data
    if (!selectable && mEditor == null)
        return;
    createEditorIfNeeded("setTextIsSelectable");
    if (mEditor.mTextIsSelectable == selectable)
        return;
    mEditor.mTextIsSelectable = selectable;
    setFocusableInTouchMode(selectable);
    setFocusable(selectable);
    setClickable(selectable);
    setLongClickable(selectable);
    // mInputType should already be EditorInfo.TYPE_NULL and mInput should be null
    setMovementMethod(selectable ? ArrowKeyMovementMethod.getInstance() : null);
    setText(getText(), selectable ? BufferType.SPANNABLE : BufferType.NORMAL);
    // Called by setText above, but safer in case of future code changes
    mEditor.prepareCursorControllers();
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					(MethodCallExpr
						SimpleName
					)
				)
				NameExpr
					SimpleName
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(MethodCallExpr
						SimpleName
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					NameExpr
						SimpleName
					NullLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				(ConditionalExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					SimpleName
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(UnaryExpr
					NameExpr
						SimpleName
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
			(ReturnStmt
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ConditionalExpr
					NameExpr
						SimpleName
					NullLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
				)
				(ConditionalExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

