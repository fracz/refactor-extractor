public boolean canDrop(@Nullable Point location, final int componentCount) {
    if (location == null) {
        if (isXY() || componentCount > 1) {
            return false;
        }
        return getComponentAtGrid(0, 0) == null;
    }
    if (isXY()) {
        return true;
    } else if (isGrid()) {
        // Do not allow to drop more then one component into grid
        if (componentCount > 1) {
            return false;
        }
        final GridLayoutManager gridLayout = (GridLayoutManager) getLayout();
        final int row = gridLayout.getRowAt(location.y);
        final int column = gridLayout.getColumnAt(location.x);
        // If target point doesn't belong to any cell and column then do not allow drop.
        if (row == -1 || column == -1) {
            return false;
        }
        return getComponentAtGrid(row, column) == null;
    } else {
        // noinspection HardCodedStringLiteral
        throw new IllegalStateException("unknown layout:" + getLayout());
    }
}||||||||public boolean canDrop(@Nullable Point location, final int componentCount) {
    if (location == null) {
        if (isXY() || componentCount > 1) {
            return false;
        }
        return getComponentAtGrid(0, 0) == null;
    }
    if (isXY()) {
        return true;
    } else if (isGrid()) {
        // Do not allow to drop more then one component into grid
        final GridLayoutManager gridLayout = (GridLayoutManager) getLayout();
        final int row = gridLayout.getRowAt(location.y);
        final int column = gridLayout.getColumnAt(location.x);
        // If target point doesn't belong to any cell and column then do not allow drop.
        if (row == -1 || column == -1) {
            return false;
        }
        for (int c = column; c < column + componentCount; c++) {
            if (c >= gridLayout.getColumnCount() || getComponentAtGrid(row, c) != null) {
                return false;
            }
        }
        return true;
    } else {
        // noinspection HardCodedStringLiteral
        throw new IllegalStateException("unknown layout:" + getLayout());
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ReturnStmt
					(BinaryExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
							SimpleName
						)
						NullLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
				)
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
				(BlockStmt
					(IfStmt
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									(MethodCallExpr
										SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
						LineComment
					)
					(ReturnStmt
						(BinaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
							)
							NullLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(IntegerLiteralExpr
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
				)
				(ReturnStmt
					(BinaryExpr
						(MethodCallExpr
							(IntegerLiteralExpr
							)
							(IntegerLiteralExpr
							)
							SimpleName
						)
						NullLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
			)
			(IfStmt
				(MethodCallExpr
					SimpleName
				)
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							(BinaryExpr
								StringLiteralExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(CastExpr
									(MethodCallExpr
										SimpleName
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
						LineComment
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(UnaryExpr
									(IntegerLiteralExpr
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								(BooleanLiteralExpr
								)
							)
						)
						LineComment
					)
					(ForStmt
						(BlockStmt
							(IfStmt
								(BinaryExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BinaryExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
										)
										NullLiteralExpr
									)
								)
								(BlockStmt
									(ReturnStmt
										(BooleanLiteralExpr
										)
									)
								)
							)
						)
						(BinaryExpr
							NameExpr
								SimpleName
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						(VariableDeclarationExpr
							(VariableDeclarator
								NameExpr
									SimpleName
								SimpleName
								(PrimitiveType
								)
							)
						)
						(UnaryExpr
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

