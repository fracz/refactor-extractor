@Override
public boolean next() throws IOException {
    while (true) {
        pos++;
        // Read
        do {
            // Where we are
            if (!readHeader()) {
                continue;
            }
            if (concurrentWriteHappened) {
                // Keys could have been moved to the left so we need to make sure we are not missing any keys by
                // moving position back until we find previously returned key
                pos = searchKey(first ? fromInclusive : prevKey);
            }
            // Next result
            if (pos >= keyCount) {
                // Read right sibling
                pointerId = bTreeNode.rightSibling(cursor, stableGeneration, unstableGeneration);
                readPointerGenOnSuccess();
            } else {
                // Read the next value in this leaf
                bTreeNode.keyAt(cursor, mutableKey, pos);
                bTreeNode.valueAt(cursor, mutableValue, pos);
            }
        } while (concurrentWriteHappened = cursor.shouldRetry());
        checkOutOfBounds(cursor);
        // Act
        if (nodeType != TreeNode.NODE_TYPE_TREE_NODE || !saneKeyCountRead(keyCount)) {
            // This node has been reused for something else than a tree node. Restart seek from root.
            restartSeekFromRoot();
            continue;
        }
        if (!verifyNodeGenInvariants()) {
            // The node generation is newer than expected. This node has probably been reused during
            // seekers lifetime. Restart seek from root.
            restartSeekFromRoot();
            continue;
        }
        if (goToNewGen()) {
            continue;
        }
        if (pos >= keyCount) {
            if (goToSibling()) {
                // in the read loop above so that we can continue reading from that sibling
                continue;
            }
        } else if (layout.compare(mutableKey, toExclusive) < 0) {
            if (isResultKey()) {
                layout.copyKey(mutableKey, prevKey);
                // which marks this read a hit that user can see
                return true;
            }
            continue;
        }
        // We've come too far and so this means the end of the result set
        return false;
    }
}||||||||@Override
public boolean next() throws IOException {
    while (true) {
        pos += stride;
        // Read
        do {
            // Where we are
            if (!readHeader()) {
                continue;
            }
            if (verifyExpectedFirstAfterGoToNext) {
                pos = seekForward ? 0 : keyCount - 1;
                bTreeNode.keyAt(cursor, firstKeyInNode, pos);
            }
            if (concurrentWriteHappened) {
                // Keys could have been moved so we need to make sure we are not missing any keys by
                // moving position back until we find previously returned key
                pos = searchKey(first ? fromInclusive : prevKey);
                if (!seekForward && pos >= keyCount) {
                    // We may need to go to previous sibling to find correct place to start seeking from
                    prevSiblingId = readPrevSibling();
                    readPrevSiblingPointerGenOnSuccess();
                }
            }
            // Next result
            if ((seekForward && pos >= keyCount) || (!seekForward && pos <= 0)) {
                // Read right sibling
                pointerId = readNextSibling();
                readPointerGenOnSuccess();
            }
            if (0 <= pos && pos < keyCount) {
                // Read the next value in this leaf
                bTreeNode.keyAt(cursor, mutableKey, pos);
                bTreeNode.valueAt(cursor, mutableValue, pos);
            }
        } while (concurrentWriteHappened = cursor.shouldRetry());
        checkOutOfBounds(cursor);
        // Act
        if (nodeType != TreeNode.NODE_TYPE_TREE_NODE || !saneKeyCountRead(keyCount)) {
            // This node has been reused for something else than a tree node. Restart seek from root.
            restartSeekFromRoot();
            continue;
        }
        if (!verifyFirstKeyInNodeIsExpectedAfterGoTo()) {
            continue;
        }
        if (!verifyNodeGenInvariants()) {
            // The node generation is newer than expected. This node has probably been reused during
            // seekers lifetime. Restart seek from root.
            restartSeekFromRoot();
            continue;
        }
        if (goToNewGen()) {
            continue;
        }
        if (!seekForward && pos >= keyCount) {
            if (goToPrevSibling()) {
                // in the read loop above so that we can continue reading from previous sibling
                continue;
            }
        }
        if ((seekForward && pos >= keyCount) || (!seekForward && pos <= 0 && !insidePrevKey())) {
            if (goToNextSibling()) {
                // in the read loop above so that we can continue reading from next sibling
                continue;
            }
        } else if (insideEndRange()) {
            if (isResultKey()) {
                layout.copyKey(mutableKey, prevKey);
                // which marks this read a hit that user can see
                return true;
            }
            continue;
        }
        // We've come too far and so this means the end of the result set
        return false;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(DoStmt
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(ConditionalExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
									LineComment
								)
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
							LineComment
						)
					)
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					(IfStmt
						(BinaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(IntegerLiteralExpr
							)
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										(BooleanLiteralExpr
										)
										LineComment
									)
								)
							)
							(ContinueStmt
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockStmt
								(ContinueStmt
									LineComment
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(WhileStmt
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				(DoStmt
					(BlockStmt
						(IfStmt
							(UnaryExpr
								(MethodCallExpr
									SimpleName
								)
							)
							(BlockStmt
								(ContinueStmt
								)
							)
							LineComment
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(ConditionalExpr
											NameExpr
												SimpleName
											(BinaryExpr
												NameExpr
													SimpleName
												(IntegerLiteralExpr
												)
											)
											(IntegerLiteralExpr
											)
										)
									)
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											(ConditionalExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											SimpleName
										)
									)
									LineComment
								)
								(IfStmt
									(BinaryExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
									(BlockStmt
										(ExpressionStmt
											(AssignExpr
												NameExpr
													SimpleName
												(MethodCallExpr
													SimpleName
												)
											)
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
											)
										)
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(EnclosedExpr
									(BinaryExpr
										NameExpr
											SimpleName
										(BinaryExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(EnclosedExpr
									(BinaryExpr
										(UnaryExpr
											NameExpr
												SimpleName
										)
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					LineComment
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(UnaryExpr
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ContinueStmt
						)
					)
					LineComment
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
							LineComment
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(UnaryExpr
							NameExpr
								SimpleName
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockStmt
								(ContinueStmt
									LineComment
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									(UnaryExpr
										NameExpr
											SimpleName
									)
									(BinaryExpr
										NameExpr
											SimpleName
										(IntegerLiteralExpr
										)
									)
								)
								(UnaryExpr
									(MethodCallExpr
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(MethodCallExpr
							SimpleName
						)
						(BlockStmt
							(IfStmt
								(MethodCallExpr
									SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(MethodCallExpr
											NameExpr
												SimpleName
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(ReturnStmt
										(BooleanLiteralExpr
										)
										LineComment
									)
								)
							)
							(ContinueStmt
							)
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								SimpleName
							)
							(BlockStmt
								(ContinueStmt
									LineComment
								)
							)
						)
					)
				)
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

