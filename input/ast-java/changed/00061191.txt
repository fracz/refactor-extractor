@Test
public void testInvalidPaths() throws Exception {
    assertInvalidPath("[foo]", "brackets at the beginning of the token expression");
    assertInvalidPath("foo[bar", "open brackets without closing at the token expression");
    assertInvalidPath("foo[", "open bracket at the end of the token expression");
    assertInvalidPath("foo[]", "empty brackets in the token expression");
    assertInvalidPath("foo[bar]baz", "brackets not enclosing at the end of the token expression");
    assertInvalidPath(".foo", "dot separator at the beginning of the token expression");
    assertInvalidPath("foo.", "dot separator at the end of the token expression");
}||||||||public void testInvalidPaths() throws Exception {
    assertInvalidPath("[foo]", "brackets at the beginning of the token expression");
    assertInvalidPath("foo[bar", "open brackets without closing at the token expression");
    assertInvalidPath("foo[", "open bracket at the end of the token expression");
    assertInvalidPath("foo[]", "empty brackets in the token expression");
    assertInvalidPath("foo[bar]baz", "brackets not enclosing at the end of the token expression");
    assertInvalidPath(".foo", "dot separator at the beginning of the token expression");
    assertInvalidPath("foo.", "dot separator at the end of the token expression");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

