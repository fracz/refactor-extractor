/**
 * Guides the allowed concurrency among update operations. Used as a
 * hint for internal sizing. The table is internally partitioned to try
 * to permit the indicated number of concurrent updates without
 * contention.  Because placement in hash tables is essentially random,
 * the actual concurrency will vary. Ideally, you should choose a value
 * to accommodate as many threads as will ever concurrently modify the
 * table. Using a significantly higher value than you need can waste
 * space and time, and a significantly lower value can lead to thread
 * contention. But overestimates and underestimates within an order of
 * magnitude do not usually have much noticeable impact. A value of one
 * is appropriate when it is known that only one thread will modify and
 * all others will only read. Defaults to 16.
 *
 * @throws IllegalArgumentException if {@code concurrencyLevel} is
 * nonpositive
 * @throws IllegalStateException if a concurrency level was already set
 */
@GwtIncompatible("java.util.concurrent.ConcurrentHashMap concurrencyLevel")
public MapMaker concurrencyLevel(int concurrencyLevel) {
    builder.concurrencyLevel(concurrencyLevel);
    return this;
}||||||||/**
 * Guides the allowed concurrency among update operations. Used as a
 * hint for internal sizing. The table is internally partitioned to try
 * to permit the indicated number of concurrent updates without
 * contention.  Because placement in hash tables is essentially random,
 * the actual concurrency will vary. Ideally, you should choose a value
 * to accommodate as many threads as will ever concurrently modify the
 * table. Using a significantly higher value than you need can waste
 * space and time, and a significantly lower value can lead to thread
 * contention. But overestimates and underestimates within an order of
 * magnitude do not usually have much noticeable impact. A value of one
 * is appropriate when it is known that only one thread will modify and
 * all others will only read. Defaults to 16.
 *
 * @throws IllegalArgumentException if {@code concurrencyLevel} is
 * nonpositive
 * @throws IllegalStateException if a concurrency level was already set
 */
@GwtIncompatible("java.util.concurrent.ConcurrentHashMap concurrencyLevel")
public MapMaker concurrencyLevel(int concurrencyLevel) {
    checkState(this.concurrencyLevel == UNSET_CONCURRENCY_LEVEL, "concurrency level was already set to " + this.concurrencyLevel);
    checkArgument(concurrencyLevel > 0);
    this.concurrencyLevel = concurrencyLevel;
    return this;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
					NameExpr
						SimpleName
				)
				(BinaryExpr
					StringLiteralExpr
					(FieldAccessExpr
						SimpleName
						(ThisExpr
						)
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					NameExpr
						SimpleName
					(IntegerLiteralExpr
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(ThisExpr
					)
				)
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)

