/**
 * Set request voice parameter.
 *
 * @param paramName
 * The name of the parameter. It has to be one of the keys
 * from {@link VoiceInfo#getParamsWithDefaults()}
 * @param value
 * Value of the parameter. Its type can be one of: Integer, Float,
 * Boolean, String, VoiceInfo (will be set as an Integer, result of a call to
 * the {@link VoiceInfo#getId()}) or byte[]. It has to be of the same type
 * as the default value from {@link VoiceInfo#getParamsWithDefaults()}
 * for that parameter.
 * @throws IllegalArgumentException
 * If paramName is not a valid parameter name or its value is of a wrong
 * type.
 * @throws IllegalStateException
 * If no voice is set.
 */
public Builder setVoiceParam(String paramName, Object value) {
    if (mCurrentVoiceInfo == null) {
        throw new IllegalStateException("Couldn't set voice parameter, no voice is set");
    }
    Object defaultValue = mCurrentVoiceInfo.getParamsWithDefaults().get(paramName);
    if (defaultValue == null) {
        throw new IllegalArgumentException("Parameter \"" + paramName + "\" is not available in set voice with id: " + mCurrentVoiceInfo.getId());
    }
    // If it's VoiceInfo, get its id
    if (value instanceof VoiceInfo) {
        value = ((VoiceInfo) value).getId();
    }
    // Check type information
    if (!defaultValue.getClass().equals(value.getClass())) {
        throw new IllegalArgumentException("Parameter \"" + paramName + "\" is of different type. Value passed has " + "type " + value.getClass().getSimpleName() + " but should have " + "type " + defaultValue.getClass().getSimpleName());
    }
    setParam(mVoiceParams, paramName, value);
    return this;
}||||||||/**
 * Set request voice parameter.
 *
 * @param paramName
 * The name of the parameter. It has to be one of the keys
 * from {@link VoiceInfo#getParamsWithDefaults()}
 * @param value
 * Value of the parameter. Its type can be one of: Integer, Float,
 * Boolean, String, VoiceInfo (will be set as a String, result of a call to
 * the {@link VoiceInfo#getName()}) or byte[]. It has to be of the same type
 * as the default value from {@link VoiceInfo#getParamsWithDefaults()}
 * for that parameter.
 * @throws IllegalArgumentException
 * If paramName is not a valid parameter name or its value is of a wrong
 * type.
 * @throws IllegalStateException
 * If no voice is set.
 */
public Builder setVoiceParam(String paramName, Object value) {
    if (mCurrentVoiceInfo == null) {
        throw new IllegalStateException("Couldn't set voice parameter, no voice is set");
    }
    Object defaultValue = mCurrentVoiceInfo.getParamsWithDefaults().get(paramName);
    if (defaultValue == null) {
        throw new IllegalArgumentException("Parameter \"" + paramName + "\" is not available in set voice with " + "name: " + mCurrentVoiceInfo.getName());
    }
    // If it's VoiceInfo, get its name
    if (value instanceof VoiceInfo) {
        value = ((VoiceInfo) value).getName();
    }
    // Check type information
    if (!defaultValue.getClass().equals(value.getClass())) {
        throw new IllegalArgumentException("Parameter \"" + paramName + "\" is of different type. Value passed has " + "type " + value.getClass().getSimpleName() + " but should have " + "type " + defaultValue.getClass().getSimpleName());
    }
    setParam(mVoiceParams, paramName, value);
    return this;
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									NameExpr
										SimpleName
								)
								StringLiteralExpr
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(EnclosedExpr
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(InstanceOfExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							(EnclosedExpr
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
				)
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ReturnStmt
			(ThisExpr
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

