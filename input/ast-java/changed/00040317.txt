/**
 * Returns a Wi-Fi icon for a network with a given signal level and badging value.
 *
 * @param signalLevel The level returned by {@link WifiManager#calculateSignalLevel(int, int)}
 * for a network. Must be between 0 and {@link WifiManager#RSSI_LEVELS}-1.
 * @param badging  {@see ScoredNetwork#Badging}, retrieved from
 * {@link ScoredNetwork#calculateBadge(int)}.
 * @param theme The theme for the current application, may be null.
 * @return Drawable for the given icon
 * @throws IllegalArgumentException if {@code signalLevel} is out of range or {@code badging}
 * is an invalid value
 */
@NonNull
public static Drawable getWifiIcon(@IntRange(from = 0, to = 4) int signalLevel, @Badging int badging, @Nullable Theme theme) {
    Resources resources = Resources.getSystem();
    if (badging == ScoredNetwork.BADGING_NONE) {
        return resources.getDrawable(getWifiSignalResource(signalLevel), theme);
    }
    Drawable[] layers = new Drawable[] { resources.getDrawable(getBadgedWifiSignalResource(signalLevel), theme), resources.getDrawable(getWifiBadgeResource(badging), theme) };
    return new LayerDrawable(layers);
}||||||||/**
 * Returns a Wi-Fi icon for a network with a given signal level and badging value.
 *
 * @param signalLevel The level returned by {@link WifiManager#calculateSignalLevel(int, int)}
 * for a network. Must be between 0 and {@link WifiManager#RSSI_LEVELS}-1.
 * @param badging  {@see ScoredNetwork#Badging}, retrieved from
 * {@link ScoredNetwork#calculateBadge(int)}.
 * @param theme The theme for the current application, may be null.
 * @return Drawable for the given icon
 * @throws IllegalArgumentException if {@code signalLevel} is out of range or {@code badging}
 * is an invalid value
 */
@NonNull
public static Drawable getWifiIcon(@IntRange(from = 0, to = 4) int signalLevel, @Badging int badging, @Nullable Theme theme) {
    Resources resources = Resources.getSystem();
    if (badging == BADGING_NONE) {
        return resources.getDrawable(getWifiSignalResource(signalLevel), theme);
    }
    Drawable[] layers = new Drawable[] { resources.getDrawable(getBadgedWifiSignalResource(signalLevel), theme), resources.getDrawable(getWifiBadgeResource(badging), theme) };
    return new LayerDrawable(layers);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayInitializerExpr
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ArrayCreationLevel
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(NormalAnnotationExpr
			(MemberValuePair
				SimpleName
				(IntegerLiteralExpr
				)
			)
			(MemberValuePair
				SimpleName
				(IntegerLiteralExpr
				)
			)
			Name
		)
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ArrayCreationExpr
						(ClassOrInterfaceType
							SimpleName
						)
						(ArrayInitializerExpr
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ArrayCreationLevel
						)
					)
					SimpleName
					(ArrayType
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		(NormalAnnotationExpr
			(MemberValuePair
				SimpleName
				(IntegerLiteralExpr
				)
			)
			(MemberValuePair
				SimpleName
				(IntegerLiteralExpr
				)
			)
			Name
		)
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

