/**
 * If provided, this ActionMode.Callback will be used to create the ActionMode when text
 * selection is initiated in this View.
 *
 * The standard implementation populates the menu with a subset of Select All, Cut, Copy and
 * Paste actions, depending on what this View supports.
 *
 * A custom implementation can add new entries in the default menu in its
 * {@link android.view.ActionMode.Callback#onPrepareActionMode(ActionMode, Menu)} method. The
 * default actions can also be removed from the menu using {@link Menu#removeItem(int)} and
 * passing {@link android.R.id#selectAll}, {@link android.R.id#cut}, {@link android.R.id#copy}
 * or {@link android.R.id#paste} ids as parameters.
 *
 * Returning false from
 * {@link android.view.ActionMode.Callback#onCreateActionMode(ActionMode, Menu)} will prevent
 * the action mode from being started.
 *
 * Action click events should be handled by the custom implementation of
 * {@link android.view.ActionMode.Callback#onActionItemClicked(ActionMode, MenuItem)}.
 *
 * Note that text selection mode is not started when a TextView receives focus and the
 * {@link android.R.attr#selectAllOnFocus} flag has been set. The content is highlighted in
 * that case, to allow for quick replacement.
 */
public void setCustomSelectionActionModeCallback(ActionMode.Callback actionModeCallback) {
    createEditorIfNeeded("custom selection action mode set");
    getEditor().mCustomSelectionActionModeCallback = actionModeCallback;
}||||||||/**
 * If provided, this ActionMode.Callback will be used to create the ActionMode when text
 * selection is initiated in this View.
 *
 * The standard implementation populates the menu with a subset of Select All, Cut, Copy and
 * Paste actions, depending on what this View supports.
 *
 * A custom implementation can add new entries in the default menu in its
 * {@link android.view.ActionMode.Callback#onPrepareActionMode(ActionMode, Menu)} method. The
 * default actions can also be removed from the menu using {@link Menu#removeItem(int)} and
 * passing {@link android.R.id#selectAll}, {@link android.R.id#cut}, {@link android.R.id#copy}
 * or {@link android.R.id#paste} ids as parameters.
 *
 * Returning false from
 * {@link android.view.ActionMode.Callback#onCreateActionMode(ActionMode, Menu)} will prevent
 * the action mode from being started.
 *
 * Action click events should be handled by the custom implementation of
 * {@link android.view.ActionMode.Callback#onActionItemClicked(ActionMode, MenuItem)}.
 *
 * Note that text selection mode is not started when a TextView receives focus and the
 * {@link android.R.attr#selectAllOnFocus} flag has been set. The content is highlighted in
 * that case, to allow for quick replacement.
 */
public void setCustomSelectionActionModeCallback(ActionMode.Callback actionModeCallback) {
    createEditorIfNeeded("custom selection action mode set");
    mEditor.mCustomSelectionActionModeCallback = actionModeCallback;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					(MethodCallExpr
						SimpleName
					)
				)
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(JavadocComment
	)
)

