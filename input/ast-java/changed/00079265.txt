/**
 * Seeks animation to given absolute position (within given loop) and refreshes the canvas.<br>
 * <b>NOTE: only seeking forward is supported.</b><br>
 * If position is less than current position or GIF has only one frame then nothing happens.
 * If position is greater than duration of the loop of animation
 * (or whole animation if there is no loop) then animation will be sought to the end.<br>
 * NOTE: all frames from current to desired must be rendered sequentially to perform seeking.
 * It may take a lot of time if number of such frames is large.
 * Method is thread-safe. Decoding is performed in background thread and drawable is invalidated automatically
 * afterwards.
 *
 * @param position position to seek to in milliseconds
 * @throws IllegalArgumentException if position&lt;0
 */
@Override
public void seekTo(final int position) {
    if (position < 0) {
        throw new IllegalArgumentException("Position is not positive");
    }
    mExecutor.execute(new SafeRunnable() {

        @Override
        public void doWork() {
            mNativeInfoHandle.seekToTime(position, mBuffer);
            scheduleSelf(mInvalidateTask, 0L);
        }
    });
}||||||||/**
 * Seeks animation to given absolute position (within given loop) and refreshes the canvas.<br>
 * <b>NOTE: only seeking forward is supported.</b><br>
 * If position is less than current position or GIF has only one frame then nothing happens.
 * If position is greater than duration of the loop of animation
 * (or whole animation if there is no loop) then animation will be sought to the end.<br>
 * NOTE: all frames from current to desired must be rendered sequentially to perform seeking.
 * It may take a lot of time if number of such frames is large.
 * Method is thread-safe. Decoding is performed in background thread and drawable is invalidated automatically
 * afterwards.
 *
 * @param position position to seek to in milliseconds
 * @throws IllegalArgumentException if position&lt;0
 */
@Override
public void seekTo(final int position) {
    if (position < 0) {
        throw new IllegalArgumentException("Position is not positive");
    }
    mExecutor.execute(new SafeRunnable(this) {

        @Override
        public void doWork() {
            mNativeInfoHandle.seekToTime(position, mBuffer);
            scheduleSelf(mInvalidateTask, 0L);
        }
    });
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(LongLiteralExpr
									)
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(IntegerLiteralExpr
				)
			)
			(BlockStmt
				(ThrowStmt
					(ObjectCreationExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(ObjectCreationExpr
					(MethodDeclaration
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(ExpressionStmt
								(MethodCallExpr
									NameExpr
										SimpleName
									(LongLiteralExpr
									)
									SimpleName
								)
							)
						)
						(VoidType
						)
						SimpleName
						(MarkerAnnotationExpr
							Name
						)
					)
					(ThisExpr
					)
					(ClassOrInterfaceType
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

