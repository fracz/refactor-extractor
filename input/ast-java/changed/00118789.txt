/**
 * For each object in the {@link #lockClaims} set, this method verifies both
 * of the following conditions:
 *
 * <ol>
 * <li>that no transaction in another Titan process holds the lock</li>
 * <li>that the claim's expectedValue, as provided in the earlier call to
 * {@link #writeBlindLockClaim(ConsistentKeyLockStore, StaticBuffer, StaticBuffer, StaticBuffer)
 * writeBlindLockClaim()}, matches the actual value in the data store</li>
 * </ol>
 *
 * <p>
 * If this method reads {@code lockStore} and finds that a transaction in a
 * different Titan process holds one of our claimed locks, then this method
 * throws a {@code LockingException} and the transaction's lock attempts
 * should be considered failed.
 * <p>
 * If this method finds a mismatch between a claim's expected value and
 * actual value, then it will also throw a {@code LockingException}.
 * <p>
 * If this method returns without throwing an exception, then the
 * transaction holds all locks it previously requested via
 * {@code writeBlindLockClaim()} and the expectedValue associated with each
 * transaction matches the actual values seen in the {@code dataStore}.
 *
 * @throws StorageException
 * if there's an unexpected problem talking to {@code backer}'s
 * {@code dataStore} or {@code lockStore}
 * @throws com.thinkaurelius.titan.diskstorage.locking.LockingException
 * if a lock claim has failed
 */
public void verifyAllLockClaims() throws StorageException {
    // wait one full idApplicationWaitMS since the last claim attempt, if needed
    if (0 == lastLockApplicationTimesMS.size())
        // no locks
        return;
    long now = TimeUtility.getApproxNSSinceEpoch(false);
    // has passed.
    for (ConsistentKeyLockStore i : lastLockApplicationTimesMS.keySet()) {
        long appTimeMS = lastLockApplicationTimesMS.get(i);
        long mustSleepUntil = appTimeMS + i.getLockWaitMS();
        if (mustSleepUntil < now / MILLION) {
            continue;
        }
        TimeUtility.sleepUntil(appTimeMS + i.getLockWaitMS(), log);
    }
    // Check lock claim seniority
    for (LockClaim lc : lockClaims) {
        StaticBuffer lockKey = lc.getLockKey();
        ConsistentKeyLockStore backer = lc.getBacker();
        int bufferLen = backer.getRid().length + 8;
        StaticBuffer lower = ByteBufferUtil.zeroBuffer(bufferLen);
        StaticBuffer upper = ByteBufferUtil.oneBuffer(bufferLen);
        List<Entry> entries = backer.getLockStore().getSlice(new KeySliceQuery(lockKey, lower, upper), consistentTx);
        // Determine the timestamp and rid of the earliest still-valid lock claim
        Long earliestNS = null;
        Long latestNS = null;
        byte[] earliestRid = null;
        Set<StaticBuffer> ridsSeen = new HashSet<StaticBuffer>();
        log.trace("Retrieved {} total lock claim(s) when verifying {}", entries.size(), lc);
        for (Entry e : entries) {
            StaticBuffer bb = e.getColumn();
            long tsNS = bb.getLong(0);
            byte[] curRid = new byte[bb.length() - 8];
            for (int i = 8; i < bb.length(); i++) curRid[i - 8] = bb.getByte(i);
            StaticBuffer curRidBuf = new StaticArrayBuffer(curRid);
            ridsSeen.add(curRidBuf);
            // Ignore expired lock claims
            if (tsNS < now - (backer.getLockExpireMS() * MILLION)) {
                log.warn("Discarded expired lock with timestamp {}", tsNS);
                continue;
            }
            if (null == latestNS || tsNS > latestNS) {
                latestNS = tsNS;
            }
            if (null == earliestNS || tsNS < earliestNS) {
                // Appoint new winner
                earliestNS = tsNS;
                earliestRid = curRid;
            } else if (earliestNS == tsNS) {
                // Timestamp tie: break with column
                // (Column must be unique because it contains Rid)
                StaticBuffer earliestRidBuf = new StaticArrayBuffer(earliestRid);
                int i = curRidBuf.compareTo(earliestRidBuf);
                if (-1 == i) {
                    earliestRid = curRid;
                } else if (1 == i) {
                // curRid comes after earliestRid -> don't change earliestRid
                } else {
                    // This should never happen
                    log.warn("Retrieved duplicate column from Cassandra during lock check!? lc={}", lc);
                }
            }
        }
        // Check: did our Rid win?
        byte[] rid = backer.getRid();
        StaticBuffer myRidBuf = new StaticArrayBuffer(rid);
        if (!Arrays.equals(earliestRid, rid)) {
            log.trace("My rid={} lost to earlier rid={},ts={}", new Object[] { // TODO: I MADE THIS encodeHex from encodeHexString ?!
            Hex.encodeHex(rid), null != earliestRid ? Hex.encodeHex(earliestRid) : "null", earliestNS });
            throw new PermanentLockingException("Lock could not be acquired because it is held by a remote transaction [" + lc + "]");
        }
        // Check timestamp
        if (earliestNS != lc.getTimestamp()) {
            if (1 == ridsSeen.size() && lc.getTimestamp() == latestNS && ridsSeen.iterator().next().equals(myRidBuf)) {
                log.debug("Ignoring prior unexpired lock claim from own rid ({}) with timestamp {} (expected {})", new Object[] { Hex.encodeHexString(earliestRid), earliestNS, latestNS });
            } else {
                log.warn("Timestamp mismatch: expected={}, actual={}", lc.getTimestamp(), earliestNS);
                /*
                     * This is probably evidence of a prior attempt to write a lock
                     * that the client perceived as a failure but which in fact
                     * succeeded.
                     *
                     * Since the Rid is ours, we could theoretically delete the lock
                     * and even attempt to obtain it all over again, but that
                     * implies significant refactoring.
                     *
                     * Eventually, the earlier stale lock claim will expire and
                     * progress will resume.
                     */
                throw new PermanentLockingException("Lock could not be acquired due to timestamp mismatch [" + lc + "]");
            }
        }
        // Check expectedValue
        StaticBuffer bb = KCVSUtil.get(backer.getDataStore(), lc.getKey(), lc.getColumn(), baseTx);
        if ((null == bb && null != lc.getExpectedValue()) || (null != bb && null == lc.getExpectedValue()) || (null != bb && null != lc.getExpectedValue() && !lc.getExpectedValue().equals(bb))) {
            throw new PermanentLockingException("Updated state: lock acquired but value has changed since read [" + lc + "]");
        }
    }
}||||||||/**
 * For each object in the {@link #lockClaims} set, this method verifies both
 * of the following conditions:
 *
 * <ol>
 * <li>that no transaction in another Titan process holds the lock</li>
 * <li>that the claim's expectedValue, as provided in the earlier call to
 * {@link #writeBlindLockClaim(ConsistentKeyLockStore, StaticBuffer, StaticBuffer, StaticBuffer)
 * writeBlindLockClaim()}, matches the actual value in the data store</li>
 * </ol>
 *
 * <p>
 * If this method reads {@code lockStore} and finds that a transaction in a
 * different Titan process holds one of our claimed locks, then this method
 * throws a {@code LockingException} and the transaction's lock attempts
 * should be considered failed.
 * <p>
 * If this method finds a mismatch between a claim's expected value and
 * actual value, then it will also throw a {@code LockingException}.
 * <p>
 * If this method returns without throwing an exception, then the
 * transaction holds all locks it previously requested via
 * {@code writeBlindLockClaim()} and the expectedValue associated with each
 * transaction matches the actual values seen in the {@code dataStore}.
 *
 * @throws StorageException
 * if there's an unexpected problem talking to {@code backer}'s
 * {@code dataStore} or {@code lockStore}
 * @throws com.thinkaurelius.titan.diskstorage.locking.LockingException
 * if a lock claim has failed
 */
public void verifyAllLockClaims() throws StorageException {
    // wait one full idApplicationWaitMS since the last claim attempt, if needed
    if (0 == lastLockApplicationTimesMS.size())
        // no locks
        return;
    long now = TimeUtility.INSTANCE.getApproxNSSinceEpoch(false);
    // has passed.
    for (ConsistentKeyLockStore i : lastLockApplicationTimesMS.keySet()) {
        long appTimeMS = lastLockApplicationTimesMS.get(i);
        long mustSleepUntil = appTimeMS + i.getLockWaitMS();
        if (mustSleepUntil < now / MILLION) {
            continue;
        }
        TimeUtility.INSTANCE.sleepUntil(appTimeMS + i.getLockWaitMS(), log);
    }
    // Check lock claim seniority
    for (LockClaim lc : lockClaims) {
        StaticBuffer lockKey = lc.getLockKey();
        ConsistentKeyLockStore backer = lc.getBacker();
        int bufferLen = backer.getRid().length + 8;
        StaticBuffer lower = ByteBufferUtil.zeroBuffer(bufferLen);
        StaticBuffer upper = ByteBufferUtil.oneBuffer(bufferLen);
        List<Entry> entries = backer.getLockStore().getSlice(new KeySliceQuery(lockKey, lower, upper), consistentTx);
        // Determine the timestamp and rid of the earliest still-valid lock claim
        Long earliestNS = null;
        Long latestNS = null;
        byte[] earliestRid = null;
        Set<StaticBuffer> ridsSeen = new HashSet<StaticBuffer>();
        log.trace("Retrieved {} total lock claim(s) when verifying {}", entries.size(), lc);
        for (Entry e : entries) {
            StaticBuffer bb = e.getColumn();
            long tsNS = bb.getLong(0);
            byte[] curRid = new byte[bb.length() - 8];
            for (int i = 8; i < bb.length(); i++) curRid[i - 8] = bb.getByte(i);
            StaticBuffer curRidBuf = new StaticArrayBuffer(curRid);
            ridsSeen.add(curRidBuf);
            // Ignore expired lock claims
            if (tsNS < now - (backer.getLockExpireMS() * MILLION)) {
                log.warn("Discarded expired lock with timestamp {}", tsNS);
                continue;
            }
            if (null == latestNS || tsNS > latestNS) {
                latestNS = tsNS;
            }
            if (null == earliestNS || tsNS < earliestNS) {
                // Appoint new winner
                earliestNS = tsNS;
                earliestRid = curRid;
            } else if (earliestNS == tsNS) {
                // Timestamp tie: break with column
                // (Column must be unique because it contains Rid)
                StaticBuffer earliestRidBuf = new StaticArrayBuffer(earliestRid);
                int i = curRidBuf.compareTo(earliestRidBuf);
                if (-1 == i) {
                    earliestRid = curRid;
                } else if (1 == i) {
                // curRid comes after earliestRid -> don't change earliestRid
                } else {
                    // This should never happen
                    log.warn("Retrieved duplicate column from Cassandra during lock check!? lc={}", lc);
                }
            }
        }
        // Check: did our Rid win?
        byte[] rid = backer.getRid();
        StaticBuffer myRidBuf = new StaticArrayBuffer(rid);
        if (!Arrays.equals(earliestRid, rid)) {
            log.trace("My rid={} lost to earlier rid={},ts={}", new Object[] { // TODO: I MADE THIS encodeHex from encodeHexString ?!
            Hex.encodeHex(rid), null != earliestRid ? Hex.encodeHex(earliestRid) : "null", earliestNS });
            throw new PermanentLockingException("Lock could not be acquired because it is held by a remote transaction [" + lc + "]");
        }
        // Check timestamp
        if (earliestNS != lc.getTimestamp()) {
            if (1 == ridsSeen.size() && lc.getTimestamp() == latestNS && ridsSeen.iterator().next().equals(myRidBuf)) {
                log.debug("Ignoring prior unexpired lock claim from own rid ({}) with timestamp {} (expected {})", new Object[] { Hex.encodeHexString(earliestRid), earliestNS, latestNS });
            } else {
                log.warn("Timestamp mismatch: expected={}, actual={}", lc.getTimestamp(), earliestNS);
                /*
                     * This is probably evidence of a prior attempt to write a lock
                     * that the client perceived as a failure but which in fact
                     * succeeded.
                     *
                     * Since the Rid is ours, we could theoretically delete the lock
                     * and even attempt to obtain it all over again, but that
                     * implies significant refactoring.
                     *
                     * Eventually, the earlier stale lock claim will expire and
                     * progress will resume.
                     */
                throw new PermanentLockingException("Lock could not be acquired due to timestamp mismatch [" + lc + "]");
            }
        }
        // Check expectedValue
        StaticBuffer bb = KCVSUtil.get(backer.getDataStore(), lc.getKey(), lc.getColumn(), baseTx);
        if ((null == bb && null != lc.getExpectedValue()) || (null != bb && null == lc.getExpectedValue()) || (null != bb && null != lc.getExpectedValue() && !lc.getExpectedValue().equals(bb))) {
            throw new PermanentLockingException("Updated state: lock acquired but value has changed since read [" + lc + "]");
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				LineComment
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayCreationExpr
										(PrimitiveType
										)
										(ArrayCreationLevel
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
										)
									)
									SimpleName
									(ArrayType
										(PrimitiveType
										)
									)
								)
							)
						)
						(ForStmt
							(ExpressionStmt
								(AssignExpr
									(ArrayAccessExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(EnclosedExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ContinueStmt
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NullLiteralExpr
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NullLiteralExpr
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(IfStmt
										(BinaryExpr
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
											NameExpr
												SimpleName
										)
										(IfStmt
											(BinaryExpr
												(IntegerLiteralExpr
												)
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														StringLiteralExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
											(BlockStmt
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(ArrayCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
									(ArrayInitializerExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
											LineComment
										)
										(ConditionalExpr
											(BinaryExpr
												NullLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										NameExpr
											SimpleName
									)
									(ArrayCreationLevel
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(IntegerLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									(BlockComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(ArrayCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
											(ArrayInitializerExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									(BinaryExpr
										NullLiteralExpr
										NameExpr
											SimpleName
									)
									(BinaryExpr
										NullLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(EnclosedExpr
								(BinaryExpr
									(BinaryExpr
										NullLiteralExpr
										NameExpr
											SimpleName
									)
									(BinaryExpr
										NullLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										NullLiteralExpr
										NameExpr
											SimpleName
									)
									(BinaryExpr
										NullLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(IntegerLiteralExpr
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
				LineComment
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ContinueStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BinaryExpr
							NameExpr
								SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ForeachStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(BinaryExpr
								(FieldAccessExpr
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(IntegerLiteralExpr
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						StringLiteralExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(ForeachStmt
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										(IntegerLiteralExpr
										)
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ArrayCreationExpr
										(PrimitiveType
										)
										(ArrayCreationLevel
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(IntegerLiteralExpr
												)
											)
										)
									)
									SimpleName
									(ArrayType
										(PrimitiveType
										)
									)
								)
							)
						)
						(ForStmt
							(ExpressionStmt
								(AssignExpr
									(ArrayAccessExpr
										(BinaryExpr
											NameExpr
												SimpleName
											(IntegerLiteralExpr
											)
										)
										NameExpr
											SimpleName
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BinaryExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									(IntegerLiteralExpr
									)
									SimpleName
									(PrimitiveType
									)
								)
							)
							(UnaryExpr
								NameExpr
									SimpleName
							)
						)
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(ObjectCreationExpr
										NameExpr
											SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								(BinaryExpr
									NameExpr
										SimpleName
									(EnclosedExpr
										(BinaryExpr
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ContinueStmt
								)
							)
							LineComment
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NullLiteralExpr
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									NullLiteralExpr
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
							(IfStmt
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BlockStmt
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(ObjectCreationExpr
													NameExpr
														SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
												SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
										LineComment
									)
									(ExpressionStmt
										(VariableDeclarationExpr
											(VariableDeclarator
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(PrimitiveType
												)
											)
										)
									)
									(IfStmt
										(BinaryExpr
											(UnaryExpr
												(IntegerLiteralExpr
												)
											)
											NameExpr
												SimpleName
										)
										(IfStmt
											(BinaryExpr
												(IntegerLiteralExpr
												)
												NameExpr
													SimpleName
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														StringLiteralExpr
														NameExpr
															SimpleName
														SimpleName
														NameExpr
															SimpleName
													)
													LineComment
												)
											)
											(BlockStmt
											)
										)
										(BlockStmt
											(ExpressionStmt
												(AssignExpr
													NameExpr
														SimpleName
													NameExpr
														SimpleName
												)
											)
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
									LineComment
								)
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					NameExpr
						SimpleName
					(VariableDeclarationExpr
						(VariableDeclarator
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ArrayType
								(PrimitiveType
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(UnaryExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								StringLiteralExpr
								(ArrayCreationExpr
									(ClassOrInterfaceType
										SimpleName
									)
									(ArrayInitializerExpr
										(MethodCallExpr
											NameExpr
												SimpleName
											SimpleName
											NameExpr
												SimpleName
											LineComment
										)
										(ConditionalExpr
											(BinaryExpr
												NullLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
											(MethodCallExpr
												NameExpr
													SimpleName
												SimpleName
												NameExpr
													SimpleName
											)
										)
										NameExpr
											SimpleName
									)
									(ArrayCreationLevel
									)
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(IfStmt
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(IntegerLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
									(BinaryExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
									)
								)
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
								(ThrowStmt
									(ObjectCreationExpr
										(BinaryExpr
											(BinaryExpr
												StringLiteralExpr
												NameExpr
													SimpleName
											)
											StringLiteralExpr
										)
										(ClassOrInterfaceType
											SimpleName
										)
									)
									(BlockComment
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										StringLiteralExpr
										(ArrayCreationExpr
											(ClassOrInterfaceType
												SimpleName
											)
											(ArrayInitializerExpr
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											(ArrayCreationLevel
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					LineComment
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								NameExpr
									SimpleName
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					LineComment
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(EnclosedExpr
								(BinaryExpr
									(BinaryExpr
										NullLiteralExpr
										NameExpr
											SimpleName
									)
									(BinaryExpr
										NullLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
							(EnclosedExpr
								(BinaryExpr
									(BinaryExpr
										NullLiteralExpr
										NameExpr
											SimpleName
									)
									(BinaryExpr
										NullLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
						(EnclosedExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										NullLiteralExpr
										NameExpr
											SimpleName
									)
									(BinaryExpr
										NullLiteralExpr
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
								(UnaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										(MethodCallExpr
											SimpleName
											NameExpr
												SimpleName
										)
									)
								)
							)
						)
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								(BinaryExpr
									(BinaryExpr
										StringLiteralExpr
										NameExpr
											SimpleName
									)
									StringLiteralExpr
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			NameExpr
				SimpleName
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

