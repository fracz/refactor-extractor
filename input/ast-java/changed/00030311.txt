private boolean isNotificationsEnabled(Peer peer, boolean hasMention) {
    if (!context().getSettingsModule().isNotificationsEnabled()) {
        return false;
    }
    if (peer.getPeerType() == PeerType.GROUP) {
        // Disable notifications for hidden groups
        if (getGroup(peer.getPeerId()).isHidden()) {
            return false;
        }
        if (context().getSettingsModule().isGroupNotificationsEnabled()) {
            if (context().getSettingsModule().isNotificationsEnabled(peer)) {
                // If enabled in group: use only mentions rule
                if (context().getSettingsModule().isGroupNotificationsOnlyMentionsEnabled()) {
                    return hasMention;
                } else {
                    return true;
                }
            } else {
                // If Not Enabled in group: play only for mentions
                return hasMention;
            }
        } else {
            // All group notifications are disabled
            return false;
        }
    } else {
        return context().getSettingsModule().isNotificationsEnabled(peer);
    }
}||||||||/**
 * Testing if notifications enabled for message
 *
 * @param peer       peer of message
 * @param hasMention does peer have mention
 * @return is notification enabled for peer
 */
private boolean isNotificationsEnabled(Peer peer, boolean hasMention) {
    // If notifications doesn't enabled at all
    if (!context().getSettingsModule().isNotificationsEnabled()) {
        return false;
    }
    // Notifications for groups
    if (peer.getPeerType() == PeerType.GROUP) {
        // Disable notifications for hidden groups
        if (getGroup(peer.getPeerId()).isHidden()) {
            return false;
        }
        if (context().getSettingsModule().isGroupNotificationsEnabled()) {
            // If there are mention in group always allow notification
            if (hasMention) {
                return true;
            }
            if (context().getSettingsModule().isNotificationsEnabled(peer)) {
                // If forced only mentions
                if (context().getSettingsModule().isGroupNotificationsOnlyMentionsEnabled()) {
                    // hasMention always false at this line
                    return false;
                } else {
                    return true;
                }
            } else {
                // Notifications are not enabled in group
                return false;
            }
        } else {
            // All group notifications are disabled
            return false;
        }
    } else if (peer.getPeerType() == PeerType.PRIVATE) {
        // For private conversations only check if peer notifications enabled
        return context().getSettingsModule().isNotificationsEnabled(peer);
    } else {
        // Never happens
        throw new RuntimeException("Unknown peer type");
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									NameExpr
										SimpleName
									LineComment
								)
							)
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											(BooleanLiteralExpr
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											NameExpr
												SimpleName
										)
									)
									LineComment
								)
							)
						)
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ThrowStmt
						(ObjectCreationExpr
							StringLiteralExpr
							(ClassOrInterfaceType
								SimpleName
							)
						)
						LineComment
					)
				)
				(BlockStmt
					(ReturnStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
								)
							)
						)
						LineComment
					)
				)
			)
			(BlockStmt
				(IfStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
						)
					)
					LineComment
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
							)
						)
					)
					(BlockStmt
						(ReturnStmt
							(BooleanLiteralExpr
							)
							LineComment
						)
					)
					(BlockStmt
						(IfStmt
							NameExpr
								SimpleName
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
								)
							)
							LineComment
						)
						(IfStmt
							(MethodCallExpr
								NameExpr
									SimpleName
								SimpleName
								(MethodCallExpr
									SimpleName
									(MethodCallExpr
										SimpleName
									)
								)
							)
							(BlockStmt
								(ReturnStmt
									(BooleanLiteralExpr
									)
									LineComment
								)
							)
							(BlockStmt
								(IfStmt
									(MethodCallExpr
										SimpleName
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											(BooleanLiteralExpr
											)
										)
									)
									(BlockStmt
										(ReturnStmt
											(BooleanLiteralExpr
											)
											LineComment
										)
									)
									LineComment
								)
							)
						)
					)
				)
			)
			LineComment
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

