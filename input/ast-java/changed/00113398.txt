/**
 * Provide a custom method-level request condition.
 * The custom {@link RequestCondition} can be of any type so long as the
 * same condition type is returned from all calls to this method in order
 * to ensure custom request conditions can be combined and compared.
 * <p>Consider extending {@link AbstractRequestCondition} for custom
 * condition types and using {@link CompositeRequestCondition} to provide
 * multiple custom conditions.
 * @param method the handler method for which to create the condition
 * @return the condition, or {@code null}
 */
@SuppressWarnings("unused")
protected RequestCondition<?> getCustomMethodCondition(Method method) {
    return null;
}||||||||/**
 * Provide a custom method-level request condition.
 * The custom {@link RequestCondition} can be of any type so long as the
 * same condition type is returned from all calls to this method in order
 * to ensure custom request conditions can be combined and compared.
 * <p>Consider extending {@link AbstractRequestCondition} for custom
 * condition types and using {@link CompositeRequestCondition} to provide
 * multiple custom conditions.
 * @param method the handler method for which to create the condition
 * @return the condition, or {@code null}
 */
protected RequestCondition<?> getCustomMethodCondition(Method method) {
    return null;
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NullLiteralExpr
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(SingleMemberAnnotationExpr
		StringLiteralExpr
		Name
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			NullLiteralExpr
		)
	)
	(ClassOrInterfaceType
		SimpleName
		(WildcardType
		)
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

