/**
 * In the AST that Rhino gives us, it needs to make a distinction
 * between jsdoc on the object literal node and jsdoc on the object literal
 * value. For example,
 * <pre>
 * var x = {
 * / JSDOC /
 * a: 'b',
 * c: / JSDOC / 'd'
 * };
 * </pre>
 *
 * But in few narrow cases (in particular, function literals), it's
 * a lot easier for us if the doc is attached to the value.
 */
private void normalizeObjectLitJsDocs(Node n) {
    Preconditions.checkState(n.getType() == Token.OBJECTLIT);
    for (Node key = n.getFirstChild(); key != null; key = key.getNext().getNext()) {
        Node value = key.getNext();
        if (key.getJSDocInfo() != null && key.getNext().getType() == Token.FUNCTION) {
            value.setJSDocInfo(key.getJSDocInfo());
        }
    }
}||||||||/**
 * In the AST that Rhino gives us, it needs to make a distinction
 * between jsdoc on the object literal node and jsdoc on the object literal
 * value. For example,
 * <pre>
 * var x = {
 * / JSDOC /
 * a: 'b',
 * c: / JSDOC / 'd'
 * };
 * </pre>
 *
 * But in few narrow cases (in particular, function literals), it's
 * a lot easier for us if the doc is attached to the value.
 */
private void normalizeObjectLitJsDocs(Node objlit, Node key, Node value) {
    Preconditions.checkState(objlit.getType() == Token.OBJECTLIT);
    if (key.getJSDocInfo() != null && value.getType() == Token.FUNCTION) {
        value.setJSDocInfo(key.getJSDocInfo());
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
							NullLiteralExpr
						)
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(FieldAccessExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					NullLiteralExpr
				)
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

