/**
 * Return this query as a Timeseries query, or null if this query is not compatible with Timeseries.
 *
 * @param dataSource     data source to query
 * @param plannerContext planner context
 *
 * @return query or null
 */
public TimeseriesQuery toTimeseriesQuery(final DataSource dataSource, final PlannerContext plannerContext) {
    if (grouping == null || having != null) {
        return null;
    }
    final Granularity queryGranularity;
    final List<DimensionSpec> dimensions = grouping.getDimensionSpecs();
    if (dimensions.isEmpty()) {
        queryGranularity = Granularities.ALL;
    } else if (dimensions.size() == 1) {
        final DimensionSpec dimensionSpec = Iterables.getOnlyElement(dimensions);
        final Granularity gran = ExtractionFns.toQueryGranularity(dimensionSpec.getExtractionFn());
        if (gran == null || !dimensionSpec.getDimension().equals(Column.TIME_COLUMN_NAME)) {
            // Timeseries only applies if the single dimension is granular __time.
            return null;
        }
        // Timeseries only applies if sort is null, or if the first sort field is the time dimension.
        final boolean sortingOnTime = limitSpec == null || limitSpec.getColumns().isEmpty() || (limitSpec.getLimit() == Integer.MAX_VALUE && limitSpec.getColumns().get(0).getDimension().equals(dimensionSpec.getOutputName()));
        if (sortingOnTime) {
            queryGranularity = gran;
        } else {
            return null;
        }
    } else {
        return null;
    }
    final Filtration filtration = Filtration.create(filter).optimize(sourceRowSignature);
    final boolean descending;
    if (limitSpec != null && !limitSpec.getColumns().isEmpty()) {
        descending = limitSpec.getColumns().get(0).getDirection() == OrderByColumnSpec.Direction.DESCENDING;
    } else {
        descending = false;
    }
    final Map<String, Object> theContext = Maps.newHashMap();
    theContext.put("skipEmptyBuckets", true);
    theContext.putAll(plannerContext.getQueryContext());
    return new TimeseriesQuery(dataSource, filtration.getQuerySegmentSpec(), descending, getVirtualColumns(plannerContext.getExprMacroTable()), filtration.getDimFilter(), queryGranularity, grouping.getAggregatorFactories(), grouping.getPostAggregators(), theContext);
}||||||||/**
 * Return this query as a Timeseries query, or null if this query is not compatible with Timeseries.
 *
 * @param dataSource     data source to query
 * @param plannerContext planner context
 *
 * @return query or null
 */
@Nullable
public TimeseriesQuery toTimeseriesQuery(final DataSource dataSource, final PlannerContext plannerContext) {
    if (grouping == null || having != null) {
        return null;
    }
    final Granularity queryGranularity;
    final List<DimensionSpec> dimensions = grouping.getDimensionSpecs();
    if (dimensions.isEmpty()) {
        queryGranularity = Granularities.ALL;
    } else if (dimensions.size() == 1) {
        final DimensionSpec dimensionSpec = Iterables.getOnlyElement(dimensions);
        final Granularity gran = ExtractionFns.toQueryGranularity(dimensionSpec.getExtractionFn());
        if (gran == null || !dimensionSpec.getDimension().equals(Column.TIME_COLUMN_NAME)) {
            // Timeseries only applies if the single dimension is granular __time.
            return null;
        }
        // Timeseries only applies if sort is null, or if the first sort field is the time dimension.
        final boolean sortingOnTime = limitSpec == null || limitSpec.getColumns().isEmpty() || (limitSpec.getLimit() == Integer.MAX_VALUE && limitSpec.getColumns().get(0).getDimension().equals(dimensionSpec.getOutputName()));
        if (sortingOnTime) {
            queryGranularity = gran;
        } else {
            return null;
        }
    } else {
        return null;
    }
    final Filtration filtration = Filtration.create(filter).optimize(sourceRowSignature);
    final boolean descending;
    if (limitSpec != null && !limitSpec.getColumns().isEmpty()) {
        descending = limitSpec.getColumns().get(0).getDirection() == OrderByColumnSpec.Direction.DESCENDING;
    } else {
        descending = false;
    }
    final Map<String, Object> theContext = Maps.newHashMap();
    theContext.put("skipEmptyBuckets", true);
    theContext.putAll(plannerContext.getQueryContext());
    return new TimeseriesQuery(dataSource, filtration.getQuerySegmentSpec(), descending, getVirtualColumns(plannerContext.getExprMacroTable()), filtration.getDimFilter(), queryGranularity, grouping.getAggregatorFactories(), grouping.getPostAggregators(), theContext);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				(BlockStmt
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(UnaryExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								NullLiteralExpr
								LineComment
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														(IntegerLiteralExpr
														)
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ReturnStmt
								NullLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(FieldAccessExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
			)
			(BlockStmt
				(ReturnStmt
					NullLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(IfStmt
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
				(BlockStmt
					(ReturnStmt
						NullLiteralExpr
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(BinaryExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(UnaryExpr
								(MethodCallExpr
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
						(BlockStmt
							(ReturnStmt
								NullLiteralExpr
								LineComment
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											NameExpr
												SimpleName
											NullLiteralExpr
										)
										(MethodCallExpr
											SimpleName
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(EnclosedExpr
										(BinaryExpr
											(BinaryExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												(FieldAccessExpr
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(MethodCallExpr
												(MethodCallExpr
													SimpleName
													NameExpr
														SimpleName
												)
												SimpleName
												(MethodCallExpr
													SimpleName
													(MethodCallExpr
														(IntegerLiteralExpr
														)
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
											)
										)
									)
								)
								SimpleName
								(PrimitiveType
								)
							)
						)
						LineComment
					)
					(IfStmt
						NameExpr
							SimpleName
						(BlockStmt
							(ReturnStmt
								NullLiteralExpr
							)
						)
						(BlockStmt
							(ExpressionStmt
								(AssignExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(MethodCallExpr
								SimpleName
								(MethodCallExpr
									(IntegerLiteralExpr
									)
									SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(FieldAccessExpr
								SimpleName
								(FieldAccessExpr
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(ObjectCreationExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
	(JavadocComment
	)
)

