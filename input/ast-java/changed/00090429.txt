/**
 * Waits for a future to finish.  If the task is interrupted, then the current thread will be interrupted.
 * It is expected that the task performs any appropriate locking.
 * <p>
 * If the internal call throws a {@link Throwable}, but it is not an instance of {@link Error} or
 * {@link RuntimeException}, then it is wrapped inside a {@link ChannelPipelineException} and that is
 * thrown instead.</p>
 *
 * @param future wait for this future
 * @see Future#get()
 * @throws Error if the task threw this.
 * @throws RuntimeException if the task threw this.
 * @throws ChannelPipelineException with a {@link Throwable} as a cause, if the task threw another type of
 * {@link Throwable}.
 */
void waitForFuture(Future future) {
    try {
        future.get();
    } catch (ExecutionException ex) {
        // In the arbitrary case, we can throw Error, RuntimeException, and Exception
        Throwable t = ex.getCause();
        if (t instanceof Error) {
            throw (Error) t;
        }
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
        throw new ChannelPipelineException(t);
    } catch (InterruptedException ex) {
        // Interrupt the calling thread (note that this method is not called from the event loop)
        Thread.currentThread().interrupt();
    }
}||||||||/**
 * Waits for a future to finish.  If the task is interrupted, then the current thread will be interrupted.
 * It is expected that the task performs any appropriate locking.
 * <p>
 * If the internal call throws a {@link Throwable}, but it is not an instance of {@link Error} or
 * {@link RuntimeException}, then it is wrapped inside a {@link ChannelPipelineException} and that is
 * thrown instead.</p>
 *
 * @param future wait for this future
 * @see Future#get()
 * @throws Error if the task threw this.
 * @throws RuntimeException if the task threw this.
 * @throws ChannelPipelineException with a {@link Throwable} as a cause, if the task threw another type of
 * {@link Throwable}.
 */
static void waitForFuture(Future<?> future) {
    try {
        future.get();
    } catch (ExecutionException ex) {
        // In the arbitrary case, we can throw Error, RuntimeException, and Exception
        Throwable t = ex.getCause();
        if (t instanceof Error) {
            throw (Error) t;
        }
        if (t instanceof RuntimeException) {
            throw (RuntimeException) t;
        }
        throw new ChannelPipelineException(t);
    } catch (InterruptedException ex) {
        // Interrupt the calling thread (note that this method is not called from the event loop)
        Thread.currentThread().interrupt();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(BlockStmt
							(ThrowStmt
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(BlockStmt
							(ThrowStmt
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(IfStmt
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(BlockStmt
							(ThrowStmt
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(IfStmt
						(InstanceOfExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
						(BlockStmt
							(ThrowStmt
								(CastExpr
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ThrowStmt
						(ObjectCreationExpr
							NameExpr
								SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
			(WildcardType
			)
		)
	)
	(JavadocComment
	)
)

