@Override
protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
    if (!mPermissionHelper.checkDumpPermission(TAG, pw)) {
        return;
    }
    RulesState rulesState = getRulesStateInternal();
    if (args != null && args.length == 2) {
        // the -format options, which are intended to be easier to parse.
        if ("-format_state".equals(args[0]) && args[1] != null) {
            for (char c : args[1].toCharArray()) {
                switch(c) {
                    case // Report operation in progress
                    'p':
                        pw.println("Operation in progress: " + rulesState.isOperationInProgress());
                        break;
                    case // Report system image rules version
                    's':
                        pw.println("System rules version: " + rulesState.getSystemRulesVersion());
                        break;
                    case // Report current installation state
                    'c':
                        pw.println("Current install state: " + distroStatusToString(rulesState.getDistroStatus()));
                        break;
                    case // Report currently installed version
                    'i':
                        DistroRulesVersion installedRulesVersion = rulesState.getInstalledDistroRulesVersion();
                        pw.print("Installed rules version: ");
                        if (installedRulesVersion == null) {
                            pw.println("<None>");
                        } else {
                            pw.println(installedRulesVersion.toDumpString());
                        }
                        break;
                    case // Report staged operation type
                    'o':
                        int stagedOperationType = rulesState.getStagedOperationType();
                        pw.println("Staged operation: " + stagedOperationToString(stagedOperationType));
                        break;
                    case 't':
                        // Report staged version (i.e. the one that will be installed next boot
                        // if the staged operation is an install).
                        pw.print("Staged rules version: ");
                        DistroRulesVersion stagedDistroRulesVersion = rulesState.getStagedDistroRulesVersion();
                        if (stagedDistroRulesVersion == null) {
                            pw.println("<None>");
                        } else {
                            pw.println(stagedDistroRulesVersion.toDumpString());
                        }
                        break;
                    case 'a':
                        // Report the active rules version (i.e. the rules in use by the current
                        // process).
                        pw.println("Active rules version (ICU, libcore): " + ICU.getTZDataVersion() + "," + ZoneInfoDB.getInstance().getVersion());
                        break;
                    default:
                        pw.println("Unknown option: " + c);
                }
            }
            return;
        }
    }
    pw.println("RulesManagerService state: " + toString());
    pw.println("Active rules version (ICU, libcore): " + ICU.getTZDataVersion() + "," + ZoneInfoDB.getInstance().getVersion());
    mPackageTracker.dump(pw);
}||||||||@Override
protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
    if (!mPermissionHelper.checkDumpPermission(TAG, pw)) {
        return;
    }
    RulesState rulesState = getRulesStateInternal();
    if (args != null && args.length == 2) {
        // the -format options, which are intended to be easier to parse.
        if ("-format_state".equals(args[0]) && args[1] != null) {
            for (char c : args[1].toCharArray()) {
                switch(c) {
                    case // Report operation in progress
                    'p':
                        pw.println("Operation in progress: " + rulesState.isOperationInProgress());
                        break;
                    case // Report system image rules version
                    's':
                        pw.println("System rules version: " + rulesState.getSystemRulesVersion());
                        break;
                    case // Report current installation state
                    'c':
                        pw.println("Current install state: " + distroStatusToString(rulesState.getDistroStatus()));
                        break;
                    case // Report currently installed version
                    'i':
                        DistroRulesVersion installedRulesVersion = rulesState.getInstalledDistroRulesVersion();
                        pw.print("Installed rules version: ");
                        if (installedRulesVersion == null) {
                            pw.println("<None>");
                        } else {
                            pw.println(installedRulesVersion.toDumpString());
                        }
                        break;
                    case // Report staged operation type
                    'o':
                        int stagedOperationType = rulesState.getStagedOperationType();
                        pw.println("Staged operation: " + stagedOperationToString(stagedOperationType));
                        break;
                    case 't':
                        // Report staged version (i.e. the one that will be installed next boot
                        // if the staged operation is an install).
                        pw.print("Staged rules version: ");
                        DistroRulesVersion stagedDistroRulesVersion = rulesState.getStagedDistroRulesVersion();
                        if (stagedDistroRulesVersion == null) {
                            pw.println("<None>");
                        } else {
                            pw.println(stagedDistroRulesVersion.toDumpString());
                        }
                        break;
                    case 'a':
                        // Report the active rules version (i.e. the rules in use by the current
                        // process).
                        pw.println("Active rules version (ICU, libcore): " + ICU.getTZDataVersion() + "," + ZoneInfoDB.getInstance().getVersion());
                        break;
                    default:
                        pw.println("Unknown option: " + c);
                }
            }
            return;
        }
    }
    pw.println("RulesManagerService state: " + toString());
    pw.println("Active rules version (ICU, libcore): " + ICU.getTZDataVersion() + "," + ZoneInfoDB.getInstance().getVersion());
    pw.println("Distro state: " + rulesState.toString());
    mPackageTracker.dump(pw);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							SimpleName
							StringLiteralExpr
						)
						(BinaryExpr
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ForeachStmt
							(BlockStmt
								(SwitchStmt
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
										)
										(ExpressionStmt
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														StringLiteralExpr
													)
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									NameExpr
										SimpleName
								)
							)
							(MethodCallExpr
								SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ReturnStmt
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						StringLiteralExpr
					)
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
					(IntegerLiteralExpr
					)
				)
			)
			(BlockStmt
				(IfStmt
					(BinaryExpr
						(MethodCallExpr
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							SimpleName
							StringLiteralExpr
						)
						(BinaryExpr
							(ArrayAccessExpr
								(IntegerLiteralExpr
								)
								NameExpr
									SimpleName
							)
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ForeachStmt
							(BlockStmt
								(SwitchStmt
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(PrimitiveType
													)
												)
											)
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													(MethodCallExpr
														NameExpr
															SimpleName
														SimpleName
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
										)
										(ExpressionStmt
											(MethodCallExpr
												StringLiteralExpr
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(ExpressionStmt
											(VariableDeclarationExpr
												(VariableDeclarator
													(MethodCallExpr
														SimpleName
														NameExpr
															SimpleName
													)
													SimpleName
													(ClassOrInterfaceType
														SimpleName
													)
												)
											)
										)
										(IfStmt
											(BinaryExpr
												NameExpr
													SimpleName
												NullLiteralExpr
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
											(BlockStmt
												(ExpressionStmt
													(MethodCallExpr
														StringLiteralExpr
														SimpleName
														NameExpr
															SimpleName
													)
												)
											)
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(CharLiteralExpr
										)
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															(MethodCallExpr
																SimpleName
																NameExpr
																	SimpleName
															)
														)
														StringLiteralExpr
													)
													(MethodCallExpr
														SimpleName
														(MethodCallExpr
															SimpleName
															NameExpr
																SimpleName
														)
													)
												)
												SimpleName
												NameExpr
													SimpleName
											)
											LineComment
										)
										(BreakStmt
										)
									)
									(SwitchEntryStmt
										(ExpressionStmt
											(MethodCallExpr
												(BinaryExpr
													StringLiteralExpr
													NameExpr
														SimpleName
												)
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									NameExpr
										SimpleName
								)
							)
							(MethodCallExpr
								SimpleName
								(ArrayAccessExpr
									(IntegerLiteralExpr
									)
									NameExpr
										SimpleName
								)
							)
							(VariableDeclarationExpr
								(VariableDeclarator
									SimpleName
									(PrimitiveType
									)
								)
							)
						)
						(ReturnStmt
						)
					)
					LineComment
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							StringLiteralExpr
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
						StringLiteralExpr
					)
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(ClassOrInterfaceType
				SimpleName
			)
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

