/**
 * Quick invalidation for View property changes (alpha, translationXY, etc.). We don't want to
 * set any flags or handle all of the cases handled by the default invalidation methods.
 * Instead, we just want to schedule a traversal in ViewRootImpl with the appropriate
 * dirty rect. This method calls into fast invalidation methods in ViewGroup that
 * walk up the hierarchy, transforming the dirty rect as necessary.
 *
 * The method also handles normal invalidation logic if display list properties are not
 * being used in this view. The invalidateParent and forceRedraw flags are used by that
 * backup approach, to handle these cases used in the various property-setting methods.
 *
 * @param invalidateParent Force a call to invalidateParentCaches() if display list properties
 * are not being used in this view
 * @param forceRedraw Mark the view as DRAWN to force the invalidation to propagate, if display
 * list properties are not being used in this view
 */
void invalidateViewProperty(boolean invalidateParent, boolean forceRedraw) {
    if (mDisplayList == null || (mPrivateFlags & PFLAG_DRAW_ANIMATION) == PFLAG_DRAW_ANIMATION) {
        if (invalidateParent) {
            invalidateParentCaches();
        }
        if (forceRedraw) {
            // force another invalidation with the new orientation
            mPrivateFlags |= PFLAG_DRAWN;
        }
        invalidate(false);
    } else {
        final AttachInfo ai = mAttachInfo;
        final ViewParent p = mParent;
        if (p != null && ai != null) {
            final Rect r = ai.mTmpInvalRect;
            r.set(0, 0, mRight - mLeft, mBottom - mTop);
            if (mParent instanceof ViewGroup) {
                ((ViewGroup) mParent).invalidateChildFast(this, r);
            } else {
                mParent.invalidateChild(this, r);
            }
        }
    }
}||||||||/**
 * Quick invalidation for View property changes (alpha, translationXY, etc.). We don't want to
 * set any flags or handle all of the cases handled by the default invalidation methods.
 * Instead, we just want to schedule a traversal in ViewRootImpl with the appropriate
 * dirty rect. This method calls into fast invalidation methods in ViewGroup that
 * walk up the hierarchy, transforming the dirty rect as necessary.
 *
 * The method also handles normal invalidation logic if display list properties are not
 * being used in this view. The invalidateParent and forceRedraw flags are used by that
 * backup approach, to handle these cases used in the various property-setting methods.
 *
 * @param invalidateParent Force a call to invalidateParentCaches() if display list properties
 * are not being used in this view
 * @param forceRedraw Mark the view as DRAWN to force the invalidation to propagate, if display
 * list properties are not being used in this view
 */
void invalidateViewProperty(boolean invalidateParent, boolean forceRedraw) {
    if (mDisplayList == null || (mPrivateFlags & PFLAG_DRAW_ANIMATION) == PFLAG_DRAW_ANIMATION) {
        if (invalidateParent) {
            invalidateParentCaches();
        }
        if (forceRedraw) {
            // force another invalidation with the new orientation
            mPrivateFlags |= PFLAG_DRAWN;
        }
        invalidate(false);
    } else {
        damageInParent();
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NameExpr
								SimpleName
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
						(BinaryExpr
							NameExpr
								SimpleName
							NullLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(FieldAccessExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(MethodCallExpr
								(IntegerLiteralExpr
								)
								(IntegerLiteralExpr
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								(BinaryExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
						)
						(IfStmt
							(InstanceOfExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ThisExpr
										)
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ThisExpr
										)
										NameExpr
											SimpleName
										SimpleName
										(EnclosedExpr
											(CastExpr
												NameExpr
													SimpleName
												(ClassOrInterfaceType
													SimpleName
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				(BinaryExpr
					NameExpr
						SimpleName
					NullLiteralExpr
				)
				(BinaryExpr
					(EnclosedExpr
						(BinaryExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
						)
					)
					NameExpr
						SimpleName
				)
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
							)
						)
					)
				)
				(IfStmt
					NameExpr
						SimpleName
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							LineComment
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

