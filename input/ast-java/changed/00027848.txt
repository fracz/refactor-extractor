// /**
// * If it has been sitting in the queue, it should not execute if timed out by the time it hits the queue.
// */
// @Test
// public void testTimedOutCommandDoesNotExecute() {
// SingleThreadedPoolWithQueue pool = new SingleThreadedPoolWithQueue(5);
// 
// TestCircuitBreaker s1 = new TestCircuitBreaker();
// TestCircuitBreaker s2 = new TestCircuitBreaker();
// 
// // execution will take 100ms, thread pool has a 600ms timeout
// CommandWithCustomThreadPool c1 = new CommandWithCustomThreadPool(s1, pool, 500, HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionTimeoutInMilliseconds(600));
// // execution will take 200ms, thread pool has a 20ms timeout
// CommandWithCustomThreadPool c2 = new CommandWithCustomThreadPool(s2, pool, 200, HystrixCommandPropertiesTest.getUnitTestPropertiesSetter().withExecutionTimeoutInMilliseconds(20));
// // queue up c1 first
// Future<Boolean> c1f = c1.queue();
// // now queue up c2 and wait on it
// boolean receivedException = false;
// try {
// c2.queue().get();
// } catch (Exception e) {
// // we expect to get an exception here
// receivedException = true;
// }
// 
// if (!receivedException) {
// fail("We expect to receive an exception for c2 as it's supposed to timeout.");
// }
// 
// // c1 will complete after 100ms
// try {
// c1f.get();
// } catch (Exception e1) {
// e1.printStackTrace();
// fail("we should not have failed while getting c1");
// }
// assertTrue("c1 is expected to executed but didn't", c1.didExecute);
// 
// // c2 will timeout after 20 ms ... we'll wait longer than the 200ms time to make sure
// // the thread doesn't keep running in the background and execute
// try {
// Thread.sleep(400);
// } catch (Exception e) {
// throw new RuntimeException("Failed to sleep");
// }
// assertFalse("c2 is not expected to execute, but did", c2.didExecute);
// 
// assertCommandExecutionEvents(c1, HystrixEventType.SUCCESS);
// assertEquals(0, s1.metrics.getCurrentConcurrentExecutionCount());
// 
// assertCommandExecutionEvents(c2, HystrixEventType.TIMEOUT, HystrixEventType.FALLBACK_MISSING);
// assertEquals(0, s2.metrics.getCurrentConcurrentExecutionCount());
// assertSaneHystrixRequestLog(2);
// }
@Test
public void testDisabledTimeoutWorks() {
    CommandWithDisabledTimeout cmd = new CommandWithDisabledTimeout(100, 900);
    boolean result = false;
    try {
        result = cmd.execute();
    } catch (Throwable ex) {
        ex.printStackTrace();
        fail("should not fail");
    }
    assertEquals(true, result);
    assertFalse(cmd.isResponseTimedOut());
    assertNull(cmd.getExecutionException());
    System.out.println("CMD : " + cmd.currentRequestLog.getExecutedCommandsAsString());
    assertTrue(cmd.executionResult.getExecutionLatency() >= 900);
    assertCommandExecutionEvents(cmd, HystrixEventType.SUCCESS);
}||||||||@Test
public void testDisabledTimeoutWorks() {
    CommandWithDisabledTimeout cmd = new CommandWithDisabledTimeout(100, 900);
    boolean result = cmd.execute();
    assertEquals(true, result);
    assertFalse(cmd.isResponseTimedOut());
    assertNull(cmd.getExecutionException());
    System.out.println("CMD : " + cmd.currentRequestLog.getExecutedCommandsAsString());
    assertTrue(cmd.executionResult.getExecutionLatency() >= 900);
    assertCommandExecutionEvents(cmd, HystrixEventType.SUCCESS);
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BooleanLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(IntegerLiteralExpr
						)
						(IntegerLiteralExpr
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				NameExpr
					SimpleName
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(MethodCallExpr
						SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(IntegerLiteralExpr
					)
				)
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(MarkerAnnotationExpr
		Name
	)
)

