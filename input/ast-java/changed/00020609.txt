/**
 * Check if rebase is in progress, propose to resolve conflicts.
 * @return true if rebase is in progress, which means that update can't continue.
 */
private boolean checkRebaseInProgress() {
    final GitRebaser rebaser = new GitRebaser(myProject, myProgressIndicator);
    final Collection<VirtualFile> rebasingRoots = rebaser.getRebasingRoots();
    if (rebasingRoots.isEmpty()) {
        return false;
    }
    LOG.info("checkRebaseInProgress rebasingRoots: " + rebasingRoots);
    return !new GitMergeConflictResolver(myProject, true, "You have unfinished rebase process. These conflicts must be resolved before update.", "Can't update", "Then you may <b>continue rebase</b>. <br/> You also may <b>abort rebase</b> to restore the original branch and stop rebasing.") {

        @Override
        protected boolean proceedIfNothingToMerge() {
            return rebaser.continueRebase(rebasingRoots);
        }

        @Override
        protected boolean proceedAfterAllMerged() {
            return rebaser.continueRebase(rebasingRoots);
        }
    }.merge(rebasingRoots);
}||||||||/**
 * Check if rebase is in progress, propose to resolve conflicts.
 * @return true if rebase is in progress, which means that update can't continue.
 */
private boolean checkRebaseInProgress() {
    final GitRebaser rebaser = new GitRebaser(myProject, myProgressIndicator);
    final Collection<VirtualFile> rebasingRoots = rebaser.getRebasingRoots();
    if (rebasingRoots.isEmpty()) {
        return false;
    }
    LOG.info("checkRebaseInProgress rebasingRoots: " + rebasingRoots);
    GitMergeConflictResolver.Params params = new GitMergeConflictResolver.Params();
    params.setErrorNotificationTitle("Can't update");
    params.setMergeDescription("You have unfinished rebase process. These conflicts must be resolved before update.");
    params.setErrorNotificationAdditionalDescription("Then you may <b>continue rebase</b>. <br/> You also may <b>abort rebase</b> to restore the original branch and stop rebasing.");
    params.setReverse(true);
    return !new GitMergeConflictResolver(myProject, rebasingRoots, params) {

        @Override
        protected boolean proceedIfNothingToMerge() {
            return rebaser.continueRebase(rebasingRoots);
        }

        @Override
        protected boolean proceedAfterAllMerged() {
            return rebaser.continueRebase(rebasingRoots);
        }
    }.merge();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(PrimitiveType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(PrimitiveType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(IfStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BooleanLiteralExpr
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					(ObjectCreationExpr
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(PrimitiveType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						(MethodDeclaration
							(BlockStmt
								(ReturnStmt
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
							(PrimitiveType
							)
							SimpleName
							(MarkerAnnotationExpr
								Name
							)
						)
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(JavadocComment
	)
)

