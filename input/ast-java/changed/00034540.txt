public void test_column_comment() throws Exception {
    String sql = "from (select * from xxx) a" + // 
    "\n -- comment_0" + // 
    "\ninsert overwrite table b partition(ds='20150711')" + // 
    "\nselect f0, f1, f2" + "\nwhere name rlike 'xxxx'" + // 
    "\n -- comment_1" + // 
    "\ninsert overwrite table c partition(ds='20150711')" + // 
    "\nselect f0, f1, f2" + "\nwhere name rlike 'kk';";
    // 
    Assert.assertEquals(// 
    "FROM (" + // 
    "\n\tSELECT *" + // 
    "\n\tFROM xxx" + // 
    "\n) a" + // 
    "\n-- comment_0" + // 
    "\nINSERT OVERWRITE TABLE b PARTITION (ds='20150711')" + // 
    "\nSELECT f0" + // 
    "\n\t, f1" + // 
    "\n\t, f2" + // 
    "\nWHERE name RLIKE 'xxxx'" + // 
    "\n-- comment_1" + // 
    "\nINSERT OVERWRITE TABLE c PARTITION (ds='20150711')" + // 
    "\nSELECT f0" + // 
    "\n\t, f1" + // 
    "\n\t, f2" + "\nWHERE name RLIKE 'kk';", SQLUtils.formatOdps(sql));
}||||||||public void test_column_comment() throws Exception {
    String sql = "from (select * from xxx) a" + // 
    "\n -- comment_0" + // 
    "\ninsert overwrite table b partition(ds='20150711')" + // 
    "\nselect f0, f1, f2" + "\nwhere name rlike 'xxxx'" + // 
    "\n -- comment_1" + // 
    "\ninsert overwrite table c partition(ds='20150711')" + // 
    "\nselect f0, f1, f2" + "\nwhere name rlike 'kk';";
    // 
    Assert.assertEquals("FROM (\n" + "\tSELECT *\n" + "\tFROM xxx\n" + ") a\n" + "-- comment_0\n" + "INSERT OVERWRITE TABLE b PARTITION (ds='20150711')\n" + "SELECT f0, f1, f2\n" + "WHERE name RLIKE 'xxxx'\n" + "-- comment_1\n" + "INSERT OVERWRITE TABLE c PARTITION (ds='20150711')\n" + "SELECT f0, f1, f2\n" + "WHERE name RLIKE 'kk';", SQLUtils.formatOdps(sql));
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
														LineComment
												)
												StringLiteralExpr
													LineComment
											)
											StringLiteralExpr
												LineComment
										)
										StringLiteralExpr
									)
									StringLiteralExpr
										LineComment
								)
								StringLiteralExpr
									LineComment
							)
							StringLiteralExpr
								LineComment
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															(BinaryExpr
																(BinaryExpr
																	(BinaryExpr
																		(BinaryExpr
																			StringLiteralExpr
																				LineComment
																			StringLiteralExpr
																				LineComment
																		)
																		StringLiteralExpr
																			LineComment
																	)
																	StringLiteralExpr
																		LineComment
																)
																StringLiteralExpr
																	LineComment
															)
															StringLiteralExpr
																LineComment
														)
														StringLiteralExpr
															LineComment
													)
													StringLiteralExpr
														LineComment
												)
												StringLiteralExpr
													LineComment
											)
											StringLiteralExpr
												LineComment
										)
										StringLiteralExpr
											LineComment
									)
									StringLiteralExpr
										LineComment
								)
								StringLiteralExpr
									LineComment
							)
							StringLiteralExpr
								LineComment
						)
						StringLiteralExpr
							LineComment
					)
					StringLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
														LineComment
												)
												StringLiteralExpr
													LineComment
											)
											StringLiteralExpr
												LineComment
										)
										StringLiteralExpr
									)
									StringLiteralExpr
										LineComment
								)
								StringLiteralExpr
									LineComment
							)
							StringLiteralExpr
								LineComment
						)
						StringLiteralExpr
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					(BinaryExpr
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									(BinaryExpr
										(BinaryExpr
											(BinaryExpr
												(BinaryExpr
													(BinaryExpr
														(BinaryExpr
															StringLiteralExpr
															StringLiteralExpr
														)
														StringLiteralExpr
													)
													StringLiteralExpr
												)
												StringLiteralExpr
											)
											StringLiteralExpr
										)
										StringLiteralExpr
									)
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
						StringLiteralExpr
					)
					StringLiteralExpr
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
)

