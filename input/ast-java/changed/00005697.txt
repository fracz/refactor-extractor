/**
 * Allows to answer what width in pixels is required to draw fragment of the given char array from <code>[start; end)</code> interval
 * at the given editor.
 * <p/>
 * Tabulation symbols is processed specially, i.e. it's ta
 * <p/>
 * <b>Note:</b> it's assumed that target text fragment remains to the single line, i.e. line feed symbols within it are not
 * treated specially.
 *
 * @param editor    editor that will be used for target text representation
 * @param text      target text holder
 * @param start     offset within the given char array that points to target text start (inclusive)
 * @param end       offset within the given char array that points to target text end (exclusive)
 * @param fontType  font type to use for target text representation
 * @return          width in pixels required for target text representation
 */
public static int textWidth(@NotNull Editor editor, char[] text, int start, int end, int fontType) {
    int result = 0;
    for (int i = start; i < end; i++) {
        char c = text[i];
        if (c != '\t') {
            FontInfo font = fontForChar(c, fontType, editor);
            result += font.charWidth(c, editor.getContentComponent());
            continue;
        }
        if (editor.getSettings().isWhitespacesShown()) {
            result += getTabSize(editor) * getSpaceWidth(fontType, editor);
        } else {
            result += getSpaceWidth(fontType, editor);
        }
    }
    return result;
}||||||||/**
 * Allows to answer what width in pixels is required to draw fragment of the given char array from <code>[start; end)</code> interval
 * at the given editor.
 * <p/>
 * Tabulation symbols is processed specially, i.e. it's ta
 * <p/>
 * <b>Note:</b> it's assumed that target text fragment remains to the single line, i.e. line feed symbols within it are not
 * treated specially.
 *
 * @param editor    editor that will be used for target text representation
 * @param text      target text holder
 * @param start     offset within the given char array that points to target text start (inclusive)
 * @param end       offset within the given char array that points to target text end (exclusive)
 * @param fontType  font type to use for target text representation
 * @param x         <code>'x'</code> coordinate that should be used as a starting point for target text representation.
 * It's necessity is implied by the fact that IDEA editor may represent tabulation symbols in any range
 * from <code>[1; tab size]</code> (check {@link #nextTabStop(int, Editor)} for more details)
 * @return          width in pixels required for target text representation
 */
public static int textWidth(@NotNull Editor editor, char[] text, int start, int end, int fontType, int x) {
    int result = 0;
    for (int i = start; i < end; i++) {
        char c = text[i];
        if (c != '\t') {
            FontInfo font = fontForChar(c, fontType, editor);
            result += font.charWidth(c, editor.getContentComponent());
            continue;
        }
        if (editor.getSettings().isWhitespacesShown()) {
            result += nextTabStop(x + result, editor) - result - x;
        } else {
            result += getSpaceWidth(fontType, editor);
        }
    }
    return result;
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(MethodCallExpr
										NameExpr
											SimpleName
										SimpleName
									)
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(ForStmt
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(ArrayAccessExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						(CharLiteralExpr
						)
					)
					(BlockStmt
						(ExpressionStmt
							(VariableDeclarationExpr
								(VariableDeclarator
									(MethodCallExpr
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										NameExpr
											SimpleName
										SimpleName
									)
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
									NameExpr
										SimpleName
								)
							)
						)
						(ContinueStmt
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(MethodCallExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									SimpleName
								)
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(AssignExpr
								NameExpr
									SimpleName
								(BinaryExpr
									(BinaryExpr
										(MethodCallExpr
											(BinaryExpr
												NameExpr
													SimpleName
												NameExpr
													SimpleName
											)
											NameExpr
												SimpleName
											SimpleName
										)
										NameExpr
											SimpleName
									)
									NameExpr
										SimpleName
								)
							)
						)
					)
				)
			)
			(BinaryExpr
				NameExpr
					SimpleName
				NameExpr
					SimpleName
			)
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			(UnaryExpr
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			NameExpr
				SimpleName
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		(MarkerAnnotationExpr
			Name
		)
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ArrayType
			(PrimitiveType
			)
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
	(JavadocComment
	)
)

