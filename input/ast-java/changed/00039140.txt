/**
 * Implement this method to handle hover events.
 * <p>
 * Hover events are pointer events with action {@link MotionEvent#ACTION_HOVER_ENTER},
 * {@link MotionEvent#ACTION_HOVER_MOVE}, or {@link MotionEvent#ACTION_HOVER_EXIT}.
 * </p><p>
 * The view receives hover enter as the pointer enters the bounds of the view and hover
 * exit as the pointer exits the bound of the view or just before the pointer goes down
 * (which implies that {@link #onTouchEvent} will be called soon).
 * </p><p>
 * If the view would like to handle the hover event itself and prevent its children
 * from receiving hover, it should return true from this method.  If this method returns
 * true and a child has already received a hover enter event, the child will
 * automatically receive a hover exit event.
 * </p><p>
 * The default implementation sets the hovered state of the view if the view is
 * clickable.
 * </p>
 *
 * @param event The motion event that describes the hover.
 * @return True if this view handled the hover event and does not want its children
 * to receive the hover event.
 */
public boolean onHoverEvent(MotionEvent event) {
    switch(event.getAction()) {
        case MotionEvent.ACTION_HOVER_ENTER:
            setHovered(true);
            break;
        case MotionEvent.ACTION_HOVER_EXIT:
            setHovered(false);
            break;
    }
    return false;
}||||||||/**
 * Implement this method to handle hover events.
 * <p>
 * Hover events are pointer events with action {@link MotionEvent#ACTION_HOVER_ENTER},
 * {@link MotionEvent#ACTION_HOVER_MOVE}, or {@link MotionEvent#ACTION_HOVER_EXIT}.
 * </p><p>
 * The view receives hover enter as the pointer enters the bounds of the view and hover
 * exit as the pointer exits the bound of the view or just before the pointer goes down
 * (which implies that {@link #onTouchEvent} will be called soon).
 * </p><p>
 * If the view would like to handle the hover event itself and prevent its children
 * from receiving hover, it should return true from this method.  If this method returns
 * true and a child has already received a hover enter event, the child will
 * automatically receive a hover exit event.
 * </p><p>
 * The default implementation sets the hovered state of the view if the view is
 * clickable.
 * </p>
 *
 * @param event The motion event that describes the hover.
 * @return True if this view handled the hover event and does not want its children
 * to receive the hover event.
 */
public boolean onHoverEvent(MotionEvent event) {
    final int viewFlags = mViewFlags;
    if (((viewFlags & CLICKABLE) != CLICKABLE && (viewFlags & LONG_CLICKABLE) != LONG_CLICKABLE)) {
        // Nothing to do if the view is not clickable.
        return false;
    }
    if ((viewFlags & ENABLED_MASK) == DISABLED) {
        // respond to them.
        return true;
    }
    switch(event.getAction()) {
        case MotionEvent.ACTION_HOVER_ENTER:
            setHovered(true);
            break;
        case MotionEvent.ACTION_HOVER_EXIT:
            setHovered(false);
            break;
    }
    return true;
}||||||||(MethodDeclaration
	(BlockStmt
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
				(BreakStmt
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
		)
		(IfStmt
			(EnclosedExpr
				(BinaryExpr
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
					(BinaryExpr
						(EnclosedExpr
							(BinaryExpr
								NameExpr
									SimpleName
								NameExpr
									SimpleName
							)
						)
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(IfStmt
			(BinaryExpr
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
					(BooleanLiteralExpr
					)
					LineComment
				)
			)
		)
		(SwitchStmt
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
				(BreakStmt
				)
			)
			(SwitchEntryStmt
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(ExpressionStmt
					(MethodCallExpr
						(BooleanLiteralExpr
						)
						SimpleName
					)
				)
				(BreakStmt
				)
			)
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ReturnStmt
			(BooleanLiteralExpr
			)
		)
	)
	(PrimitiveType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

