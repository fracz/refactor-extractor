/**
 * Load a message body into a {@code MessageWebView}
 *
 * <p>
 * Before loading, the text is wrapped in an HTML header and footer
 * so that it displays properly.
 * </p>
 *
 * @param text
 * The message body to display.  Assumed to be MIME type text/html.
 */
public void setText(String text) {
    // Include a meta tag so the WebView will not use a fixed viewport width of 980 px
    String content = "<html><head><meta name=\"viewport\" content=\"width=device-width\"/>";
    if (K9.getK9MessageViewTheme() == K9.Theme.DARK) {
        content += "<style type=\"text/css\">" + "* { background: black ! important; color: #F3F3F3 !important }" + ":link, :link * { color: #CCFF33 !important }" + ":visited, :visited * { color: #551A8B !important }</style> ";
    }
    content += HtmlConverter.cssStylePre();
    content += "</head><body>" + text + "</body></html>";
    String sanitizedContent = HtmlSanitizer.sanitize(content);
    loadDataWithBaseURL("about:blank", sanitizedContent, "text/html", "utf-8", null);
    resumeTimers();
}||||||||/**
 * Load a message body into a {@code MessageWebView}
 *
 * <p>
 * Before loading, the text is wrapped in an HTML header and footer
 * so that it displays properly.
 * </p>
 *
 * @param text
 * The message body to display.  Assumed to be MIME type text/html.
 */
public void setText(String text) {
    // Include a meta tag so the WebView will not use a fixed viewport width of 980 px
    String content = "<html><head><meta name=\"viewport\" content=\"width=device-width\"/>";
    if (K9.getK9MessageViewTheme() == K9.Theme.DARK) {
        content += "<style type=\"text/css\">" + "* { background: black ! important; color: #F3F3F3 !important }" + ":link, :link * { color: #CCFF33 !important }" + ":visited, :visited * { color: #551A8B !important }</style> ";
    }
    content += HtmlConverter.cssStylePre();
    content += "</head><body>" + text + "</body></html>";
    // TODO: Do this in the background
    String sanitizedContent = HtmlSanitizer.sanitize(content);
    loadDataWithBaseURL("about:blank", sanitizedContent, "text/html", "utf-8", null);
    resumeTimers();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				NullLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					StringLiteralExpr
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(IfStmt
			(BinaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(FieldAccessExpr
					SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BinaryExpr
							(BinaryExpr
								(BinaryExpr
									StringLiteralExpr
									StringLiteralExpr
								)
								StringLiteralExpr
							)
							StringLiteralExpr
						)
					)
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(AssignExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(BinaryExpr
						StringLiteralExpr
						NameExpr
							SimpleName
					)
					StringLiteralExpr
				)
			)
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				NameExpr
					SimpleName
				StringLiteralExpr
				StringLiteralExpr
				NullLiteralExpr
				SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

