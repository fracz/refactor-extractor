@Test
public void testListComprehensions() throws Exception {
    Truth.assertThat(findIssues("[x for x in []] # has no effect").toString()).contains("1:1-1:15: expression result not used");
    Truth.assertThat(findIssues("[print(x) for x in range(5)] # allowed because top-level and has an effect")).isEmpty();
    Truth.assertThat(findIssues("def f():", "  [print(x) for x in range(5)] # should be replaced by for-loop").toString()).contains("2:3-2:30: expression result not used [no-effect]");
}||||||||@Test
public void testListComprehensions() throws Exception {
    Truth.assertThat(findIssues("[x for x in []] # has no effect").toString()).contains("1:1-1:15: expression result not used");
    Truth.assertThat(findIssues("[print(x) for x in range(5)] # allowed because top-level and has an effect")).isEmpty();
    Truth.assertThat(findIssues("def f():", "  [print(x) for x in range(5)] # should be replaced by for-loop").toString()).contains("2:3-2:30: expression result not used." + " Use a for-loop instead instead of a list comprehension. [no-effect]");
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						StringLiteralExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					StringLiteralExpr
				)
				SimpleName
				(MethodCallExpr
					(MethodCallExpr
						SimpleName
						(MethodCallExpr
							StringLiteralExpr
							StringLiteralExpr
							SimpleName
						)
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

