/**
 * Apply the given work to the material in a thread-safe way, possibly by
 * combining it with other work.
 * @param work The work to be done.
 * @throws ExecutionException if this thread ends up performing the piled up work,
 * and any work unit in the pile throws an exception. Thus the current thread is not
 * guaranteed to observe any exception its unit of work might throw, since the
 * exception will be thrown in whichever thread that ends up actually performing the work.
 */
public void apply(W work) throws ExecutionException {
    // Schedule our work on the stack.
    WorkUnit<Material, W> unit = new WorkUnit<>(work, Thread.currentThread(), stackEnd);
    // benign race, see reverse()
    unit.next = stack.getAndSet(unit);
    // Try grabbing the lock to do all the work, until our work unit
    // has been completed.
    int tryCount = 0;
    do {
        tryCount++;
        Throwable failure = null;
        if (tryLock(tryCount, unit)) {
            try {
                failure = doSynchronizedWork();
            } finally {
                unlock();
            }
        }
        if (failure != null) {
            throw new ExecutionException(failure);
        }
    } while (!unit.isDone());
}||||||||/**
 * Apply the given work to the material in a thread-safe way, possibly by
 * combining it with other work.
 * @param work The work to be done.
 * @throws ExecutionException if this thread ends up performing the piled up work,
 * and any work unit in the pile throws an exception. Thus the current thread is not
 * guaranteed to observe any exception its unit of work might throw, since the
 * exception will be thrown in whichever thread that ends up actually performing the work.
 */
public void apply(W work) throws ExecutionException {
    // Schedule our work on the stack.
    WorkUnit<Material, W> unit = enqueueWork(work);
    // Try grabbing the lock to do all the work, until our work unit
    // has been completed.
    int tryCount = 0;
    do {
        tryCount++;
        checkFailure(tryDoWork(unit, tryCount));
    } while (!unit.isDone());
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						NameExpr
							SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(AssignExpr
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(DoStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							NullLiteralExpr
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
				)
				(IfStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
						SimpleName
					)
					(BlockStmt
						(TryStmt
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										SimpleName
									)
								)
							)
							(BlockStmt
								(ExpressionStmt
									(AssignExpr
										NameExpr
											SimpleName
										(MethodCallExpr
											SimpleName
										)
									)
								)
							)
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ThrowStmt
							(ObjectCreationExpr
								NameExpr
									SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
			)
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
						(ClassOrInterfaceType
							SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(IntegerLiteralExpr
					)
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(DoStmt
			(BlockStmt
				(ExpressionStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
						)
						SimpleName
					)
				)
			)
			(UnaryExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	(JavadocComment
	)
)

