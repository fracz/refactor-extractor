/**
 * We must synchronize this because we can't allow
 * multiple threads to execute the 'accumulatorFunction' at the same time because
 * the accumulator code very often will be doing mutation of the 'acc' object such as a non-threadsafe HashMap
 *
 * Because it's synchronized it's using non-atomic variables since everything in this method is single-threaded
 */
public synchronized void onNext(T value) {
    if (acc == null) {
        // we assume that acc is not allowed to be returned from accumulatorValue
        // so it's okay to check null as being the state we initialize on
        acc = value;
        // this is all we do for this first value if we didn't have an initialValue
        return;
    }
    if (!hasSentInitialValue) {
        hasSentInitialValue = true;
        Observer.onNext(acc);
    }
    try {
        acc = accumlatorFunction.call(acc, value);
        if (acc == null) {
            onError(new IllegalArgumentException("Null is an unsupported return value for an accumulator."));
            return;
        }
        Observer.onNext(acc);
    } catch (Exception ex) {
        Observer.onError(ex);
        // unsubscribe since we blew up
        s.unsubscribe();
    }
}||||||||/**
 * We must synchronize this because we can't allow
 * multiple threads to execute the 'accumulatorFunction' at the same time because
 * the accumulator code very often will be doing mutation of the 'acc' object such as a non-threadsafe HashMap
 *
 * Because it's synchronized it's using non-atomic variables since everything in this method is single-threaded
 */
public synchronized void onNext(T value) {
    if (acc == null) {
        // we assume that acc is not allowed to be returned from accumulatorValue
        // so it's okay to check null as being the state we initialize on
        acc = value;
        // this is all we do for this first value if we didn't have an initialValue
        return;
    }
    if (!hasSentInitialValue) {
        hasSentInitialValue = true;
        observer.onNext(acc);
    }
    try {
        acc = accumlatorFunction.call(acc, value);
        if (acc == null) {
            onError(new IllegalArgumentException("Null is an unsupported return value for an accumulator."));
            return;
        }
        observer.onNext(acc);
    } catch (Exception ex) {
        observer.onError(ex);
    // TODO is there a correct way to unsubscribe from the sequence?
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							SimpleName
							NameExpr
								SimpleName
						)
						LineComment
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									StringLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				NullLiteralExpr
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
					LineComment
				)
				(ReturnStmt
					LineComment
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(BooleanLiteralExpr
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
		(TryStmt
			(CatchClause
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(Parameter
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(AssignExpr
						NameExpr
							SimpleName
						(MethodCallExpr
							NameExpr
								SimpleName
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(IfStmt
					(BinaryExpr
						NameExpr
							SimpleName
						NullLiteralExpr
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								(ObjectCreationExpr
									StringLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
							)
						)
						(ReturnStmt
						)
					)
				)
				(ExpressionStmt
					(MethodCallExpr
						NameExpr
							SimpleName
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(JavadocComment
	)
)

