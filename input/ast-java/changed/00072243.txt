@Test
public void refactorCheckForExisting() throws Exception {
    refactoring.addInputLines("in/Test.java", "package foo.bar;", "class Test<T> {", "  class A<T2,T3,T4> {", "    <T> void something(T t) { ", "      T var = t;", "    }", "  }", "}").addOutputLines("out/Test.java", "package foo.bar;", "class Test<T> {", "  class A<T2,T3,T4> {", "    <T5> void something(T5 t) { ", "      T5 var = t;", "    }", "  }", "}");
}||||||||@Test
public void refactorCheckForExisting() throws Exception {
    refactoring.addInputLines("in/Test.java", "package foo.bar;", "class Test<T> {", "  class A<T2,T3,T4> {", "    <T> void something(T t) { ", "      T var = t;", "    }", "  }", "}").addOutputLines("out/Test.java", "package foo.bar;", "class Test<T> {", "  class A<T2,T3,T4> {", "    <T5> void something(T5 t) { ", "      T5 var = t;", "    }", "  }", "}").doTest();
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				StringLiteralExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				(MethodCallExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					StringLiteralExpr
					SimpleName
					(MethodCallExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						StringLiteralExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(ClassOrInterfaceType
		SimpleName
	)
	(MarkerAnnotationExpr
		Name
	)
)

