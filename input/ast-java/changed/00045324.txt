public void convict(InetAddress endpoint, double phi) {
    if (!endpoints.contains(endpoint))
        return;
    // We want a higher confidence in the failure detection than usual because failing a repair wrongly has a high cost.
    if (phi < 2 * DatabaseDescriptor.getPhiConvictThreshold())
        return;
    // want to avoid print an error message twice
    if (!isFailed.compareAndSet(false, true))
        return;
    failedNode(endpoint);
}||||||||public void convict(InetAddress endpoint, double phi) {
    if (!endpoints.contains(endpoint))
        return;
    // We want a higher confidence in the failure detection than usual because failing a repair wrongly has a high cost.
    if (phi < 2 * DatabaseDescriptor.getPhiConvictThreshold())
        return;
    // want to avoid print an error message twice
    if (!isFailed.compareAndSet(false, true))
        return;
    Exception exception = new IOException(String.format("Endpoint %s died", endpoint));
    logger.error(String.format("[repair #%s] session completed with the following error", getId()), exception);
    // If a node failed, we stop everything (though there could still be some activity in the background)
    forceShutdown(exception);
}||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(IntegerLiteralExpr
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					NameExpr
						SimpleName
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(BinaryExpr
					(IntegerLiteralExpr
					)
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(IfStmt
			(UnaryExpr
				(MethodCallExpr
					(BooleanLiteralExpr
					)
					(BooleanLiteralExpr
					)
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(ReturnStmt
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(ObjectCreationExpr
						(MethodCallExpr
							StringLiteralExpr
							NameExpr
								SimpleName
							SimpleName
							NameExpr
								SimpleName
						)
						(ClassOrInterfaceType
							SimpleName
						)
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					StringLiteralExpr
					(MethodCallExpr
						SimpleName
					)
					SimpleName
					NameExpr
						SimpleName
				)
				NameExpr
					SimpleName
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				NameExpr
					SimpleName
				SimpleName
			)
			LineComment
		)
	)
	(VoidType
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(PrimitiveType
		)
	)
)

