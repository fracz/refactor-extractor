@NotNull
private GitUpdateResult handleMergeFailure(MergeLineListener mergeLineListener, final GitMerger merger, GitLineHandler mergeHandler) {
    final MergeError error = mergeLineListener.getMergeError();
    LOG.info("doUpdate merge error: " + error);
    if (error == MergeError.CONFLICT) {
        final boolean allMerged = new GitMergeConflictResolver(myProject, false, "Merge conflicts detected. Resolve them before continuing update.", "Can't complete update", "") {

            @Override
            protected boolean proceedIfNothingToMerge() throws VcsException {
                merger.mergeCommit(myRoot);
                return true;
            }

            @Override
            protected boolean proceedAfterAllMerged() throws VcsException {
                merger.mergeCommit(myRoot);
                return true;
            }
        }.merge(Collections.singleton(myRoot));
        return allMerged ? GitUpdateResult.SUCCESS : GitUpdateResult.INCOMPLETE;
    } else if (error == MergeError.LOCAL_CHANGES) {
        final List<FilePath> paths = getFilesOverwrittenByMerge(mergeLineListener.getOutput());
        final Collection<Change> changes = getLocalChangesFilteredByFiles(paths);
        final ChangeListViewerDialog dialog = new ChangeListViewerDialog(myProject, changes, false) {

            @Override
            protected String getDescription() {
                return "Your local changes to the following files would be overwritten by merge.<br/>" + "Please, commit your changes or stash them before you can merge.";
            }
        };
        UIUtil.invokeAndWaitIfNeeded(new Runnable() {

            @Override
            public void run() {
                dialog.show();
            }
        });
        return GitUpdateResult.ERROR;
    } else {
        GitUIUtil.notifyImportantError(myProject, "Error merging", GitUIUtil.stringifyErrors(mergeHandler.errors()));
        return GitUpdateResult.ERROR;
    }
}||||||||@NotNull
private GitUpdateResult handleMergeFailure(MergeLineListener mergeLineListener, final GitMerger merger, GitLineHandler mergeHandler) {
    final MergeError error = mergeLineListener.getMergeError();
    LOG.info("doUpdate merge error: " + error);
    if (error == MergeError.CONFLICT) {
        final boolean allMerged = new MyMergeConflictResolver(myProject, merger, myRoot).merge();
        return allMerged ? GitUpdateResult.SUCCESS : GitUpdateResult.INCOMPLETE;
    } else if (error == MergeError.LOCAL_CHANGES) {
        final List<FilePath> paths = getFilesOverwrittenByMerge(mergeLineListener.getOutput());
        final Collection<Change> changes = getLocalChangesFilteredByFiles(paths);
        final ChangeListViewerDialog dialog = new ChangeListViewerDialog(myProject, changes, false) {

            @Override
            protected String getDescription() {
                return "Your local changes to the following files would be overwritten by merge.<br/>" + "Please, commit your changes or stash them before you can merge.";
            }
        };
        UIUtil.invokeAndWaitIfNeeded(new Runnable() {

            @Override
            public void run() {
                dialog.show();
            }
        });
        return GitUpdateResult.ERROR;
    } else {
        GitUIUtil.notifyImportantError(myProject, "Error merging", GitUIUtil.stringifyErrors(mergeHandler.errors()));
        return GitUpdateResult.ERROR;
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ReturnStmt
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
										SimpleName
										(MarkerAnnotationExpr
											Name
										)
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(VoidType
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
										(PrimitiveType
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(MarkerAnnotationExpr
											Name
										)
									)
									(MethodDeclaration
										(BlockStmt
											(ExpressionStmt
												(MethodCallExpr
													NameExpr
														SimpleName
													SimpleName
													NameExpr
														SimpleName
												)
											)
											(ReturnStmt
												(BooleanLiteralExpr
												)
											)
										)
										(PrimitiveType
										)
										SimpleName
										(ClassOrInterfaceType
											SimpleName
										)
										(MarkerAnnotationExpr
											Name
										)
									)
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
									StringLiteralExpr
									StringLiteralExpr
									StringLiteralExpr
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ReturnStmt
					(ConditionalExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
					SimpleName
					(ClassOrInterfaceType
						SimpleName
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(BinaryExpr
					StringLiteralExpr
					NameExpr
						SimpleName
				)
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(BinaryExpr
				NameExpr
					SimpleName
				(FieldAccessExpr
					SimpleName
					NameExpr
						SimpleName
				)
			)
			(IfStmt
				(BinaryExpr
					NameExpr
						SimpleName
					(FieldAccessExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				(BlockStmt
					(ExpressionStmt
						(MethodCallExpr
							NameExpr
								SimpleName
							StringLiteralExpr
							(MethodCallExpr
								(MethodCallExpr
									SimpleName
									NameExpr
										SimpleName
								)
								SimpleName
								NameExpr
									SimpleName
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
				(BlockStmt
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									(MethodCallExpr
										SimpleName
										NameExpr
											SimpleName
									)
									SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(MethodCallExpr
									NameExpr
										SimpleName
									SimpleName
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
						)
					)
					(ExpressionStmt
						(VariableDeclarationExpr
							(VariableDeclarator
								(ObjectCreationExpr
									(MethodDeclaration
										(BlockStmt
											(ReturnStmt
												(BinaryExpr
													StringLiteralExpr
													StringLiteralExpr
												)
											)
										)
										(ClassOrInterfaceType
											SimpleName
										)
										SimpleName
										(MarkerAnnotationExpr
											Name
										)
									)
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(BooleanLiteralExpr
									)
									(ClassOrInterfaceType
										SimpleName
									)
								)
								SimpleName
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
					(ExpressionStmt
						(MethodCallExpr
							(ObjectCreationExpr
								(MethodDeclaration
									(BlockStmt
										(ExpressionStmt
											(MethodCallExpr
												SimpleName
												NameExpr
													SimpleName
											)
										)
									)
									(VoidType
									)
									SimpleName
									(MarkerAnnotationExpr
										Name
									)
								)
								(ClassOrInterfaceType
									SimpleName
								)
							)
							SimpleName
							NameExpr
								SimpleName
						)
					)
					(ReturnStmt
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
			(BlockStmt
				(ExpressionStmt
					(VariableDeclarationExpr
						(VariableDeclarator
							(MethodCallExpr
								SimpleName
								(ObjectCreationExpr
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									NameExpr
										SimpleName
									(ClassOrInterfaceType
										SimpleName
									)
								)
							)
							SimpleName
							(PrimitiveType
							)
						)
					)
				)
				(ReturnStmt
					(ConditionalExpr
						NameExpr
							SimpleName
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
						(FieldAccessExpr
							SimpleName
							NameExpr
								SimpleName
						)
					)
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(MarkerAnnotationExpr
		Name
	)
)

