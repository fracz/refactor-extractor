public static TaskUpToDateState create(final TaskInternal task, final TaskExecution previousExecution) {
    return new TaskUpToDateState() {

        public void findChanges(Action<? super TaskUpToDateStateChange> messages) {
            if (previousExecution == null) {
                messages.execute(new DescriptiveChange("No history is available for %s.", task));
            }
        }

        public boolean isUpToDate() {
            return previousExecution != null;
        }

        public void snapshotAfterTask() {
        }
    };
}||||||||public static TaskUpToDateState create(final TaskInternal task, final TaskExecution previousExecution) {
    return new SimpleUpToDateState() {

        @Override
        protected void addAllChanges(List<TaskUpToDateChange> changes) {
            if (previousExecution == null) {
                changes.add(new DescriptiveChange("No history is available for %s.", task));
            }
        }

        public void snapshotAfterTask() {
        }
    };
}||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ObjectCreationExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(WildcardType
								(ClassOrInterfaceType
									SimpleName
								)
							)
						)
					)
				)
				(MethodDeclaration
					(BlockStmt
						(ReturnStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
						)
					)
					(PrimitiveType
					)
					SimpleName
				)
				(MethodDeclaration
					(BlockStmt
					)
					(VoidType
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ReturnStmt
			(ObjectCreationExpr
				(MethodDeclaration
					(BlockStmt
						(IfStmt
							(BinaryExpr
								NameExpr
									SimpleName
								NullLiteralExpr
							)
							(BlockStmt
								(ExpressionStmt
									(MethodCallExpr
										(ObjectCreationExpr
											StringLiteralExpr
											NameExpr
												SimpleName
											(ClassOrInterfaceType
												SimpleName
											)
										)
										SimpleName
										NameExpr
											SimpleName
									)
								)
							)
						)
					)
					(VoidType
					)
					SimpleName
					(Parameter
						SimpleName
						(ClassOrInterfaceType
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(MarkerAnnotationExpr
						Name
					)
				)
				(MethodDeclaration
					(BlockStmt
					)
					(VoidType
					)
					SimpleName
				)
				(ClassOrInterfaceType
					SimpleName
				)
			)
		)
	)
	(ClassOrInterfaceType
		SimpleName
	)
	SimpleName
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
	(Parameter
		SimpleName
		(ClassOrInterfaceType
			SimpleName
		)
	)
)

