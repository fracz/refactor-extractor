/**
 * Similar to {@link CacheReplicationMonitor#waitForRescan()}, except it only
 * waits if there are pending operations that necessitate a rescan as
 * indicated by {@link #setNeedsRescan()}.
 * <p>
 * Note that this call may release the FSN lock, so operations before and
 * after are not necessarily atomic.
 */
public void waitForRescanIfNeeded() {
    lock.lock();
    try {
        if (!needsRescan) {
            return;
        }
    } finally {
        lock.unlock();
    }
    waitForRescan();
}||||||||/**
 * Waits for a rescan to complete. This doesn't guarantee consistency with
 * pending operations, only relative recency, since it will not force a new
 * rescan if a rescan is already underway.
 * <p>
 * Note that this call will release the FSN lock, so operations before and
 * after are not atomic.
 */
public void waitForRescanIfNeeded() {
    Preconditions.checkArgument(!namesystem.hasWriteLock(), "Must not hold the FSN write lock when waiting for a rescan.");
    Preconditions.checkArgument(lock.isHeldByCurrentThread(), "Must hold the CRM lock when waiting for a rescan.");
    if (!needsRescan) {
        return;
    }
    // If no scan is already ongoing, mark the CRM as dirty and kick
    if (!isScanning) {
        doRescan.signal();
    }
    // Wait until the scan finishes and the count advances
    final long startCount = scanCount;
    while ((!shutdown) && (startCount >= scanCount)) {
        try {
            scanFinished.await();
        } catch (InterruptedException e) {
            LOG.warn("Interrupted while waiting for CacheReplicationMonitor" + " rescan", e);
            break;
        }
    }
}||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(TryStmt
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			(BlockStmt
				(IfStmt
					(UnaryExpr
						NameExpr
							SimpleName
					)
					(BlockStmt
						(ReturnStmt
						)
					)
				)
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				SimpleName
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)
||||||||(MethodDeclaration
	(BlockStmt
		(ExpressionStmt
			(MethodCallExpr
				(UnaryExpr
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(ExpressionStmt
			(MethodCallExpr
				(MethodCallExpr
					SimpleName
					NameExpr
						SimpleName
				)
				StringLiteralExpr
				SimpleName
				NameExpr
					SimpleName
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ReturnStmt
				)
			)
		)
		(IfStmt
			(UnaryExpr
				NameExpr
					SimpleName
			)
			(BlockStmt
				(ExpressionStmt
					(MethodCallExpr
						SimpleName
						NameExpr
							SimpleName
					)
				)
			)
			LineComment
		)
		(ExpressionStmt
			(VariableDeclarationExpr
				(VariableDeclarator
					NameExpr
						SimpleName
					SimpleName
					(PrimitiveType
					)
				)
			)
			LineComment
		)
		(WhileStmt
			(BlockStmt
				(TryStmt
					(CatchClause
						(BlockStmt
							(ExpressionStmt
								(MethodCallExpr
									(BinaryExpr
										StringLiteralExpr
										StringLiteralExpr
									)
									NameExpr
										SimpleName
									SimpleName
									NameExpr
										SimpleName
								)
							)
							(BreakStmt
							)
						)
						(Parameter
							SimpleName
							(ClassOrInterfaceType
								SimpleName
							)
						)
					)
					(BlockStmt
						(ExpressionStmt
							(MethodCallExpr
								SimpleName
								NameExpr
									SimpleName
							)
						)
					)
				)
			)
			(BinaryExpr
				(EnclosedExpr
					(UnaryExpr
						NameExpr
							SimpleName
					)
				)
				(EnclosedExpr
					(BinaryExpr
						NameExpr
							SimpleName
						NameExpr
							SimpleName
					)
				)
			)
		)
	)
	(VoidType
	)
	SimpleName
	(JavadocComment
	)
)

